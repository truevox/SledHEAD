This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, line numbers have been added.

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)

## Additional Info

# Directory Structure
```
docs/
  1.0_README.md
  CONTRIBUTING.md
  CONTRIBUTOR_LICENSE_AGREEMENT.md
  CONTROLS.md
  LICENSE.md
  README.md
  ROADMAP.md
js/
  mobs/
    bear.js
    bird.js
    mountainlion.js
  camera.js
  downhill.js
  entities.js
  game.js
  input.js
  jumpsled.js
  loan.js
  mechanics.js
  notify.js
  player.js
  registry.js
  render.js
  settings.js
  stamina.js
  trees.js
  tricks.js
  upgradeData.js
  upgradeLogic.js
  upgrades.js
  uphill.js
  utils.js
  wildlife.js
  world.js
!READ_FIRST-FILE_SUMMARY.txt
.gitignore
complete-condensed-codebase-for-reference.md.txt
index.html
styles.css
todo.txt
```

# Files

## File: docs/CONTRIBUTING.md
`````````markdown
  1: How to Contribute to SledHEAD
  2: =============================
  3: 
  4: Thank you for considering contributing to SledHEAD! Community involvement is crucial for making the game the best it can be. Whether you're fixing bugs, adding features, or improving documentation, your efforts are appreciated.
  5: 
  6: * * * * *
  7: 
  8: Key Resources
  9: -------------
 10: 
 11: -   SledHEAD README -- Learn about the game's core concepts and current features.
 12: 
 13: -   SledHEAD License -- Understand the licensing terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets).
 14: 
 15: -   Issues & Roadmap -- Check the GitHub Issues section for current tasks and future goals.
 16: 
 17: -   Discussions -- Engage with the community, ask questions, and brainstorm ideas.
 18: 
 19: * * * * *
 20: 
 21: Getting Started
 22: ---------------
 23: 
 24: 1.  Fork the Repository\
 25:     Create your own fork of the repository and clone it locally.
 26: 
 27: 1.  Install Dependencies\
 28:     SledHEAD is a web-based game built with JavaScript and Phaser.js. You'll just need a local HTTP server to test changes (like Python's http.server or Node's http-server).
 29: 
 30: 1.  Create a Branch\
 31:     Work in a feature-specific branch:
 32: 
 33: git  checkout  -b  feature/your-feature-name
 34: 
 35: * * * * *
 36: 
 37: Testing Your Contributions
 38: --------------------------
 39: 
 40: -   Manually playtest any gameplay changes and check for bugs.
 41: -   Ensure that UI elements render correctly and gameplay mechanics (like tricks, upgrades, and photography) behave as expected.
 42: -   Keep console errors to a minimum. Use `console.log` for temporary debugging but clean up before submitting.
 43: 
 44: * * * * *
 45: 
 46: Submitting Changes
 47: ------------------
 48: 
 49: 1.  **Code Style**
 50: 
 51:     -   Use **two spaces for indentation, not tabs**.
 52:     -   Write clean, readable code with comments where necessary.
 53:     -   Follow existing naming conventions (camelCase for variables, PascalCase for classes).
 54:     -   Avoid deeply nested logic---break it into functions for clarity.
 55: 2.  **Commit Messages**\
 56:     Write clear commit messages. For example:
 57: 
 58:     bash
 59: 
 60:     CopyEdit
 61: 
 62:     `git commit -m "Fix: Correct collision detection on uphill phase
 63: 
 64:     The collision detection logic for obstacles during the uphill phase
 65:     now accurately accounts for terrain height variations."`
 66: 
 67: 3.  **Pull Request (PR)**
 68: 
 69:     -   Open a PR against the `main` branch.
 70:     -   Include a clear description of what you've done and why.
 71:     -   If your change fixes a bug or closes an issue, reference it in the PR description (e.g., `Closes #42`).
 72:     -   Include screenshots or screen recordings if the change is visual.
 73:     -   Be prepared for feedback---collaboration is key!
 74: 
 75: * * * * *
 76: 
 77: Coding Conventions
 78: ------------------
 79: 
 80: -   **Consistency is key!** When in doubt, follow the style of existing code.
 81: -   Use **strict equality** (`===` and `!==`).
 82: -   Prefer `const` and `let` over `var`.
 83: -   Document functions with comments explaining inputs, outputs, and purpose.
 84: -   Keep functions focused and concise---single responsibility.
 85: -   Handle errors gracefully and avoid silent failures.
 86: -   Clean up `console.log` or temporary debug code before submitting.
 87: 
 88: * * * * *
 89: 
 90: Licensing of Contributions
 91: --------------------------
 92: 
 93: -   **All contributions become licensed under AGPL 3.0 (for code) and CC BY-NC-SA 4.0 (for assets)**, consistent with the project's dual-license model.
 94: -   By submitting a PR, you agree that your contributions may be included in SledHEAD and will be publicly available under these licenses.
 95: 
 96: * * * * *
 97: 
 98: Contributor License Agreement (CLA)
 99: --------------------------
100: 
101: By contributing to **SledHEAD**, you agree to the Contributor License Agreement (CLA), granting the project owner the rights to use, modify, and commercialize your contributions. You retain ownership, but your work must be licensed under the project's current terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets) and can be re-licensed for commercial purposes.
102: 
103: By submitting a pull request, you confirm that you have the right to contribute and agree to these terms. 
104: 
105: See https://github.com/truevox/SledHEAD/docs/CONTRIBUTOR_LICENSE_AGREEMENT.md for more details.
106: 
107: 
108: * * * * *
109: 
110: Reporting Bugs & Requesting Features
111: ------------------------------------
112: 
113: -   Open a **GitHub Issue** describing the problem or request.
114: -   Be clear and detailed---steps to reproduce bugs, expected behavior, and screenshots help!
115: -   Mark issues with appropriate labels (like `bug`, `enhancement`, or `question`).
116: 
117: * * * * *
118: 
119: Need Help?
120: ----------
121: 
122: -   Join discussions on the GitHub repo.
123: -   Open an issue for technical support or feature questions.
124: -   Feedback, ideas, and constructive criticism are welcome!
125: 
126: * * * * *
127: 
128: Thank you for helping SledHEAD grow!
`````````

## File: docs/CONTRIBUTOR_LICENSE_AGREEMENT.md
`````````markdown
 1: # SledHEAD Contributor License Agreement (CLA)
 2: 
 3: Thank you for your interest in contributing to SledHEAD.
 4: 
 5: By submitting a contribution, you agree to the following terms:
 6: 
 7: 1. **License Grant**  
 8:    You hereby grant Marvin Bentley II ("Project Owner") an **irrevocable, perpetual, worldwide, royalty-free license** to use, reproduce, modify, adapt, publish, translate, sublicense, distribute, and create derivative works of your contribution, in any medium, for any purpose, including commercial purposes.
 9: 
10: 2. **Ownership**  
11:    You retain ownership of your contribution. However, you agree that your contribution is licensed under the project's current open-source licenses (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets), and you grant the Project Owner the right to relicense your contribution for commercial, proprietary, or any other purposes as the Project Owner requres.
12: 
13: 3. **Warranties**  
14:    - You confirm that you are legally entitled to submit the contribution and that it does not violate any third-party rights.  
15:    - You confirm that the contribution is your original work, or you have obtained the necessary rights for its use.
16: 
17: 4. **Contribution Scope**  
18:    This agreement applies to any future contributions you make to SledHEAD unless you explicitly state otherwise.
19: 
20: 5. **No Obligation to Use**  
21:    The Project Owner is under no obligation to use, merge, or distribute your contributions.
22: 
23: ---
24: 
25: By submitting a contribution, you indicate that you have read, understood, and agree to the terms of this Contributor License Agreement.
26: 
27: ---
28: 
29: *Signed electronically via your submission of a Pull Request.*
`````````

## File: docs/LICENSE.md
`````````markdown
  1: # SledHEAD Dual License Agreement
  2: Version 1.2 – March 2025
  3: 
  4: This License Agreement applies to SledHEAD (the "Game"), including its source code and assets, created by the original author Marvin Bentley II ("Licensor"). By copying, modifying, distributing, or otherwise using the Game or any of its components, you (the "Licensee") agree to the following terms:
  5: 
  6: ## 1. Definitions
  7: 
  8: * "Source Code": The software code of the Game, including all scripts, programs, and software files intended to produce the Game’s functionality.
  9: * "Assets": All non-code content in the Game, including but not limited to artwork, images, textures, models, sprites, music, sound effects, voice, dialogue, level designs, animations, and any other audiovisual or creative works included with the Game.
 10: * "Mod" or "Modification": Any derivative work that is based on or uses any portion of the Game’s Source Code or Assets, including add-ons, plugins, expansions, or fan-made content that extends or alters the Game.
 11: * "Commercial Use": Use of the Game or its components that is intended for or directed toward commercial advantage or monetary compensation. (For clarity: selling the Game or Mods, charging money for access to the Game or Mods, or monetizing the Game’s Assets as standalone products are considered Commercial Use. However, monetization of gameplay videos/streams is addressed separately in Section 4.)
 12: * "You" (or "Licensee"): Any individual or legal entity exercising the rights granted by this License (for example, a player, developer, or modder who uses the Game or its content).
 13: * "Licensor": The original author and copyright holder of SledHEAD.
 14: 
 15: ## 2. Open Source License for Source Code
 16: 
 17: The Source Code of SledHEAD is licensed to you under the terms of the GNU Affero General Public License, version 3 (AGPLv3), or (at your option) any later version of the AGPL published by the Free Software Foundation. This means:
 18: 
 19: * You may use, study, copy, modify, and distribute the Source Code freely, provided you comply with the AGPLv3 terms. In particular, if you distribute your modified version of the Source Code or if you make it available for use over a network (e.g. running a modified game server for others to play), you must make your Source Code modifications publicly available under the same license (AGPLv3).
 20: * The full text of the AGPLv3 is provided along with this agreement (usually in a file named AGPL-3.0.txt or similar). By accepting this License, you agree to abide by the conditions of AGPLv3 for the Game’s Source Code.
 21: * No Additional Restrictions on Source Code: Except as expressly stated in this Agreement, you may not impose any further restrictions on the exercise of the rights granted or affirmed under the AGPLv3 for the Source Code. (In other words, the Source Code remains free and open under AGPLv3 terms whenever it is distributed or deployed, unless a separate Commercial License is obtained as described in Section 6.)
 22: 
 23: ## 3. Creative Commons License for Assets
 24: 
 25: All Assets of SledHEAD (non-code content) are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). Under this license:
 26: 
 27: * You are free to:
 28:   * Share – copy and redistribute the Assets in any medium or format.
 29:   * Adapt – remix, transform, and build upon the Assets for any non-commercial purpose.
 30: * Attribution – You must give appropriate credit to the original author (see Section 5), provide a link to the CC BY-NC-SA 4.0 license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the Licensor endorses you or your use.
 31: * NonCommercial – You may not use the Assets for commercial purposes. (Using the Assets or any derivative of them to generate revenue or for any commercial advantage is prohibited unless you have obtained a separate Commercial License as per Section 6.)
 32: * ShareAlike – If you remix, transform, or build upon the Assets, you must distribute your contributions under the same license (CC BY-NC-SA 4.0) or a license that is more permissive. “More permissive” means any license that grants equal or greater rights to the public than CC BY-NC-SA (for example, you may choose to release your own original derivative Assets under CC BY-SA or CC BY, which would allow commercial use or omit the ShareAlike requirement, but you cannot apply a more restrictive license or make the assets wholly proprietary).
 33: * The full text of the CC BY-NC-SA 4.0 license is provided with this agreement (or accessible via the Creative Commons website). By using the Game’s Assets, you agree to the terms of CC BY-NC-SA 4.0.
 34: * No Commercial Exploitation of Assets: For clarity, you cannot sell, license, or otherwise commercially exploit the Game’s Assets (original or modified) on their own or as part of a product, except under a separate Commercial License (Section 6). For example, you cannot charge money for a soundtrack that includes the Game’s music, or include the Game’s art in a paid product, without permission.
 35: 
 36: ## 4. Permission for Videos, Streaming, and Screenshots
 37: 
 38: The Licensor explicitly grants permission to all users to capture, use, and share audiovisual content from the Game (including gameplay videos, streams, screenshots, and similar content), even if monetized, without needing any additional license or permission, as long as such use does not misrepresent the origin of the Game. This means:
 39: 
 40: * You may stream or record gameplay on platforms like Twitch, YouTube, etc., and you may monetize these videos/streams (for example, through ads, sponsorships, or donations). This use is allowed and considered non-commercial with respect to the Game’s Assets because it is promotional/fan content by the community. The NonCommercial restriction in Section 3 is waived for this specific type of content creation.
 41: * You do not need to ask the Licensor for permission to create let’s play videos, reviews, or live streams of SledHEAD. This is encouraged as part of community engagement. Attribution (such as naming the Game) in the video/stream description or verbally is appreciated but not strictly required beyond what the platform norms are, since the content itself usually makes it clear it’s SledHEAD. (However, you still must not claim to be the creator of the Game.)
 42: * This permission for videos/streams does not grant you the right to extract the Assets and use them separately in other commercial products (Section 3’s NonCommercial rule still applies to the Assets themselves). It only covers the use of recorded or displayed in-game content as part of video/stream content. For example, using a game’s music as background of an unrelated commercial video would not be covered by this clause, but showing the game’s music as it plays during gameplay footage is fine.
 43: 
 44: ## 5. Attribution Requirement
 45: 
 46: You must give appropriate credit to the original author (Licensor) when you distribute or publicly use the Game (or any substantial portion of it, including Mods). This is a condition of the CC BY-NC-SA license for Assets and is hereby made a condition of this overall license. The attribution should be placed in a manner appropriate to the medium:
 47: 
 48: * If you distribute the Game in unmodified form, include the original credits (which should already list the author) and license information. Typically, the Game already contains an in-game credits section or documentation listing the author and contributors — retain that.
 49: * If you create a Mod or a fork of the Game, you must credit SledHEAD and the original author somewhere in your project. For example, in an “About” menu, “Credits” screen, README file, or documentation for your Mod, include a notice such as: “This project is based on SledHEAD, originally created by Marvin Bentley II. SledHEAD is © 2024 Marvin Bentley II and is licensed under AGPLv3 (code) and CC BY-NC-SA 4.0 (assets).” Adjust the wording as appropriate, but it should be reasonably prominent, as appropriate for the medium.
 50: * If you use parts of the Source Code in another project, you must keep the copyright and license notices in those source files per AGPL requirements. Additionally, an attribution in your project’s documentation or credits to the SledHEAD project is required.
 51: * The attribution requirement is not intended to be burdensome: it’s mainly to ensure the original creators are acknowledged. A single mention in a credits section or README is typically sufficient, as long as it's accessible to users of your product or Mod.
 52: 
 53: ## 6. Modding and Derivative Works
 54: 
 55: SledHEAD is mod-friendly and open to community contributions, under the following conditions:
 56: 
 57: * **Mods - Source Code:** If you create a Mod that includes or is based on the Game’s Source Code, the Mod’s source code must be released under the AGPLv3 (same as the Game) or an even more permissive open-source license. More permissive licenses include, for example, GNU GPLv3, MIT, Apache 2.0, etc., which do not impose additional restrictions beyond AGPL. This ensures that anyone who plays or uses your Mod has the same rights to obtain and modify the source. You cannot make a closed-source mod using the Game’s code without a separate Commercial License (see Section 7).
 58: * **Mods - Assets:** If your Mod includes or modifies any of the Game’s Assets, then all such Assets in your Mod must be licensed under CC BY-NC-SA 4.0 (the same license as the base game assets) or a more permissive license. “More permissive” in this context could be, for example, CC BY-SA 4.0 (which allows commercial use but still requires ShareAlike) or CC BY 4.0 (which allows commercial use and no ShareAlike). You may choose a more permissive license for your original assets if you want to allow broader use, but you must at least allow the same scope of use that CC BY-NC-SA permits. You cannot put additional restrictions on derivatives of the Game’s Assets beyond CC BY-NC-SA.
 59: * **No circumvention via Mods:** You may not create a Mod or derivative work that is essentially a way to evade the NonCommercial restriction on the original Assets. For example, you can’t repackage a level of SledHEAD as a “mod” and sell it, claiming the new level’s art is under a different license. Any part of a Mod derived from original Assets inherits the NonCommercial restriction.
 60: * **Paid Mods:** SledHEAD’s open licenses are designed such that Mods are freely shareable and open. While charging money for a Mod is strongly discouraged under this license scheme, we acknowledge it can happen. If you choose to sell or paywall a Mod, you do so at your own risk under the license terms:
 61:   * The Mod’s source code must still be AGPLv3 (or open-source), meaning anyone who obtains the Mod (even by purchasing it) must have access to the source and the right to redistribute it. Practically, this means once one person has bought your Mod, they have the legal right to share the code with others for free. You cannot revoke that right, so a paywalled open-source mod is of limited enforceability (the “paywall” is more of a donation or early access mechanism, not a true sale of exclusive rights).
 62:   * Any of the Mod’s assets that derive from SledHEAD Assets carry the NonCommercial clause. This means you technically cannot charge for those assets or any product containing them. If your Mod contains only your own original assets and you license them under a more permissive license (such as CC BY-SA or even a proprietary license you own), you have more leeway to charge for the Mod. However, by including SledHEAD’s original game content or requiring the Game to run, your Mod is still a derivative work of the Game as a whole, and thus selling it without the Licensor’s permission could violate the spirit of the NonCommercial clause.
 63:   * In summary: If you want to monetize a Mod, you should seek a Commercial License from the Licensor (see Section 7) to cover that, or ensure that your Mod is completely your own independent work and doesn’t include NonCommercial content. Otherwise, anyone is legally free to redistribute your Mod for non-commercial purposes (or as allowed by whatever license you chose) without paying, and the Licensor reserves the right to enforce the NonCommercial clause if needed.
 64: * **Mods Must Credit Original:** As noted in Section 5, Mods should credit SledHEAD and the original author. Making mods open-source and crediting the base game helps build a healthy community and is a condition of using the Game’s content.
 65: * **Upstream Contributions:** If you make improvements or fixes to the base Game’s Source Code (as opposed to separate mods), you are encouraged to contribute them back to the main project. You can do this by submitting patches or pull requests to the original repository. Note that by contributing, you agree that your contribution will be licensed under the same terms as this License (so it remains AGPL for code and CC BY-NC-SA for any assets you contribute, unless otherwise agreed). The Licensor may ask you to sign a contributor agreement (see Section 9) to clarify licensing of contributions.
 66: 
 67: ## 7. Commercial License Option
 68: 
 69: The Licensor offers the possibility of a separate Commercial License for parties interested in using SledHEAD in ways not permitted by the above open licenses (AGPL and CC BY-NC-SA). This could apply if, for example, you want to: distribute the game in a proprietary (closed-source) manner, use the Assets commercially, include SledHEAD in a commercial product, or otherwise not comply with AGPL/CC BY-NC-SA terms. The following terms govern the Commercial License option:
 70: 
 71: * **By Request:** You must contact the Licensor to request a Commercial License. Terms (including scope, duration, and fees) are negotiable on a case-by-case basis. For instance, the Licensor may offer a one-time purchase license, a revenue-sharing agreement, or a subscription model, depending on the nature of the use.
 72: * **No Guaranteed Approval:** The Licensor has sole discretion to decide whether or not to grant a Commercial License to any requesting party. Simply requesting a Commercial License does not guarantee you will receive one. The Licensor may decline for any reason or require certain conditions.
 73: * **Override of Open Terms:** A duly granted Commercial License will override or modify the AGPL and CC BY-NC-SA terms for the party to whom it is granted, as specified in that license agreement. For example, a Commercial License may allow you to keep your source code modifications proprietary, or to use the Assets in a commercial game, notwithstanding Sections 2 and 3. The exact permissions and exceptions will be written in that separate agreement. Unless and until you have a signed Commercial License, you are bound by the AGPL and CC BY-NC-SA terms described in this document.
 74: * **Closed Source Allowed with Commercial License:** Under a Commercial License, the Licensor may permit you to create a closed-source derivative or include SledHEAD code in a larger proprietary project. This is an exception to the copyleft requirement, granted only through the Commercial License.
 75: * **Written Agreement:** Any Commercial License will be provided in writing (which may be a separate contract or license document). It will detail the rights granted, any limitations, and the financial terms. You will likely be required to prominently credit the original author even in commercial use, unless otherwise agreed.
 76: 
 77: ## 8. Reservation of Rights and Future Relicensing
 78: 
 79: * **Ownership:** The Licensor (original author) retains all rights, title, and interest in SledHEAD and its Source Code and Assets, except for the licenses expressly granted to you under this Agreement. No trademark rights are granted (the name SledHEAD is not necessarily covered by this license—separate permissions may be needed to use the name or logos in commercial contexts).
 80: * **Right to Relicense:** The Licensor reserves the right to relicense or release parts or all of the Game under different terms in the future, including more permissive open-source licenses. For example, the Licensor may later decide to release certain Assets under a license like CC BY 4.0 (which would allow commercial use) or even dedicate some components to the public domain. Similarly, future versions of the Source Code might be released under a license like MIT or GPL, etc., at the Licensor’s discretion.
 81: * **Effect on Existing License:** Any such re-licensing by the Licensor in the future will not retroactively revoke the rights you've obtained under this Agreement. (For example, if you received the game under AGPL/CC BY-NC-SA, that specific release is still under those terms for you.) However, the Licensor may offer upgraded license terms for future versions or for specific components, which you can opt to use under those new terms.
 82: * **Contributions from Others:** If the project receives contributions from other developers (community contributions), the Licensor will ensure that those contributions are either made under a contributor agreement or appropriate terms such that the Licensor can include them in future releases. This is to maintain the ability to relicense if needed. (See Section 9 about contributor agreements.)
 83: * **No Obligation to Future Licensing:** Nothing in this clause guarantees that the Licensor will release a more permissive version, only that it’s a possibility. Users and contributors should be aware that license terms might be adjusted in future releases, but any such change will be clearly communicated and, if necessary, consent from contributors will be obtained.
 84: 
 85: ## 9. Contributor License Agreement (CLA) (for external contributors)
 86: 
 87: At present (initial release), all code and assets in SledHEAD are authored by the original Licensor. If you wish to contribute to the project (e.g., by submitting code or asset improvements), the Licensor may ask you to sign a Contributor License Agreement. A CLA typically confirms that: (a) you have the right to contribute what you send, (b) you grant the Licensor permission to use and relicense your contribution under this project’s license and potentially other licenses in the future, and (c) you understand your contribution is provided under the same open license to all users.
 88: 
 89: * **Necessity of CLA:** The CLA is intended to make future license changes or commercial licensing of the project smoother, by ensuring all contributors agree on how their contributions can be used. If you do not sign such an agreement, the Licensor might not be able to accept your contribution, especially if it’s significant, because it could complicate the ability to relicense or offer commercial terms later.
 90: * **Timing:** You generally won’t need to sign a CLA until you are about to make the first contribution that will be merged into the project. Simply using or modding the game doesn’t require a CLA. It’s only for when you contribute code or assets back to the official project. The Licensor may publish the CLA text and a process (e.g., an online sign-off) when the project starts accepting outside contributions.
 91: * **Contributor Rights:** Even after signing a CLA, you (as a contributor) still retain copyright to your contributions and you can reuse your contributed code elsewhere. The CLA just gives the Licensor a broad right to include your work in SledHEAD and relicense as needed (for instance, if in the future SledHEAD moves to a different license or a commercial dual-license model, your contribution can be included).
 92: * **No CLA at Initial Release:** If you are simply downloading or using the game, this section doesn’t affect you. It’s informational in case the project grows with community help. The Licensor will announce when a CLA becomes required (likely before accepting the first non-trivial external commit).
 93: 
 94: ## 10. Disclaimer of Warranty
 95: 
 96: THE GAME (INCLUDING SOURCE CODE AND ASSETS) IS PROVIDED "AS IS" AND WITHOUT WARRANTY OF ANY KIND. To the fullest extent permitted by law, the Licensor disclaims all warranties, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement. You accept all risk as to the quality and performance of the Game. Should the Game prove defective, you assume the cost of all necessary servicing, repair, or correction. No oral or written information or advice provided by the Licensor shall create any warranty. (This disclaimer is in line with Section 15 of the AGPLv3 and Section 5 of CC BY-NC-SA 4.0.)
 97: 
 98: ## 11. Limitation of Liability
 99: 
100: Under no circumstances and under no legal theory (including, without limitation, tort (including negligence), contract, or otherwise) shall the Licensor, or anyone who has contributed to the Game, be liable to you for any direct, indirect, incidental, consequential, special, or exemplary damages arising out of or relating to this License or the use of the Game, even if the Licensor has been advised of the possibility of such damages. In jurisdictions that do not allow the exclusion or limitation of certain damages, the Licensor’s liability shall be limited to the minimum extent permitted by law. You acknowledge that the Licensor is not liable for how you use the Game or Mods, or any outcomes of using it (for example, no liability for loss of data, loss of profits, or legal issues you might incur by violating this Agreement).
101: 
102: ## 12. General
103: 
104: * **Severability:** If any provision of this License is held to be unenforceable or invalid by a court of competent jurisdiction, that provision will be modified to the minimum extent necessary to make it enforceable (or severed if necessary), and the rest of the License will remain in effect.
105: * **No Endorsement:** Nothing in this License gives you rights to use the name, logos, or trademarks of SledHEAD or the Licensor for promotional purposes (aside from factual attribution as required). You cannot imply that your Mod or product is endorsed by the original author without separate permission.
106: * **License Acceptance:** By using the Game (or any of its Source Code or Assets), you indicate your acceptance of this License. If you do not agree to these terms, you do not have permission to use the Game or its contents.
107: * **Copyright Notice:** © 2024 Marvin Bentley II. All rights reserved, except as explicitly granted by this License.
`````````

## File: js/mobs/mountainlion.js
`````````javascript
 1: /* mountainlion.js - Mountain Lion Animal Module
 2: // This module defines the mountain lion characteristics for the wildlife simulation.
 3: // It registers itself with wildlife.js by calling registerAnimalType().
 4: // Drawn in a style consistent with our bear and bird modules, with a pretty kitty flair.
 5: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 6: */
 7: (function() {
 8:     // Helper function to draw a rectangle at an angle, centered at (cx, cy)
 9:     function drawRectAtAngle(ctx, cx, cy, width, height, angleDeg, fillStyle) {
10:         let rad = angleDeg * Math.PI / 180;
11:         ctx.save();
12:         ctx.translate(cx, cy);
13:         ctx.rotate(rad);
14:         ctx.fillStyle = fillStyle;
15:         ctx.fillRect(-width / 2, -height / 2, width, height);
16:         ctx.restore();
17:     }
18:     var mountainLionData = {
19:         type: "mountainlion",
20:         spawnProbability: 2.0, // Very high spawn chance
21:         width: 50,
22:         height: 30,
23:         detectionRadius: 60,
24:         speed: 10,
25:         basePhotoBonus: 15, // Good bonus for a pretty kitty
26:         color: "#F9E79F",   // A soft golden color
27:         spawningBiomes: [
28:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
29:         ],
30:         customUpdate: null,
31:         customDraw: function(animal, screenY, ctx) {
32:             // Draw the body
33:             ctx.fillStyle = animal.color;
34:             ctx.fillRect(
35:                 animal.x - animal.width / 2,
36:                 screenY - animal.height / 2,
37:                 animal.width,
38:                 animal.height
39:             );
40:             // Draw left ear as a triangle
41:             ctx.beginPath();
42:             ctx.moveTo(animal.x - animal.width / 4, screenY - animal.height / 2);
43:             ctx.lineTo(animal.x - animal.width / 4 - 10, screenY - animal.height / 2 - 15);
44:             ctx.lineTo(animal.x - animal.width / 4 + 10, screenY - animal.height / 2 - 15);
45:             ctx.closePath();
46:             ctx.fillStyle = "#000000";
47:             ctx.fill();
48:             // Draw right ear
49:             ctx.beginPath();
50:             ctx.moveTo(animal.x + animal.width / 4, screenY - animal.height / 2);
51:             ctx.lineTo(animal.x + animal.width / 4 - 10, screenY - animal.height / 2 - 15);
52:             ctx.lineTo(animal.x + animal.width / 4 + 10, screenY - animal.height / 2 - 15);
53:             ctx.closePath();
54:             ctx.fill();
55:             // Draw a tail using an angled rectangle
56:             let tailPivotX = animal.x + animal.width / 2;
57:             let tailPivotY = screenY + animal.height / 2;
58:             let tailAngle = -45;
59:             let tailWidth = 20;
60:             let tailHeight = 8;
61:             drawRectAtAngle(ctx, 
62:                 tailPivotX + (tailWidth / 2) * Math.cos(tailAngle * Math.PI / 180),
63:                 tailPivotY + (tailWidth / 2) * Math.sin(tailAngle * Math.PI / 180),
64:                 tailWidth, 
65:                 tailHeight, 
66:                 tailAngle, 
67:                 animal.color
68:             );
69:             // Altitude indicator
70:             let t = 1 - (animal.altitude / 100);
71:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
72:             ctx.fillStyle = altitudeColor;
73:             ctx.fillRect(
74:                 animal.x + animal.width / 2 + 5,
75:                 screenY - 5,
76:                 10,
77:                 10
78:             );
79:         }
80:     };
81:     if (typeof registerAnimalType === 'function') {
82:         registerAnimalType(mountainLionData);
83:     } else {
84:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
85:     }
86: })();
`````````

## File: js/camera.js
`````````javascript
 1: // camera.js
 2: // This file is responsible for handling the photography
 3: // mechanics.
 4: // Global variables for photo system
 5: var lastPhotoTime = 0;
 6: // ------------------- Photo (Critter) Minigame Logic -------------------
 7: // Handles taking a photo of an animal when conditions are met.
 8: function takePhoto() {
 9:   let now = Date.now();
10:   if (now - lastPhotoTime < TWEAK.photoCooldown) return; // Enforce cooldown
11:   if (!activeAnimal || !isAnimalInsideCone(activeAnimal)) return;
12:   lastPhotoTime = now;
13:   let baseValue = TWEAK.basePhotoValue;
14:   // Altitude Bonus: exponential falloff within 50 units.
15:   let diffAlt = Math.abs(player.altitudeLine - activeAnimal.altitude);
16:   let altitudeMatchBonus;
17:   if (diffAlt > 50) {
18:     altitudeMatchBonus = 1;
19:   } else {
20:     altitudeMatchBonus = 1 + (TWEAK.altitudeMatchMultiplier - 1) * Math.exp(-diffAlt / 15);
21:   }
22:   // Center Bonus: based on the angle difference between camera direction and animal.
23:   let animalAngle = Math.atan2(activeAnimal.y - player.absY, activeAnimal.x - player.x) * (180 / Math.PI);
24:   if (animalAngle < 0) animalAngle += 360;
25:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
26:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
27:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
28:   let sweetSpotPercentage = 0.10 + (playerUpgrades.optimalOptics * 0.01);
29:   let sweetSpotAngle = coneAngle * sweetSpotPercentage;
30:   let centerBonus;
31:   if (diffAngle <= sweetSpotAngle) {
32:     centerBonus = TWEAK.centerPOVMultiplier;
33:   } else if (diffAngle < coneAngle / 2) {
34:     let factor = (diffAngle - sweetSpotAngle) / (coneAngle / 2 - sweetSpotAngle);
35:     centerBonus = 1 + (TWEAK.centerPOVMultiplier - 1) * Math.exp(-factor * 3);
36:   } else {
37:     centerBonus = 1;
38:   }
39:   // Movement Bonus and Animal Type Multiplier:
40:   let movementBonus = activeAnimal.state !== "sitting" ? TWEAK.fleeingAnimalMultiplier : 1;
41:   let animalTypeMultiplier = activeAnimal.type === "bear" ? TWEAK.bearMultiplier : TWEAK.birdMultiplier;
42:   let repeatPenalty = activeAnimal.hasBeenPhotographed ? TWEAK.repeatPhotoPenalty : 1;
43:   let totalMoney = Math.floor(baseValue * altitudeMatchBonus * centerBonus * movementBonus * animalTypeMultiplier * repeatPenalty);
44:   player.money += totalMoney;
45:   showMoneyGain(totalMoney, `(📸 ${activeAnimal.type})`);
46:   addFloatingText(`+$${totalMoney} 📸`, player.x, player.absY);
47:   console.log(`Captured ${activeAnimal.type}! Calculation details: Base=$${baseValue}, AltitudeBonus=${altitudeMatchBonus.toFixed(2)}, CenterBonus=${centerBonus.toFixed(2)}, MovementBonus=${movementBonus.toFixed(2)}, AnimalTypeMultiplier=${animalTypeMultiplier}, RepeatPenalty=${repeatPenalty}, Total=$${totalMoney}.`);
48:   // After taking a photo, animal should always flee
49:   if (activeAnimal.state === "sitting") {
50:     console.log(`Animal (${activeAnimal.type}) startled by camera - changing state from sitting to fleeing`);
51:     activeAnimal.state = "fleeing";
52:     activeAnimal.fleeingLogOnce = false; // Reset so we get the fleeing log message
53:   }
54:   activeAnimal.hasBeenPhotographed = true;
55: }
56: // Check if the animal is inside the camera cone
57: function isAnimalInsideCone(animal) {
58:   // Distance check
59:   let dx = animal.x - player.x;
60:   let dy = animal.y - player.absY;
61:   let distanceSquared = dx * dx + dy * dy;
62:   let maxDistance = TWEAK.maxAnimalPhotoDistance;
63:   if (distanceSquared > maxDistance * maxDistance) return false;
64:   // Angle check
65:   let animalAngle = Math.atan2(dy, dx) * (180 / Math.PI);
66:   if (animalAngle < 0) animalAngle += 360;
67:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
68:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
69:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
70:   return diffAngle <= coneAngle / 2;
71: }
`````````

## File: js/jumpsled.js
`````````javascript
 1: // jumpsled.js
 2: // This file contains all jump-related functions for SledHEAD
 3: function onPlayerJumpStart() {
 4:   player.jumpStartTime = performance.now();
 5:   player.jumpStartY = player.absY;
 6:   player.jumpPeakY = player.absY;
 7:   console.log("Jump initiated at Y:", player.jumpStartY.toFixed(1));
 8:   unlockAudioContext();
 9:   jumpOsc = audioCtx.createOscillator();
10:   jumpGain = audioCtx.createGain();
11:   jumpOsc.type = "sine";
12:   jumpGain.gain.setValueAtTime(0.3, audioCtx.currentTime);
13:   jumpOsc.connect(jumpGain);
14:   jumpGain.connect(audioCtx.destination);
15:   jumpOsc.start();
16:   // Drain stamina on jump initiation
17:   stamina.drainJump();
18: }
19: function onPlayerJumpPeak() {
20:   console.log("Reached peak of jump.");
21:   // Optionally add a sound effect here.
22: }
23: function cleanupJumpSound() {
24:   if (jumpOsc) {
25:     jumpOsc.stop();
26:     jumpOsc.disconnect();
27:     jumpOsc = null;
28:   }
29:   if (jumpGain) {
30:     jumpGain.disconnect();
31:     jumpGain = null;
32:   }
33: }
34: function onPlayerLand() {
35:   const jumpTime = (performance.now() - player.jumpStartTime) / 1000;
36:   const jumpHeight = player.jumpPeakY - player.jumpStartY;
37:   const totalDistance = player.absY - player.jumpStartY;
38:   console.log(`Jump complete! Time: ${jumpTime.toFixed(2)}s, Peak Height: ${jumpHeight.toFixed(1)}, Distance: ${totalDistance.toFixed(1)}`);
39:   cleanupJumpSound();
40:   stamina.resetJumpTrigger();
41: }
`````````

## File: js/loan.js
`````````javascript
 1: /* loan.js - Loan Management & Victory Condition */
 2: // Loan System
 3: var loanAmount = 100000; // Initial loan amount
 4: function updateLoanButton() {
 5:   const loanButton = document.getElementById("payLoan");
 6:   if (loanButton) {
 7:     if (loanAmount <= 0) {
 8:       loanButton.textContent = "LOAN PAID OFF!";
 9:       loanButton.disabled = true;
10:       // Show victory banner
11:       document.getElementById("victoryBanner").style.display = "block";
12:     } else {
13:       loanButton.textContent = `Pay Loan ($${loanAmount.toLocaleString()})`;
14:       loanButton.disabled = false;
15:     }
16:   }
17: }
18: function payLoan() {
19:   if (player.money > 0) {
20:     const payment = Math.min(player.money, loanAmount);
21:     loanAmount -= payment;
22:     player.money -= payment;
23:     updateMoneyDisplay(); // This function should update the on-screen money (see below)
24:     updateLoanButton();
25:     if (loanAmount <= 0) {
26:       console.log("🎉 Loan paid off! Victory!");
27:       playTone(800, "sine", 0.3, 0.5); // Victory sound
28:     } else {
29:       console.log(`💰 Loan payment: $${payment}. Remaining: $${loanAmount}`);
30:       playTone(600, "sine", 0.1, 0.2); // Payment sound
31:     }
32:   }
33: }
`````````

## File: js/notify.js
`````````javascript
 1: /* notify.js */
 2: // Generic notification framework for SledHEAD
 3: // Base function to show notifications
 4: function showNotification(message, colorRGBA = [255, 255, 0, 0.8], duration = 1000) {
 5:   // Generate a unique ID based on the message
 6:   const notificationId = 'notification-' + message.replace(/\s+/g, '-').toLowerCase();
 7:   // Create or get the notification element
 8:   let notification = document.getElementById(notificationId);
 9:   if (!notification) {
10:     notification = document.createElement('div');
11:     notification.id = notificationId;
12:     notification.style.position = 'fixed';
13:     notification.style.top = '50%';
14:     notification.style.left = '50%';
15:     notification.style.transform = 'translate(-50%, -50%)';
16:     notification.style.backgroundColor = `rgba(${colorRGBA[0]}, ${colorRGBA[1]}, ${colorRGBA[2]}, ${colorRGBA[3]})`;
17:     notification.style.color = 'white';
18:     notification.style.padding = '20px';
19:     notification.style.borderRadius = '10px';
20:     notification.style.fontWeight = 'bold';
21:     notification.style.fontSize = '24px';
22:     notification.style.textAlign = 'center';
23:     notification.style.zIndex = '1000';
24:     notification.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.7)';
25:     document.body.appendChild(notification);
26:   }
27:   // Set content and make visible
28:   notification.textContent = message;
29:   notification.style.display = 'block';
30:   // Fade out after specified duration
31:   setTimeout(() => {
32:     notification.style.transition = 'opacity 0.5s';
33:     notification.style.opacity = '0';
34:     setTimeout(() => {
35:       notification.style.display = 'none';
36:       notification.style.opacity = '1';
37:       notification.style.transition = '';
38:     }, 500);
39:   }, duration);
40: }
41: // Specific notification types with predefined colors
42: function showErrorNotification(message, duration = 1000) {
43:   // Red background for errors
44:   showNotification(message, [255, 0, 0, 0.8], duration);
45:   // Play an error sound if available
46:   if (typeof playTone === 'function') {
47:     playTone(200, "square", 0.3, 0.4);
48:   }
49: }
50: function showSuccessNotification(message, duration = 1000) {
51:   // Green background for success
52:   showNotification(message, [0, 128, 0, 0.8], duration);
53:   // Play a positive sound if available
54:   if (typeof playTone === 'function') {
55:     playTone(600, "sine", 0.3, 0.4);
56:   }
57: }
58: function showWarningNotification(message, duration = 1000) {
59:   // Yellow background for warnings
60:   showNotification(message, [255, 255, 0, 0.8], duration);
61:   // Play a warning sound if available
62:   if (typeof playTone === 'function') {
63:     playTone(400, "triangle", 0.3, 0.4);
64:   }
65: }
66: function showInfoNotification(message, duration = 1000) {
67:   // Blue background for info
68:   showNotification(message, [0, 0, 255, 0.8], duration);
69: }
70: // Export functions for use in other modules
71: if (typeof module !== 'undefined' && module.exports) {
72:   module.exports = {
73:     showNotification,
74:     showErrorNotification,
75:     showSuccessNotification,
76:     showWarningNotification,
77:     showInfoNotification
78:   };
79: }
`````````

## File: js/registry.js
`````````javascript
 1: /*
 2: // registry.js
 3: export const functionRegistry = {};
 4: export function register(name) {
 5:   return function(target, key, descriptor) {
 6:     const fnName = name || key;
 7:     functionRegistry[fnName] = descriptor.value;
 8:     return descriptor;
 9:   };
10: }
11: */
12: // registry.js
13: export const functionRegistry = {};
14: export function register(name, fn) {
15:   functionRegistry[name] = fn;
16: }
`````````

## File: js/trees.js
`````````javascript
 1: /* trees.js - Tree Generation and Rendering */
 2: /**
 3:  * Generates clusters of trees across the terrain
 4:  * @param {Object} options Configuration options
 5:  * @param {number} options.count Number of tree clusters to generate
 6:  * @param {Object} options.terrainBounds Bounds for placing trees {xMin, xMax, yMin, yMax}
 7:  * @param {number} options.playerSize Reference size to scale trees relative to player
 8:  * @returns {Array} Array of tree objects with positions and dimensions
 9:  */
10: function generateTreeClumps(options) {
11:   const { count, terrainBounds, playerSize } = options;
12:   const clumps = [];
13:   for (let i = 0; i < count; i++) {
14:     const clump = [];
15:     const clumpSize = 2 + Math.floor(Math.random() * 3); // 2-4 trees per clump
16:     const clumpX = terrainBounds.xMin + Math.random() * (terrainBounds.xMax - terrainBounds.xMin);
17:     const clumpY = terrainBounds.yMin + Math.random() * (terrainBounds.yMax - terrainBounds.yMin);
18:     for (let j = 0; j < clumpSize; j++) {
19:       const sizeFactor = 0.5 + Math.random() * 1.5; // 50–200%
20:       const squareSize = playerSize * sizeFactor;
21:       const offsetX = (Math.random() - 0.5) * playerSize * 2;
22:       const offsetY = (Math.random() - 0.5) * playerSize * 2;
23:       clump.push({
24:         x: clumpX + offsetX,
25:         y: clumpY + offsetY,
26:         width: squareSize,
27:         height: squareSize,
28:         type: 'tree'
29:       });
30:     }
31:     clumps.push(...clump);
32:   }
33:   return clumps;
34: }
35: /**
36:  * Helper function to draw a more visually interesting tree
37:  * @param {CanvasRenderingContext2D} ctx Canvas context to draw on
38:  * @param {Object} tree Tree object with position and size information
39:  */
40: function drawTree(ctx, tree) {
41:   // Tree trunk (brown rectangle)
42:   const trunkWidth = tree.width * 0.3;
43:   const trunkHeight = tree.height * 0.6;
44:   const trunkX = tree.x + (tree.width - trunkWidth) / 2;
45:   const trunkY = tree.y + tree.height - trunkHeight;
46:   ctx.fillStyle = "#8B4513"; // saddle brown for trunk
47:   ctx.fillRect(trunkX, trunkY, trunkWidth, trunkHeight);
48:   // Tree canopy (green circle)
49:   const canopyRadius = tree.width * 0.6;
50:   const canopyCenterX = tree.x + tree.width / 2;
51:   const canopyCenterY = tree.y + tree.height * 0.4;
52:   ctx.fillStyle = "#228B22"; // forest green
53:   ctx.beginPath();
54:   ctx.arc(canopyCenterX, canopyCenterY, canopyRadius, 0, Math.PI * 2);
55:   ctx.fill();
56: }
`````````

## File: js/upgradeData.js
`````````javascript
  1: // js/upgradeData.js
  2: export const upgradeCategories = [
  3:     {
  4:       name: "Personal Upgrades",
  5:       type: "player",
  6:       upgrades: [
  7:         {
  8:           key: "rocketSurgery",
  9:           label: "Rocket Surgery",
 10:           desc: "Boosts top speed & acceleration for faster downhill runs.",
 11:           max: 10,
 12:           icon: "🚀"
 13:         },
 14:         {
 15:           key: "optimalOptics",
 16:           label: "Optimal Optics",
 17:           desc: "Frees focus & boosts fan engagement for easier weaving.",
 18:           max: 10,
 19:           icon: "📸"
 20:         },
 21:         {
 22:           key: "sledDurability",
 23:           label: "Sled Durability",
 24:           desc: "Reinforce your sled to withstand bigger impacts.",
 25:           max: 10,
 26:           icon: "🛷"
 27:         },
 28:         {
 29:           key: "fancierFootwear",
 30:           label: "Fancier Footwear",
 31:           desc: "Less time climbing, more time sledding.",
 32:           max: 10,
 33:           icon: "👢"
 34:         },
 35:         {
 36:           key: "grapplingAnchor",
 37:           label: "Grappling Anchor",
 38:           desc: "Hook onto terrain to swing into tricky spots.",
 39:           max: 0,
 40:           icon: "🪝"
 41:         },
 42:         {
 43:           key: "attendLegDay",
 44:           label: "Attend Leg Day",
 45:           desc: "Reduce stamina cost for climbing back up.",
 46:           max: 0,
 47:           icon: "🏋️"
 48:         },
 49:         {
 50:           key: "shortcutAwareness",
 51:           label: "Shortcut Awareness",
 52:           desc: "Reveal hidden shortcuts & groomed trails.",
 53:           max: 0,
 54:           icon: "🗺️"
 55:         },
 56:         {
 57:           key: "crowdHypeman",
 58:           label: "Crowd Hypeman",
 59:           desc: "Perform tricks near fans for boosts.",
 60:           max: 0,
 61:           icon: "📣"
 62:         },
 63:         {
 64:           key: "crowdWeaver",
 65:           label: "Crowd Weaver",
 66:           desc: "Crowds move aside more often.",
 67:           max: 0,
 68:           icon: "🧍‍♂️"
 69:         },
 70:         {
 71:           key: "weatherWarrior",
 72:           label: "Weather Warrior",
 73:           desc: "Storms & blizzards barely slow you down.",
 74:           max: 0,
 75:           icon: "🌨️"
 76:         }
 77:       ]
 78:     },
 79:     {
 80:       name: "Mountain Upgrades",
 81:       type: "mountain",
 82:       upgrades: [
 83:         {
 84:           key: "skiLifts",
 85:           label: "High-Speed Ski Lift Expansion",
 86:           desc: "Ride lifts faster & attract more visitors.",
 87:           max: 0,
 88:           icon: "🎿"
 89:         },
 90:         {
 91:           key: "snowmobileRentals",
 92:           label: "Snowmobile Rentals",
 93:           desc: "Rent them out or ride them yourself.",
 94:           max: 0,
 95:           icon: "🏍️"
 96:         },
 97:         {
 98:           key: "eateries",
 99:           label: "Eateries & Snack Bars",
100:           desc: "Restore stamina and make money.",
101:           max: 0,
102:           icon: "🍔"
103:         },
104:         {
105:           key: "groomedTrails",
106:           label: "Groomed Trails",
107:           desc: "Smoothed paths with boosty sections.",
108:           max: 0,
109:           icon: "🥾"
110:         },
111:         {
112:           key: "firstAidStations",
113:           label: "Safety & First-Aid Stations",
114:           desc: "Heal and reduce collision penalties.",
115:           max: 0,
116:           icon: "⛑️"
117:         },
118:         {
119:           key: "scenicOverlooks",
120:           label: "Scenic Overlook Platforms",
121:           desc: "Lure tourists or use as shortcuts.",
122:           max: 0,
123:           icon: "📷"
124:         },
125:         {
126:           key: "advertisingRamps",
127:           label: "Advertising Ramp-Billboards",
128:           desc: "Sponsor revenue and epic trick ramps.",
129:           max: 0,
130:           icon: "📢"
131:         },
132:         {
133:           key: "resortLodges",
134:           label: "Resort Amenities & Lodges",
135:           desc: "Start from fancy remote lodges.",
136:           max: 0,
137:           icon: "🏨"
138:         },
139:         {
140:           key: "nightLighting",
141:           label: "Night Lighting Upgrades",
142:           desc: "Unlock night sledding.",
143:           max: 0,
144:           icon: "🌙"
145:         },
146:         {
147:           key: "weatherControl",
148:           label: "Weather Control Systems",
149:           desc: "Control the challenge for higher rewards.",
150:           max: 0,
151:           icon: "🌦️"
152:         }
153:       ]
154:     }
155:   ];
`````````

## File: js/uphill.js
`````````javascript
 1: /* uphill.js - Uphill Movement & Camera Control */
 2: // Handle all uphill movement, camera controls, and related mechanics
 3: function updateUphill(deltaTime) {
 4:   let upSpeed = TWEAK.baseUpSpeed + (playerUpgrades.fancierFootwear * TWEAK.fancierFootwearUpSpeedPerLevel);
 5:   // Vertical movement
 6:   if (keysDown["w"]) { player.absY -= upSpeed; }
 7:   if (keysDown["s"]) { player.absY += upSpeed; }
 8:   // Horizontal movement with bounds checking
 9:   let newXUphill = player.x;
10:   if (keysDown["a"]) { newXUphill -= upSpeed; }
11:   if (keysDown["d"]) { newXUphill += upSpeed; }
12:   player.x = clamp(newXUphill, player.width/2, canvas.width - player.width/2);
13:   // Prevent going beyond mountain bounds vertically
14:   player.absY = clamp(player.absY, 0, mountainHeight);
15:   // Camera and altitude control
16:   if (keysDown["ArrowLeft"]) { player.cameraAngle -= 2; }
17:   if (keysDown["ArrowRight"]) { player.cameraAngle += 2; }
18:   if (keysDown["ArrowUp"]) { player.altitudeLine = Math.max(0, player.altitudeLine - 2); }
19:   if (keysDown["ArrowDown"]) { player.altitudeLine = Math.min(100, player.altitudeLine + 2); }
20:   // Normalize camera angle
21:   if (player.cameraAngle < 0) player.cameraAngle += 360;
22:   if (player.cameraAngle >= 360) player.cameraAngle -= 360;
23:   // Reset horizontal velocity in uphill mode
24:   player.xVel = 0;
25:   // Check for collisions with terrain
26:   terrain.forEach(obstacle => {
27:     if (checkCollision(
28:         player.x - player.width / 2, player.absY - player.height / 2,
29:         player.width, player.height,
30:         obstacle.x, obstacle.y,
31:         obstacle.width, obstacle.height
32:     )) {
33:       console.log("Collision on uphill.");
34:       resolveCollision(player, obstacle);
35:     }
36:   });
37:   // Call animal update from wildlife.js
38:   updateAnimal();
39:   // Return to house if player reaches bottom of mountain
40:   if (player.absY >= mountainHeight) {
41:     player.absY = mountainHeight;
42:     console.log("Reached bottom. Returning to house.");
43:     changeState(GameState.HOUSE);
44:   }
45: }
`````````

## File: complete-condensed-codebase-for-reference.md.txt
`````````
    1: This file is a merged representation of the entire codebase, combined into a single document by Repomix.
    2: The content has been processed where empty lines have been removed, line numbers have been added.
    3: 
    4: # File Summary
    5: 
    6: ## Purpose
    7: This file contains a packed representation of the entire repository's contents.
    8: It is designed to be easily consumable by AI systems for analysis, code review,
    9: or other automated processes.
   10: 
   11: ## File Format
   12: The content is organized as follows:
   13: 1. This summary section
   14: 2. Repository information
   15: 3. Directory structure
   16: 4. Multiple file entries, each consisting of:
   17:   a. A header with the file path (## File: path/to/file)
   18:   b. The full contents of the file in a code block
   19: 
   20: ## Usage Guidelines
   21: - This file should be treated as read-only. Any changes should be made to the
   22:   original repository files, not this packed version.
   23: - When processing this file, use the file path to distinguish
   24:   between different files in the repository.
   25: - Be aware that this file may contain sensitive information. Handle it with
   26:   the same level of security as you would the original repository.
   27: 
   28: ## Notes
   29: - Some files may have been excluded based on .gitignore rules and Repomix's configuration
   30: - Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
   31: - Files matching patterns in .gitignore are excluded
   32: - Files matching default ignore patterns are excluded
   33: - Empty lines have been removed from all files
   34: - Line numbers have been added to the beginning of each line
   35: - Files are sorted by Git change count (files with more changes are at the bottom)
   36: 
   37: ## Additional Info
   38: 
   39: # Directory Structure
   40: ```
   41: docs/
   42:   1.0_README.md
   43:   CONTRIBUTING.md
   44:   CONTRIBUTOR_LICENSE_AGREEMENT.md
   45:   CONTROLS.md
   46:   LICENSE.md
   47:   README.md
   48:   ROADMAP.md
   49: js/
   50:   mobs/
   51:     bear.js
   52:     bird.js
   53:     mountainlion.js
   54:   camera.js
   55:   downhill.js
   56:   entities.js
   57:   game.js
   58:   input.js
   59:   jumpsled.js
   60:   loan.js
   61:   mechanics.js
   62:   notify.js
   63:   player.js
   64:   registry.js
   65:   render.js
   66:   settings.js
   67:   stamina.js
   68:   trees.js
   69:   tricks.js
   70:   upgradeData.js
   71:   upgradeLogic.js
   72:   upgrades.js
   73:   uphill.js
   74:   utils.js
   75:   wildlife.js
   76:   world.js
   77: !READ_FIRST-FILE_SUMMARY.txt
   78: .gitignore
   79: complete-condensed-codebase-for-reference.md.txt
   80: index.html
   81: styles.css
   82: todo.txt
   83: ```
   84: 
   85: # Files
   86: 
   87: ## File: complete-condensed-codebase-for-reference.md.txt
   88: ````````
   89:     1: This file is a merged representation of the entire codebase, combined into a single document by Repomix.
   90:     2: The content has been processed where empty lines have been removed, line numbers have been added.
   91:     3: 
   92:     4: # File Summary
   93:     5: 
   94:     6: ## Purpose
   95:     7: This file contains a packed representation of the entire repository's contents.
   96:     8: It is designed to be easily consumable by AI systems for analysis, code review,
   97:     9: or other automated processes.
   98:    10: 
   99:    11: ## File Format
  100:    12: The content is organized as follows:
  101:    13: 1. This summary section
  102:    14: 2. Repository information
  103:    15: 3. Directory structure
  104:    16: 4. Multiple file entries, each consisting of:
  105:    17:   a. A header with the file path (## File: path/to/file)
  106:    18:   b. The full contents of the file in a code block
  107:    19: 
  108:    20: ## Usage Guidelines
  109:    21: - This file should be treated as read-only. Any changes should be made to the
  110:    22:   original repository files, not this packed version.
  111:    23: - When processing this file, use the file path to distinguish
  112:    24:   between different files in the repository.
  113:    25: - Be aware that this file may contain sensitive information. Handle it with
  114:    26:   the same level of security as you would the original repository.
  115:    27: 
  116:    28: ## Notes
  117:    29: - Some files may have been excluded based on .gitignore rules and Repomix's configuration
  118:    30: - Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
  119:    31: - Files matching patterns in .gitignore are excluded
  120:    32: - Files matching default ignore patterns are excluded
  121:    33: - Empty lines have been removed from all files
  122:    34: - Line numbers have been added to the beginning of each line
  123:    35: - Files are sorted by Git change count (files with more changes are at the bottom)
  124:    36: 
  125:    37: ## Additional Info
  126:    38: 
  127:    39: # Directory Structure
  128:    40: ```
  129:    41: docs/
  130:    42:   1.0_README.md
  131:    43:   CONTRIBUTING.md
  132:    44:   CONTRIBUTOR_LICENSE_AGREEMENT.md
  133:    45:   CONTROLS.md
  134:    46:   LICENSE.md
  135:    47:   README.md
  136:    48:   ROADMAP.md
  137:    49: js/
  138:    50:   mobs/
  139:    51:     bear.js
  140:    52:     bird.js
  141:    53:     mountainlion.js
  142:    54:   camera.js
  143:    55:   downhill.js
  144:    56:   entities.js
  145:    57:   game.js
  146:    58:   input.js
  147:    59:   jumpsled.js
  148:    60:   loan.js
  149:    61:   mechanics.js
  150:    62:   notify.js
  151:    63:   player.js
  152:    64:   registry.js
  153:    65:   render.js
  154:    66:   settings.js
  155:    67:   stamina.js
  156:    68:   trees.js
  157:    69:   tricks.js
  158:    70:   upgradeData.js
  159:    71:   upgradeLogic.js
  160:    72:   upgrades.js
  161:    73:   uphill.js
  162:    74:   utils.js
  163:    75:   wildlife.js
  164:    76:   world.js
  165:    77: !READ_FIRST-FILE_SUMMARY.txt
  166:    78: .gitignore
  167:    79: complete-condensed-codebase-for-reference.md.txt
  168:    80: index.html
  169:    81: styles.css
  170:    82: todo.txt
  171:    83: ```
  172:    84: 
  173:    85: # Files
  174:    86: 
  175:    87: ## File: complete-condensed-codebase-for-reference.md.txt
  176:    88: ```````
  177:    89:     1: This file is a merged representation of the entire codebase, combined into a single document by Repomix.
  178:    90:     2: The content has been processed where empty lines have been removed, line numbers have been added.
  179:    91:     3: 
  180:    92:     4: # File Summary
  181:    93:     5: 
  182:    94:     6: ## Purpose
  183:    95:     7: This file contains a packed representation of the entire repository's contents.
  184:    96:     8: It is designed to be easily consumable by AI systems for analysis, code review,
  185:    97:     9: or other automated processes.
  186:    98:    10: 
  187:    99:    11: ## File Format
  188:   100:    12: The content is organized as follows:
  189:   101:    13: 1. This summary section
  190:   102:    14: 2. Repository information
  191:   103:    15: 3. Directory structure
  192:   104:    16: 4. Multiple file entries, each consisting of:
  193:   105:    17:   a. A header with the file path (## File: path/to/file)
  194:   106:    18:   b. The full contents of the file in a code block
  195:   107:    19: 
  196:   108:    20: ## Usage Guidelines
  197:   109:    21: - This file should be treated as read-only. Any changes should be made to the
  198:   110:    22:   original repository files, not this packed version.
  199:   111:    23: - When processing this file, use the file path to distinguish
  200:   112:    24:   between different files in the repository.
  201:   113:    25: - Be aware that this file may contain sensitive information. Handle it with
  202:   114:    26:   the same level of security as you would the original repository.
  203:   115:    27: 
  204:   116:    28: ## Notes
  205:   117:    29: - Some files may have been excluded based on .gitignore rules and Repomix's configuration
  206:   118:    30: - Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
  207:   119:    31: - Files matching patterns in .gitignore are excluded
  208:   120:    32: - Files matching default ignore patterns are excluded
  209:   121:    33: - Empty lines have been removed from all files
  210:   122:    34: - Line numbers have been added to the beginning of each line
  211:   123:    35: - Files are sorted by Git change count (files with more changes are at the bottom)
  212:   124:    36: 
  213:   125:    37: ## Additional Info
  214:   126:    38: 
  215:   127:    39: # Directory Structure
  216:   128:    40: ```
  217:   129:    41: docs/
  218:   130:    42:   1.0_README.md
  219:   131:    43:   CONTRIBUTING.md
  220:   132:    44:   CONTRIBUTOR_LICENSE_AGREEMENT.md
  221:   133:    45:   CONTROLS.md
  222:   134:    46:   LICENSE.md
  223:   135:    47:   README.md
  224:   136:    48:   ROADMAP.md
  225:   137:    49: js/
  226:   138:    50:   mobs/
  227:   139:    51:     bear.js
  228:   140:    52:     bird.js
  229:   141:    53:     mountainlion.js
  230:   142:    54:   camera.js
  231:   143:    55:   downhill.js
  232:   144:    56:   entities.js
  233:   145:    57:   game.js
  234:   146:    58:   input.js
  235:   147:    59:   jumpsled.js
  236:   148:    60:   loan.js
  237:   149:    61:   mechanics.js
  238:   150:    62:   notify.js
  239:   151:    63:   player.js
  240:   152:    64:   registry.js
  241:   153:    65:   render.js
  242:   154:    66:   settings.js
  243:   155:    67:   stamina.js
  244:   156:    68:   trees.js
  245:   157:    69:   tricks.js
  246:   158:    70:   upgradeData.js
  247:   159:    71:   upgradeLogic.js
  248:   160:    72:   upgrades.js
  249:   161:    73:   uphill.js
  250:   162:    74:   utils.js
  251:   163:    75:   wildlife.js
  252:   164:    76:   world.js
  253:   165:    77: !READ_FIRST-FILE_SUMMARY.txt
  254:   166:    78: .gitignore
  255:   167:    79: complete-condensed-codebase-for-reference.md.txt
  256:   168:    80: index.html
  257:   169:    81: styles.css
  258:   170:    82: todo.txt
  259:   171:    83: ```
  260:   172:    84: 
  261:   173:    85: # Files
  262:   174:    86: 
  263:   175:    87: ## File: complete-condensed-codebase-for-reference.md.txt
  264:   176:    88: ``````
  265:   177:    89:    1: This file is a merged representation of the entire codebase, combined into a single document by Repomix.
  266:   178:    90:    2: The content has been processed where empty lines have been removed, line numbers have been added.
  267:   179:    91:    3: 
  268:   180:    92:    4: # File Summary
  269:   181:    93:    5: 
  270:   182:    94:    6: ## Purpose
  271:   183:    95:    7: This file contains a packed representation of the entire repository's contents.
  272:   184:    96:    8: It is designed to be easily consumable by AI systems for analysis, code review,
  273:   185:    97:    9: or other automated processes.
  274:   186:    98:   10: 
  275:   187:    99:   11: ## File Format
  276:   188:   100:   12: The content is organized as follows:
  277:   189:   101:   13: 1. This summary section
  278:   190:   102:   14: 2. Repository information
  279:   191:   103:   15: 3. Directory structure
  280:   192:   104:   16: 4. Multiple file entries, each consisting of:
  281:   193:   105:   17:   a. A header with the file path (## File: path/to/file)
  282:   194:   106:   18:   b. The full contents of the file in a code block
  283:   195:   107:   19: 
  284:   196:   108:   20: ## Usage Guidelines
  285:   197:   109:   21: - This file should be treated as read-only. Any changes should be made to the
  286:   198:   110:   22:   original repository files, not this packed version.
  287:   199:   111:   23: - When processing this file, use the file path to distinguish
  288:   200:   112:   24:   between different files in the repository.
  289:   201:   113:   25: - Be aware that this file may contain sensitive information. Handle it with
  290:   202:   114:   26:   the same level of security as you would the original repository.
  291:   203:   115:   27: 
  292:   204:   116:   28: ## Notes
  293:   205:   117:   29: - Some files may have been excluded based on .gitignore rules and Repomix's configuration
  294:   206:   118:   30: - Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
  295:   207:   119:   31: - Files matching patterns in .gitignore are excluded
  296:   208:   120:   32: - Files matching default ignore patterns are excluded
  297:   209:   121:   33: - Empty lines have been removed from all files
  298:   210:   122:   34: - Line numbers have been added to the beginning of each line
  299:   211:   123:   35: - Files are sorted by Git change count (files with more changes are at the bottom)
  300:   212:   124:   36: 
  301:   213:   125:   37: ## Additional Info
  302:   214:   126:   38: 
  303:   215:   127:   39: # Directory Structure
  304:   216:   128:   40: ```
  305:   217:   129:   41: docs/
  306:   218:   130:   42:   1.0_README.md
  307:   219:   131:   43:   CONTRIBUTING.md
  308:   220:   132:   44:   CONTRIBUTOR_LICENSE_AGREEMENT.md
  309:   221:   133:   45:   CONTROLS.md
  310:   222:   134:   46:   LICENSE.md
  311:   223:   135:   47:   README.md
  312:   224:   136:   48:   ROADMAP.md
  313:   225:   137:   49: js/
  314:   226:   138:   50:   mobs/
  315:   227:   139:   51:     bear.js
  316:   228:   140:   52:     bird.js
  317:   229:   141:   53:     mountainlion.js
  318:   230:   142:   54:   camera.js
  319:   231:   143:   55:   downhill.js
  320:   232:   144:   56:   entities.js
  321:   233:   145:   57:   game.js
  322:   234:   146:   58:   input.js
  323:   235:   147:   59:   jumpsled.js
  324:   236:   148:   60:   loan.js
  325:   237:   149:   61:   mechanics.js
  326:   238:   150:   62:   notify.js
  327:   239:   151:   63:   player.js
  328:   240:   152:   64:   registry.js
  329:   241:   153:   65:   render.js
  330:   242:   154:   66:   settings.js
  331:   243:   155:   67:   stamina.js
  332:   244:   156:   68:   trees.js
  333:   245:   157:   69:   tricks.js
  334:   246:   158:   70:   upgradeData.js
  335:   247:   159:   71:   upgradeLogic.js
  336:   248:   160:   72:   upgrades.js
  337:   249:   161:   73:   uphill.js
  338:   250:   162:   74:   utils.js
  339:   251:   163:   75:   wildlife.js
  340:   252:   164:   76:   world.js
  341:   253:   165:   77: !READ_FIRST-FILE_SUMMARY.txt
  342:   254:   166:   78: .gitignore
  343:   255:   167:   79: complete-condensed-codebase-for-reference.md.txt
  344:   256:   168:   80: index.html
  345:   257:   169:   81: styles.css
  346:   258:   170:   82: todo.txt
  347:   259:   171:   83: ```
  348:   260:   172:   84: 
  349:   261:   173:   85: # Files
  350:   262:   174:   86: 
  351:   263:   175:   87: ## File: complete-condensed-codebase-for-reference.md.txt
  352:   264:   176:   88: `````
  353:   265:   177:   89:    1: This file is a merged representation of the entire codebase, combined into a single document by Repomix.
  354:   266:   178:   90:    2: The content has been processed where empty lines have been removed, line numbers have been added.
  355:   267:   179:   91:    3: 
  356:   268:   180:   92:    4: # File Summary
  357:   269:   181:   93:    5: 
  358:   270:   182:   94:    6: ## Purpose
  359:   271:   183:   95:    7: This file contains a packed representation of the entire repository's contents.
  360:   272:   184:   96:    8: It is designed to be easily consumable by AI systems for analysis, code review,
  361:   273:   185:   97:    9: or other automated processes.
  362:   274:   186:   98:   10: 
  363:   275:   187:   99:   11: ## File Format
  364:   276:   188:  100:   12: The content is organized as follows:
  365:   277:   189:  101:   13: 1. This summary section
  366:   278:   190:  102:   14: 2. Repository information
  367:   279:   191:  103:   15: 3. Directory structure
  368:   280:   192:  104:   16: 4. Multiple file entries, each consisting of:
  369:   281:   193:  105:   17:   a. A header with the file path (## File: path/to/file)
  370:   282:   194:  106:   18:   b. The full contents of the file in a code block
  371:   283:   195:  107:   19: 
  372:   284:   196:  108:   20: ## Usage Guidelines
  373:   285:   197:  109:   21: - This file should be treated as read-only. Any changes should be made to the
  374:   286:   198:  110:   22:   original repository files, not this packed version.
  375:   287:   199:  111:   23: - When processing this file, use the file path to distinguish
  376:   288:   200:  112:   24:   between different files in the repository.
  377:   289:   201:  113:   25: - Be aware that this file may contain sensitive information. Handle it with
  378:   290:   202:  114:   26:   the same level of security as you would the original repository.
  379:   291:   203:  115:   27: 
  380:   292:   204:  116:   28: ## Notes
  381:   293:   205:  117:   29: - Some files may have been excluded based on .gitignore rules and Repomix's configuration
  382:   294:   206:  118:   30: - Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
  383:   295:   207:  119:   31: - Files matching patterns in .gitignore are excluded
  384:   296:   208:  120:   32: - Files matching default ignore patterns are excluded
  385:   297:   209:  121:   33: - Empty lines have been removed from all files
  386:   298:   210:  122:   34: - Line numbers have been added to the beginning of each line
  387:   299:   211:  123:   35: - Files are sorted by Git change count (files with more changes are at the bottom)
  388:   300:   212:  124:   36: 
  389:   301:   213:  125:   37: ## Additional Info
  390:   302:   214:  126:   38: 
  391:   303:   215:  127:   39: # Directory Structure
  392:   304:   216:  128:   40: ```
  393:   305:   217:  129:   41: docs/
  394:   306:   218:  130:   42:   1.0_README.md
  395:   307:   219:  131:   43:   CONTRIBUTING.md
  396:   308:   220:  132:   44:   CONTRIBUTOR_LICENSE_AGREEMENT.md
  397:   309:   221:  133:   45:   CONTROLS.md
  398:   310:   222:  134:   46:   LICENSE.md
  399:   311:   223:  135:   47:   README.md
  400:   312:   224:  136:   48:   ROADMAP.md
  401:   313:   225:  137:   49: js/
  402:   314:   226:  138:   50:   mobs/
  403:   315:   227:  139:   51:     bear.js
  404:   316:   228:  140:   52:     bird.js
  405:   317:   229:  141:   53:     mountainlion.js
  406:   318:   230:  142:   54:   camera.js
  407:   319:   231:  143:   55:   downhill.js
  408:   320:   232:  144:   56:   entities.js
  409:   321:   233:  145:   57:   game.js
  410:   322:   234:  146:   58:   input.js
  411:   323:   235:  147:   59:   jumpsled.js
  412:   324:   236:  148:   60:   loan.js
  413:   325:   237:  149:   61:   mechanics.js
  414:   326:   238:  150:   62:   notify.js
  415:   327:   239:  151:   63:   player.js
  416:   328:   240:  152:   64:   registry.js
  417:   329:   241:  153:   65:   render.js
  418:   330:   242:  154:   66:   settings.js
  419:   331:   243:  155:   67:   stamina.js
  420:   332:   244:  156:   68:   trees.js
  421:   333:   245:  157:   69:   tricks.js
  422:   334:   246:  158:   70:   upgradeData.js
  423:   335:   247:  159:   71:   upgradeLogic.js
  424:   336:   248:  160:   72:   upgrades.js
  425:   337:   249:  161:   73:   uphill.js
  426:   338:   250:  162:   74:   utils.js
  427:   339:   251:  163:   75:   wildlife.js
  428:   340:   252:  164:   76:   world.js
  429:   341:   253:  165:   77: !READ_FIRST-FILE_SUMMARY.txt
  430:   342:   254:  166:   78: .gitignore
  431:   343:   255:  167:   79: index.html
  432:   344:   256:  168:   80: styles.css
  433:   345:   257:  169:   81: todo.txt
  434:   346:   258:  170:   82: ```
  435:   347:   259:  171:   83: 
  436:   348:   260:  172:   84: # Files
  437:   349:   261:  173:   85: 
  438:   350:   262:  174:   86: ## File: docs/CONTRIBUTING.md
  439:   351:   263:  175:   87: ````markdown
  440:   352:   264:  176:   88:   1: How to Contribute to SledHEAD
  441:   353:   265:  177:   89:   2: =============================
  442:   354:   266:  178:   90:   3: 
  443:   355:   267:  179:   91:   4: Thank you for considering contributing to SledHEAD! Community involvement is crucial for making the game the best it can be. Whether you're fixing bugs, adding features, or improving documentation, your efforts are appreciated.
  444:   356:   268:  180:   92:   5: 
  445:   357:   269:  181:   93:   6: * * * * *
  446:   358:   270:  182:   94:   7: 
  447:   359:   271:  183:   95:   8: Key Resources
  448:   360:   272:  184:   96:   9: -------------
  449:   361:   273:  185:   97:  10: 
  450:   362:   274:  186:   98:  11: -   SledHEAD README -- Learn about the game's core concepts and current features.
  451:   363:   275:  187:   99:  12: 
  452:   364:   276:  188:  100:  13: -   SledHEAD License -- Understand the licensing terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets).
  453:   365:   277:  189:  101:  14: 
  454:   366:   278:  190:  102:  15: -   Issues & Roadmap -- Check the GitHub Issues section for current tasks and future goals.
  455:   367:   279:  191:  103:  16: 
  456:   368:   280:  192:  104:  17: -   Discussions -- Engage with the community, ask questions, and brainstorm ideas.
  457:   369:   281:  193:  105:  18: 
  458:   370:   282:  194:  106:  19: * * * * *
  459:   371:   283:  195:  107:  20: 
  460:   372:   284:  196:  108:  21: Getting Started
  461:   373:   285:  197:  109:  22: ---------------
  462:   374:   286:  198:  110:  23: 
  463:   375:   287:  199:  111:  24: 1.  Fork the Repository\
  464:   376:   288:  200:  112:  25:     Create your own fork of the repository and clone it locally.
  465:   377:   289:  201:  113:  26: 
  466:   378:   290:  202:  114:  27: 1.  Install Dependencies\
  467:   379:   291:  203:  115:  28:     SledHEAD is a web-based game built with JavaScript and Phaser.js. You'll just need a local HTTP server to test changes (like Python's http.server or Node's http-server).
  468:   380:   292:  204:  116:  29: 
  469:   381:   293:  205:  117:  30: 1.  Create a Branch\
  470:   382:   294:  206:  118:  31:     Work in a feature-specific branch:
  471:   383:   295:  207:  119:  32: 
  472:   384:   296:  208:  120:  33: git  checkout  -b  feature/your-feature-name
  473:   385:   297:  209:  121:  34: 
  474:   386:   298:  210:  122:  35: * * * * *
  475:   387:   299:  211:  123:  36: 
  476:   388:   300:  212:  124:  37: Testing Your Contributions
  477:   389:   301:  213:  125:  38: --------------------------
  478:   390:   302:  214:  126:  39: 
  479:   391:   303:  215:  127:  40: -   Manually playtest any gameplay changes and check for bugs.
  480:   392:   304:  216:  128:  41: -   Ensure that UI elements render correctly and gameplay mechanics (like tricks, upgrades, and photography) behave as expected.
  481:   393:   305:  217:  129:  42: -   Keep console errors to a minimum. Use `console.log` for temporary debugging but clean up before submitting.
  482:   394:   306:  218:  130:  43: 
  483:   395:   307:  219:  131:  44: * * * * *
  484:   396:   308:  220:  132:  45: 
  485:   397:   309:  221:  133:  46: Submitting Changes
  486:   398:   310:  222:  134:  47: ------------------
  487:   399:   311:  223:  135:  48: 
  488:   400:   312:  224:  136:  49: 1.  **Code Style**
  489:   401:   313:  225:  137:  50: 
  490:   402:   314:  226:  138:  51:     -   Use **two spaces for indentation, not tabs**.
  491:   403:   315:  227:  139:  52:     -   Write clean, readable code with comments where necessary.
  492:   404:   316:  228:  140:  53:     -   Follow existing naming conventions (camelCase for variables, PascalCase for classes).
  493:   405:   317:  229:  141:  54:     -   Avoid deeply nested logic---break it into functions for clarity.
  494:   406:   318:  230:  142:  55: 2.  **Commit Messages**\
  495:   407:   319:  231:  143:  56:     Write clear commit messages. For example:
  496:   408:   320:  232:  144:  57: 
  497:   409:   321:  233:  145:  58:     bash
  498:   410:   322:  234:  146:  59: 
  499:   411:   323:  235:  147:  60:     CopyEdit
  500:   412:   324:  236:  148:  61: 
  501:   413:   325:  237:  149:  62:     `git commit -m "Fix: Correct collision detection on uphill phase
  502:   414:   326:  238:  150:  63: 
  503:   415:   327:  239:  151:  64:     The collision detection logic for obstacles during the uphill phase
  504:   416:   328:  240:  152:  65:     now accurately accounts for terrain height variations."`
  505:   417:   329:  241:  153:  66: 
  506:   418:   330:  242:  154:  67: 3.  **Pull Request (PR)**
  507:   419:   331:  243:  155:  68: 
  508:   420:   332:  244:  156:  69:     -   Open a PR against the `main` branch.
  509:   421:   333:  245:  157:  70:     -   Include a clear description of what you've done and why.
  510:   422:   334:  246:  158:  71:     -   If your change fixes a bug or closes an issue, reference it in the PR description (e.g., `Closes #42`).
  511:   423:   335:  247:  159:  72:     -   Include screenshots or screen recordings if the change is visual.
  512:   424:   336:  248:  160:  73:     -   Be prepared for feedback---collaboration is key!
  513:   425:   337:  249:  161:  74: 
  514:   426:   338:  250:  162:  75: * * * * *
  515:   427:   339:  251:  163:  76: 
  516:   428:   340:  252:  164:  77: Coding Conventions
  517:   429:   341:  253:  165:  78: ------------------
  518:   430:   342:  254:  166:  79: 
  519:   431:   343:  255:  167:  80: -   **Consistency is key!** When in doubt, follow the style of existing code.
  520:   432:   344:  256:  168:  81: -   Use **strict equality** (`===` and `!==`).
  521:   433:   345:  257:  169:  82: -   Prefer `const` and `let` over `var`.
  522:   434:   346:  258:  170:  83: -   Document functions with comments explaining inputs, outputs, and purpose.
  523:   435:   347:  259:  171:  84: -   Keep functions focused and concise---single responsibility.
  524:   436:   348:  260:  172:  85: -   Handle errors gracefully and avoid silent failures.
  525:   437:   349:  261:  173:  86: -   Clean up `console.log` or temporary debug code before submitting.
  526:   438:   350:  262:  174:  87: 
  527:   439:   351:  263:  175:  88: * * * * *
  528:   440:   352:  264:  176:  89: 
  529:   441:   353:  265:  177:  90: Licensing of Contributions
  530:   442:   354:  266:  178:  91: --------------------------
  531:   443:   355:  267:  179:  92: 
  532:   444:   356:  268:  180:  93: -   **All contributions become licensed under AGPL 3.0 (for code) and CC BY-NC-SA 4.0 (for assets)**, consistent with the project's dual-license model.
  533:   445:   357:  269:  181:  94: -   By submitting a PR, you agree that your contributions may be included in SledHEAD and will be publicly available under these licenses.
  534:   446:   358:  270:  182:  95: 
  535:   447:   359:  271:  183:  96: * * * * *
  536:   448:   360:  272:  184:  97: 
  537:   449:   361:  273:  185:  98: Contributor License Agreement (CLA)
  538:   450:   362:  274:  186:  99: --------------------------
  539:   451:   363:  275:  187: 100: 
  540:   452:   364:  276:  188: 101: By contributing to **SledHEAD**, you agree to the Contributor License Agreement (CLA), granting the project owner the rights to use, modify, and commercialize your contributions. You retain ownership, but your work must be licensed under the project's current terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets) and can be re-licensed for commercial purposes.
  541:   453:   365:  277:  189: 102: 
  542:   454:   366:  278:  190: 103: By submitting a pull request, you confirm that you have the right to contribute and agree to these terms. 
  543:   455:   367:  279:  191: 104: 
  544:   456:   368:  280:  192: 105: See https://github.com/truevox/SledHEAD/docs/CONTRIBUTOR_LICENSE_AGREEMENT.md for more details.
  545:   457:   369:  281:  193: 106: 
  546:   458:   370:  282:  194: 107: 
  547:   459:   371:  283:  195: 108: * * * * *
  548:   460:   372:  284:  196: 109: 
  549:   461:   373:  285:  197: 110: Reporting Bugs & Requesting Features
  550:   462:   374:  286:  198: 111: ------------------------------------
  551:   463:   375:  287:  199: 112: 
  552:   464:   376:  288:  200: 113: -   Open a **GitHub Issue** describing the problem or request.
  553:   465:   377:  289:  201: 114: -   Be clear and detailed---steps to reproduce bugs, expected behavior, and screenshots help!
  554:   466:   378:  290:  202: 115: -   Mark issues with appropriate labels (like `bug`, `enhancement`, or `question`).
  555:   467:   379:  291:  203: 116: 
  556:   468:   380:  292:  204: 117: * * * * *
  557:   469:   381:  293:  205: 118: 
  558:   470:   382:  294:  206: 119: Need Help?
  559:   471:   383:  295:  207: 120: ----------
  560:   472:   384:  296:  208: 121: 
  561:   473:   385:  297:  209: 122: -   Join discussions on the GitHub repo.
  562:   474:   386:  298:  210: 123: -   Open an issue for technical support or feature questions.
  563:   475:   387:  299:  211: 124: -   Feedback, ideas, and constructive criticism are welcome!
  564:   476:   388:  300:  212: 125: 
  565:   477:   389:  301:  213: 126: * * * * *
  566:   478:   390:  302:  214: 127: 
  567:   479:   391:  303:  215: 128: Thank you for helping SledHEAD grow!
  568:   480:   392:  304:  216: ````
  569:   481:   393:  305:  217: 
  570:   482:   394:  306:  218: ## File: docs/CONTRIBUTOR_LICENSE_AGREEMENT.md
  571:   483:   395:  307:  219: ````markdown
  572:   484:   396:  308:  220:  1: # SledHEAD Contributor License Agreement (CLA)
  573:   485:   397:  309:  221:  2: 
  574:   486:   398:  310:  222:  3: Thank you for your interest in contributing to SledHEAD.
  575:   487:   399:  311:  223:  4: 
  576:   488:   400:  312:  224:  5: By submitting a contribution, you agree to the following terms:
  577:   489:   401:  313:  225:  6: 
  578:   490:   402:  314:  226:  7: 1. **License Grant**  
  579:   491:   403:  315:  227:  8:    You hereby grant Marvin Bentley II ("Project Owner") an **irrevocable, perpetual, worldwide, royalty-free license** to use, reproduce, modify, adapt, publish, translate, sublicense, distribute, and create derivative works of your contribution, in any medium, for any purpose, including commercial purposes.
  580:   492:   404:  316:  228:  9: 
  581:   493:   405:  317:  229: 10: 2. **Ownership**  
  582:   494:   406:  318:  230: 11:    You retain ownership of your contribution. However, you agree that your contribution is licensed under the project's current open-source licenses (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets), and you grant the Project Owner the right to relicense your contribution for commercial, proprietary, or any other purposes as the Project Owner requres.
  583:   495:   407:  319:  231: 12: 
  584:   496:   408:  320:  232: 13: 3. **Warranties**  
  585:   497:   409:  321:  233: 14:    - You confirm that you are legally entitled to submit the contribution and that it does not violate any third-party rights.  
  586:   498:   410:  322:  234: 15:    - You confirm that the contribution is your original work, or you have obtained the necessary rights for its use.
  587:   499:   411:  323:  235: 16: 
  588:   500:   412:  324:  236: 17: 4. **Contribution Scope**  
  589:   501:   413:  325:  237: 18:    This agreement applies to any future contributions you make to SledHEAD unless you explicitly state otherwise.
  590:   502:   414:  326:  238: 19: 
  591:   503:   415:  327:  239: 20: 5. **No Obligation to Use**  
  592:   504:   416:  328:  240: 21:    The Project Owner is under no obligation to use, merge, or distribute your contributions.
  593:   505:   417:  329:  241: 22: 
  594:   506:   418:  330:  242: 23: ---
  595:   507:   419:  331:  243: 24: 
  596:   508:   420:  332:  244: 25: By submitting a contribution, you indicate that you have read, understood, and agree to the terms of this Contributor License Agreement.
  597:   509:   421:  333:  245: 26: 
  598:   510:   422:  334:  246: 27: ---
  599:   511:   423:  335:  247: 28: 
  600:   512:   424:  336:  248: 29: *Signed electronically via your submission of a Pull Request.*
  601:   513:   425:  337:  249: ````
  602:   514:   426:  338:  250: 
  603:   515:   427:  339:  251: ## File: docs/LICENSE.md
  604:   516:   428:  340:  252: ````markdown
  605:   517:   429:  341:  253:   1: # SledHEAD Dual License Agreement
  606:   518:   430:  342:  254:   2: Version 1.2 – March 2025
  607:   519:   431:  343:  255:   3: 
  608:   520:   432:  344:  256:   4: This License Agreement applies to SledHEAD (the "Game"), including its source code and assets, created by the original author Marvin Bentley II ("Licensor"). By copying, modifying, distributing, or otherwise using the Game or any of its components, you (the "Licensee") agree to the following terms:
  609:   521:   433:  345:  257:   5: 
  610:   522:   434:  346:  258:   6: ## 1. Definitions
  611:   523:   435:  347:  259:   7: 
  612:   524:   436:  348:  260:   8: * "Source Code": The software code of the Game, including all scripts, programs, and software files intended to produce the Game’s functionality.
  613:   525:   437:  349:  261:   9: * "Assets": All non-code content in the Game, including but not limited to artwork, images, textures, models, sprites, music, sound effects, voice, dialogue, level designs, animations, and any other audiovisual or creative works included with the Game.
  614:   526:   438:  350:  262:  10: * "Mod" or "Modification": Any derivative work that is based on or uses any portion of the Game’s Source Code or Assets, including add-ons, plugins, expansions, or fan-made content that extends or alters the Game.
  615:   527:   439:  351:  263:  11: * "Commercial Use": Use of the Game or its components that is intended for or directed toward commercial advantage or monetary compensation. (For clarity: selling the Game or Mods, charging money for access to the Game or Mods, or monetizing the Game’s Assets as standalone products are considered Commercial Use. However, monetization of gameplay videos/streams is addressed separately in Section 4.)
  616:   528:   440:  352:  264:  12: * "You" (or "Licensee"): Any individual or legal entity exercising the rights granted by this License (for example, a player, developer, or modder who uses the Game or its content).
  617:   529:   441:  353:  265:  13: * "Licensor": The original author and copyright holder of SledHEAD.
  618:   530:   442:  354:  266:  14: 
  619:   531:   443:  355:  267:  15: ## 2. Open Source License for Source Code
  620:   532:   444:  356:  268:  16: 
  621:   533:   445:  357:  269:  17: The Source Code of SledHEAD is licensed to you under the terms of the GNU Affero General Public License, version 3 (AGPLv3), or (at your option) any later version of the AGPL published by the Free Software Foundation. This means:
  622:   534:   446:  358:  270:  18: 
  623:   535:   447:  359:  271:  19: * You may use, study, copy, modify, and distribute the Source Code freely, provided you comply with the AGPLv3 terms. In particular, if you distribute your modified version of the Source Code or if you make it available for use over a network (e.g. running a modified game server for others to play), you must make your Source Code modifications publicly available under the same license (AGPLv3).
  624:   536:   448:  360:  272:  20: * The full text of the AGPLv3 is provided along with this agreement (usually in a file named AGPL-3.0.txt or similar). By accepting this License, you agree to abide by the conditions of AGPLv3 for the Game’s Source Code.
  625:   537:   449:  361:  273:  21: * No Additional Restrictions on Source Code: Except as expressly stated in this Agreement, you may not impose any further restrictions on the exercise of the rights granted or affirmed under the AGPLv3 for the Source Code. (In other words, the Source Code remains free and open under AGPLv3 terms whenever it is distributed or deployed, unless a separate Commercial License is obtained as described in Section 6.)
  626:   538:   450:  362:  274:  22: 
  627:   539:   451:  363:  275:  23: ## 3. Creative Commons License for Assets
  628:   540:   452:  364:  276:  24: 
  629:   541:   453:  365:  277:  25: All Assets of SledHEAD (non-code content) are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). Under this license:
  630:   542:   454:  366:  278:  26: 
  631:   543:   455:  367:  279:  27: * You are free to:
  632:   544:   456:  368:  280:  28:   * Share – copy and redistribute the Assets in any medium or format.
  633:   545:   457:  369:  281:  29:   * Adapt – remix, transform, and build upon the Assets for any non-commercial purpose.
  634:   546:   458:  370:  282:  30: * Attribution – You must give appropriate credit to the original author (see Section 5), provide a link to the CC BY-NC-SA 4.0 license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the Licensor endorses you or your use.
  635:   547:   459:  371:  283:  31: * NonCommercial – You may not use the Assets for commercial purposes. (Using the Assets or any derivative of them to generate revenue or for any commercial advantage is prohibited unless you have obtained a separate Commercial License as per Section 6.)
  636:   548:   460:  372:  284:  32: * ShareAlike – If you remix, transform, or build upon the Assets, you must distribute your contributions under the same license (CC BY-NC-SA 4.0) or a license that is more permissive. “More permissive” means any license that grants equal or greater rights to the public than CC BY-NC-SA (for example, you may choose to release your own original derivative Assets under CC BY-SA or CC BY, which would allow commercial use or omit the ShareAlike requirement, but you cannot apply a more restrictive license or make the assets wholly proprietary).
  637:   549:   461:  373:  285:  33: * The full text of the CC BY-NC-SA 4.0 license is provided with this agreement (or accessible via the Creative Commons website). By using the Game’s Assets, you agree to the terms of CC BY-NC-SA 4.0.
  638:   550:   462:  374:  286:  34: * No Commercial Exploitation of Assets: For clarity, you cannot sell, license, or otherwise commercially exploit the Game’s Assets (original or modified) on their own or as part of a product, except under a separate Commercial License (Section 6). For example, you cannot charge money for a soundtrack that includes the Game’s music, or include the Game’s art in a paid product, without permission.
  639:   551:   463:  375:  287:  35: 
  640:   552:   464:  376:  288:  36: ## 4. Permission for Videos, Streaming, and Screenshots
  641:   553:   465:  377:  289:  37: 
  642:   554:   466:  378:  290:  38: The Licensor explicitly grants permission to all users to capture, use, and share audiovisual content from the Game (including gameplay videos, streams, screenshots, and similar content), even if monetized, without needing any additional license or permission, as long as such use does not misrepresent the origin of the Game. This means:
  643:   555:   467:  379:  291:  39: 
  644:   556:   468:  380:  292:  40: * You may stream or record gameplay on platforms like Twitch, YouTube, etc., and you may monetize these videos/streams (for example, through ads, sponsorships, or donations). This use is allowed and considered non-commercial with respect to the Game’s Assets because it is promotional/fan content by the community. The NonCommercial restriction in Section 3 is waived for this specific type of content creation.
  645:   557:   469:  381:  293:  41: * You do not need to ask the Licensor for permission to create let’s play videos, reviews, or live streams of SledHEAD. This is encouraged as part of community engagement. Attribution (such as naming the Game) in the video/stream description or verbally is appreciated but not strictly required beyond what the platform norms are, since the content itself usually makes it clear it’s SledHEAD. (However, you still must not claim to be the creator of the Game.)
  646:   558:   470:  382:  294:  42: * This permission for videos/streams does not grant you the right to extract the Assets and use them separately in other commercial products (Section 3’s NonCommercial rule still applies to the Assets themselves). It only covers the use of recorded or displayed in-game content as part of video/stream content. For example, using a game’s music as background of an unrelated commercial video would not be covered by this clause, but showing the game’s music as it plays during gameplay footage is fine.
  647:   559:   471:  383:  295:  43: 
  648:   560:   472:  384:  296:  44: ## 5. Attribution Requirement
  649:   561:   473:  385:  297:  45: 
  650:   562:   474:  386:  298:  46: You must give appropriate credit to the original author (Licensor) when you distribute or publicly use the Game (or any substantial portion of it, including Mods). This is a condition of the CC BY-NC-SA license for Assets and is hereby made a condition of this overall license. The attribution should be placed in a manner appropriate to the medium:
  651:   563:   475:  387:  299:  47: 
  652:   564:   476:  388:  300:  48: * If you distribute the Game in unmodified form, include the original credits (which should already list the author) and license information. Typically, the Game already contains an in-game credits section or documentation listing the author and contributors — retain that.
  653:   565:   477:  389:  301:  49: * If you create a Mod or a fork of the Game, you must credit SledHEAD and the original author somewhere in your project. For example, in an “About” menu, “Credits” screen, README file, or documentation for your Mod, include a notice such as: “This project is based on SledHEAD, originally created by Marvin Bentley II. SledHEAD is © 2024 Marvin Bentley II and is licensed under AGPLv3 (code) and CC BY-NC-SA 4.0 (assets).” Adjust the wording as appropriate, but it should be reasonably prominent, as appropriate for the medium.
  654:   566:   478:  390:  302:  50: * If you use parts of the Source Code in another project, you must keep the copyright and license notices in those source files per AGPL requirements. Additionally, an attribution in your project’s documentation or credits to the SledHEAD project is required.
  655:   567:   479:  391:  303:  51: * The attribution requirement is not intended to be burdensome: it’s mainly to ensure the original creators are acknowledged. A single mention in a credits section or README is typically sufficient, as long as it's accessible to users of your product or Mod.
  656:   568:   480:  392:  304:  52: 
  657:   569:   481:  393:  305:  53: ## 6. Modding and Derivative Works
  658:   570:   482:  394:  306:  54: 
  659:   571:   483:  395:  307:  55: SledHEAD is mod-friendly and open to community contributions, under the following conditions:
  660:   572:   484:  396:  308:  56: 
  661:   573:   485:  397:  309:  57: * **Mods - Source Code:** If you create a Mod that includes or is based on the Game’s Source Code, the Mod’s source code must be released under the AGPLv3 (same as the Game) or an even more permissive open-source license. More permissive licenses include, for example, GNU GPLv3, MIT, Apache 2.0, etc., which do not impose additional restrictions beyond AGPL. This ensures that anyone who plays or uses your Mod has the same rights to obtain and modify the source. You cannot make a closed-source mod using the Game’s code without a separate Commercial License (see Section 7).
  662:   574:   486:  398:  310:  58: * **Mods - Assets:** If your Mod includes or modifies any of the Game’s Assets, then all such Assets in your Mod must be licensed under CC BY-NC-SA 4.0 (the same license as the base game assets) or a more permissive license. “More permissive” in this context could be, for example, CC BY-SA 4.0 (which allows commercial use but still requires ShareAlike) or CC BY 4.0 (which allows commercial use and no ShareAlike). You may choose a more permissive license for your original assets if you want to allow broader use, but you must at least allow the same scope of use that CC BY-NC-SA permits. You cannot put additional restrictions on derivatives of the Game’s Assets beyond CC BY-NC-SA.
  663:   575:   487:  399:  311:  59: * **No circumvention via Mods:** You may not create a Mod or derivative work that is essentially a way to evade the NonCommercial restriction on the original Assets. For example, you can’t repackage a level of SledHEAD as a “mod” and sell it, claiming the new level’s art is under a different license. Any part of a Mod derived from original Assets inherits the NonCommercial restriction.
  664:   576:   488:  400:  312:  60: * **Paid Mods:** SledHEAD’s open licenses are designed such that Mods are freely shareable and open. While charging money for a Mod is strongly discouraged under this license scheme, we acknowledge it can happen. If you choose to sell or paywall a Mod, you do so at your own risk under the license terms:
  665:   577:   489:  401:  313:  61:   * The Mod’s source code must still be AGPLv3 (or open-source), meaning anyone who obtains the Mod (even by purchasing it) must have access to the source and the right to redistribute it. Practically, this means once one person has bought your Mod, they have the legal right to share the code with others for free. You cannot revoke that right, so a paywalled open-source mod is of limited enforceability (the “paywall” is more of a donation or early access mechanism, not a true sale of exclusive rights).
  666:   578:   490:  402:  314:  62:   * Any of the Mod’s assets that derive from SledHEAD Assets carry the NonCommercial clause. This means you technically cannot charge for those assets or any product containing them. If your Mod contains only your own original assets and you license them under a more permissive license (such as CC BY-SA or even a proprietary license you own), you have more leeway to charge for the Mod. However, by including SledHEAD’s original game content or requiring the Game to run, your Mod is still a derivative work of the Game as a whole, and thus selling it without the Licensor’s permission could violate the spirit of the NonCommercial clause.
  667:   579:   491:  403:  315:  63:   * In summary: If you want to monetize a Mod, you should seek a Commercial License from the Licensor (see Section 7) to cover that, or ensure that your Mod is completely your own independent work and doesn’t include NonCommercial content. Otherwise, anyone is legally free to redistribute your Mod for non-commercial purposes (or as allowed by whatever license you chose) without paying, and the Licensor reserves the right to enforce the NonCommercial clause if needed.
  668:   580:   492:  404:  316:  64: * **Mods Must Credit Original:** As noted in Section 5, Mods should credit SledHEAD and the original author. Making mods open-source and crediting the base game helps build a healthy community and is a condition of using the Game’s content.
  669:   581:   493:  405:  317:  65: * **Upstream Contributions:** If you make improvements or fixes to the base Game’s Source Code (as opposed to separate mods), you are encouraged to contribute them back to the main project. You can do this by submitting patches or pull requests to the original repository. Note that by contributing, you agree that your contribution will be licensed under the same terms as this License (so it remains AGPL for code and CC BY-NC-SA for any assets you contribute, unless otherwise agreed). The Licensor may ask you to sign a contributor agreement (see Section 9) to clarify licensing of contributions.
  670:   582:   494:  406:  318:  66: 
  671:   583:   495:  407:  319:  67: ## 7. Commercial License Option
  672:   584:   496:  408:  320:  68: 
  673:   585:   497:  409:  321:  69: The Licensor offers the possibility of a separate Commercial License for parties interested in using SledHEAD in ways not permitted by the above open licenses (AGPL and CC BY-NC-SA). This could apply if, for example, you want to: distribute the game in a proprietary (closed-source) manner, use the Assets commercially, include SledHEAD in a commercial product, or otherwise not comply with AGPL/CC BY-NC-SA terms. The following terms govern the Commercial License option:
  674:   586:   498:  410:  322:  70: 
  675:   587:   499:  411:  323:  71: * **By Request:** You must contact the Licensor to request a Commercial License. Terms (including scope, duration, and fees) are negotiable on a case-by-case basis. For instance, the Licensor may offer a one-time purchase license, a revenue-sharing agreement, or a subscription model, depending on the nature of the use.
  676:   588:   500:  412:  324:  72: * **No Guaranteed Approval:** The Licensor has sole discretion to decide whether or not to grant a Commercial License to any requesting party. Simply requesting a Commercial License does not guarantee you will receive one. The Licensor may decline for any reason or require certain conditions.
  677:   589:   501:  413:  325:  73: * **Override of Open Terms:** A duly granted Commercial License will override or modify the AGPL and CC BY-NC-SA terms for the party to whom it is granted, as specified in that license agreement. For example, a Commercial License may allow you to keep your source code modifications proprietary, or to use the Assets in a commercial game, notwithstanding Sections 2 and 3. The exact permissions and exceptions will be written in that separate agreement. Unless and until you have a signed Commercial License, you are bound by the AGPL and CC BY-NC-SA terms described in this document.
  678:   590:   502:  414:  326:  74: * **Closed Source Allowed with Commercial License:** Under a Commercial License, the Licensor may permit you to create a closed-source derivative or include SledHEAD code in a larger proprietary project. This is an exception to the copyleft requirement, granted only through the Commercial License.
  679:   591:   503:  415:  327:  75: * **Written Agreement:** Any Commercial License will be provided in writing (which may be a separate contract or license document). It will detail the rights granted, any limitations, and the financial terms. You will likely be required to prominently credit the original author even in commercial use, unless otherwise agreed.
  680:   592:   504:  416:  328:  76: 
  681:   593:   505:  417:  329:  77: ## 8. Reservation of Rights and Future Relicensing
  682:   594:   506:  418:  330:  78: 
  683:   595:   507:  419:  331:  79: * **Ownership:** The Licensor (original author) retains all rights, title, and interest in SledHEAD and its Source Code and Assets, except for the licenses expressly granted to you under this Agreement. No trademark rights are granted (the name SledHEAD is not necessarily covered by this license—separate permissions may be needed to use the name or logos in commercial contexts).
  684:   596:   508:  420:  332:  80: * **Right to Relicense:** The Licensor reserves the right to relicense or release parts or all of the Game under different terms in the future, including more permissive open-source licenses. For example, the Licensor may later decide to release certain Assets under a license like CC BY 4.0 (which would allow commercial use) or even dedicate some components to the public domain. Similarly, future versions of the Source Code might be released under a license like MIT or GPL, etc., at the Licensor’s discretion.
  685:   597:   509:  421:  333:  81: * **Effect on Existing License:** Any such re-licensing by the Licensor in the future will not retroactively revoke the rights you've obtained under this Agreement. (For example, if you received the game under AGPL/CC BY-NC-SA, that specific release is still under those terms for you.) However, the Licensor may offer upgraded license terms for future versions or for specific components, which you can opt to use under those new terms.
  686:   598:   510:  422:  334:  82: * **Contributions from Others:** If the project receives contributions from other developers (community contributions), the Licensor will ensure that those contributions are either made under a contributor agreement or appropriate terms such that the Licensor can include them in future releases. This is to maintain the ability to relicense if needed. (See Section 9 about contributor agreements.)
  687:   599:   511:  423:  335:  83: * **No Obligation to Future Licensing:** Nothing in this clause guarantees that the Licensor will release a more permissive version, only that it’s a possibility. Users and contributors should be aware that license terms might be adjusted in future releases, but any such change will be clearly communicated and, if necessary, consent from contributors will be obtained.
  688:   600:   512:  424:  336:  84: 
  689:   601:   513:  425:  337:  85: ## 9. Contributor License Agreement (CLA) (for external contributors)
  690:   602:   514:  426:  338:  86: 
  691:   603:   515:  427:  339:  87: At present (initial release), all code and assets in SledHEAD are authored by the original Licensor. If you wish to contribute to the project (e.g., by submitting code or asset improvements), the Licensor may ask you to sign a Contributor License Agreement. A CLA typically confirms that: (a) you have the right to contribute what you send, (b) you grant the Licensor permission to use and relicense your contribution under this project’s license and potentially other licenses in the future, and (c) you understand your contribution is provided under the same open license to all users.
  692:   604:   516:  428:  340:  88: 
  693:   605:   517:  429:  341:  89: * **Necessity of CLA:** The CLA is intended to make future license changes or commercial licensing of the project smoother, by ensuring all contributors agree on how their contributions can be used. If you do not sign such an agreement, the Licensor might not be able to accept your contribution, especially if it’s significant, because it could complicate the ability to relicense or offer commercial terms later.
  694:   606:   518:  430:  342:  90: * **Timing:** You generally won’t need to sign a CLA until you are about to make the first contribution that will be merged into the project. Simply using or modding the game doesn’t require a CLA. It’s only for when you contribute code or assets back to the official project. The Licensor may publish the CLA text and a process (e.g., an online sign-off) when the project starts accepting outside contributions.
  695:   607:   519:  431:  343:  91: * **Contributor Rights:** Even after signing a CLA, you (as a contributor) still retain copyright to your contributions and you can reuse your contributed code elsewhere. The CLA just gives the Licensor a broad right to include your work in SledHEAD and relicense as needed (for instance, if in the future SledHEAD moves to a different license or a commercial dual-license model, your contribution can be included).
  696:   608:   520:  432:  344:  92: * **No CLA at Initial Release:** If you are simply downloading or using the game, this section doesn’t affect you. It’s informational in case the project grows with community help. The Licensor will announce when a CLA becomes required (likely before accepting the first non-trivial external commit).
  697:   609:   521:  433:  345:  93: 
  698:   610:   522:  434:  346:  94: ## 10. Disclaimer of Warranty
  699:   611:   523:  435:  347:  95: 
  700:   612:   524:  436:  348:  96: THE GAME (INCLUDING SOURCE CODE AND ASSETS) IS PROVIDED "AS IS" AND WITHOUT WARRANTY OF ANY KIND. To the fullest extent permitted by law, the Licensor disclaims all warranties, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement. You accept all risk as to the quality and performance of the Game. Should the Game prove defective, you assume the cost of all necessary servicing, repair, or correction. No oral or written information or advice provided by the Licensor shall create any warranty. (This disclaimer is in line with Section 15 of the AGPLv3 and Section 5 of CC BY-NC-SA 4.0.)
  701:   613:   525:  437:  349:  97: 
  702:   614:   526:  438:  350:  98: ## 11. Limitation of Liability
  703:   615:   527:  439:  351:  99: 
  704:   616:   528:  440:  352: 100: Under no circumstances and under no legal theory (including, without limitation, tort (including negligence), contract, or otherwise) shall the Licensor, or anyone who has contributed to the Game, be liable to you for any direct, indirect, incidental, consequential, special, or exemplary damages arising out of or relating to this License or the use of the Game, even if the Licensor has been advised of the possibility of such damages. In jurisdictions that do not allow the exclusion or limitation of certain damages, the Licensor’s liability shall be limited to the minimum extent permitted by law. You acknowledge that the Licensor is not liable for how you use the Game or Mods, or any outcomes of using it (for example, no liability for loss of data, loss of profits, or legal issues you might incur by violating this Agreement).
  705:   617:   529:  441:  353: 101: 
  706:   618:   530:  442:  354: 102: ## 12. General
  707:   619:   531:  443:  355: 103: 
  708:   620:   532:  444:  356: 104: * **Severability:** If any provision of this License is held to be unenforceable or invalid by a court of competent jurisdiction, that provision will be modified to the minimum extent necessary to make it enforceable (or severed if necessary), and the rest of the License will remain in effect.
  709:   621:   533:  445:  357: 105: * **No Endorsement:** Nothing in this License gives you rights to use the name, logos, or trademarks of SledHEAD or the Licensor for promotional purposes (aside from factual attribution as required). You cannot imply that your Mod or product is endorsed by the original author without separate permission.
  710:   622:   534:  446:  358: 106: * **License Acceptance:** By using the Game (or any of its Source Code or Assets), you indicate your acceptance of this License. If you do not agree to these terms, you do not have permission to use the Game or its contents.
  711:   623:   535:  447:  359: 107: * **Copyright Notice:** © 2024 Marvin Bentley II. All rights reserved, except as explicitly granted by this License.
  712:   624:   536:  448:  360: ````
  713:   625:   537:  449:  361: 
  714:   626:   538:  450:  362: ## File: js/mobs/mountainlion.js
  715:   627:   539:  451:  363: ````javascript
  716:   628:   540:  452:  364:  1: /* mountainlion.js - Mountain Lion Animal Module
  717:   629:   541:  453:  365:  2: // This module defines the mountain lion characteristics for the wildlife simulation.
  718:   630:   542:  454:  366:  3: // It registers itself with wildlife.js by calling registerAnimalType().
  719:   631:   543:  455:  367:  4: // Drawn in a style consistent with our bear and bird modules, with a pretty kitty flair.
  720:   632:   544:  456:  368:  5: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
  721:   633:   545:  457:  369:  6: */
  722:   634:   546:  458:  370:  7: (function() {
  723:   635:   547:  459:  371:  8:     // Helper function to draw a rectangle at an angle, centered at (cx, cy)
  724:   636:   548:  460:  372:  9:     function drawRectAtAngle(ctx, cx, cy, width, height, angleDeg, fillStyle) {
  725:   637:   549:  461:  373: 10:         let rad = angleDeg * Math.PI / 180;
  726:   638:   550:  462:  374: 11:         ctx.save();
  727:   639:   551:  463:  375: 12:         ctx.translate(cx, cy);
  728:   640:   552:  464:  376: 13:         ctx.rotate(rad);
  729:   641:   553:  465:  377: 14:         ctx.fillStyle = fillStyle;
  730:   642:   554:  466:  378: 15:         ctx.fillRect(-width / 2, -height / 2, width, height);
  731:   643:   555:  467:  379: 16:         ctx.restore();
  732:   644:   556:  468:  380: 17:     }
  733:   645:   557:  469:  381: 18:     var mountainLionData = {
  734:   646:   558:  470:  382: 19:         type: "mountainlion",
  735:   647:   559:  471:  383: 20:         spawnProbability: 2.0, // Very high spawn chance
  736:   648:   560:  472:  384: 21:         width: 50,
  737:   649:   561:  473:  385: 22:         height: 30,
  738:   650:   562:  474:  386: 23:         detectionRadius: 60,
  739:   651:   563:  475:  387: 24:         speed: 10,
  740:   652:   564:  476:  388: 25:         basePhotoBonus: 15, // Good bonus for a pretty kitty
  741:   653:   565:  477:  389: 26:         color: "#F9E79F",   // A soft golden color
  742:   654:   566:  478:  390: 27:         spawningBiomes: [
  743:   655:   567:  479:  391: 28:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
  744:   656:   568:  480:  392: 29:         ],
  745:   657:   569:  481:  393: 30:         customUpdate: null,
  746:   658:   570:  482:  394: 31:         customDraw: function(animal, screenY, ctx) {
  747:   659:   571:  483:  395: 32:             // Draw the body
  748:   660:   572:  484:  396: 33:             ctx.fillStyle = animal.color;
  749:   661:   573:  485:  397: 34:             ctx.fillRect(
  750:   662:   574:  486:  398: 35:                 animal.x - animal.width / 2,
  751:   663:   575:  487:  399: 36:                 screenY - animal.height / 2,
  752:   664:   576:  488:  400: 37:                 animal.width,
  753:   665:   577:  489:  401: 38:                 animal.height
  754:   666:   578:  490:  402: 39:             );
  755:   667:   579:  491:  403: 40:             // Draw left ear as a triangle
  756:   668:   580:  492:  404: 41:             ctx.beginPath();
  757:   669:   581:  493:  405: 42:             ctx.moveTo(animal.x - animal.width / 4, screenY - animal.height / 2);
  758:   670:   582:  494:  406: 43:             ctx.lineTo(animal.x - animal.width / 4 - 10, screenY - animal.height / 2 - 15);
  759:   671:   583:  495:  407: 44:             ctx.lineTo(animal.x - animal.width / 4 + 10, screenY - animal.height / 2 - 15);
  760:   672:   584:  496:  408: 45:             ctx.closePath();
  761:   673:   585:  497:  409: 46:             ctx.fillStyle = "#000000";
  762:   674:   586:  498:  410: 47:             ctx.fill();
  763:   675:   587:  499:  411: 48:             // Draw right ear
  764:   676:   588:  500:  412: 49:             ctx.beginPath();
  765:   677:   589:  501:  413: 50:             ctx.moveTo(animal.x + animal.width / 4, screenY - animal.height / 2);
  766:   678:   590:  502:  414: 51:             ctx.lineTo(animal.x + animal.width / 4 - 10, screenY - animal.height / 2 - 15);
  767:   679:   591:  503:  415: 52:             ctx.lineTo(animal.x + animal.width / 4 + 10, screenY - animal.height / 2 - 15);
  768:   680:   592:  504:  416: 53:             ctx.closePath();
  769:   681:   593:  505:  417: 54:             ctx.fill();
  770:   682:   594:  506:  418: 55:             // Draw a tail using an angled rectangle
  771:   683:   595:  507:  419: 56:             let tailPivotX = animal.x + animal.width / 2;
  772:   684:   596:  508:  420: 57:             let tailPivotY = screenY + animal.height / 2;
  773:   685:   597:  509:  421: 58:             let tailAngle = -45;
  774:   686:   598:  510:  422: 59:             let tailWidth = 20;
  775:   687:   599:  511:  423: 60:             let tailHeight = 8;
  776:   688:   600:  512:  424: 61:             drawRectAtAngle(ctx, 
  777:   689:   601:  513:  425: 62:                 tailPivotX + (tailWidth / 2) * Math.cos(tailAngle * Math.PI / 180),
  778:   690:   602:  514:  426: 63:                 tailPivotY + (tailWidth / 2) * Math.sin(tailAngle * Math.PI / 180),
  779:   691:   603:  515:  427: 64:                 tailWidth, 
  780:   692:   604:  516:  428: 65:                 tailHeight, 
  781:   693:   605:  517:  429: 66:                 tailAngle, 
  782:   694:   606:  518:  430: 67:                 animal.color
  783:   695:   607:  519:  431: 68:             );
  784:   696:   608:  520:  432: 69:             // Altitude indicator
  785:   697:   609:  521:  433: 70:             let t = 1 - (animal.altitude / 100);
  786:   698:   610:  522:  434: 71:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
  787:   699:   611:  523:  435: 72:             ctx.fillStyle = altitudeColor;
  788:   700:   612:  524:  436: 73:             ctx.fillRect(
  789:   701:   613:  525:  437: 74:                 animal.x + animal.width / 2 + 5,
  790:   702:   614:  526:  438: 75:                 screenY - 5,
  791:   703:   615:  527:  439: 76:                 10,
  792:   704:   616:  528:  440: 77:                 10
  793:   705:   617:  529:  441: 78:             );
  794:   706:   618:  530:  442: 79:         }
  795:   707:   619:  531:  443: 80:     };
  796:   708:   620:  532:  444: 81:     if (typeof registerAnimalType === 'function') {
  797:   709:   621:  533:  445: 82:         registerAnimalType(mountainLionData);
  798:   710:   622:  534:  446: 83:     } else {
  799:   711:   623:  535:  447: 84:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
  800:   712:   624:  536:  448: 85:     }
  801:   713:   625:  537:  449: 86: })();
  802:   714:   626:  538:  450: ````
  803:   715:   627:  539:  451: 
  804:   716:   628:  540:  452: ## File: js/camera.js
  805:   717:   629:  541:  453: ````javascript
  806:   718:   630:  542:  454:  1: // camera.js
  807:   719:   631:  543:  455:  2: // This file is responsible for handling the photography
  808:   720:   632:  544:  456:  3: // mechanics.
  809:   721:   633:  545:  457:  4: // Global variables for photo system
  810:   722:   634:  546:  458:  5: var lastPhotoTime = 0;
  811:   723:   635:  547:  459:  6: // ------------------- Photo (Critter) Minigame Logic -------------------
  812:   724:   636:  548:  460:  7: // Handles taking a photo of an animal when conditions are met.
  813:   725:   637:  549:  461:  8: function takePhoto() {
  814:   726:   638:  550:  462:  9:   let now = Date.now();
  815:   727:   639:  551:  463: 10:   if (now - lastPhotoTime < TWEAK.photoCooldown) return; // Enforce cooldown
  816:   728:   640:  552:  464: 11:   if (!activeAnimal || !isAnimalInsideCone(activeAnimal)) return;
  817:   729:   641:  553:  465: 12:   lastPhotoTime = now;
  818:   730:   642:  554:  466: 13:   let baseValue = TWEAK.basePhotoValue;
  819:   731:   643:  555:  467: 14:   // Altitude Bonus: exponential falloff within 50 units.
  820:   732:   644:  556:  468: 15:   let diffAlt = Math.abs(player.altitudeLine - activeAnimal.altitude);
  821:   733:   645:  557:  469: 16:   let altitudeMatchBonus;
  822:   734:   646:  558:  470: 17:   if (diffAlt > 50) {
  823:   735:   647:  559:  471: 18:     altitudeMatchBonus = 1;
  824:   736:   648:  560:  472: 19:   } else {
  825:   737:   649:  561:  473: 20:     altitudeMatchBonus = 1 + (TWEAK.altitudeMatchMultiplier - 1) * Math.exp(-diffAlt / 15);
  826:   738:   650:  562:  474: 21:   }
  827:   739:   651:  563:  475: 22:   // Center Bonus: based on the angle difference between camera direction and animal.
  828:   740:   652:  564:  476: 23:   let animalAngle = Math.atan2(activeAnimal.y - player.absY, activeAnimal.x - player.x) * (180 / Math.PI);
  829:   741:   653:  565:  477: 24:   if (animalAngle < 0) animalAngle += 360;
  830:   742:   654:  566:  478: 25:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
  831:   743:   655:  567:  479: 26:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
  832:   744:   656:  568:  480: 27:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
  833:   745:   657:  569:  481: 28:   let sweetSpotPercentage = 0.10 + (playerUpgrades.optimalOptics * 0.01);
  834:   746:   658:  570:  482: 29:   let sweetSpotAngle = coneAngle * sweetSpotPercentage;
  835:   747:   659:  571:  483: 30:   let centerBonus;
  836:   748:   660:  572:  484: 31:   if (diffAngle <= sweetSpotAngle) {
  837:   749:   661:  573:  485: 32:     centerBonus = TWEAK.centerPOVMultiplier;
  838:   750:   662:  574:  486: 33:   } else if (diffAngle < coneAngle / 2) {
  839:   751:   663:  575:  487: 34:     let factor = (diffAngle - sweetSpotAngle) / (coneAngle / 2 - sweetSpotAngle);
  840:   752:   664:  576:  488: 35:     centerBonus = 1 + (TWEAK.centerPOVMultiplier - 1) * Math.exp(-factor * 3);
  841:   753:   665:  577:  489: 36:   } else {
  842:   754:   666:  578:  490: 37:     centerBonus = 1;
  843:   755:   667:  579:  491: 38:   }
  844:   756:   668:  580:  492: 39:   // Movement Bonus and Animal Type Multiplier:
  845:   757:   669:  581:  493: 40:   let movementBonus = activeAnimal.state !== "sitting" ? TWEAK.fleeingAnimalMultiplier : 1;
  846:   758:   670:  582:  494: 41:   let animalTypeMultiplier = activeAnimal.type === "bear" ? TWEAK.bearMultiplier : TWEAK.birdMultiplier;
  847:   759:   671:  583:  495: 42:   let repeatPenalty = activeAnimal.hasBeenPhotographed ? TWEAK.repeatPhotoPenalty : 1;
  848:   760:   672:  584:  496: 43:   let totalMoney = Math.floor(baseValue * altitudeMatchBonus * centerBonus * movementBonus * animalTypeMultiplier * repeatPenalty);
  849:   761:   673:  585:  497: 44:   player.money += totalMoney;
  850:   762:   674:  586:  498: 45:   showMoneyGain(totalMoney, `(📸 ${activeAnimal.type})`);
  851:   763:   675:  587:  499: 46:   addFloatingText(`+$${totalMoney} 📸`, player.x, player.absY);
  852:   764:   676:  588:  500: 47:   console.log(`Captured ${activeAnimal.type}! Calculation details: Base=$${baseValue}, AltitudeBonus=${altitudeMatchBonus.toFixed(2)}, CenterBonus=${centerBonus.toFixed(2)}, MovementBonus=${movementBonus.toFixed(2)}, AnimalTypeMultiplier=${animalTypeMultiplier}, RepeatPenalty=${repeatPenalty}, Total=$${totalMoney}.`);
  853:   765:   677:  589:  501: 48:   // After taking a photo, animal should always flee
  854:   766:   678:  590:  502: 49:   if (activeAnimal.state === "sitting") {
  855:   767:   679:  591:  503: 50:     console.log(`Animal (${activeAnimal.type}) startled by camera - changing state from sitting to fleeing`);
  856:   768:   680:  592:  504: 51:     activeAnimal.state = "fleeing";
  857:   769:   681:  593:  505: 52:     activeAnimal.fleeingLogOnce = false; // Reset so we get the fleeing log message
  858:   770:   682:  594:  506: 53:   }
  859:   771:   683:  595:  507: 54:   activeAnimal.hasBeenPhotographed = true;
  860:   772:   684:  596:  508: 55: }
  861:   773:   685:  597:  509: 56: // Check if the animal is inside the camera cone
  862:   774:   686:  598:  510: 57: function isAnimalInsideCone(animal) {
  863:   775:   687:  599:  511: 58:   // Distance check
  864:   776:   688:  600:  512: 59:   let dx = animal.x - player.x;
  865:   777:   689:  601:  513: 60:   let dy = animal.y - player.absY;
  866:   778:   690:  602:  514: 61:   let distanceSquared = dx * dx + dy * dy;
  867:   779:   691:  603:  515: 62:   let maxDistance = TWEAK.maxAnimalPhotoDistance;
  868:   780:   692:  604:  516: 63:   if (distanceSquared > maxDistance * maxDistance) return false;
  869:   781:   693:  605:  517: 64:   // Angle check
  870:   782:   694:  606:  518: 65:   let animalAngle = Math.atan2(dy, dx) * (180 / Math.PI);
  871:   783:   695:  607:  519: 66:   if (animalAngle < 0) animalAngle += 360;
  872:   784:   696:  608:  520: 67:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
  873:   785:   697:  609:  521: 68:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
  874:   786:   698:  610:  522: 69:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
  875:   787:   699:  611:  523: 70:   return diffAngle <= coneAngle / 2;
  876:   788:   700:  612:  524: 71: }
  877:   789:   701:  613:  525: ````
  878:   790:   702:  614:  526: 
  879:   791:   703:  615:  527: ## File: js/jumpsled.js
  880:   792:   704:  616:  528: ````javascript
  881:   793:   705:  617:  529:  1: // jumpsled.js
  882:   794:   706:  618:  530:  2: // This file contains all jump-related functions for SledHEAD
  883:   795:   707:  619:  531:  3: function onPlayerJumpStart() {
  884:   796:   708:  620:  532:  4:   player.jumpStartTime = performance.now();
  885:   797:   709:  621:  533:  5:   player.jumpStartY = player.absY;
  886:   798:   710:  622:  534:  6:   player.jumpPeakY = player.absY;
  887:   799:   711:  623:  535:  7:   console.log("Jump initiated at Y:", player.jumpStartY.toFixed(1));
  888:   800:   712:  624:  536:  8:   unlockAudioContext();
  889:   801:   713:  625:  537:  9:   jumpOsc = audioCtx.createOscillator();
  890:   802:   714:  626:  538: 10:   jumpGain = audioCtx.createGain();
  891:   803:   715:  627:  539: 11:   jumpOsc.type = "sine";
  892:   804:   716:  628:  540: 12:   jumpGain.gain.setValueAtTime(0.3, audioCtx.currentTime);
  893:   805:   717:  629:  541: 13:   jumpOsc.connect(jumpGain);
  894:   806:   718:  630:  542: 14:   jumpGain.connect(audioCtx.destination);
  895:   807:   719:  631:  543: 15:   jumpOsc.start();
  896:   808:   720:  632:  544: 16:   // Drain stamina on jump initiation
  897:   809:   721:  633:  545: 17:   stamina.drainJump();
  898:   810:   722:  634:  546: 18: }
  899:   811:   723:  635:  547: 19: function onPlayerJumpPeak() {
  900:   812:   724:  636:  548: 20:   console.log("Reached peak of jump.");
  901:   813:   725:  637:  549: 21:   // Optionally add a sound effect here.
  902:   814:   726:  638:  550: 22: }
  903:   815:   727:  639:  551: 23: function cleanupJumpSound() {
  904:   816:   728:  640:  552: 24:   if (jumpOsc) {
  905:   817:   729:  641:  553: 25:     jumpOsc.stop();
  906:   818:   730:  642:  554: 26:     jumpOsc.disconnect();
  907:   819:   731:  643:  555: 27:     jumpOsc = null;
  908:   820:   732:  644:  556: 28:   }
  909:   821:   733:  645:  557: 29:   if (jumpGain) {
  910:   822:   734:  646:  558: 30:     jumpGain.disconnect();
  911:   823:   735:  647:  559: 31:     jumpGain = null;
  912:   824:   736:  648:  560: 32:   }
  913:   825:   737:  649:  561: 33: }
  914:   826:   738:  650:  562: 34: function onPlayerLand() {
  915:   827:   739:  651:  563: 35:   const jumpTime = (performance.now() - player.jumpStartTime) / 1000;
  916:   828:   740:  652:  564: 36:   const jumpHeight = player.jumpPeakY - player.jumpStartY;
  917:   829:   741:  653:  565: 37:   const totalDistance = player.absY - player.jumpStartY;
  918:   830:   742:  654:  566: 38:   console.log(`Jump complete! Time: ${jumpTime.toFixed(2)}s, Peak Height: ${jumpHeight.toFixed(1)}, Distance: ${totalDistance.toFixed(1)}`);
  919:   831:   743:  655:  567: 39:   cleanupJumpSound();
  920:   832:   744:  656:  568: 40:   stamina.resetJumpTrigger();
  921:   833:   745:  657:  569: 41: }
  922:   834:   746:  658:  570: ````
  923:   835:   747:  659:  571: 
  924:   836:   748:  660:  572: ## File: js/loan.js
  925:   837:   749:  661:  573: ````javascript
  926:   838:   750:  662:  574:  1: /* loan.js - Loan Management & Victory Condition */
  927:   839:   751:  663:  575:  2: // Loan System
  928:   840:   752:  664:  576:  3: var loanAmount = 100000; // Initial loan amount
  929:   841:   753:  665:  577:  4: function updateLoanButton() {
  930:   842:   754:  666:  578:  5:   const loanButton = document.getElementById("payLoan");
  931:   843:   755:  667:  579:  6:   if (loanButton) {
  932:   844:   756:  668:  580:  7:     if (loanAmount <= 0) {
  933:   845:   757:  669:  581:  8:       loanButton.textContent = "LOAN PAID OFF!";
  934:   846:   758:  670:  582:  9:       loanButton.disabled = true;
  935:   847:   759:  671:  583: 10:       // Show victory banner
  936:   848:   760:  672:  584: 11:       document.getElementById("victoryBanner").style.display = "block";
  937:   849:   761:  673:  585: 12:     } else {
  938:   850:   762:  674:  586: 13:       loanButton.textContent = `Pay Loan ($${loanAmount.toLocaleString()})`;
  939:   851:   763:  675:  587: 14:       loanButton.disabled = false;
  940:   852:   764:  676:  588: 15:     }
  941:   853:   765:  677:  589: 16:   }
  942:   854:   766:  678:  590: 17: }
  943:   855:   767:  679:  591: 18: function payLoan() {
  944:   856:   768:  680:  592: 19:   if (player.money > 0) {
  945:   857:   769:  681:  593: 20:     const payment = Math.min(player.money, loanAmount);
  946:   858:   770:  682:  594: 21:     loanAmount -= payment;
  947:   859:   771:  683:  595: 22:     player.money -= payment;
  948:   860:   772:  684:  596: 23:     updateMoneyDisplay(); // This function should update the on-screen money (see below)
  949:   861:   773:  685:  597: 24:     updateLoanButton();
  950:   862:   774:  686:  598: 25:     if (loanAmount <= 0) {
  951:   863:   775:  687:  599: 26:       console.log("🎉 Loan paid off! Victory!");
  952:   864:   776:  688:  600: 27:       playTone(800, "sine", 0.3, 0.5); // Victory sound
  953:   865:   777:  689:  601: 28:     } else {
  954:   866:   778:  690:  602: 29:       console.log(`💰 Loan payment: $${payment}. Remaining: $${loanAmount}`);
  955:   867:   779:  691:  603: 30:       playTone(600, "sine", 0.1, 0.2); // Payment sound
  956:   868:   780:  692:  604: 31:     }
  957:   869:   781:  693:  605: 32:   }
  958:   870:   782:  694:  606: 33: }
  959:   871:   783:  695:  607: ````
  960:   872:   784:  696:  608: 
  961:   873:   785:  697:  609: ## File: js/notify.js
  962:   874:   786:  698:  610: ````javascript
  963:   875:   787:  699:  611:  1: /* notify.js */
  964:   876:   788:  700:  612:  2: // Generic notification framework for SledHEAD
  965:   877:   789:  701:  613:  3: // Base function to show notifications
  966:   878:   790:  702:  614:  4: function showNotification(message, colorRGBA = [255, 255, 0, 0.8], duration = 1000) {
  967:   879:   791:  703:  615:  5:   // Generate a unique ID based on the message
  968:   880:   792:  704:  616:  6:   const notificationId = 'notification-' + message.replace(/\s+/g, '-').toLowerCase();
  969:   881:   793:  705:  617:  7:   // Create or get the notification element
  970:   882:   794:  706:  618:  8:   let notification = document.getElementById(notificationId);
  971:   883:   795:  707:  619:  9:   if (!notification) {
  972:   884:   796:  708:  620: 10:     notification = document.createElement('div');
  973:   885:   797:  709:  621: 11:     notification.id = notificationId;
  974:   886:   798:  710:  622: 12:     notification.style.position = 'fixed';
  975:   887:   799:  711:  623: 13:     notification.style.top = '50%';
  976:   888:   800:  712:  624: 14:     notification.style.left = '50%';
  977:   889:   801:  713:  625: 15:     notification.style.transform = 'translate(-50%, -50%)';
  978:   890:   802:  714:  626: 16:     notification.style.backgroundColor = `rgba(${colorRGBA[0]}, ${colorRGBA[1]}, ${colorRGBA[2]}, ${colorRGBA[3]})`;
  979:   891:   803:  715:  627: 17:     notification.style.color = 'white';
  980:   892:   804:  716:  628: 18:     notification.style.padding = '20px';
  981:   893:   805:  717:  629: 19:     notification.style.borderRadius = '10px';
  982:   894:   806:  718:  630: 20:     notification.style.fontWeight = 'bold';
  983:   895:   807:  719:  631: 21:     notification.style.fontSize = '24px';
  984:   896:   808:  720:  632: 22:     notification.style.textAlign = 'center';
  985:   897:   809:  721:  633: 23:     notification.style.zIndex = '1000';
  986:   898:   810:  722:  634: 24:     notification.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.7)';
  987:   899:   811:  723:  635: 25:     document.body.appendChild(notification);
  988:   900:   812:  724:  636: 26:   }
  989:   901:   813:  725:  637: 27:   // Set content and make visible
  990:   902:   814:  726:  638: 28:   notification.textContent = message;
  991:   903:   815:  727:  639: 29:   notification.style.display = 'block';
  992:   904:   816:  728:  640: 30:   // Fade out after specified duration
  993:   905:   817:  729:  641: 31:   setTimeout(() => {
  994:   906:   818:  730:  642: 32:     notification.style.transition = 'opacity 0.5s';
  995:   907:   819:  731:  643: 33:     notification.style.opacity = '0';
  996:   908:   820:  732:  644: 34:     setTimeout(() => {
  997:   909:   821:  733:  645: 35:       notification.style.display = 'none';
  998:   910:   822:  734:  646: 36:       notification.style.opacity = '1';
  999:   911:   823:  735:  647: 37:       notification.style.transition = '';
 1000:   912:   824:  736:  648: 38:     }, 500);
 1001:   913:   825:  737:  649: 39:   }, duration);
 1002:   914:   826:  738:  650: 40: }
 1003:   915:   827:  739:  651: 41: // Specific notification types with predefined colors
 1004:   916:   828:  740:  652: 42: function showErrorNotification(message, duration = 1000) {
 1005:   917:   829:  741:  653: 43:   // Red background for errors
 1006:   918:   830:  742:  654: 44:   showNotification(message, [255, 0, 0, 0.8], duration);
 1007:   919:   831:  743:  655: 45:   // Play an error sound if available
 1008:   920:   832:  744:  656: 46:   if (typeof playTone === 'function') {
 1009:   921:   833:  745:  657: 47:     playTone(200, "square", 0.3, 0.4);
 1010:   922:   834:  746:  658: 48:   }
 1011:   923:   835:  747:  659: 49: }
 1012:   924:   836:  748:  660: 50: function showSuccessNotification(message, duration = 1000) {
 1013:   925:   837:  749:  661: 51:   // Green background for success
 1014:   926:   838:  750:  662: 52:   showNotification(message, [0, 128, 0, 0.8], duration);
 1015:   927:   839:  751:  663: 53:   // Play a positive sound if available
 1016:   928:   840:  752:  664: 54:   if (typeof playTone === 'function') {
 1017:   929:   841:  753:  665: 55:     playTone(600, "sine", 0.3, 0.4);
 1018:   930:   842:  754:  666: 56:   }
 1019:   931:   843:  755:  667: 57: }
 1020:   932:   844:  756:  668: 58: function showWarningNotification(message, duration = 1000) {
 1021:   933:   845:  757:  669: 59:   // Yellow background for warnings
 1022:   934:   846:  758:  670: 60:   showNotification(message, [255, 255, 0, 0.8], duration);
 1023:   935:   847:  759:  671: 61:   // Play a warning sound if available
 1024:   936:   848:  760:  672: 62:   if (typeof playTone === 'function') {
 1025:   937:   849:  761:  673: 63:     playTone(400, "triangle", 0.3, 0.4);
 1026:   938:   850:  762:  674: 64:   }
 1027:   939:   851:  763:  675: 65: }
 1028:   940:   852:  764:  676: 66: function showInfoNotification(message, duration = 1000) {
 1029:   941:   853:  765:  677: 67:   // Blue background for info
 1030:   942:   854:  766:  678: 68:   showNotification(message, [0, 0, 255, 0.8], duration);
 1031:   943:   855:  767:  679: 69: }
 1032:   944:   856:  768:  680: 70: // Export functions for use in other modules
 1033:   945:   857:  769:  681: 71: if (typeof module !== 'undefined' && module.exports) {
 1034:   946:   858:  770:  682: 72:   module.exports = {
 1035:   947:   859:  771:  683: 73:     showNotification,
 1036:   948:   860:  772:  684: 74:     showErrorNotification,
 1037:   949:   861:  773:  685: 75:     showSuccessNotification,
 1038:   950:   862:  774:  686: 76:     showWarningNotification,
 1039:   951:   863:  775:  687: 77:     showInfoNotification
 1040:   952:   864:  776:  688: 78:   };
 1041:   953:   865:  777:  689: 79: }
 1042:   954:   866:  778:  690: ````
 1043:   955:   867:  779:  691: 
 1044:   956:   868:  780:  692: ## File: js/registry.js
 1045:   957:   869:  781:  693: ````javascript
 1046:   958:   870:  782:  694:  1: /*
 1047:   959:   871:  783:  695:  2: // registry.js
 1048:   960:   872:  784:  696:  3: export const functionRegistry = {};
 1049:   961:   873:  785:  697:  4: export function register(name) {
 1050:   962:   874:  786:  698:  5:   return function(target, key, descriptor) {
 1051:   963:   875:  787:  699:  6:     const fnName = name || key;
 1052:   964:   876:  788:  700:  7:     functionRegistry[fnName] = descriptor.value;
 1053:   965:   877:  789:  701:  8:     return descriptor;
 1054:   966:   878:  790:  702:  9:   };
 1055:   967:   879:  791:  703: 10: }
 1056:   968:   880:  792:  704: 11: */
 1057:   969:   881:  793:  705: 12: // registry.js
 1058:   970:   882:  794:  706: 13: export const functionRegistry = {};
 1059:   971:   883:  795:  707: 14: export function register(name, fn) {
 1060:   972:   884:  796:  708: 15:   functionRegistry[name] = fn;
 1061:   973:   885:  797:  709: 16: }
 1062:   974:   886:  798:  710: ````
 1063:   975:   887:  799:  711: 
 1064:   976:   888:  800:  712: ## File: js/trees.js
 1065:   977:   889:  801:  713: ````javascript
 1066:   978:   890:  802:  714:  1: /* trees.js - Tree Generation and Rendering */
 1067:   979:   891:  803:  715:  2: /**
 1068:   980:   892:  804:  716:  3:  * Generates clusters of trees across the terrain
 1069:   981:   893:  805:  717:  4:  * @param {Object} options Configuration options
 1070:   982:   894:  806:  718:  5:  * @param {number} options.count Number of tree clusters to generate
 1071:   983:   895:  807:  719:  6:  * @param {Object} options.terrainBounds Bounds for placing trees {xMin, xMax, yMin, yMax}
 1072:   984:   896:  808:  720:  7:  * @param {number} options.playerSize Reference size to scale trees relative to player
 1073:   985:   897:  809:  721:  8:  * @returns {Array} Array of tree objects with positions and dimensions
 1074:   986:   898:  810:  722:  9:  */
 1075:   987:   899:  811:  723: 10: function generateTreeClumps(options) {
 1076:   988:   900:  812:  724: 11:   const { count, terrainBounds, playerSize } = options;
 1077:   989:   901:  813:  725: 12:   const clumps = [];
 1078:   990:   902:  814:  726: 13:   for (let i = 0; i < count; i++) {
 1079:   991:   903:  815:  727: 14:     const clump = [];
 1080:   992:   904:  816:  728: 15:     const clumpSize = 2 + Math.floor(Math.random() * 3); // 2-4 trees per clump
 1081:   993:   905:  817:  729: 16:     const clumpX = terrainBounds.xMin + Math.random() * (terrainBounds.xMax - terrainBounds.xMin);
 1082:   994:   906:  818:  730: 17:     const clumpY = terrainBounds.yMin + Math.random() * (terrainBounds.yMax - terrainBounds.yMin);
 1083:   995:   907:  819:  731: 18:     for (let j = 0; j < clumpSize; j++) {
 1084:   996:   908:  820:  732: 19:       const sizeFactor = 0.5 + Math.random() * 1.5; // 50–200%
 1085:   997:   909:  821:  733: 20:       const squareSize = playerSize * sizeFactor;
 1086:   998:   910:  822:  734: 21:       const offsetX = (Math.random() - 0.5) * playerSize * 2;
 1087:   999:   911:  823:  735: 22:       const offsetY = (Math.random() - 0.5) * playerSize * 2;
 1088:  1000:   912:  824:  736: 23:       clump.push({
 1089:  1001:   913:  825:  737: 24:         x: clumpX + offsetX,
 1090:  1002:   914:  826:  738: 25:         y: clumpY + offsetY,
 1091:  1003:   915:  827:  739: 26:         width: squareSize,
 1092:  1004:   916:  828:  740: 27:         height: squareSize,
 1093:  1005:   917:  829:  741: 28:         type: 'tree'
 1094:  1006:   918:  830:  742: 29:       });
 1095:  1007:   919:  831:  743: 30:     }
 1096:  1008:   920:  832:  744: 31:     clumps.push(...clump);
 1097:  1009:   921:  833:  745: 32:   }
 1098:  1010:   922:  834:  746: 33:   return clumps;
 1099:  1011:   923:  835:  747: 34: }
 1100:  1012:   924:  836:  748: 35: /**
 1101:  1013:   925:  837:  749: 36:  * Helper function to draw a more visually interesting tree
 1102:  1014:   926:  838:  750: 37:  * @param {CanvasRenderingContext2D} ctx Canvas context to draw on
 1103:  1015:   927:  839:  751: 38:  * @param {Object} tree Tree object with position and size information
 1104:  1016:   928:  840:  752: 39:  */
 1105:  1017:   929:  841:  753: 40: function drawTree(ctx, tree) {
 1106:  1018:   930:  842:  754: 41:   // Tree trunk (brown rectangle)
 1107:  1019:   931:  843:  755: 42:   const trunkWidth = tree.width * 0.3;
 1108:  1020:   932:  844:  756: 43:   const trunkHeight = tree.height * 0.6;
 1109:  1021:   933:  845:  757: 44:   const trunkX = tree.x + (tree.width - trunkWidth) / 2;
 1110:  1022:   934:  846:  758: 45:   const trunkY = tree.y + tree.height - trunkHeight;
 1111:  1023:   935:  847:  759: 46:   ctx.fillStyle = "#8B4513"; // saddle brown for trunk
 1112:  1024:   936:  848:  760: 47:   ctx.fillRect(trunkX, trunkY, trunkWidth, trunkHeight);
 1113:  1025:   937:  849:  761: 48:   // Tree canopy (green circle)
 1114:  1026:   938:  850:  762: 49:   const canopyRadius = tree.width * 0.6;
 1115:  1027:   939:  851:  763: 50:   const canopyCenterX = tree.x + tree.width / 2;
 1116:  1028:   940:  852:  764: 51:   const canopyCenterY = tree.y + tree.height * 0.4;
 1117:  1029:   941:  853:  765: 52:   ctx.fillStyle = "#228B22"; // forest green
 1118:  1030:   942:  854:  766: 53:   ctx.beginPath();
 1119:  1031:   943:  855:  767: 54:   ctx.arc(canopyCenterX, canopyCenterY, canopyRadius, 0, Math.PI * 2);
 1120:  1032:   944:  856:  768: 55:   ctx.fill();
 1121:  1033:   945:  857:  769: 56: }
 1122:  1034:   946:  858:  770: ````
 1123:  1035:   947:  859:  771: 
 1124:  1036:   948:  860:  772: ## File: js/upgradeData.js
 1125:  1037:   949:  861:  773: ````javascript
 1126:  1038:   950:  862:  774:   1: // js/upgradeData.js
 1127:  1039:   951:  863:  775:   2: export const upgradeCategories = [
 1128:  1040:   952:  864:  776:   3:     {
 1129:  1041:   953:  865:  777:   4:       name: "Personal Upgrades",
 1130:  1042:   954:  866:  778:   5:       type: "player",
 1131:  1043:   955:  867:  779:   6:       upgrades: [
 1132:  1044:   956:  868:  780:   7:         {
 1133:  1045:   957:  869:  781:   8:           key: "rocketSurgery",
 1134:  1046:   958:  870:  782:   9:           label: "Rocket Surgery",
 1135:  1047:   959:  871:  783:  10:           desc: "Boosts top speed & acceleration for faster downhill runs.",
 1136:  1048:   960:  872:  784:  11:           max: 10,
 1137:  1049:   961:  873:  785:  12:           icon: "🚀"
 1138:  1050:   962:  874:  786:  13:         },
 1139:  1051:   963:  875:  787:  14:         {
 1140:  1052:   964:  876:  788:  15:           key: "optimalOptics",
 1141:  1053:   965:  877:  789:  16:           label: "Optimal Optics",
 1142:  1054:   966:  878:  790:  17:           desc: "Frees focus & boosts fan engagement for easier weaving.",
 1143:  1055:   967:  879:  791:  18:           max: 10,
 1144:  1056:   968:  880:  792:  19:           icon: "📸"
 1145:  1057:   969:  881:  793:  20:         },
 1146:  1058:   970:  882:  794:  21:         {
 1147:  1059:   971:  883:  795:  22:           key: "sledDurability",
 1148:  1060:   972:  884:  796:  23:           label: "Sled Durability",
 1149:  1061:   973:  885:  797:  24:           desc: "Reinforce your sled to withstand bigger impacts.",
 1150:  1062:   974:  886:  798:  25:           max: 10,
 1151:  1063:   975:  887:  799:  26:           icon: "🛷"
 1152:  1064:   976:  888:  800:  27:         },
 1153:  1065:   977:  889:  801:  28:         {
 1154:  1066:   978:  890:  802:  29:           key: "fancierFootwear",
 1155:  1067:   979:  891:  803:  30:           label: "Fancier Footwear",
 1156:  1068:   980:  892:  804:  31:           desc: "Less time climbing, more time sledding.",
 1157:  1069:   981:  893:  805:  32:           max: 10,
 1158:  1070:   982:  894:  806:  33:           icon: "👢"
 1159:  1071:   983:  895:  807:  34:         },
 1160:  1072:   984:  896:  808:  35:         {
 1161:  1073:   985:  897:  809:  36:           key: "grapplingAnchor",
 1162:  1074:   986:  898:  810:  37:           label: "Grappling Anchor",
 1163:  1075:   987:  899:  811:  38:           desc: "Hook onto terrain to swing into tricky spots.",
 1164:  1076:   988:  900:  812:  39:           max: 0,
 1165:  1077:   989:  901:  813:  40:           icon: "🪝"
 1166:  1078:   990:  902:  814:  41:         },
 1167:  1079:   991:  903:  815:  42:         {
 1168:  1080:   992:  904:  816:  43:           key: "attendLegDay",
 1169:  1081:   993:  905:  817:  44:           label: "Attend Leg Day",
 1170:  1082:   994:  906:  818:  45:           desc: "Reduce stamina cost for climbing back up.",
 1171:  1083:   995:  907:  819:  46:           max: 0,
 1172:  1084:   996:  908:  820:  47:           icon: "🏋️"
 1173:  1085:   997:  909:  821:  48:         },
 1174:  1086:   998:  910:  822:  49:         {
 1175:  1087:   999:  911:  823:  50:           key: "shortcutAwareness",
 1176:  1088:  1000:  912:  824:  51:           label: "Shortcut Awareness",
 1177:  1089:  1001:  913:  825:  52:           desc: "Reveal hidden shortcuts & groomed trails.",
 1178:  1090:  1002:  914:  826:  53:           max: 0,
 1179:  1091:  1003:  915:  827:  54:           icon: "🗺️"
 1180:  1092:  1004:  916:  828:  55:         },
 1181:  1093:  1005:  917:  829:  56:         {
 1182:  1094:  1006:  918:  830:  57:           key: "crowdHypeman",
 1183:  1095:  1007:  919:  831:  58:           label: "Crowd Hypeman",
 1184:  1096:  1008:  920:  832:  59:           desc: "Perform tricks near fans for boosts.",
 1185:  1097:  1009:  921:  833:  60:           max: 0,
 1186:  1098:  1010:  922:  834:  61:           icon: "📣"
 1187:  1099:  1011:  923:  835:  62:         },
 1188:  1100:  1012:  924:  836:  63:         {
 1189:  1101:  1013:  925:  837:  64:           key: "crowdWeaver",
 1190:  1102:  1014:  926:  838:  65:           label: "Crowd Weaver",
 1191:  1103:  1015:  927:  839:  66:           desc: "Crowds move aside more often.",
 1192:  1104:  1016:  928:  840:  67:           max: 0,
 1193:  1105:  1017:  929:  841:  68:           icon: "🧍‍♂️"
 1194:  1106:  1018:  930:  842:  69:         },
 1195:  1107:  1019:  931:  843:  70:         {
 1196:  1108:  1020:  932:  844:  71:           key: "weatherWarrior",
 1197:  1109:  1021:  933:  845:  72:           label: "Weather Warrior",
 1198:  1110:  1022:  934:  846:  73:           desc: "Storms & blizzards barely slow you down.",
 1199:  1111:  1023:  935:  847:  74:           max: 0,
 1200:  1112:  1024:  936:  848:  75:           icon: "🌨️"
 1201:  1113:  1025:  937:  849:  76:         }
 1202:  1114:  1026:  938:  850:  77:       ]
 1203:  1115:  1027:  939:  851:  78:     },
 1204:  1116:  1028:  940:  852:  79:     {
 1205:  1117:  1029:  941:  853:  80:       name: "Mountain Upgrades",
 1206:  1118:  1030:  942:  854:  81:       type: "mountain",
 1207:  1119:  1031:  943:  855:  82:       upgrades: [
 1208:  1120:  1032:  944:  856:  83:         {
 1209:  1121:  1033:  945:  857:  84:           key: "skiLifts",
 1210:  1122:  1034:  946:  858:  85:           label: "High-Speed Ski Lift Expansion",
 1211:  1123:  1035:  947:  859:  86:           desc: "Ride lifts faster & attract more visitors.",
 1212:  1124:  1036:  948:  860:  87:           max: 0,
 1213:  1125:  1037:  949:  861:  88:           icon: "🎿"
 1214:  1126:  1038:  950:  862:  89:         },
 1215:  1127:  1039:  951:  863:  90:         {
 1216:  1128:  1040:  952:  864:  91:           key: "snowmobileRentals",
 1217:  1129:  1041:  953:  865:  92:           label: "Snowmobile Rentals",
 1218:  1130:  1042:  954:  866:  93:           desc: "Rent them out or ride them yourself.",
 1219:  1131:  1043:  955:  867:  94:           max: 0,
 1220:  1132:  1044:  956:  868:  95:           icon: "🏍️"
 1221:  1133:  1045:  957:  869:  96:         },
 1222:  1134:  1046:  958:  870:  97:         {
 1223:  1135:  1047:  959:  871:  98:           key: "eateries",
 1224:  1136:  1048:  960:  872:  99:           label: "Eateries & Snack Bars",
 1225:  1137:  1049:  961:  873: 100:           desc: "Restore stamina and make money.",
 1226:  1138:  1050:  962:  874: 101:           max: 0,
 1227:  1139:  1051:  963:  875: 102:           icon: "🍔"
 1228:  1140:  1052:  964:  876: 103:         },
 1229:  1141:  1053:  965:  877: 104:         {
 1230:  1142:  1054:  966:  878: 105:           key: "groomedTrails",
 1231:  1143:  1055:  967:  879: 106:           label: "Groomed Trails",
 1232:  1144:  1056:  968:  880: 107:           desc: "Smoothed paths with boosty sections.",
 1233:  1145:  1057:  969:  881: 108:           max: 0,
 1234:  1146:  1058:  970:  882: 109:           icon: "🥾"
 1235:  1147:  1059:  971:  883: 110:         },
 1236:  1148:  1060:  972:  884: 111:         {
 1237:  1149:  1061:  973:  885: 112:           key: "firstAidStations",
 1238:  1150:  1062:  974:  886: 113:           label: "Safety & First-Aid Stations",
 1239:  1151:  1063:  975:  887: 114:           desc: "Heal and reduce collision penalties.",
 1240:  1152:  1064:  976:  888: 115:           max: 0,
 1241:  1153:  1065:  977:  889: 116:           icon: "⛑️"
 1242:  1154:  1066:  978:  890: 117:         },
 1243:  1155:  1067:  979:  891: 118:         {
 1244:  1156:  1068:  980:  892: 119:           key: "scenicOverlooks",
 1245:  1157:  1069:  981:  893: 120:           label: "Scenic Overlook Platforms",
 1246:  1158:  1070:  982:  894: 121:           desc: "Lure tourists or use as shortcuts.",
 1247:  1159:  1071:  983:  895: 122:           max: 0,
 1248:  1160:  1072:  984:  896: 123:           icon: "📷"
 1249:  1161:  1073:  985:  897: 124:         },
 1250:  1162:  1074:  986:  898: 125:         {
 1251:  1163:  1075:  987:  899: 126:           key: "advertisingRamps",
 1252:  1164:  1076:  988:  900: 127:           label: "Advertising Ramp-Billboards",
 1253:  1165:  1077:  989:  901: 128:           desc: "Sponsor revenue and epic trick ramps.",
 1254:  1166:  1078:  990:  902: 129:           max: 0,
 1255:  1167:  1079:  991:  903: 130:           icon: "📢"
 1256:  1168:  1080:  992:  904: 131:         },
 1257:  1169:  1081:  993:  905: 132:         {
 1258:  1170:  1082:  994:  906: 133:           key: "resortLodges",
 1259:  1171:  1083:  995:  907: 134:           label: "Resort Amenities & Lodges",
 1260:  1172:  1084:  996:  908: 135:           desc: "Start from fancy remote lodges.",
 1261:  1173:  1085:  997:  909: 136:           max: 0,
 1262:  1174:  1086:  998:  910: 137:           icon: "🏨"
 1263:  1175:  1087:  999:  911: 138:         },
 1264:  1176:  1088: 1000:  912: 139:         {
 1265:  1177:  1089: 1001:  913: 140:           key: "nightLighting",
 1266:  1178:  1090: 1002:  914: 141:           label: "Night Lighting Upgrades",
 1267:  1179:  1091: 1003:  915: 142:           desc: "Unlock night sledding.",
 1268:  1180:  1092: 1004:  916: 143:           max: 0,
 1269:  1181:  1093: 1005:  917: 144:           icon: "🌙"
 1270:  1182:  1094: 1006:  918: 145:         },
 1271:  1183:  1095: 1007:  919: 146:         {
 1272:  1184:  1096: 1008:  920: 147:           key: "weatherControl",
 1273:  1185:  1097: 1009:  921: 148:           label: "Weather Control Systems",
 1274:  1186:  1098: 1010:  922: 149:           desc: "Control the challenge for higher rewards.",
 1275:  1187:  1099: 1011:  923: 150:           max: 0,
 1276:  1188:  1100: 1012:  924: 151:           icon: "🌦️"
 1277:  1189:  1101: 1013:  925: 152:         }
 1278:  1190:  1102: 1014:  926: 153:       ]
 1279:  1191:  1103: 1015:  927: 154:     }
 1280:  1192:  1104: 1016:  928: 155:   ];
 1281:  1193:  1105: 1017:  929: ````
 1282:  1194:  1106: 1018:  930: 
 1283:  1195:  1107: 1019:  931: ## File: js/upgradeLogic.js
 1284:  1196:  1108: 1020:  932: ````javascript
 1285:  1197:  1109: 1021:  933:   1: // js/upgradeLogic.js
 1286:  1198:  1110: 1022:  934:   2: // Using global utility functions instead of imports
 1287:  1199:  1111: 1023:  935:   3: // Track upgrade levels
 1288:  1200:  1112: 1024:  936:   4: let playerUpgrades = {
 1289:  1201:  1113: 1025:  937:   5:   rocketSurgery: 0,
 1290:  1202:  1114: 1026:  938:   6:   optimalOptics: 0,
 1291:  1203:  1115: 1027:  939:   7:   sledDurability: 0,
 1292:  1204:  1116: 1028:  940:   8:   fancierFootwear: 0,
 1293:  1205:  1117: 1029:  941:   9:   grapplingAnchor: 0,
 1294:  1206:  1118: 1030:  942:  10:   attendLegDay: 0,
 1295:  1207:  1119: 1031:  943:  11:   shortcutAwareness: 0,
 1296:  1208:  1120: 1032:  944:  12:   crowdHypeman: 0,
 1297:  1209:  1121: 1033:  945:  13:   crowdWeaver: 0,
 1298:  1210:  1122: 1034:  946:  14:   weatherWarrior: 0
 1299:  1211:  1123: 1035:  947:  15: };
 1300:  1212:  1124: 1036:  948:  16: let mountainUpgrades = {
 1301:  1213:  1125: 1037:  949:  17:   skiLifts: 0,
 1302:  1214:  1126: 1038:  950:  18:   snowmobileRentals: 0,
 1303:  1215:  1127: 1039:  951:  19:   eateries: 0,
 1304:  1216:  1128: 1040:  952:  20:   groomedTrails: 0,
 1305:  1217:  1129: 1041:  953:  21:   firstAidStations: 0,
 1306:  1218:  1130: 1042:  954:  22:   scenicOverlooks: 0,
 1307:  1219:  1131: 1043:  955:  23:   advertisingRamps: 0,
 1308:  1220:  1132: 1044:  956:  24:   resortLodges: 0,
 1309:  1221:  1133: 1045:  957:  25:   nightLighting: 0,
 1310:  1222:  1134: 1046:  958:  26:   weatherControl: 0
 1311:  1223:  1135: 1047:  959:  27: };
 1312:  1224:  1136: 1048:  960:  28: const upgradeMaxLevel = {
 1313:  1225:  1137: 1049:  961:  29:   rocketSurgery: 10,
 1314:  1226:  1138: 1050:  962:  30:   optimalOptics: 10,
 1315:  1227:  1139: 1051:  963:  31:   sledDurability: 10,
 1316:  1228:  1140: 1052:  964:  32:   fancierFootwear: 10,
 1317:  1229:  1141: 1053:  965:  33:   grapplingAnchor: 0,
 1318:  1230:  1142: 1054:  966:  34:   attendLegDay: 0,
 1319:  1231:  1143: 1055:  967:  35:   shortcutAwareness: 0,
 1320:  1232:  1144: 1056:  968:  36:   crowdHypeman: 0,
 1321:  1233:  1145: 1057:  969:  37:   crowdWeaver: 0,
 1322:  1234:  1146: 1058:  970:  38:   weatherWarrior: 0,
 1323:  1235:  1147: 1059:  971:  39:   skiLifts: 0,
 1324:  1236:  1148: 1060:  972:  40:   snowmobileRentals: 0,
 1325:  1237:  1149: 1061:  973:  41:   eateries: 0,
 1326:  1238:  1150: 1062:  974:  42:   groomedTrails: 0,
 1327:  1239:  1151: 1063:  975:  43:   firstAidStations: 0,
 1328:  1240:  1152: 1064:  976:  44:   scenicOverlooks: 0,
 1329:  1241:  1153: 1065:  977:  45:   advertisingRamps: 0,
 1330:  1242:  1154: 1066:  978:  46:   resortLodges: 0,
 1331:  1243:  1155: 1067:  979:  47:   nightLighting: 0,
 1332:  1244:  1156: 1068:  980:  48:   weatherControl: 0
 1333:  1245:  1157: 1069:  981:  49: };
 1334:  1246:  1158: 1070:  982:  50: function getUpgradeCost(upgradeKey, currentLevel) {
 1335:  1247:  1159: 1071:  983:  51:   return Math.floor(100 * Math.pow(1.1, currentLevel + 1));
 1336:  1248:  1160: 1072:  984:  52: }
 1337:  1249:  1161: 1073:  985:  53: function updateMoneyDisplay() {
 1338:  1250:  1162: 1074:  986:  54:   const moneyText = document.getElementById("moneyText");
 1339:  1251:  1163: 1075:  987:  55:   if (moneyText) {
 1340:  1252:  1164: 1076:  988:  56:     moneyText.textContent = "Money: $" + player.money;
 1341:  1253:  1165: 1077:  989:  57:   }
 1342:  1254:  1166: 1078:  990:  58: }
 1343:  1255:  1167: 1079:  991:  59: function getUpgradeDisplayText(upgradeKey, currentLevel, maxLevel) {
 1344:  1256:  1168: 1080:  992:  60:   let text = formatUpgradeName(upgradeKey) + ` (Lv ${currentLevel}/${maxLevel})`;
 1345:  1257:  1169: 1081:  993:  61:   if (maxLevel > 0 && currentLevel < maxLevel) {
 1346:  1258:  1170: 1082:  994:  62:     let cost = getUpgradeCost(upgradeKey, currentLevel);
 1347:  1259:  1171: 1083:  995:  63:     text += " – Cost: $" + cost;
 1348:  1260:  1172: 1084:  996:  64:   }
 1349:  1261:  1173: 1085:  997:  65:   return text;
 1350:  1262:  1174: 1086:  998:  66: }
 1351:  1263:  1175: 1087:  999:  67: function initUpgradeButton(upgradeKey, upgradeValue) {
 1352:  1264:  1176: 1088: 1000:  68:   const maxLevel = upgradeMaxLevel[upgradeKey];
 1353:  1265:  1177: 1089: 1001:  69:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
 1354:  1266:  1178: 1090: 1002:  70:   const button = document.getElementById(btnId);
 1355:  1267:  1179: 1091: 1003:  71:   button.innerText = getUpgradeDisplayText(upgradeKey, upgradeValue, maxLevel);
 1356:  1268:  1180: 1092: 1004:  72:   if (maxLevel === 0 || upgradeValue >= maxLevel) {
 1357:  1269:  1181: 1093: 1005:  73:     button.disabled = true;
 1358:  1270:  1182: 1094: 1006:  74:   }
 1359:  1271:  1183: 1095: 1007:  75: }
 1360:  1272:  1184: 1096: 1008:  76: function purchaseUpgrade(upgradeType, upgradeKey) {
 1361:  1273:  1185: 1097: 1009:  77:   const currentLevel = upgradeType[upgradeKey];
 1362:  1274:  1186: 1098: 1010:  78:   const maxLevel = upgradeMaxLevel[upgradeKey];
 1363:  1275:  1187: 1099: 1011:  79:   if (maxLevel === 0 || currentLevel >= maxLevel) {
 1364:  1276:  1188: 1100: 1012:  80:     console.log("Upgrade", upgradeKey, "is locked or already maxed.");
 1365:  1277:  1189: 1101: 1013:  81:     return;
 1366:  1278:  1190: 1102: 1014:  82:   }
 1367:  1279:  1191: 1103: 1015:  83:   const cost = getUpgradeCost(upgradeKey, currentLevel);
 1368:  1280:  1192: 1104: 1016:  84:   if (player.money < cost) {
 1369:  1281:  1193: 1105: 1017:  85:     console.log("Not enough money to purchase", upgradeKey, ". Cost:", cost, "Money:", player.money);
 1370:  1282:  1194: 1106: 1018:  86:     return;
 1371:  1283:  1195: 1107: 1019:  87:   }
 1372:  1284:  1196: 1108: 1020:  88:   player.money -= cost;
 1373:  1285:  1197: 1109: 1021:  89:   upgradeType[upgradeKey]++;
 1374:  1286:  1198: 1110: 1022:  90:   const newLevel = upgradeType[upgradeKey];
 1375:  1287:  1199: 1111: 1023:  91:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
 1376:  1288:  1200: 1112: 1024:  92:   document.getElementById(btnId).innerText = getUpgradeDisplayText(upgradeKey, newLevel, maxLevel);
 1377:  1289:  1201: 1113: 1025:  93:   if (newLevel >= maxLevel) {
 1378:  1290:  1202: 1114: 1026:  94:     document.getElementById(btnId).disabled = true;
 1379:  1291:  1203: 1115: 1027:  95:   }
 1380:  1292:  1204: 1116: 1028:  96:   updateMoneyDisplay();
 1381:  1293:  1205: 1117: 1029:  97:   console.log("Purchased upgrade", upgradeKey, "New level:", newLevel, "Remaining money:", player.money);
 1382:  1294:  1206: 1118: 1030:  98: }
 1383:  1295:  1207: 1119: 1031:  99: // Export all necessary variables and functions
 1384:  1296:  1208: 1120: 1032: 100: export {
 1385:  1297:  1209: 1121: 1033: 101:   playerUpgrades,
 1386:  1298:  1210: 1122: 1034: 102:   mountainUpgrades,
 1387:  1299:  1211: 1123: 1035: 103:   upgradeMaxLevel,
 1388:  1300:  1212: 1124: 1036: 104:   getUpgradeCost,
 1389:  1301:  1213: 1125: 1037: 105:   getUpgradeDisplayText,
 1390:  1302:  1214: 1126: 1038: 106:   initUpgradeButton,
 1391:  1303:  1215: 1127: 1039: 107:   updateMoneyDisplay,
 1392:  1304:  1216: 1128: 1040: 108:   purchaseUpgrade
 1393:  1305:  1217: 1129: 1041: 109: };
 1394:  1306:  1218: 1130: 1042: ````
 1395:  1307:  1219: 1131: 1043: 
 1396:  1308:  1220: 1132: 1044: ## File: js/upgrades.js
 1397:  1309:  1221: 1133: 1045: ````javascript
 1398:  1310:  1222: 1134: 1046:  1: // js/upgrades.js
 1399:  1311:  1223: 1135: 1047:  2: import { upgradeCategories } from './upgradeData.js';
 1400:  1312:  1224: 1136: 1048:  3: import { 
 1401:  1313:  1225: 1137: 1049:  4:   playerUpgrades, 
 1402:  1314:  1226: 1138: 1050:  5:   mountainUpgrades, 
 1403:  1315:  1227: 1139: 1051:  6:   upgradeMaxLevel, 
 1404:  1316:  1228: 1140: 1052:  7:   purchaseUpgrade, 
 1405:  1317:  1229: 1141: 1053:  8:   getUpgradeCost,
 1406:  1318:  1230: 1142: 1054:  9:   getUpgradeDisplayText 
 1407:  1319:  1231: 1143: 1055: 10: } from './upgradeLogic.js';
 1408:  1320:  1232: 1144: 1056: 11: // Using global capitalizeFirstLetter instead of importing it
 1409:  1321:  1233: 1145: 1057: 12: function createUpgradeElement(upgrade, isPlayerUpgrade = true) {
 1410:  1322:  1234: 1146: 1058: 13:   const upgradeType = isPlayerUpgrade ? playerUpgrades : mountainUpgrades;
 1411:  1323:  1235: 1147: 1059: 14:   const currentLevel = upgradeType[upgrade.key];
 1412:  1324:  1236: 1148: 1060: 15:   const maxLevel = upgradeMaxLevel[upgrade.key];
 1413:  1325:  1237: 1149: 1061: 16:   const cost = getUpgradeCost(upgrade.key, currentLevel);
 1414:  1326:  1238: 1150: 1062: 17:   const entry = document.createElement('div');
 1415:  1327:  1239: 1151: 1063: 18:   entry.className = 'upgrade-entry';
 1416:  1328:  1240: 1152: 1064: 19:   const button = document.createElement('button');
 1417:  1329:  1241: 1153: 1065: 20:   const btnId = `upgrade${capitalizeFirstLetter(upgrade.key)}`;
 1418:  1330:  1242: 1154: 1066: 21:   button.id = btnId;
 1419:  1331:  1243: 1155: 1067: 22:   button.innerText = getUpgradeDisplayText(upgrade.key, currentLevel, maxLevel);
 1420:  1332:  1244: 1156: 1068: 23:   // Disable if maxed or locked
 1421:  1333:  1245: 1157: 1069: 24:   if (maxLevel === 0 || currentLevel >= maxLevel) {
 1422:  1334:  1246: 1158: 1070: 25:     button.disabled = true;
 1423:  1335:  1247: 1159: 1071: 26:   }
 1424:  1336:  1248: 1160: 1072: 27:   button.addEventListener('click', () => {
 1425:  1337:  1249: 1161: 1073: 28:     purchaseUpgrade(upgradeType, upgrade.key);
 1426:  1338:  1250: 1162: 1074: 29:   });
 1427:  1339:  1251: 1163: 1075: 30:   const desc = document.createElement('p');
 1428:  1340:  1252: 1164: 1076: 31:   desc.className = 'upgrade-desc';
 1429:  1341:  1253: 1165: 1077: 32:   desc.textContent = upgrade.desc;
 1430:  1342:  1254: 1166: 1078: 33:   entry.appendChild(button);
 1431:  1343:  1255: 1167: 1079: 34:   entry.appendChild(desc);
 1432:  1344:  1256: 1168: 1080: 35:   return entry;
 1433:  1345:  1257: 1169: 1081: 36: }
 1434:  1346:  1258: 1170: 1082: 37: function renderUpgradeMenu() {
 1435:  1347:  1259: 1171: 1083: 38:   const container = document.getElementById('dynamic-upgrade-columns');
 1436:  1348:  1260: 1172: 1084: 39:   if (!container) return;
 1437:  1349:  1261: 1173: 1085: 40:   upgradeCategories.forEach(category => {
 1438:  1350:  1262: 1174: 1086: 41:     const column = document.createElement('div');
 1439:  1351:  1263: 1175: 1087: 42:     column.className = 'upgrade-column';
 1440:  1352:  1264: 1176: 1088: 43:     const header = document.createElement('h2');
 1441:  1353:  1265: 1177: 1089: 44:     header.textContent = category.name;
 1442:  1354:  1266: 1178: 1090: 45:     column.appendChild(header);
 1443:  1355:  1267: 1179: 1091: 46:     const isPlayerUpgrade = category.type === "player";
 1444:  1356:  1268: 1180: 1092: 47:     category.upgrades.forEach(upgrade => {
 1445:  1357:  1269: 1181: 1093: 48:       const element = createUpgradeElement(upgrade, isPlayerUpgrade);
 1446:  1358:  1270: 1182: 1094: 49:       column.appendChild(element);
 1447:  1359:  1271: 1183: 1095: 50:     });
 1448:  1360:  1272: 1184: 1096: 51:     container.appendChild(column);
 1449:  1361:  1273: 1185: 1097: 52:   });
 1450:  1362:  1274: 1186: 1098: 53: }
 1451:  1363:  1275: 1187: 1099: 54: renderUpgradeMenu();
 1452:  1364:  1276: 1188: 1100: ````
 1453:  1365:  1277: 1189: 1101: 
 1454:  1366:  1278: 1190: 1102: ## File: js/uphill.js
 1455:  1367:  1279: 1191: 1103: ````javascript
 1456:  1368:  1280: 1192: 1104:  1: /* uphill.js - Uphill Movement & Camera Control */
 1457:  1369:  1281: 1193: 1105:  2: // Handle all uphill movement, camera controls, and related mechanics
 1458:  1370:  1282: 1194: 1106:  3: function updateUphill(deltaTime) {
 1459:  1371:  1283: 1195: 1107:  4:   let upSpeed = TWEAK.baseUpSpeed + (playerUpgrades.fancierFootwear * TWEAK.fancierFootwearUpSpeedPerLevel);
 1460:  1372:  1284: 1196: 1108:  5:   // Vertical movement
 1461:  1373:  1285: 1197: 1109:  6:   if (keysDown["w"]) { player.absY -= upSpeed; }
 1462:  1374:  1286: 1198: 1110:  7:   if (keysDown["s"]) { player.absY += upSpeed; }
 1463:  1375:  1287: 1199: 1111:  8:   // Horizontal movement with bounds checking
 1464:  1376:  1288: 1200: 1112:  9:   let newXUphill = player.x;
 1465:  1377:  1289: 1201: 1113: 10:   if (keysDown["a"]) { newXUphill -= upSpeed; }
 1466:  1378:  1290: 1202: 1114: 11:   if (keysDown["d"]) { newXUphill += upSpeed; }
 1467:  1379:  1291: 1203: 1115: 12:   player.x = clamp(newXUphill, player.width/2, canvas.width - player.width/2);
 1468:  1380:  1292: 1204: 1116: 13:   // Prevent going beyond mountain bounds vertically
 1469:  1381:  1293: 1205: 1117: 14:   player.absY = clamp(player.absY, 0, mountainHeight);
 1470:  1382:  1294: 1206: 1118: 15:   // Camera and altitude control
 1471:  1383:  1295: 1207: 1119: 16:   if (keysDown["ArrowLeft"]) { player.cameraAngle -= 2; }
 1472:  1384:  1296: 1208: 1120: 17:   if (keysDown["ArrowRight"]) { player.cameraAngle += 2; }
 1473:  1385:  1297: 1209: 1121: 18:   if (keysDown["ArrowUp"]) { player.altitudeLine = Math.max(0, player.altitudeLine - 2); }
 1474:  1386:  1298: 1210: 1122: 19:   if (keysDown["ArrowDown"]) { player.altitudeLine = Math.min(100, player.altitudeLine + 2); }
 1475:  1387:  1299: 1211: 1123: 20:   // Normalize camera angle
 1476:  1388:  1300: 1212: 1124: 21:   if (player.cameraAngle < 0) player.cameraAngle += 360;
 1477:  1389:  1301: 1213: 1125: 22:   if (player.cameraAngle >= 360) player.cameraAngle -= 360;
 1478:  1390:  1302: 1214: 1126: 23:   // Reset horizontal velocity in uphill mode
 1479:  1391:  1303: 1215: 1127: 24:   player.xVel = 0;
 1480:  1392:  1304: 1216: 1128: 25:   // Check for collisions with terrain
 1481:  1393:  1305: 1217: 1129: 26:   terrain.forEach(obstacle => {
 1482:  1394:  1306: 1218: 1130: 27:     if (checkCollision(
 1483:  1395:  1307: 1219: 1131: 28:         player.x - player.width / 2, player.absY - player.height / 2,
 1484:  1396:  1308: 1220: 1132: 29:         player.width, player.height,
 1485:  1397:  1309: 1221: 1133: 30:         obstacle.x, obstacle.y,
 1486:  1398:  1310: 1222: 1134: 31:         obstacle.width, obstacle.height
 1487:  1399:  1311: 1223: 1135: 32:     )) {
 1488:  1400:  1312: 1224: 1136: 33:       console.log("Collision on uphill.");
 1489:  1401:  1313: 1225: 1137: 34:       resolveCollision(player, obstacle);
 1490:  1402:  1314: 1226: 1138: 35:     }
 1491:  1403:  1315: 1227: 1139: 36:   });
 1492:  1404:  1316: 1228: 1140: 37:   // Call animal update from wildlife.js
 1493:  1405:  1317: 1229: 1141: 38:   updateAnimal();
 1494:  1406:  1318: 1230: 1142: 39:   // Return to house if player reaches bottom of mountain
 1495:  1407:  1319: 1231: 1143: 40:   if (player.absY >= mountainHeight) {
 1496:  1408:  1320: 1232: 1144: 41:     player.absY = mountainHeight;
 1497:  1409:  1321: 1233: 1145: 42:     console.log("Reached bottom. Returning to house.");
 1498:  1410:  1322: 1234: 1146: 43:     changeState(GameState.HOUSE);
 1499:  1411:  1323: 1235: 1147: 44:   }
 1500:  1412:  1324: 1236: 1148: 45: }
 1501:  1413:  1325: 1237: 1149: ````
 1502:  1414:  1326: 1238: 1150: 
 1503:  1415:  1327: 1239: 1151: ## File: styles.css
 1504:  1416:  1328: 1240: 1152: ````css
 1505:  1417:  1329: 1241: 1153:   1: /* gameplay.css */
 1506:  1418:  1330: 1242: 1154:   2: /* Styles for the gameplay phase (canvas-based) */
 1507:  1419:  1331: 1243: 1155:   3: #game-screen {
 1508:  1420:  1332: 1244: 1156:   4:   position: absolute;
 1509:  1421:  1333: 1245: 1157:   5:   top: 50px;
 1510:  1422:  1334: 1246: 1158:   6:   left: 0;
 1511:  1423:  1335: 1247: 1159:   7:   width: 100%;
 1512:  1424:  1336: 1248: 1160:   8:   height: calc(100% - 50px);
 1513:  1425:  1337: 1249: 1161:   9:   /* No fixed width/height here—the Phaser Scale Manager will resize the canvas */
 1514:  1426:  1338: 1250: 1162:  10: }
 1515:  1427:  1339: 1251: 1163:  11: #gameCanvas {
 1516:  1428:  1340: 1252: 1164:  12:   width: 100%;
 1517:  1429:  1341: 1253: 1165:  13:   height: 100%;
 1518:  1430:  1342: 1254: 1166:  14:   display: block;
 1519:  1431:  1343: 1255: 1167:  15:   background-color: #87CEEB;
 1520:  1432:  1344: 1256: 1168:  16:   border: none;
 1521:  1433:  1345: 1257: 1169:  17: }
 1522:  1434:  1346: 1258: 1170:  18: /* house.css */
 1523:  1435:  1347: 1259: 1171:  19: /* Styles for the house phase & upgrade menu */
 1524:  1436:  1348: 1260: 1172:  20: #upgrade-menu {
 1525:  1437:  1349: 1261: 1173:  21:   position: absolute;
 1526:  1438:  1350: 1262: 1174:  22:   top: 50px;
 1527:  1439:  1351: 1263: 1175:  23:   left: 0;
 1528:  1440:  1352: 1264: 1176:  24:   width: 100%;
 1529:  1441:  1353: 1265: 1177:  25:   height: calc(100% - 50px);
 1530:  1442:  1354: 1266: 1178:  26:   background-color: rgba(0, 0, 0, 0.9);
 1531:  1443:  1355: 1267: 1179:  27:   padding: 20px;
 1532:  1444:  1356: 1268: 1180:  28:   box-sizing: border-box;
 1533:  1445:  1357: 1269: 1181:  29:   display: block;
 1534:  1446:  1358: 1270: 1182:  30:   overflow-y: auto;
 1535:  1447:  1359: 1271: 1183:  31: }
 1536:  1448:  1360: 1272: 1184:  32: .upgrade-menu-columns {
 1537:  1449:  1361: 1273: 1185:  33:   display: flex;
 1538:  1450:  1362: 1274: 1186:  34:   justify-content: space-around;
 1539:  1451:  1363: 1275: 1187:  35:   align-items: flex-start;
 1540:  1452:  1364: 1276: 1188:  36:   flex-wrap: wrap;
 1541:  1453:  1365: 1277: 1189:  37: }
 1542:  1454:  1366: 1278: 1190:  38: .upgrade-column {
 1543:  1455:  1367: 1279: 1191:  39:   width: 45%;
 1544:  1456:  1368: 1280: 1192:  40:   margin: 10px 0;
 1545:  1457:  1369: 1281: 1193:  41: }
 1546:  1458:  1370: 1282: 1194:  42: .upgrade-column h2 {
 1547:  1459:  1371: 1283: 1195:  43:   text-align: center;
 1548:  1460:  1372: 1284: 1196:  44:   margin-bottom: 10px;
 1549:  1461:  1373: 1285: 1197:  45: }
 1550:  1462:  1374: 1286: 1198:  46: .upgrade-entry {
 1551:  1463:  1375: 1287: 1199:  47:   margin-bottom: 15px;
 1552:  1464:  1376: 1288: 1200:  48: }
 1553:  1465:  1377: 1289: 1201:  49: .upgrade-entry button {
 1554:  1466:  1378: 1290: 1202:  50:   width: 100%;
 1555:  1467:  1379: 1291: 1203:  51:   margin: 5px 0 2px 0;
 1556:  1468:  1380: 1292: 1204:  52:   padding: 10px;
 1557:  1469:  1381: 1293: 1205:  53:   font-size: 16px;
 1558:  1470:  1382: 1294: 1206:  54:   background-color: #007bff;
 1559:  1471:  1383: 1295: 1207:  55:   color: white;
 1560:  1472:  1384: 1296: 1208:  56:   border: none;
 1561:  1473:  1385: 1297: 1209:  57:   border-radius: 5px;
 1562:  1474:  1386: 1298: 1210:  58:   cursor: pointer;
 1563:  1475:  1387: 1299: 1211:  59:   transition: background-color 0.2s ease;
 1564:  1476:  1388: 1300: 1212:  60: }
 1565:  1477:  1389: 1301: 1213:  61: .upgrade-entry button:hover {
 1566:  1478:  1390: 1302: 1214:  62:   background-color: #0056b3;
 1567:  1479:  1391: 1303: 1215:  63: }
 1568:  1480:  1392: 1304: 1216:  64: .upgrade-entry button:disabled {
 1569:  1481:  1393: 1305: 1217:  65:   background-color: #555;
 1570:  1482:  1394: 1306: 1218:  66:   cursor: not-allowed;
 1571:  1483:  1395: 1307: 1219:  67: }
 1572:  1484:  1396: 1308: 1220:  68: .upgrade-desc {
 1573:  1485:  1397: 1309: 1221:  69:   font-size: 14px;
 1574:  1486:  1398: 1310: 1222:  70:   line-height: 1.2;
 1575:  1487:  1399: 1311: 1223:  71:   margin: 0;
 1576:  1488:  1400: 1312: 1224:  72:   color: #ccc;
 1577:  1489:  1401: 1313: 1225:  73: }
 1578:  1490:  1402: 1314: 1226:  74: #bestTimeText {
 1579:  1491:  1403: 1315: 1227:  75:   margin-top: 20px;
 1580:  1492:  1404: 1316: 1228:  76:   text-align: center;
 1581:  1493:  1405: 1317: 1229:  77:   color: #fff;
 1582:  1494:  1406: 1318: 1230:  78: }
 1583:  1495:  1407: 1319: 1231:  79: #startGame {
 1584:  1496:  1408: 1320: 1232:  80:   display: block;
 1585:  1497:  1409: 1321: 1233:  81:   margin: 10px auto;
 1586:  1498:  1410: 1322: 1234:  82:   font-size: 16px;
 1587:  1499:  1411: 1323: 1235:  83:   padding: 8px 16px;
 1588:  1500:  1412: 1324: 1236:  84:   cursor: pointer;
 1589:  1501:  1413: 1325: 1237:  85:   background-color: #28a745;
 1590:  1502:  1414: 1326: 1238:  86:   border: none;
 1591:  1503:  1415: 1327: 1239:  87:   border-radius: 5px;
 1592:  1504:  1416: 1328: 1240:  88:   transition: background-color 0.2s ease;
 1593:  1505:  1417: 1329: 1241:  89: }
 1594:  1506:  1418: 1330: 1242:  90: #startGame:hover {
 1595:  1507:  1419: 1331: 1243:  91:   background-color: #218838;
 1596:  1508:  1420: 1332: 1244:  92: }
 1597:  1509:  1421: 1333: 1245:  93: /* Global UI elements (title, money display) */
 1598:  1510:  1422: 1334: 1246:  94: h1 {
 1599:  1511:  1423: 1335: 1247:  95:   text-align: center;
 1600:  1512:  1424: 1336: 1248:  96:   margin-top: 10px;
 1601:  1513:  1425: 1337: 1249:  97:   color: #000;
 1602:  1514:  1426: 1338: 1250:  98:   font-size: 36px;
 1603:  1515:  1427: 1339: 1251:  99:   font-weight: bold;
 1604:  1516:  1428: 1340: 1252: 100: }
 1605:  1517:  1429: 1341: 1253: 101: /* Improved money display */
 1606:  1518:  1430: 1342: 1254: 102: #moneyDisplay {
 1607:  1519:  1431: 1343: 1255: 103:   position: fixed;
 1608:  1520:  1432: 1344: 1256: 104:   top: 10px;
 1609:  1521:  1433: 1345: 1257: 105:   right: 10px;
 1610:  1522:  1434: 1346: 1258: 106:   font-size: 20px;
 1611:  1523:  1435: 1347: 1259: 107:   background-color: rgba(0, 0, 0, 0.9);
 1612:  1524:  1436: 1348: 1260: 108:   padding: 12px 16px;
 1613:  1525:  1437: 1349: 1261: 109:   border-radius: 10px;
 1614:  1526:  1438: 1350: 1262: 110:   color: #FFD700;
 1615:  1527:  1439: 1351: 1263: 111:   font-weight: bold;
 1616:  1528:  1440: 1352: 1264: 112:   z-index: 1000;
 1617:  1529:  1441: 1353: 1265: 113: }
 1618:  1530:  1442: 1354: 1266: 114: /* Live money updates should stand out */
 1619:  1531:  1443: 1355: 1267: 115: #moneyText {
 1620:  1532:  1444: 1356: 1268: 116:   font-size: 22px;
 1621:  1533:  1445: 1357: 1269: 117:   font-weight: bold;
 1622:  1534:  1446: 1358: 1270: 118:   color: #FFD700;
 1623:  1535:  1447: 1359: 1271: 119:   transition: transform 0.1s ease-in-out, color 0.2s ease-in-out;
 1624:  1536:  1448: 1360: 1272: 120: }
 1625:  1537:  1449: 1361: 1273: 121: /* Bounce effect when money updates */
 1626:  1538:  1450: 1362: 1274: 122: .money-increase {
 1627:  1539:  1451: 1363: 1275: 123:   transform: scale(1.2);
 1628:  1540:  1452: 1364: 1276: 124:   color: #FFFFFF;
 1629:  1541:  1453: 1365: 1277: 125: }
 1630:  1542:  1454: 1366: 1278: ````
 1631:  1543:  1455: 1367: 1279: 
 1632:  1544:  1456: 1368: 1280: ## File: docs/1.0_README.md
 1633:  1545:  1457: 1369: 1281: ````markdown
 1634:  1546:  1458: 1370: 1282:   1: # **SledHEAD**
 1635:  1547:  1459: 1371: 1283:   2: **Genre:** Roguelike | Trick & Time Trial Racer | Adventure  
 1636:  1548:  1460: 1372: 1284:   3: **Platform:** Web-based (PC, potentially mobile)  
 1637:  1549:  1461: 1373: 1285:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
 1638:  1550:  1462: 1374: 1286:   5: 
 1639:  1551:  1463: 1375: 1287:   6: ---
 1640:  1552:  1464: 1376: 1288:   7: 
 1641:  1553:  1465: 1377: 1289:   8: ## Table of Contents
 1642:  1554:  1466: 1378: 1290:   9: 1. [Core Concept](#core-concept)
 1643:  1555:  1467: 1379: 1291:  10: 2. [Procedural World & Persistence](#procedural-world--persistence)
 1644:  1556:  1468: 1380: 1292:  11: 3. [Gameplay Loops](#gameplay-loops)
 1645:  1557:  1469: 1381: 1293:  12:    - [Sledding Phase (Downhill)](#1-sledding-phase-downhill)
 1646:  1558:  1470: 1382: 1294:  13:    - [Climbing Phase (Uphill)](#2-climbing-phase-uphill)
 1647:  1559:  1471: 1383: 1295:  14:    - [Management Phase (House & Upgrades)](#3-management-phase-house--upgrades)
 1648:  1560:  1472: 1384: 1296:  15: 4. [Trick System (For Extra Cash & Fan Engagement)](#trick-system-for-extra-cash--fan-engagement)
 1649:  1561:  1473: 1385: 1297:  16: 5. [Upgrade System](#upgrade-system)
 1650:  1562:  1474: 1386: 1298:  17:    - [Personal Upgrades](#personal-upgrades-character-enhancements)
 1651:  1563:  1475: 1387: 1299:  18:    - [Mountain Upgrades](#mountain-upgrades-resort-expansion)
 1652:  1564:  1476: 1388: 1300:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)
 1653:  1565:  1477: 1389: 1301:  20: 7. [Mountain Themes & Progression](#mountain-themes--progression)
 1654:  1566:  1478: 1390: 1302:  21: 8. [Mini-Games in SledHEAD](#mini-games-in-sledhead)
 1655:  1567:  1479: 1391: 1303:  22: 9. [NPCs & Mountain Town Ecosystem](#npcs--mountain-town-ecosystem)
 1656:  1568:  1480: 1392: 1304:  23: 
 1657:  1569:  1481: 1393: 1305:  24: 
 1658:  1570:  1482: 1394: 1306:  25: ---
 1659:  1571:  1483: 1395: 1307:  26: 
 1660:  1572:  1484: 1396: 1308:  27: ## 🎯 **Core Concept**
 1661:  1573:  1485: 1397: 1309:  28: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
 1662:  1574:  1486: 1398: 1310:  29: 
 1663:  1575:  1487: 1399: 1311:  30: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
 1664:  1576:  1488: 1400: 1312:  31: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
 1665:  1577:  1489: 1401: 1313:  32: 
 1666:  1578:  1490: 1402: 1314:  33: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
 1667:  1579:  1491: 1403: 1315:  34: 
 1668:  1580:  1492: 1404: 1316:  35: ---
 1669:  1581:  1493: 1405: 1317:  36: 
 1670:  1582:  1494: 1406: 1318:  37: ## 🎮 **Controls & Gameplay Mechanics**
 1671:  1583:  1495: 1407: 1319:  38: 
 1672:  1584:  1496: 1408: 1320:  39: ### **⬇️ Downhill Phase: Fast-Paced Sledding**
 1673:  1585:  1497: 1409: 1321:  40: In the **downhill phase**, you’re controlling your sled as it races down procedurally generated slopes, dodging obstacles, pulling off tricks, and aiming for the fastest times.
 1674:  1586:  1498: 1410: 1322:  41: 
 1675:  1587:  1499: 1411: 1323:  42: #### **Basic Movement:**
 1676:  1588:  1500: 1412: 1324:  43: - **Left / Right Arrow Keys (← →)** – Steer your sled left or right.  
 1677:  1589:  1501: 1413: 1325:  44: - **Down Arrow (↓)** – Crouch for extra speed on straightaways.  
 1678:  1590:  1502: 1414: 1326:  45: - **Up Arrow (↑)** – Prepare for a jump off a ramp.  
 1679:  1591:  1503: 1415: 1327:  46: 
 1680:  1592:  1504: 1416: 1328:  47: #### **Trick System:**
 1681:  1593:  1505: 1417: 1329:  48: - Tricks are executed using combinations of **Up, Down, Left, and Right Arrows**.
 1682:  1594:  1506: 1418: 1330:  49: - Landing tricks successfully grants extra money and fan engagement.
 1683:  1595:  1507: 1419: 1331:  50: - Be mindful of your timing - land while doing a trick, and you could crash!
 1684:  1596:  1508: 1420: 1332:  51: 
 1685:  1597:  1509: 1421: 1333:  52: #### **Hazards & Interactions:**
 1686:  1598:  1510: 1422: 1334:  53: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
 1687:  1599:  1511: 1423: 1335:  54: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
 1688:  1600:  1512: 1424: 1336:  55: - **Ice Patches:** Reduce control and make turns trickier.
 1689:  1601:  1513: 1425: 1337:  56: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
 1690:  1602:  1514: 1426: 1338:  57: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
 1691:  1603:  1515: 1427: 1339:  58: 
 1692:  1604:  1516: 1428: 1340:  59: ---
 1693:  1605:  1517: 1429: 1341:  60: 
 1694:  1606:  1518: 1430: 1342:  61: ### **⬆️ Uphill Phase: Climbing & Exploration**
 1695:  1607:  1519: 1431: 1343:  62: Once you reach the bottom, it’s time to **make your way back up**. The mountain doesn’t regenerate, so you’ll be retracing paths and discovering new shortcuts.
 1696:  1608:  1520: 1432: 1344:  63: 
 1697:  1609:  1521: 1433: 1345:  64: #### **Basic Movement & Stamina:**
 1698:  1610:  1522: 1434: 1346:  65: - **Left / Right Arrow Keys (← →)** – Move horizontally across the mountain.
 1699:  1611:  1523: 1435: 1347:  66: - **Up Arrow (↑)** – Hike uphill, consuming stamina.
 1700:  1612:  1524: 1436: 1348:  67: - **Down Arrow (↓)** – Rest momentarily to recover stamina.
 1701:  1613:  1525: 1437: 1349:  68: 
 1702:  1614:  1526: 1438: 1350:  69: #### **Navigation & Assistance:**
 1703:  1615:  1527: 1439: 1351:  70: - If you've **unlocked ski lifts or snowmobiles**, you can use them for a quicker return.
 1704:  1616:  1528: 1440: 1352:  71: - **Shortcut Awareness** upgrades help you find hidden paths to make the climb easier.
 1705:  1617:  1529: 1441: 1353:  72: - **Food Stalls & Rest Areas** restore stamina—plan your route accordingly!
 1706:  1618:  1530: 1442: 1354:  73: 
 1707:  1619:  1531: 1443: 1355:  74: #### **Wildlife Photography Mini-Game 📸**
 1708:  1620:  1532: 1444: 1356:  75: - While hiking, **animals appear every few seconds**.
 1709:  1621:  1533: 1445: 1357:  76: - Aim the camera using **Arrow Keys**, and take a shot with **Spacebar**.
 1710:  1622:  1534: 1446: 1358:  77: - Align your camera with the **altitude line** for a perfect photo.
 1711:  1623:  1535: 1447: 1359:  78: - **Moving animals give higher rewards** but are harder to capture.
 1712:  1624:  1536: 1448: 1360:  79: 
 1713:  1625:  1537: 1449: 1361:  80: ---
 1714:  1626:  1538: 1450: 1362:  81: 
 1715:  1627:  1539: 1451: 1363:  82: **Next Steps:**  
 1716:  1628:  1540: 1452: 1364:  83: - **If you want to make money:** Optimize your tricks and time trials.  
 1717:  1629:  1541: 1453: 1365:  84: - **If you want to upgrade:** Invest in stamina, sled durability, and trick enhancements.  
 1718:  1630:  1542: 1454: 1366:  85: - **If you want to explore:** Look for wildlife, hidden shortcuts, and fan hotspots!  
 1719:  1631:  1543: 1455: 1367:  86: 
 1720:  1632:  1544: 1456: 1368:  87: ---
 1721:  1633:  1545: 1457: 1369:  88: 
 1722:  1634:  1546: 1458: 1370:  89: ## 🌎 **Procedural World & Persistence**
 1723:  1635:  1547: 1459: 1371:  90: - The mountain remains consistent during a playthrough.  
 1724:  1636:  1548: 1460: 1372:  91: - **New terrain is only generated when starting a new game.**  
 1725:  1637:  1549: 1461: 1373:  92: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
 1726:  1638:  1550: 1462: 1374:  93: - **Changes per run:**
 1727:  1639:  1551: 1463: 1375:  94:   - Tourists & fans shift positions.  
 1728:  1640:  1552: 1464: 1376:  95:   - Weather may change dynamically.  
 1729:  1641:  1553: 1465: 1377:  96:   - Wildlife encounters vary.
 1730:  1642:  1554: 1466: 1378:  97: 
 1731:  1643:  1555: 1467: 1379:  98: ---
 1732:  1644:  1556: 1468: 1380:  99: 
 1733:  1645:  1557: 1469: 1381: 100: ## 🎮 **Gameplay Loops**
 1734:  1646:  1558: 1470: 1382: 101: 
 1735:  1647:  1559: 1471: 1383: 102: ### 1️⃣ **Sledding Phase (Downhill) ⬇️**
 1736:  1648:  1560: 1472: 1384: 103: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
 1737:  1649:  1561: 1473: 1385: 104: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
 1738:  1650:  1562: 1474: 1386: 105: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
 1739:  1651:  1563: 1475: 1387: 106: - **Obstacles:**
 1740:  1652:  1564: 1476: 1388: 107:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
 1741:  1653:  1565: 1477: 1389: 108:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
 1742:  1654:  1566: 1478: 1390: 109:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
 1743:  1655:  1567: 1479: 1391: 110: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
 1744:  1656:  1568: 1480: 1392: 111: - **Time Trials:**  
 1745:  1657:  1569: 1481: 1393: 112:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
 1746:  1658:  1570: 1482: 1394: 113:   - **Your time between activators determines your bonus.**  
 1747:  1659:  1571: 1483: 1395: 114:   - **Faster times = more money!**  
 1748:  1660:  1572: 1484: 1396: 115:   - Not all runs are timed; only those where you activate a trial.  
 1749:  1661:  1573: 1485: 1397: 116: 
 1750:  1662:  1574: 1486: 1398: 117: ---
 1751:  1663:  1575: 1487: 1399: 118: 
 1752:  1664:  1576: 1488: 1400: 119: ### 2️⃣ **Climbing Phase (Uphill) ⬆️**
 1753:  1665:  1577: 1489: 1401: 120: 🚶 **Top-down adventure traversal with stamina management and exploration.**  
 1754:  1666:  1578: 1490: 1402: 121: - **Goal:** Return to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
 1755:  1667:  1579: 1491: 1403: 122: - **Terrain:** The same generated world as the downhill run (no regenerating between runs).  
 1756:  1668:  1580: 1492: 1404: 123: - **Stamina System:**  
 1757:  1669:  1581: 1493: 1405: 124:   - Stamina drains when hiking.  
 1758:  1670:  1582: 1494: 1406: 125:   - Replenished by **food stands, resting points, or upgrades**.  
 1759:  1671:  1583: 1495: 1407: 126: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
 1760:  1672:  1584: 1496: 1408: 127:   - **Random animals appear every 5–10 seconds (TWEAK variable).**  
 1761:  1673:  1585: 1497: 1409: 128:   - Animals either **stay still (1–20 seconds) or move (making them harder to photograph).**  
 1762:  1674:  1586: 1498: 1410: 129:   - **Use the Arrow Keys to aim the camera cone** around your character.  
 1763:  1675:  1587: 1499: 1411: 130:   - **Align the altitude line** with the animal’s altitude for a perfect shot.  
 1764:  1676:  1588: 1500: 1412: 131:   - **Photos earn money, with multipliers for:**  
 1765:  1677:  1589: 1501: 1413: 132:     - Accuracy (center of POV cone).  
 1766:  1678:  1590: 1502: 1414: 133:     - Altitude match precision.  
 1767:  1679:  1591: 1503: 1415: 134:     - Moving vs. stationary targets (moving = 3x value).  
 1768:  1680:  1592: 1504: 1416: 135: 
 1769:  1681:  1593: 1505: 1417: 136: ---
 1770:  1682:  1594: 1506: 1418: 137: 
 1771:  1683:  1595: 1507: 1419: 138: ### 3️⃣ **Management Phase (House & Upgrades) 🏠**
 1772:  1684:  1596: 1508: 1420: 139: 🏡 **Upgrade your gear, mountain, and social media presence.**  
 1773:  1685:  1597: 1509: 1421: 140: - **Spend earned money on:**
 1774:  1686:  1598: 1510: 1422: 141:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
 1775:  1687:  1599: 1511: 1423: 142:   - **Sled Upgrades:** Speed, handling, trick potential.  
 1776:  1688:  1600: 1512: 1424: 143:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
 1777:  1689:  1601: 1513: 1425: 144: - **New Game Start:**  
 1778:  1690:  1602: 1514: 1426: 145:   - Mountain **ONLY regenerates when starting a completely new game.**  
 1779:  1691:  1603: 1515: 1427: 146:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
 1780:  1692:  1604: 1516: 1428: 147:   - **Current seed is displayed at home.**  
 1781:  1693:  1605: 1517: 1429: 148: 
 1782:  1694:  1606: 1518: 1430: 149: ---
 1783:  1695:  1607: 1519: 1431: 150: 
 1784:  1696:  1608: 1520: 1432: 151: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
 1785:  1697:  1609: 1521: 1433: 152: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
 1786:  1698:  1610: 1522: 1434: 153: 
 1787:  1699:  1611: 1523: 1435: 154: 1. **☁️🪂 Parachute (Up, Down)**  
 1788:  1700:  1612: 1524: 1436: 155:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
 1789:  1701:  1613: 1525: 1437: 156:    **Pixel Art Representation:**  
 1790:  1702:  1614: 1526: 1438: 157:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
 1791:  1703:  1615: 1527: 1439: 158: 
 1792:  1704:  1616: 1528: 1440: 159: 2. **🛑🎿 Air Brake (Up, Up)**  
 1793:  1705:  1617: 1529: 1441: 160:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
 1794:  1706:  1618: 1530: 1442: 161:    **Pixel Art Representation:**  
 1795:  1707:  1619: 1531: 1443: 162:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
 1796:  1708:  1620: 1532: 1444: 163: 
 1797:  1709:  1621: 1533: 1445: 164: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
 1798:  1710:  1622: 1534: 1446: 165:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
 1799:  1711:  1623: 1535: 1447: 166:    **Pixel Art Representation:**  
 1800:  1712:  1624: 1536: 1448: 167:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
 1801:  1713:  1625: 1537: 1449: 168: 
 1802:  1714:  1626: 1538: 1450: 169: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
 1803:  1715:  1627: 1539: 1451: 170:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
 1804:  1716:  1628: 1540: 1452: 171:    **Pixel Art Representation:**  
 1805:  1717:  1629: 1541: 1453: 172:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
 1806:  1718:  1630: 1542: 1454: 173: 
 1807:  1719:  1631: 1543: 1455: 174: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
 1808:  1720:  1632: 1544: 1456: 175:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
 1809:  1721:  1633: 1545: 1457: 176:    **Pixel Art Representation:**  
 1810:  1722:  1634: 1546: 1458: 177:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
 1811:  1723:  1635: 1547: 1459: 178: 
 1812:  1724:  1636: 1548: 1460: 179: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
 1813:  1725:  1637: 1549: 1461: 180:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
 1814:  1726:  1638: 1550: 1462: 181:    **Pixel Art Representation:**  
 1815:  1727:  1639: 1551: 1463: 182:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
 1816:  1728:  1640: 1552: 1464: 183: 
 1817:  1729:  1641: 1553: 1465: 184: 7. **🦸‍♂️✨ Superman (Down, Down)**  
 1818:  1730:  1642: 1554: 1466: 185:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
 1819:  1731:  1643: 1555: 1467: 186:    **Pixel Art Representation:**  
 1820:  1732:  1644: 1556: 1468: 187:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
 1821:  1733:  1645: 1557: 1469: 188: 
 1822:  1734:  1646: 1558: 1470: 189: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
 1823:  1735:  1647: 1559: 1471: 190:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
 1824:  1736:  1648: 1560: 1472: 191:    **Pixel Art Representation:**  
 1825:  1737:  1649: 1561: 1473: 192:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
 1826:  1738:  1650: 1562: 1474: 193: 
 1827:  1739:  1651: 1563: 1475: 194: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
 1828:  1740:  1652: 1564: 1476: 195:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
 1829:  1741:  1653: 1565: 1477: 196:    **Pixel Art Representation:**  
 1830:  1742:  1654: 1566: 1478: 197:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
 1831:  1743:  1655: 1567: 1479: 198: 
 1832:  1744:  1656: 1568: 1480: 199: 10. **👻🔥 Ghost Rider (Left, Right)**  
 1833:  1745:  1657: 1569: 1481: 200:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
 1834:  1746:  1658: 1570: 1482: 201:     **Pixel Art Representation:**  
 1835:  1747:  1659: 1571: 1483: 202:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
 1836:  1748:  1660: 1572: 1484: 203: 
 1837:  1749:  1661: 1573: 1485: 204: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
 1838:  1750:  1662: 1574: 1486: 205:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
 1839:  1751:  1663: 1575: 1487: 206:     **Pixel Art Representation:**  
 1840:  1752:  1664: 1576: 1488: 207:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
 1841:  1753:  1665: 1577: 1489: 208: 
 1842:  1754:  1666: 1578: 1490: 209: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
 1843:  1755:  1667: 1579: 1491: 210:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
 1844:  1756:  1668: 1580: 1492: 211:     **Pixel Art Representation:**  
 1845:  1757:  1669: 1581: 1493: 212:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
 1846:  1758:  1670: 1582: 1494: 213: 
 1847:  1759:  1671: 1583: 1495: 214: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
 1848:  1760:  1672: 1584: 1496: 215:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
 1849:  1761:  1673: 1585: 1497: 216:     **Pixel Art Representation:**  
 1850:  1762:  1674: 1586: 1498: 217:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
 1851:  1763:  1675: 1587: 1499: 218: 
 1852:  1764:  1676: 1588: 1500: 219: 14. **✨⬆️ Falling Star (Down, Up)**  
 1853:  1765:  1677: 1589: 1501: 220:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
 1854:  1766:  1678: 1590: 1502: 221:     **Pixel Art Representation:**  
 1855:  1767:  1679: 1591: 1503: 222:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
 1856:  1768:  1680: 1592: 1504: 223: 
 1857:  1769:  1681: 1593: 1505: 224: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
 1858:  1770:  1682: 1594: 1506: 225:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
 1859:  1771:  1683: 1595: 1507: 226:     **Pixel Art Representation:**  
 1860:  1772:  1684: 1596: 1508: 227:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
 1861:  1773:  1685: 1597: 1509: 228: 
 1862:  1774:  1686: 1598: 1510: 229: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
 1863:  1775:  1687: 1599: 1511: 230:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
 1864:  1776:  1688: 1600: 1512: 231:     **Pixel Art Representation:**  
 1865:  1777:  1689: 1601: 1513: 232:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
 1866:  1778:  1690: 1602: 1514: 233: 
 1867:  1779:  1691: 1603: 1515: 234: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
 1868:  1780:  1692: 1604: 1516: 235: 
 1869:  1781:  1693: 1605: 1517: 236: ---
 1870:  1782:  1694: 1606: 1518: 237: 
 1871:  1783:  1695: 1607: 1519: 238: ## 🔧 **Upgrade System**
 1872:  1784:  1696: 1608: 1520: 239: 
 1873:  1785:  1697: 1609: 1521: 240: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
 1874:  1786:  1698: 1610: 1522: 241: | Upgrade                    | Effect                                             |
 1875:  1787:  1699: 1611: 1523: 242: |----------------------------|----------------------------------------------------|
 1876:  1788:  1700: 1612: 1524: 243: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
 1877:  1789:  1701: 1613: 1525: 244: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
 1878:  1790:  1702: 1614: 1526: 245: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
 1879:  1791:  1703: 1615: 1527: 246: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
 1880:  1792:  1704: 1616: 1528: 247: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
 1881:  1793:  1705: 1617: 1529: 248: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
 1882:  1794:  1706: 1618: 1530: 249: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
 1883:  1795:  1707: 1619: 1531: 250: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
 1884:  1796:  1708: 1620: 1532: 251: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
 1885:  1797:  1709: 1621: 1533: 252: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
 1886:  1798:  1710: 1622: 1534: 253: 
 1887:  1799:  1711: 1623: 1535: 254: ---
 1888:  1800:  1712: 1624: 1536: 255: 
 1889:  1801:  1713: 1625: 1537: 256: ### 🏔️ Mountain Upgrades (Resort Expansion)
 1890:  1802:  1714: 1626: 1538: 257: | Upgrade                        | Effect                                                         |
 1891:  1803:  1715: 1627: 1539: 258: |--------------------------------|----------------------------------------------------------------|
 1892:  1804:  1716: 1628: 1540: 259: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
 1893:  1805:  1717: 1629: 1541: 260: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
 1894:  1806:  1718: 1630: 1542: 261: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
 1895:  1807:  1719: 1631: 1543: 262: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
 1896:  1808:  1720: 1632: 1544: 263: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
 1897:  1809:  1721: 1633: 1545: 264: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
 1898:  1810:  1722: 1634: 1546: 265: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
 1899:  1811:  1723: 1635: 1547: 266: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
 1900:  1812:  1724: 1636: 1548: 267: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
 1901:  1813:  1725: 1637: 1549: 268: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
 1902:  1814:  1726: 1638: 1550: 269: 
 1903:  1815:  1727: 1639: 1551: 270: ---
 1904:  1816:  1728: 1640: 1552: 271: 
 1905:  1817:  1729: 1641: 1553: 272: ## ⚖️ **Game Balance & Tweakable Variables**
 1906:  1818:  1730: 1642: 1554: 273: All these are stored in the **TWEAK object** for easy adjustments:
 1907:  1819:  1731: 1643: 1555: 274: - Wildlife spawn times (min/max).
 1908:  1820:  1732: 1644: 1556: 275: - Wildlife **sit duration** (min/max).
 1909:  1821:  1733: 1645: 1557: 276: - Moving animal multiplier.
 1910:  1822:  1734: 1646: 1558: 277: - Camera **POV cone size**.
 1911:  1823:  1735: 1647: 1559: 278: - **Time trial activator frequency** & bonuses.
 1912:  1824:  1736: 1648: 1560: 279: - **Stamina drain rates**.
 1913:  1825:  1737: 1649: 1561: 280: - **Mountain regeneration rules**.
 1914:  1826:  1738: 1650: 1562: 281: - **Trick scoring multipliers**.
 1915:  1827:  1739: 1651: 1563: 282: - **Photograph accuracy bonuses**. 
 1916:  1828:  1740: 1652: 1564: 283: 
 1917:  1829:  1741: 1653: 1565: 284: **Progression Goals:**  
 1918:  1830:  1742: 1654: 1566: 285: - **Prototype:** Repay the cost of the mountain.  
 1919:  1831:  1743: 1655: 1567: 286: - **Full Game:**  
 1920:  1832:  1744: 1656: 1568: 287:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
 1921:  1833:  1745: 1657: 1569: 288:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
 1922:  1834:  1746: 1658: 1570: 289:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
 1923:  1835:  1747: 1659: 1571: 290:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
 1924:  1836:  1748: 1660: 1572: 291: 
 1925:  1837:  1749: 1661: 1573: 292: ---
 1926:  1838:  1750: 1662: 1574: 293: 
 1927:  1839:  1751: 1663: 1575: 294: ## 🏔️ **Mountain Themes & Progression**
 1928:  1840:  1752: 1664: 1576: 295: 
 1929:  1841:  1753: 1665: 1577: 296: ### Lava Mountain 🌋
 1930:  1842:  1754: 1666: 1578: 297: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
 1931:  1843:  1755: 1667: 1579: 298: - **Mechanics:**  
 1932:  1844:  1756: 1668: 1580: 299:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
 1933:  1845:  1757: 1669: 1581: 300:   - **Ash Clouds:** Temporarily block visibility.
 1934:  1846:  1758: 1670: 1582: 301: - **Power-Up:** **Heat Shielding Sled Coating**  
 1935:  1847:  1759: 1671: 1583: 302:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
 1936:  1848:  1760: 1672: 1584: 303: 
 1937:  1849:  1761: 1673: 1585: 304: ---
 1938:  1850:  1762: 1674: 1586: 305: 
 1939:  1851:  1763: 1675: 1587: 306: ### Space Mountain 🌌
 1940:  1852:  1764: 1676: 1588: 307: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
 1941:  1853:  1765: 1677: 1589: 308: - **Mechanics:**  
 1942:  1854:  1766: 1678: 1590: 309:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
 1943:  1855:  1767: 1679: 1591: 310:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
 1944:  1856:  1768: 1680: 1592: 311: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
 1945:  1857:  1769: 1681: 1593: 312:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
 1946:  1858:  1770: 1682: 1594: 313: 
 1947:  1859:  1771: 1683: 1595: 314: ---
 1948:  1860:  1772: 1684: 1596: 315: 
 1949:  1861:  1773: 1685: 1597: 316: ### Underwater Mountain 🌊
 1950:  1862:  1774: 1686: 1598: 317: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
 1951:  1863:  1775: 1687: 1599: 318: - **Mechanics:**  
 1952:  1864:  1776: 1688: 1600: 319:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
 1953:  1865:  1777: 1689: 1601: 320: - **Power-Up:** **Aqua-Lung Mittens**  
 1954:  1866:  1778: 1690: 1602: 321:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
 1955:  1867:  1779: 1691: 1603: 322: 
 1956:  1868:  1780: 1692: 1604: 323: ---
 1957:  1869:  1781: 1693: 1605: 324: 
 1958:  1870:  1782: 1694: 1606: 325: ### Garbage Dump Glacier 🗑️❄️
 1959:  1871:  1783: 1695: 1607: 326: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
 1960:  1872:  1784: 1696: 1608: 327: - **Mechanics:**  
 1961:  1873:  1785: 1697: 1609: 328:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
 1962:  1874:  1786: 1698: 1610: 329: - **Power-Up:** **Slick Wax Spray**  
 1963:  1875:  1787: 1699: 1611: 330:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
 1964:  1876:  1788: 1700: 1612: 331: 
 1965:  1877:  1789: 1701: 1613: 332: ---
 1966:  1878:  1790: 1702: 1614: 333: 
 1967:  1879:  1791: 1703: 1615: 334: ### Micro Mountain 🐜🌱
 1968:  1880:  1792: 1704: 1616: 335: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
 1969:  1881:  1793: 1705: 1617: 336: - **Mechanics:**  
 1970:  1882:  1794: 1706: 1618: 337:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
 1971:  1883:  1795: 1707: 1619: 338: - **Power-Up:** **Antigrav Wax**  
 1972:  1884:  1796: 1708: 1620: 339:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
 1973:  1885:  1797: 1709: 1621: 340: 
 1974:  1886:  1798: 1710: 1622: 341: ---
 1975:  1887:  1799: 1711: 1623: 342: 
 1976:  1888:  1800: 1712: 1624: 343: ### Candy Cane Canyon 🍭
 1977:  1889:  1801: 1713: 1625: 344: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
 1978:  1890:  1802: 1714: 1626: 345: - **Mechanics:**  
 1979:  1891:  1803: 1715: 1627: 346:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
 1980:  1892:  1804: 1716: 1628: 347: - **Power-Up:** **Sweet-Tooth Coating**  
 1981:  1893:  1805: 1717: 1629: 348:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
 1982:  1894:  1806: 1718: 1630: 349: 
 1983:  1895:  1807: 1719: 1631: 350: ---
 1984:  1896:  1808: 1720: 1632: 351: 
 1985:  1897:  1809: 1721: 1633: 352: ### Crystal Cave Cavern 🔮
 1986:  1898:  1810: 1722: 1634: 353: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
 1987:  1899:  1811: 1723: 1635: 354: - **Mechanics:**  
 1988:  1900:  1812: 1724: 1636: 355:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
 1989:  1901:  1813: 1725: 1637: 356: - **Power-Up:** **Crystal Clear Goggles**  
 1990:  1902:  1814: 1726: 1638: 357:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
 1991:  1903:  1815: 1727: 1639: 358: 
 1992:  1904:  1816: 1728: 1640: 359: ---
 1993:  1905:  1817: 1729: 1641: 360: 
 1994:  1906:  1818: 1730: 1642: 361: ### Haunted Graveyard Hill 👻
 1995:  1907:  1819: 1731: 1643: 362: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
 1996:  1908:  1820: 1732: 1644: 363: - **Mechanics:**  
 1997:  1909:  1821: 1733: 1645: 364:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
 1998:  1910:  1822: 1734: 1646: 365: - **Power-Up:** **Spirit Lantern**  
 1999:  1911:  1823: 1735: 1647: 366:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
 2000:  1912:  1824: 1736: 1648: 367: 
 2001:  1913:  1825: 1737: 1649: 368: ---
 2002:  1914:  1826: 1738: 1650: 369: 
 2003:  1915:  1827: 1739: 1651: 370: ### Sky Jellyfish Mountain ☁️🪼
 2004:  1916:  1828: 1740: 1652: 371: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
 2005:  1917:  1829: 1741: 1653: 372: - **Mechanics:**  
 2006:  1918:  1830: 1742: 1654: 373:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
 2007:  1919:  1831: 1743: 1655: 374: - **Power-Up:** **Stabilizer Sled Rails**  
 2008:  1920:  1832: 1744: 1656: 375:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
 2009:  1921:  1833: 1745: 1657: 376: 
 2010:  1922:  1834: 1746: 1658: 377: ---
 2011:  1923:  1835: 1747: 1659: 378: 
 2012:  1924:  1836: 1748: 1660: 379: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
 2013:  1925:  1837: 1749: 1661: 380: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
 2014:  1926:  1838: 1750: 1662: 381: - **Mechanics:**  
 2015:  1927:  1839: 1751: 1663: 382:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
 2016:  1928:  1840: 1752: 1664: 383: - **Power-Up:** **Clockwork Treads**  
 2017:  1929:  1841: 1753: 1665: 384:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
 2018:  1930:  1842: 1754: 1666: 385: 
 2019:  1931:  1843: 1755: 1667: 386: ---
 2020:  1932:  1844: 1756: 1668: 387: 
 2021:  1933:  1845: 1757: 1669: 388: ### Pyramid Peak 🐫🏜️
 2022:  1934:  1846: 1758: 1670: 389: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
 2023:  1935:  1847: 1759: 1671: 390: - **Mechanics:**  
 2024:  1936:  1848: 1760: 1672: 391:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
 2025:  1937:  1849: 1761: 1673: 392: - **Power-Up:** **Sandrunner Skis**  
 2026:  1938:  1850: 1762: 1674: 393:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
 2027:  1939:  1851: 1763: 1675: 394: 
 2028:  1940:  1852: 1764: 1676: 395: ---
 2029:  1941:  1853: 1765: 1677: 396: 
 2030:  1942:  1854: 1766: 1678: 397: ### Digital Mountain (Cyber Slopes) 💻🔮
 2031:  1943:  1855: 1767: 1679: 398: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
 2032:  1944:  1856: 1768: 1680: 399: - **Mechanics:**  
 2033:  1945:  1857: 1769: 1681: 400:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
 2034:  1946:  1858: 1770: 1682: 401: - **Power-Up:** **Data Shielding**  
 2035:  1947:  1859: 1771: 1683: 402:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
 2036:  1948:  1860: 1772: 1684: 403: 
 2037:  1949:  1861: 1773: 1685: 404: ---
 2038:  1950:  1862: 1774: 1686: 405: 
 2039:  1951:  1863: 1775: 1687: 406: ## 🎮 **Mini-Games in SledHEAD**
 2040:  1952:  1864: 1776: 1688: 407: 
 2041:  1953:  1865: 1777: 1689: 408: ### 1. **Animal Photography** 📸🐾
 2042:  1954:  1866: 1778: 1690: 409: - **Objective:**  
 2043:  1955:  1867: 1779: 1691: 410:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
 2044:  1956:  1868: 1780: 1692: 411: - **Mechanics:**  
 2045:  1957:  1869: 1781: 1693: 412:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
 2046:  1958:  1870: 1782: 1694: 413:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
 2047:  1959:  1871: 1783: 1695: 414:   - **Scoring Bonuses:**  
 2048:  1960:  1872: 1784: 1696: 415:     - **Altitude Match Multiplier**  
 2049:  1961:  1873: 1785: 1697: 416:     - **POV Centering Bonus**  
 2050:  1962:  1874: 1786: 1698: 417:     - **Speed Capture Bonus**  
 2051:  1963:  1875: 1787: 1699: 418: - **Upgrades:**  
 2052:  1964:  1876: 1788: 1700: 419:   - **Optimal Optics:** Increases the camera’s POV cone.  
 2053:  1965:  1877: 1789: 1701: 420:   - **Steady Hands:** Reduces camera sway.  
 2054:  1966:  1878: 1790: 1702: 421:   - **Animal Baiting:** Increases rare animal appearance.
 2055:  1967:  1879: 1791: 1703: 422: - **Special Events:**  
 2056:  1968:  1880: 1792: 1704: 423:   - **Rare Animal Sightings** and **Storm Photography**.
 2057:  1969:  1881: 1793: 1705: 424: - **Risk/Challenge:**  
 2058:  1970:  1882: 1794: 1706: 425:   - **Repeat Photo Penalty** and aggressive animal disruptions.
 2059:  1971:  1883: 1795: 1707: 426: 
 2060:  1972:  1884: 1796: 1708: 427: ---
 2061:  1973:  1885: 1797: 1709: 428: 
 2062:  1974:  1886: 1798: 1710: 429: ### 2. **Fishing** 🎣🐟  
 2063:  1975:  1887: 1799: 1711: 430: - **Objective:**  
 2064:  1976:  1888: 1800: 1712: 431:   Catch fish using various techniques and bait types.
 2065:  1977:  1889: 1801: 1713: 432: - **Mechanics:**  
 2066:  1978:  1890: 1802: 1714: 433:   - Dynamic water simulation with varied fish behaviors.  
 2067:  1979:  1891: 1803: 1715: 434:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
 2068:  1980:  1892: 1804: 1716: 435:   - Legendary fish yield major rewards.
 2069:  1981:  1893: 1805: 1717: 436: - **Upgrades:**  
 2070:  1982:  1894: 1806: 1718: 437:   - Stronger fishing lines, advanced lures, and sonar detection.
 2071:  1983:  1895: 1807: 1719: 438: - **Special Events:**  
 2072:  1984:  1896: 1808: 1720: 439:   - Fishing tournaments and rare migration patterns.
 2073:  1985:  1897: 1809: 1721: 440: - **Risk/Challenge:**  
 2074:  1986:  1898: 1810: 1722: 441:   - Line snapping and predator interference.
 2075:  1987:  1899: 1811: 1723: 442: 
 2076:  1988:  1900: 1812: 1724: 443: ---
 2077:  1989:  1901: 1813: 1725: 444: 
 2078:  1990:  1902: 1814: 1726: 445: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
 2079:  1991:  1903: 1815: 1727: 446: - **Objective:**  
 2080:  1992:  1904: 1816: 1728: 447:   Unlock doors, safes, and hidden compartments.
 2081:  1993:  1905: 1817: 1729: 448: - **Mechanics:**  
 2082:  1994:  1906: 1818: 1730: 449:   - Use tools like **rakes, hooks, and tension wrenches**.  
 2083:  1995:  1907: 1819: 1731: 450:   - Navigate traps such as alarms and rusted internals.
 2084:  1996:  1908: 1820: 1732: 451: - **Upgrades:**  
 2085:  1997:  1909: 1821: 1733: 452:   - High-quality picks, electronic bypass tools, and vibration sensors.
 2086:  1998:  1910: 1822: 1734: 453: - **Special Events:**  
 2087:  1999:  1911: 1823: 1735: 454:   - Timed heists and races with rival scavengers.
 2088:  2000:  1912: 1824: 1736: 455: - **Risk/Challenge:**  
 2089:  2001:  1913: 1825: 1737: 456:   - Unstable buildings and hazards that may alert authorities.
 2090:  2002:  1914: 1826: 1738: 457: 
 2091:  2003:  1915: 1827: 1739: 458: ---
 2092:  2004:  1916: 1828: 1740: 459: 
 2093:  2005:  1917: 1829: 1741: 460: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
 2094:  2006:  1918: 1830: 1742: 461: - **Objective:**  
 2095:  2007:  1919: 1831: 1743: 462:   Find buried treasure using maps, clues, and metal detectors.
 2096:  2008:  1920: 1832: 1744: 463: - **Mechanics:**  
 2097:  2009:  1921: 1833: 1745: 464:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
 2098:  2010:  1922: 1834: 1746: 465:   - Digging requires stamina management and upgraded tools.
 2099:  2011:  1923: 1835: 1747: 466: - **Upgrades:**  
 2100:  2012:  1924: 1836: 1748: 467:   - Advanced metal detectors, excavation tools, and digging drones.
 2101:  2013:  1925: 1837: 1749: 468: - **Special Events:**  
 2102:  2014:  1926: 1838: 1750: 469:   - NPC treasure races and secret cache discoveries.
 2103:  2015:  1927: 1839: 1751: 470: - **Risk/Challenge:**  
 2104:  2016:  1928: 1840: 1752: 471:   - Booby traps, hostile environments, and law enforcement risks.
 2105:  2017:  1929: 1841: 1753: 472: 
 2106:  2018:  1930: 1842: 1754: 473: ---
 2107:  2019:  1931: 1843: 1755: 474: 
 2108:  2020:  1932: 1844: 1756: 475: ### 5. **Kite Flying** 🪁🌬️  
 2109:  2021:  1933: 1845: 1757: 476: - **Objective:**  
 2110:  2022:  1934: 1846: 1758: 477:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
 2111:  2023:  1935: 1847: 1759: 478: - **Mechanics:**  
 2112:  2024:  1936: 1848: 1760: 479:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
 2113:  2025:  1937: 1849: 1761: 480:   - **Downhill:** Kites extend air time and grant special bonuses.
 2114:  2026:  1938: 1850: 1762: 481: - **Upgrades:**  
 2115:  2027:  1939: 1851: 1763: 482:   - **Glide Boost, Speed Stream, and Aero Control.**
 2116:  2028:  1940: 1852: 1764: 483: - **Special Events:**  
 2117:  2029:  1941: 1853: 1765: 484:   - **Storm Riding** with higher boosts but riskier winds.
 2118:  2030:  1942: 1854: 1766: 485: - **Risk/Challenge:**  
 2119:  2031:  1943: 1855: 1767: 486:   - Strong gusts may destabilize your kite.
 2120:  2032:  1944: 1856: 1768: 487: 
 2121:  2033:  1945: 1857: 1769: 488: ---
 2122:  2034:  1946: 1858: 1770: 489: 
 2123:  2035:  1947: 1859: 1771: 490: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
 2124:  2036:  1948: 1860: 1772: 491: - **Objective:**  
 2125:  2037:  1949: 1861: 1773: 492:   Search for valuable minerals, gems, and gold.
 2126:  2038:  1950: 1862: 1774: 493: - **Mechanics:**  
 2127:  2039:  1951: 1863: 1775: 494:   - Explore rivers, caves, and rock formations.  
 2128:  2040:  1952: 1864: 1776: 495:   - **Panning:** Swirl water to separate gold.  
 2129:  2041:  1953: 1865: 1777: 496:   - **Pickaxe Mining:** Break rocks for hidden gems.
 2130:  2042:  1954: 1866: 1778: 497: - **Upgrades:**  
 2131:  2043:  1955: 1867: 1779: 498:   - High-tech panning kits, seismic scanners, precision drills.
 2132:  2044:  1956: 1868: 1780: 499: - **Special Events:**  
 2133:  2045:  1957: 1869: 1781: 500:   - Gold rush hotspots, rare mineral finds, and cave-ins.
 2134:  2046:  1958: 1870: 1782: 501: - **Risk/Challenge:**  
 2135:  2047:  1959: 1871: 1783: 502:   - Unstable ground and rival prospectors.
 2136:  2048:  1960: 1872: 1784: 503: 
 2137:  2049:  1961: 1873: 1785: 504: ---
 2138:  2050:  1962: 1874: 1786: 505: 
 2139:  2051:  1963: 1875: 1787: 506: ### 7. **Cryptid Fossil Digging** 🦴🔍  
 2140:  2052:  1964: 1876: 1788: 507: - **Objective:**  
 2141:  2053:  1965: 1877: 1789: 508:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
 2142:  2054:  1966: 1878: 1790: 509: - **Mechanics:**  
 2143:  2055:  1967: 1879: 1791: 510:   - Use brushes, chisels, and excavation tools to reveal fossils.  
 2144:  2056:  1968: 1880: 1792: 511:   - Transport fossils to the museum at the base of the first mountain.
 2145:  2057:  1969: 1881: 1793: 512: - **Upgrades:**  
 2146:  2058:  1970: 1882: 1794: 513:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
 2147:  2059:  1971: 1883: 1795: 514: - **Special Events:**  
 2148:  2060:  1972: 1884: 1796: 515:   - Competing paleontologists and hidden dig sites.
 2149:  2061:  1973: 1885: 1797: 516: - **Risk/Challenge:**  
 2150:  2062:  1974: 1886: 1798: 517:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
 2151:  2063:  1975: 1887: 1799: 518: 
 2152:  2064:  1976: 1888: 1800: 519: ---
 2153:  2065:  1977: 1889: 1801: 520: 
 2154:  2066:  1978: 1890: 1802: 521: ### 8. **Sled Tricking** 🛷✨  
 2155:  2067:  1979: 1891: 1803: 522: - **Objective:**  
 2156:  2068:  1980: 1892: 1804: 523:   Chain together aerial sled tricks to earn cash and boost fan engagement.
 2157:  2069:  1981: 1893: 1805: 524: - **Mechanics:**  
 2158:  2070:  1982: 1894: 1806: 525:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
 2159:  2071:  1983: 1895: 1807: 526:   - Chain tricks for higher multipliers.
 2160:  2072:  1984: 1896: 1808: 527: - **Upgrades:**  
 2161:  2073:  1985: 1897: 1809: 528:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
 2162:  2074:  1986: 1898: 1810: 529: - **Special Events:**  
 2163:  2075:  1987: 1899: 1811: 530:   - Trick challenges and fan-requested stunt competitions.
 2164:  2076:  1988: 1900: 1812: 531: - **Risk/Challenge:**  
 2165:  2077:  1989: 1901: 1813: 532:   - Mistimed tricks can cause crashes and loss of earnings.
 2166:  2078:  1990: 1902: 1814: 533: 
 2167:  2079:  1991: 1903: 1815: 534: ---
 2168:  2080:  1992: 1904: 1816: 535: 
 2169:  2081:  1993: 1905: 1817: 536: ### 9. **Time Trial Racing** 🏁🛷  
 2170:  2082:  1994: 1906: 1818: 537: - **Objective:**  
 2171:  2083:  1995: 1907: 1819: 538:   Trigger time trial races by hitting gates while sledding for money rewards.
 2172:  2084:  1996: 1908: 1820: 539: - **Mechanics:**  
 2173:  2085:  1997: 1909: 1821: 540:   - Crossing a time trial gate starts a timer.  
 2174:  2086:  1998: 1910: 1822: 541:   - The faster and further you go, the more money you earn.
 2175:  2087:  1999: 1911: 1823: 542: - **Why It Fits:**  
 2176:  2088:  2000: 1912: 1824: 543:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
 2177:  2089:  2001: 1913: 1825: 544: 
 2178:  2090:  2002: 1914: 1826: 545: ---
 2179:  2091:  2003: 1915: 1827: 546: 
 2180:  2092:  2004: 1916: 1828: 547: ### 10. **RC Motor Sled** ❄️🏎️  
 2181:  2093:  2005: 1917: 1829: 548: - **Objective:**  
 2182:  2094:  2006: 1918: 1830: 549:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
 2183:  2095:  2007: 1919: 1831: 550: - **Mechanics:**  
 2184:  2096:  2008: 1920: 1832: 551:   - Maneuver nimble RC sleds across frozen tundra.  
 2185:  2097:  2009: 1921: 1833: 552:   - Nitro boosts and mid-air tricks enhance performance.  
 2186:  2098:  2010: 1922: 1834: 553:   - Customization options include different sled bodies, engines, and handling upgrades.
 2187:  2099:  2011: 1923: 1835: 554: - **Special Events:**  
 2188:  2100:  2012: 1924: 1836: 555:   - Avalanche races, night rides, and hazard runs.
 2189:  2101:  2013: 1925: 1837: 556: - **Risk/Challenge:**  
 2190:  2102:  2014: 1926: 1838: 557:   - Limited battery life, high winds, and signal loss in deep snow.
 2191:  2103:  2015: 1927: 1839: 558: 
 2192:  2104:  2016: 1928: 1840: 559: ## 🏔️ **NPCs & Mountain Town Ecosystem**
 2193:  2105:  2017: 1929: 1841: 560: SledHEAD’s world is filled with **unique characters** who contribute to your journey as a **trick-riding, fan-growing, upgrade-building, sled-stunting** legend. Some run the town, some enhance your sledding skills, and others add depth to the **roguelike adventure**.
 2194:  2106:  2018: 1930: 1842: 561: 
 2195:  2107:  2019: 1931: 1843: 562: ---
 2196:  2108:  2020: 1932: 1844: 563: 
 2197:  2109:  2021: 1933: 1845: 564: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
 2198:  2110:  2022: 1934: 1846: 565: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
 2199:  2111:  2023: 1935: 1847: 566: 
 2200:  2112:  2024: 1936: 1848: 567: #### 🏂 **The Sled Tech (Sled Repairs & Mods)**
 2201:  2113:  2025: 1937: 1849: 568: - **Purpose:** Repairs damage, sells sled mods.
 2202:  2114:  2026: 1938: 1850: 569: - **Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
 2203:  2115:  2027: 1939: 1851: 570: - **Best Quote:** “What’d ya do, run into a moose? I can fix it… for a price.”
 2204:  2116:  2028: 1940: 1852: 571: 
 2205:  2117:  2029: 1941: 1853: 572: #### 🍔 **The Food Vendor (Buffs & Endurance Recovery)**
 2206:  2118:  2030: 1942: 1854: 573: - **Purpose:** Sells food that restores stamina and gives **temporary buffs** for sledding.
 2207:  2119:  2031: 1943: 1855: 574: - **Best Quote:** “Hot cocoa makes you go faster, I swear. Try it.”
 2208:  2120:  2032: 1944: 1856: 575: 
 2209:  2121:  2033: 1945: 1857: 576: #### 🎥 **The Stream Manager (Audience Growth & Sponsorships)**
 2210:  2122:  2034: 1946: 1858: 577: - **Purpose:** Manages your in-game audience; unlocks **sponsorship deals**.
 2211:  2123:  2035: 1947: 1859: 578: - **Best Quote:** “If you don’t clip the trick, did you even land it?”
 2212:  2124:  2036: 1948: 1860: 579: 
 2213:  2125:  2037: 1949: 1861: 580: #### 🏁 **The Race Commissioner (Tournaments & Time Trials)**
 2214:  2126:  2038: 1950: 1862: 581: - **Purpose:** Hosts **time trials, speedrun events, and competitive circuits**.
 2215:  2127:  2039: 1951: 1863: 582: - **Best Quote:** “Half a second off the record? C’mon, I thought you were good.”
 2216:  2128:  2040: 1952: 1864: 583: 
 2217:  2129:  2041: 1953: 1865: 584: #### 🚠 **The Lift Operator (Ski Lift & Shortcut Unlocks)**
 2218:  2130:  2042: 1954: 1866: 585: - **Purpose:** Lets you **unlock ski lifts** for quicker uphill trips.
 2219:  2131:  2043: 1955: 1867: 586: - **Upgrades Unlocked:** **Gondola expansions, VIP lift passes.**
 2220:  2132:  2044: 1956: 1868: 587: - **Best Quote:** “Sure, you could walk… or you could bribe me.”
 2221:  2133:  2045: 1957: 1869: 588: 
 2222:  2134:  2046: 1958: 1870: 589: ---
 2223:  2135:  2047: 1959: 1871: 590: 
 2224:  2136:  2048: 1960: 1872: 591: ### 💨 **Trick & Racing-Oriented NPCs (For Stunts, Style, & Money)**
 2225:  2137:  2049: 1961: 1873: 592: These folks help you **push your limits**, pull off **sick tricks**, and **maximize profits**.
 2226:  2138:  2050: 1962: 1874: 593: 
 2227:  2139:  2051: 1963: 1875: 594: #### 🎿 **The Trick Trainer (Advanced Trick Lessons)**
 2228:  2140:  2052: 1964: 1876: 595: - **Purpose:** Unlocks **trick combos & advanced air control.**
 2229:  2141:  2053: 1965: 1877: 596: - **Best Quote:** “No guts, no glory. You wanna spin faster? Listen up.”
 2230:  2142:  2054: 1966: 1878: 597: 
 2231:  2143:  2055: 1967: 1879: 598: #### 📸 **The Hype Photographer (Proof-Based Challenges & Bonus Money)**
 2232:  2144:  2056: 1968: 1880: 599: - **Purpose:** **Trick verification & photography mini-games**.
 2233:  2145:  2057: 1969: 1881: 600: - **Upgrades Unlocked:** **Slow-mo replays, sponsorship boosts for sick shots.**
 2234:  2146:  2058: 1970: 1882: 601: - **Best Quote:** “A trick’s only worth money if people see it.”
 2235:  2147:  2059: 1971: 1883: 602: 
 2236:  2148:  2060: 1972: 1884: 603: #### 💰 **The Black Market Gear Dealer (Risky Upgrades & Illegal Mods)**
 2237:  2149:  2061: 1973: 1885: 604: - **Purpose:** Sells **risky sled tech** (illegal nitro boosts, magnetized rails for grinds).
 2238:  2150:  2062: 1974: 1886: 605: - **Upgrades Unlocked:** **Unstable overclocked sled parts**.
 2239:  2151:  2063: 1975: 1887: 606: - **Best Quote:** “No refunds. Don’t ask what’s in it.”
 2240:  2152:  2064: 1976: 1888: 607: 
 2241:  2153:  2065: 1977: 1889: 608: #### 🤡 **The Stunt Organizer (Jackass-Style Events & Side Hustles)**
 2242:  2154:  2066: 1978: 1890: 609: - **Purpose:** Hosts **insane trick challenges** with **huge risk & reward**.
 2243:  2155:  2067: 1979: 1891: 610: - **Best Quote:** “Land a quadruple flip, and I’ll give you something real nice.”
 2244:  2156:  2068: 1980: 1892: 611: 
 2245:  2157:  2069: 1981: 1893: 612: ---
 2246:  2158:  2070: 1982: 1894: 613: 
 2247:  2159:  2071: 1983: 1895: 614: ### 🌎 **Worldbuilding NPCs (Exploration, Hidden Routes, & Fan Engagement)**
 2248:  2160:  2072: 1984: 1896: 615: These folks **expand the world** and **give reasons to explore**.
 2249:  2161:  2073: 1985: 1897: 616: 
 2250:  2162:  2074: 1986: 1898: 617: #### ⛷️ **The Retired Pro (Hidden Sledding Routes & Legend Quests)**
 2251:  2163:  2075: 1987: 1899: 618: - **Purpose:** Tells **lore, hidden trails, and backstory of previous champions.**
 2252:  2164:  2076: 1988: 1900: 619: - **Upgrades Unlocked:** **Secret mountain shortcuts & sled blueprints.**
 2253:  2165:  2077: 1989: 1901: 620: - **Best Quote:** “Before you, there was someone else. And he disappeared.”
 2254:  2166:  2078: 1990: 1902: 621: 
 2255:  2167:  2079: 1991: 1903: 622: #### 🦊 **The Wildlife Researcher (Animal Photography & Rare Fan Unlocks)**
 2256:  2168:  2080: 1992: 1904: 623: - **Purpose:** Ties into **wildlife photography mini-games**.
 2257:  2169:  2081: 1993: 1905: 624: - **Upgrades Unlocked:** **Animal-based sled skins & rare sponsor deals.**
 2258:  2170:  2082: 1994: 1906: 625: - **Best Quote:** “Snow leopards? They’re watching you, too.”
 2259:  2171:  2083: 1995: 1907: 626: 
 2260:  2172:  2084: 1996: 1908: 627: #### 📡 **The Event Broadcaster (Commentary & Competitive Meta)**
 2261:  2173:  2085: 1997: 1909: 628: - **Purpose:** Gives **updates on leaderboards, rival NPCs, and changing conditions**.
 2262:  2174:  2086: 1998: 1910: 629: - **Upgrades Unlocked:** **"Breaking News" reports on your achievements.**
 2263:  2175:  2087: 1999: 1911: 630: - **Best Quote:** “The fans are watching, buddy. Make it count.”
 2264:  2176:  2088: 2000: 1912: 631: 
 2265:  2177:  2089: 2001: 1913: 632: ---
 2266:  2178:  2090: 2002: 1914: 633: 
 2267:  2179:  2091: 2003: 1915: 634: ### 🛤️ **The Travel-Ready NPCs (Appear Across Multiple Mountains)**
 2268:  2180:  2092: 2004: 1916: 635: They **don’t just stay in one place**—you’ll run into them as you unlock new peaks.
 2269:  2181:  2093: 2005: 1917: 636: 
 2270:  2182:  2094: 2006: 1918: 637: #### 🎭 **The Rival (Dynamic Trick & Time Trial Duels)**
 2271:  2183:  2095: 2007: 1919: 638: - **Purpose:** Appears on any unlocked mountain to **challenge your records**.
 2272:  2184:  2096: 2008: 1920: 639: - **Best Quote:** “Your best time? That’s cute.”
 2273:  2185:  2097: 2009: 1921: 640: 
 2274:  2186:  2098: 2010: 1922: 641: #### 🛠️ **The Tinkerer (Experimental Sled Mods)**
 2275:  2187:  2099: 2011: 1923: 642: - **Purpose:** Sells **unstable, high-risk sled modifications**.
 2276:  2188:  2100: 2012: 1924: 643: - **Upgrades Unlocked:** **Prototype sled tech.**
 2277:  2189:  2101: 2013: 1925: 644: - **Best Quote:** “This is 50% science and 50% dumb luck.”
 2278:  2190:  2102: 2014: 1926: 645: 
 2279:  2191:  2103: 2015: 1927: 646: #### 🎩 **The Mysterious Merchant (Random Legendary Gear)**
 2280:  2192:  2104: 2016: 1928: 647: - **Purpose:** Appears randomly, selling **rare sleds & gear**.
 2281:  2193:  2105: 2017: 1929: 648: - **Best Quote:** “You don’t know what you need… until you see it.”
 2282:  2194:  2106: 2018: 1930: 649: 
 2283:  2195:  2107: 2019: 1931: 650: ---
 2284:  2196:  2108: 2020: 1932: 651: 
 2285:  2197:  2109: 2021: 1933: 652: ### 🎭 **The Wild Cards (Weird & Legendary NPCs)**
 2286:  2198:  2110: 2022: 1934: 653: These folks are **just strange**, but they add **flavor, mystery, and unpredictability**.
 2287:  2199:  2111: 2023: 1935: 654: 
 2288:  2200:  2112: 2024: 1936: 655: #### 👻 **The Ghost of the Mountain (Phantom Races & Haunted Challenges)**
 2289:  2201:  2113: 2025: 1937: 656: - **Purpose:** Unlocks **ghost time trials & haunted trick courses**.
 2290:  2202:  2114: 2026: 1938: 657: - **Best Quote:** “You ride my path, you race my shadow.”
 2291:  2203:  2115: 2027: 1939: 658: 
 2292:  2204:  2116: 2028: 1940: 659: #### 🧙‍♂️ **The Winter Shaman (Weather Manipulation & Magic Sleds)**
 2293:  2205:  2117: 2029: 1941: 660: - **Purpose:** **Controls mountain weather** for harder/easier runs.
 2294:  2206:  2118: 2030: 1942: 661: - **Best Quote:** “Blizzards make legends.”
 2295:  2207:  2119: 2031: 1943: 662: 
 2296:  2208:  2120: 2032: 1944: 663: #### 🐻 **The Bear Whisperer (Bear Sled Racing Mini-Game)**
 2297:  2209:  2121: 2033: 1945: 664: - **Purpose:** Lets you **race against trained bears** for money.
 2298:  2210:  2122: 2034: 1946: 665: - **Best Quote:** “You sled. They sled. Only one wins.”
 2299:  2211:  2123: 2035: 1947: 666: 
 2300:  2212:  2124: 2036: 1948: 667: #### 🥶 **The Ice Sculptor (Sled Cosmetics & Customization)**
 2301:  2213:  2125: 2037: 1949: 668: - **Purpose:** Crafts **one-of-a-kind sled designs**.
 2302:  2214:  2126: 2038: 1950: 669: - **Best Quote:** “Your ride should be a masterpiece.”
 2303:  2215:  2127: 2039: 1951: 670: 
 2304:  2216:  2128: 2040: 1952: 671: #### 🔮 **The Time Traveler (Future & Past Sled Tech)**
 2305:  2217:  2129: 2041: 1953: 672: - **Purpose:** Unlocks **anachronistic sled models** (steampunk, cyberpunk, caveman logs).
 2306:  2218:  2130: 2042: 1954: 673: - **Best Quote:** “The future’s fast. The past is brutal.”
 2307:  2219:  2131: 2043: 1955: 674: 
 2308:  2220:  2132: 2044: 1956: 675: ---
 2309:  2221:  2133: 2045: 1957: 676: 
 2310:  2222:  2134: 2046: 1958: 677: ## **🏔️ Final Thoughts**
 2311:  2223:  2135: 2047: 1959: 678: This crew **perfectly balances**:
 2312:  2224:  2136: 2048: 1960: 679: ✅ **Core game economy & upgrades**  
 2313:  2225:  2137: 2049: 1961: 680: ✅ **High-speed trick-focused gameplay**  
 2314:  2226:  2138: 2050: 1962: 681: ✅ **Exploration & hidden content**  
 2315:  2227:  2139: 2051: 1963: 682: ✅ **Hilarious but valuable side NPCs**  
 2316:  2228:  2140: 2052: 1964: 683: 
 2317:  2229:  2141: 2053: 1965: 684: These **NPCs make the town feel alive, push competitive play, and add world depth**. Get ready to **build, race, trick, and explore** with this **cast of unforgettable characters**.
 2318:  2230:  2142: 2054: 1966: ````
 2319:  2231:  2143: 2055: 1967: 
 2320:  2232:  2144: 2056: 1968: ## File: docs/CONTROLS.md
 2321:  2233:  2145: 2057: 1969: ````markdown
 2322:  2234:  2146: 2058: 1970:   1: # SledHEAD Game Controls
 2323:  2235:  2147: 2059: 1971:   2: 
 2324:  2236:  2148: 2060: 1972:   3: ## 🎯 Game Overview
 2325:  2237:  2149: 2061: 1973:   4: 
 2326:  2238:  2150: 2062: 1974:   5: SledHEAD is an **arcade-style sledding game** where you play as an **aspiring sledding champion & content creator** who has purchased an entire procedurally generated mountain. Your goal is to master the mountain through optimized sled runs, perform spectacular aerial tricks, photograph elusive wildlife, and earn money to upgrade your equipment and pay off your mountain loan.
 2327:  2239:  2151: 2063: 1975:   6: 
 2328:  2240:  2152: 2064: 1976:   7: The game consists of three distinct phases:
 2329:  2241:  2153: 2065: 1977:   8: 
 2330:  2242:  2154: 2066: 1978:   9: 1. **⬆️ Uphill/Climbing Phase** - Navigate uphill to find the perfect starting position, manage your stamina, and photograph wildlife
 2331:  2243:  2155: 2067: 1979:  10: 2. **⬇️ Downhill/Sledding Phase** - Race down the mountain, performing tricks and avoiding obstacles
 2332:  2244:  2156: 2068: 1980:  11: 3. **🏠 Management Phase** - Spend your earnings on upgrades for your equipment and mountain infrastructure
 2333:  2245:  2157: 2069: 1981:  12: 
 2334:  2246:  2158: 2070: 1982:  13: ---
 2335:  2247:  2159: 2071: 1983:  14: 
 2336:  2248:  2160: 2072: 1984:  15: ## 🎮 Core Controls
 2337:  2249:  2161: 2073: 1985:  16: 
 2338:  2250:  2162: 2074: 1986:  17: ### ⬆️ Uphill/Climbing Phase Controls
 2339:  2251:  2163: 2075: 1987:  18: 
 2340:  2252:  2164: 2076: 1988:  19: | Input | Action |
 2341:  2253:  2165: 2077: 1989:  20: |-------|--------|
 2342:  2254:  2166: 2078: 1990:  21: | **W/A/S/D** | Move the player up/left/down/right across the mountain |
 2343:  2255:  2167: 2079: 1991:  22: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line for photography |
 2344:  2256:  2168: 2080: 1992:  23: | **Spacebar** | Take a photograph when an animal is in view & the altitude line is rapidly flashing|
 2345:  2257:  2169: 2081: 1993:  24: | **E** | [Debug] Manually spawn an animal for testing |
 2346:  2258:  2170: 2082: 1994:  25: 
 2347:  2259:  2171: 2083: 1995:  26: During the uphill phase, you'll:
 2348:  2260:  2172: 2084: 1996:  27: - Navigate the mountain terrain to find optimal starting points
 2349:  2261:  2173: 2085: 1997:  28: - Manage your stamina (which depletes while climbing)
 2350:  2262:  2174: 2086: 1998:  29: - Photograph wildlife to earn additional money
 2351:  2263:  2175: 2087: 1999:  30: - Look for shortcuts and strategic positions for your downhill run
 2352:  2264:  2176: 2088: 2000:  31: 
 2353:  2265:  2177: 2089: 2001:  32: ### ⬇️ Downhill/Sledding Phase Controls
 2354:  2266:  2178: 2090: 2002:  33: 
 2355:  2267:  2179: 2091: 2003:  34: | Input | Action |
 2356:  2268:  2180: 2092: 2004:  35: |-------|--------|
 2357:  2269:  2181: 2093: 2005:  36: | **Arrow Keys ←→** | Steer your sled left or right |
 2358:  2270:  2182: 2094: 2006:  37: | **Spacebar** | Initiate jumps |
 2359:  2271:  2183: 2095: 2007:  38: | **Arrow Keys** (during jumps) | Perform tricks (specific combinations detailed below) |
 2360:  2272:  2184: 2096: 2008:  39: 
 2361:  2273:  2185: 2097: 2009:  40: During downhill sledding, you'll:
 2362:  2274:  2186: 2098: 2010:  41: - Build momentum and navigate the fastest route down
 2363:  2275:  2187: 2099: 2011:  42: - Avoid obstacles like rocks, trees, and tourists
 2364:  2276:  2188: 2100: 2012:  43: - Find and hit jumps to perform tricks
 2365:  2277:  2189: 2101: 2013:  44: - Chain tricks together for bonus rewards
 2366:  2278:  2190: 2102: 2014:  45: 
 2367:  2279:  2191: 2103: 2015:  46: ### 🏠 Management (House & Upgrades) Controls
 2368:  2280:  2192: 2104: 2016:  47: 
 2369:  2281:  2193: 2105: 2017:  48: Navigate menus using mouse/keyboard to:
 2370:  2282:  2194: 2106: 2018:  49: - Purchase equipment upgrades
 2371:  2283:  2195: 2107: 2019:  50: - Expand mountain infrastructure 
 2372:  2284:  2196: 2108: 2020:  51: - Track your earnings and loan payments
 2373:  2285:  2197: 2109: 2021:  52: - Check your current mountain seed (for sharing great mountains!)
 2374:  2286:  2198: 2110: 2022:  53: 
 2375:  2287:  2199: 2111: 2023:  54: ---
 2376:  2288:  2200: 2112: 2024:  55: 
 2377:  2289:  2201: 2113: 2025:  56: ## ✨ Trick System
 2378:  2290:  2202: 2114: 2026:  57: 
 2379:  2291:  2203: 2115: 2027:  58: Perform these trick combinations during jumps to earn additional cash:
 2380:  2292:  2204: 2116: 2028:  59: 
 2381:  2293:  2205: 2117: 2029:  60: | Trick Name | Input Combination | Description |
 2382:  2294:  2206: 2118: 2030:  61: |------------|-------------------|-------------|
 2383:  2295:  2207: 2119: 2031:  62: | **🚁⬅️ Helicopter Spin Left** | Left, Left | Spin horizontally like a helicopter twirling left |
 2384:  2296:  2208: 2120: 2032:  63: | **🚁➡️ Helicopter Spin Right** | Right, Right | Spin horizontally like a helicopter twirling right |
 2385:  2297:  2209: 2121: 2033:  64: | **🪂 Parachute** | Up, Down | Hold sled overhead to slow descent and extend air time |
 2386:  2298:  2210: 2122: 2034:  65: | **🛑 Air Brake** | Up, Up | Use sled as air brake to slow lateral speed |
 2387:  2299:  2211: 2123: 2035:  66: 
 2388:  2300:  2212: 2124: 2036:  67: **Trick Tips:**
 2389:  2301:  2213: 2125: 2037:  68: - Successfully landing tricks earns money
 2390:  2302:  2214: 2126: 2038:  69: - Chain tricks for bonus multipliers
 2391:  2303:  2215: 2127: 2039:  70: - Be careful - attempting tricks without enough air time can result in crashes!
 2392:  2304:  2216: 2128: 2040:  71: - Re-hitting jumps can extend combo chains
 2393:  2305:  2217: 2129: 2041:  72: 
 2394:  2306:  2218: 2130: 2042:  73: ---
 2395:  2307:  2219: 2131: 2043:  74: 
 2396:  2308:  2220: 2132: 2044:  75: ## 📸 Photography System Controls
 2397:  2309:  2221: 2133: 2045:  76: 
 2398:  2310:  2222: 2134: 2046:  77: | Control | Action |
 2399:  2311:  2223: 2135: 2047:  78: |---------|--------|
 2400:  2312:  2224: 2136: 2048:  79: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line |
 2401:  2313:  2225: 2137: 2049:  80: | **Spacebar** | Take photo |
 2402:  2314:  2226: 2138: 2050:  81: 
 2403:  2315:  2227: 2139: 2051:  82: **Photography Tips:**
 2404:  2316:  2228: 2140: 2052:  83: - Match the altitude line with the animal for maximum reward
 2405:  2317:  2229: 2141: 2053:  84: - Animals that are moving yield higher rewards
 2406:  2318:  2230: 2142: 2054:  85: - Each repeated photo of the same animal gives diminishing returns
 2407:  2319:  2231: 2143: 2055:  86: - Upgrade your camera equipment to improve your photography income
 2408:  2320:  2232: 2144: 2056:  87: 
 2409:  2321:  2233: 2145: 2057:  88: ---
 2410:  2322:  2234: 2146: 2058:  89: 
 2411:  2323:  2235: 2147: 2059:  90: ## ⚙️ Advanced Mechanics
 2412:  2324:  2236: 2148: 2060:  91: 
 2413:  2325:  2237: 2149: 2061:  92: ### Stamina Management
 2414:  2326:  2238: 2150: 2062:  93: - Stamina depletes during uphill climbing
 2415:  2327:  2239: 2151: 2063:  94: - Return to the house to end your day and restore stamina
 2416:  2328:  2240: 2152: 2064:  95: - Each day you will be charged 0.5% of your loan
 2417:  2329:  2241: 2153: 2065:  96: - If you run out of stamina, you are immediately returned to the house, and charged 100*(houseReEntry*0.1)
 2418:  2330:  2242: 2154: 2066:  97: - Upgrade your equipment to reduce stamina consumption
 2419:  2331:  2243: 2155: 2067:  98: 
 2420:  2332:  2244: 2156: 2068:  99: ### Collision Handling
 2421:  2333:  2245: 2157: 2069: 100: - Collisions with obstacles slow you down and may cause crashes
 2422:  2334:  2246: 2158: 2070: 101: - Upgrade sled durability to withstand more collisions
 2423:  2335:  2247: 2159: 2071: 102: - Each crash reduces your potential earnings
 2424:  2336:  2248: 2160: 2072: 103: 
 2425:  2337:  2249: 2161: 2073: 104: ### Upgrade System
 2426:  2338:  2250: 2162: 2074: 105: Spend your earnings on:
 2427:  2339:  2251: 2163: 2075: 106: - **Rocket Surgery**: Increases speed and jump dynamics
 2428:  2340:  2252: 2164: 2076: 107: - **Optimal Optics**: Improves camera angle and accuracy
 2429:  2341:  2253: 2165: 2077: 108: - **Sled Durability**: Increases collision tolerance
 2430:  2342:  2254: 2166: 2078: 109: - **Fancier Footwear**: Improves uphill movement speed
 2431:  2343:  2255: 2167: 2079: 110: 
 2432:  2344:  2256: 2168: 2080: 111: ### Win Condition
 2433:  2345:  2257: 2169: 2081: 112: - Pay off your mountain loan to trigger the victory state
 2434:  2346:  2258: 2170: 2082: 113: - Challenge yourself to complete this with fewer runs!
 2435:  2347:  2259: 2171: 2083: ````
 2436:  2348:  2260: 2172: 2084: 
 2437:  2349:  2261: 2173: 2085: ## File: docs/README.md
 2438:  2350:  2262: 2174: 2086: ````markdown
 2439:  2351:  2263: 2175: 2087:   1: # **SledHEAD**  
 2440:  2352:  2264: 2176: 2088:   2: **Genre:** Trick & Time Trial Racer | Adventure  
 2441:  2353:  2265: 2177: 2089:   3: **Platform:** Web-based (PC)  
 2442:  2354:  2266: 2178: 2090:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
 2443:  2355:  2267: 2179: 2091:   5: 
 2444:  2356:  2268: 2180: 2092:   6: > 🎮 **[Game Controls Guide](CONTROLS.md)** - Detailed explanation of all game controls and mechanics
 2445:  2357:  2269: 2181: 2093:   7: 
 2446:  2358:  2270: 2182: 2094:   8: ---
 2447:  2359:  2271: 2183: 2095:   9: 
 2448:  2360:  2272: 2184: 2096:  10: ## Table of Contents  
 2449:  2361:  2273: 2185: 2097:  11: 1. [Core Concept](#core-concept)  
 2450:  2362:  2274: 2186: 2098:  12: 2. [Gameplay Loops](#gameplay-loops)  
 2451:  2363:  2275: 2187: 2099:  13:    - [Sledding Phase (Downhill)](#sledding-phase-downhill)  
 2452:  2364:  2276: 2188: 2100:  14:    - [Climbing Phase (Uphill)](#climbing-phase-uphill)  
 2453:  2365:  2277: 2189: 2101:  15:    - [Management Phase (House & Upgrades)](#management-phase-house--upgrades)  
 2454:  2366:  2278: 2190: 2102:  16: 3. [Trick System](#trick-system)  
 2455:  2367:  2279: 2191: 2103:  17: 4. [Upgrade System](#upgrade-system)  
 2456:  2368:  2280: 2192: 2104:  18: 5. [Photo System](#photo-system)  
 2457:  2369:  2281: 2193: 2105:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)  
 2458:  2370:  2282: 2194: 2106:  20: 
 2459:  2371:  2283: 2195: 2107:  21: ---
 2460:  2372:  2284: 2196: 2108:  22: 
 2461:  2373:  2285: 2197: 2109:  23: ## 🎯 **Core Concept**  
 2462:  2374:  2286: 2198: 2110:  24: You are an **aspiring sledding champion & content creator**, challenging yourself to master an enormous mountain. Your goal is to optimize sled runs, perform aerial tricks, and earn money by completing daring stunts and photographing wildlife.
 2463:  2375:  2287: 2199: 2111:  25: 
 2464:  2376:  2288: 2200: 2112:  26: ---
 2465:  2377:  2289: 2201: 2113:  27: 
 2466:  2378:  2290: 2202: 2114:  28: ## 🎮 **Gameplay Loops**  
 2467:  2379:  2291: 2203: 2115:  29: 
 2468:  2380:  2292: 2204: 2116:  30: ### ⬇️ **Sledding Phase (Downhill)**  
 2469:  2381:  2293: 2205: 2117:  31: - **Speed & Gravity:** Race down the mountain, using gravity and momentum to your advantage.  
 2470:  2382:  2294: 2206: 2118:  32: - **Perform Tricks:** Execute tricks mid-air to earn extra cash.  
 2471:  2383:  2295: 2207: 2119:  33: - **Avoid Obstacles:** Rocks and other hazards can slow you down and increase collision counts.  
 2472:  2384:  2296: 2208: 2120:  34: 
 2473:  2385:  2297: 2209: 2121:  35: ### ⬆️ **Climbing Phase (Uphill)**  
 2474:  2386:  2298: 2210: 2122:  36: - **Manual Return:** Use simple directional controls to climb back up the mountain.  
 2475:  2387:  2299: 2211: 2123:  37: - **Camera Controls:** Rotate your camera and adjust the altitude line to prepare for wildlife photography.  
 2476:  2388:  2300: 2212: 2124:  38: 
 2477:  2389:  2301: 2213: 2125:  39: ### 🏠 **Management Phase (House & Upgrades)**  
 2478:  2390:  2302: 2214: 2126:  40: - **Upgrade Equipment:** Use your earnings to purchase upgrades that improve your sledding, camera, and movement capabilities.  
 2479:  2391:  2303: 2215: 2127:  41: - **Pay Off Loan:** Reduce your initial loan with the money you earn. Once it's fully repaid, you win!
 2480:  2392:  2304: 2216: 2128:  42: 
 2481:  2393:  2305: 2217: 2129:  43: ---
 2482:  2394:  2306: 2218: 2130:  44: 
 2483:  2395:  2307: 2219: 2131:  45: ## ✨ **Trick System**  
 2484:  2396:  2308: 2220: 2132:  46: - Perform tricks during jumps to earn additional cash.  
 2485:  2397:  2309: 2221: 2133:  47: - Tricks include:  
 2486:  2398:  2310: 2222: 2134:  48:   - **Left Helicopter** (Rotate left mid-air)  
 2487:  2399:  2311: 2223: 2135:  49:   - **Right Helicopter** (Rotate right mid-air)  
 2488:  2400:  2312: 2224: 2136:  50:   - **Air Brake** (Apply aerial braking)  
 2489:  2401:  2313: 2225: 2137:  51:   - **Parachute** (Deploy for controlled descent)  
 2490:  2402:  2314: 2226: 2138:  52: - Tricks can be chained for bonus rewards, and re-hit jumps can extend combo chains.  
 2491:  2403:  2315: 2227: 2139:  53: 
 2492:  2404:  2316: 2228: 2140:  54: ---
 2493:  2405:  2317: 2229: 2141:  55: 
 2494:  2406:  2318: 2230: 2142:  56: ## 🔧 **Upgrade System**  
 2495:  2407:  2319: 2231: 2143:  57: Upgrades enhance gameplay and include:
 2496:  2408:  2320: 2232: 2144:  58: 
 2497:  2409:  2321: 2233: 2145:  59: ### 🛷 **Personal Upgrades:**  
 2498:  2410:  2322: 2234: 2146:  60: - **Rocket Surgery:** Increases speed and jump dynamics.  
 2499:  2411:  2323: 2235: 2147:  61: - **Optimal Optics:** Improves camera angle and accuracy for better wildlife photography.  
 2500:  2412:  2324: 2236: 2148:  62: - **Sled Durability:** Increases the number of collisions you can survive.  
 2501:  2413:  2325: 2237: 2149:  63: - **Fancier Footwear:** Improves uphill movement speed.  
 2502:  2414:  2326: 2238: 2150:  64: 
 2503:  2415:  2327: 2239: 2151:  65: ### 🏔️ **Mountain Upgrades:**  
 2504:  2416:  2328: 2240: 2152:  66: - **Ski Lifts:** (Planned but not yet implemented)  
 2505:  2417:  2329: 2241: 2153:  67: - **Snowmobile Rentals:** (Planned but not yet implemented)  
 2506:  2418:  2330: 2242: 2154:  68: - **Groomed Trails:** (Planned but not yet implemented)  
 2507:  2419:  2331: 2243: 2155:  69: 
 2508:  2420:  2332: 2244: 2156:  70: ---
 2509:  2421:  2333: 2245: 2157:  71: 
 2510:  2422:  2334: 2246: 2158:  72: ## 📸 **Photo System**  
 2511:  2423:  2335: 2247: 2159:  73: - **Wildlife Spawning:** Bears and birds spawn during the uphill phase.  
 2512:  2424:  2336: 2248: 2160:  74: - **Camera Use:** Adjust the camera angle and altitude line to capture the perfect shot.  
 2513:  2425:  2337: 2249: 2161:  75: - **Scoring Factors:**  
 2514:  2426:  2338: 2250: 2162:  76:   - **Altitude Matching:** Better alignment with animal altitude increases reward.  
 2515:  2427:  2339: 2251: 2163:  77:   - **Centering:** Well-centered shots provide bonus payouts.  
 2516:  2428:  2340: 2252: 2164:  78:   - **Movement Bonus:** Photographing moving animals yields more cash.  
 2517:  2429:  2341: 2253: 2165:  79:   - **Repeat Penalty:** Avoid photographing the same animal multiple times for reduced penalties.  
 2518:  2430:  2342: 2254: 2166:  80: 
 2519:  2431:  2343: 2255: 2167:  81: ---
 2520:  2432:  2344: 2256: 2168:  82: 
 2521:  2433:  2345: 2257: 2169:  83: ## ⚙️ **Game Balance & Tweakable Variables**  
 2522:  2434:  2346: 2258: 2170:  84: Key variables that control game mechanics and can be adjusted include:  
 2523:  2435:  2347: 2259: 2171:  85: - **Jump Mechanics:** Height, duration, and zoom bonuses.  
 2524:  2436:  2348: 2260: 2172:  86: - **Animal Behavior:** Spawn times, movement speed, and flee mechanics.  
 2525:  2437:  2349: 2261: 2173:  87: - **Upgrade Costs & Effects:** Each upgrade scales in cost and effectiveness.  
 2526:  2438:  2350: 2262: 2174:  88: - **Collision Handling:** How collisions are managed and penalized.  
 2527:  2439:  2351: 2263: 2175:  89: 
 2528:  2440:  2352: 2264: 2176:  90: ---
 2529:  2441:  2353: 2265: 2177:  91: 
 2530:  2442:  2354: 2266: 2178:  92: ## 🎮 **Controls**  
 2531:  2443:  2355: 2267: 2179:  93: - **W/A/S/D:** Move the player during the uphill phase.  
 2532:  2444:  2356: 2268: 2180:  94: - **Arrow Keys:** Adjust the camera angle and altitude line.  
 2533:  2445:  2357: 2269: 2181:  95: - **Spacebar:**  
 2534:  2446:  2358: 2270: 2182:  96:   - **Downhill Phase:** Initiates jumps.  
 2535:  2447:  2359: 2271: 2183:  97:   - **Uphill Phase:** Takes a photo.  
 2536:  2448:  2360: 2272: 2184:  98: - **E:** Manually spawn an animal (for testing purposes).  
 2537:  2449:  2361: 2273: 2185:  99: 
 2538:  2450:  2362: 2274: 2186: 100: ---
 2539:  2451:  2363: 2275: 2187: 101: 
 2540:  2452:  2364: 2276: 2188: 102: ## ✅ **Win Condition**  
 2541:  2453:  2365: 2277: 2189: 103: - Pay off the initial loan to trigger the victory state.
 2542:  2454:  2366: 2278: 2190: ````
 2543:  2455:  2367: 2279: 2191: 
 2544:  2456:  2368: 2280: 2192: ## File: js/mobs/bear.js
 2545:  2457:  2369: 2281: 2193: ````javascript
 2546:  2458:  2370: 2282: 2194:  1: /* bear.js - Bear Animal Module
 2547:  2459:  2371: 2283: 2195:  2: // This module defines the bear characteristics for the wildlife simulation.
 2548:  2460:  2372: 2284: 2196:  3: // It registers itself with wildlife.js by calling registerAnimalType().
 2549:  2461:  2373: 2285: 2197:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 2550:  2462:  2374: 2286: 2198:  5: */
 2551:  2463:  2375: 2287: 2199:  6: (function() {
 2552:  2464:  2376: 2288: 2200:  7:     var bearData = {
 2553:  2465:  2377: 2289: 2201:  8:         type: "bear",
 2554:  2466:  2378: 2290: 2202:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.bearSpawnProbability) || 0.5,
 2555:  2467:  2379: 2291: 2203: 10:         width: 40,
 2556:  2468:  2380: 2292: 2204: 11:         height: 60,
 2557:  2469:  2381: 2293: 2205: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.bearDetectionRadius) || 50,
 2558:  2470:  2382: 2294: 2206: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.bearSpeed) || 8,
 2559:  2471:  2383: 2295: 2207: 14:         basePhotoBonus: 10, // Bears yield a higher photo bonus
 2560:  2472:  2384: 2296: 2208: 15:         color: "#8B4513",
 2561:  2473:  2385: 2297: 2209: 16:         spawningBiomes: [
 2562:  2474:  2386: 2298: 2210: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
 2563:  2475:  2387: 2299: 2211: 18:         ],
 2564:  2476:  2388: 2300: 2212: 19:         customUpdate: null,
 2565:  2477:  2389: 2301: 2213: 20:         customDraw: function(animal, screenY, ctx) {
 2566:  2478:  2390: 2302: 2214: 21:             // Draw the bear's body
 2567:  2479:  2391: 2303: 2215: 22:             ctx.fillStyle = "#8B4513";
 2568:  2480:  2392: 2304: 2216: 23:             ctx.fillRect(
 2569:  2481:  2393: 2305: 2217: 24:                 animal.x - animal.width / 2,
 2570:  2482:  2394: 2306: 2218: 25:                 screenY - animal.height / 2,
 2571:  2483:  2395: 2307: 2219: 26:                 animal.width,
 2572:  2484:  2396: 2308: 2220: 27:                 animal.height
 2573:  2485:  2397: 2309: 2221: 28:             );
 2574:  2486:  2398: 2310: 2222: 29:             // Draw bear ears as simple rectangles
 2575:  2487:  2399: 2311: 2223: 30:             ctx.fillStyle = "#000000";
 2576:  2488:  2400: 2312: 2224: 31:             ctx.fillRect(
 2577:  2489:  2401: 2313: 2225: 32:                 animal.x - animal.width / 3,
 2578:  2490:  2402: 2314: 2226: 33:                 screenY - animal.height / 2 - 10,
 2579:  2491:  2403: 2315: 2227: 34:                 10,
 2580:  2492:  2404: 2316: 2228: 35:                 10
 2581:  2493:  2405: 2317: 2229: 36:             );
 2582:  2494:  2406: 2318: 2230: 37:             ctx.fillRect(
 2583:  2495:  2407: 2319: 2231: 38:                 animal.x + animal.width / 3 - 10,
 2584:  2496:  2408: 2320: 2232: 39:                 screenY - animal.height / 2 - 10,
 2585:  2497:  2409: 2321: 2233: 40:                 10,
 2586:  2498:  2410: 2322: 2234: 41:                 10
 2587:  2499:  2411: 2323: 2235: 42:             );
 2588:  2500:  2412: 2324: 2236: 43:             // Altitude indicator
 2589:  2501:  2413: 2325: 2237: 44:             let t = 1 - (animal.altitude / 100);
 2590:  2502:  2414: 2326: 2238: 45:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 2591:  2503:  2415: 2327: 2239: 46:             ctx.fillStyle = altitudeColor;
 2592:  2504:  2416: 2328: 2240: 47:             ctx.fillRect(
 2593:  2505:  2417: 2329: 2241: 48:                 animal.x + animal.width / 2 + 5,
 2594:  2506:  2418: 2330: 2242: 49:                 screenY - 5,
 2595:  2507:  2419: 2331: 2243: 50:                 10,
 2596:  2508:  2420: 2332: 2244: 51:                 10
 2597:  2509:  2421: 2333: 2245: 52:             );
 2598:  2510:  2422: 2334: 2246: 53:         }
 2599:  2511:  2423: 2335: 2247: 54:     };
 2600:  2512:  2424: 2336: 2248: 55:     if (typeof registerAnimalType === 'function') {
 2601:  2513:  2425: 2337: 2249: 56:         registerAnimalType(bearData);
 2602:  2514:  2426: 2338: 2250: 57:     } else {
 2603:  2515:  2427: 2339: 2251: 58:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
 2604:  2516:  2428: 2340: 2252: 59:     }
 2605:  2517:  2429: 2341: 2253: 60: })();
 2606:  2518:  2430: 2342: 2254: ````
 2607:  2519:  2431: 2343: 2255: 
 2608:  2520:  2432: 2344: 2256: ## File: js/mobs/bird.js
 2609:  2521:  2433: 2345: 2257: ````javascript
 2610:  2522:  2434: 2346: 2258:  1: /* bird.js - Bird Animal Module
 2611:  2523:  2435: 2347: 2259:  2: // This module defines the bird characteristics for the wildlife simulation.
 2612:  2524:  2436: 2348: 2260:  3: // It registers itself with wildlife.js by calling registerAnimalType().
 2613:  2525:  2437: 2349: 2261:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 2614:  2526:  2438: 2350: 2262:  5: */
 2615:  2527:  2439: 2351: 2263:  6: (function() {
 2616:  2528:  2440: 2352: 2264:  7:     var birdData = {
 2617:  2529:  2441: 2353: 2265:  8:         type: "bird",
 2618:  2530:  2442: 2354: 2266:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.birdSpawnProbability) || 0.5,
 2619:  2531:  2443: 2355: 2267: 10:         width: 20,
 2620:  2532:  2444: 2356: 2268: 11:         height: 20,
 2621:  2533:  2445: 2357: 2269: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.birdDetectionRadius) || 50,
 2622:  2534:  2446: 2358: 2270: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.birdSpeed) || 12,
 2623:  2535:  2447: 2359: 2271: 14:         basePhotoBonus: 5, // Birds yield a lower photo bonus
 2624:  2536:  2448: 2360: 2272: 15:         color: "#1E90FF",
 2625:  2537:  2449: 2361: 2273: 16:         spawningBiomes: [
 2626:  2538:  2450: 2362: 2274: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
 2627:  2539:  2451: 2363: 2275: 18:         ],
 2628:  2540:  2452: 2364: 2276: 19:         customUpdate: null,
 2629:  2541:  2453: 2365: 2277: 20:         customDraw: function(animal, screenY, ctx) {
 2630:  2542:  2454: 2366: 2278: 21:             // Draw the bird's body
 2631:  2543:  2455: 2367: 2279: 22:             ctx.fillStyle = "#1E90FF";
 2632:  2544:  2456: 2368: 2280: 23:             ctx.fillRect(
 2633:  2545:  2457: 2369: 2281: 24:                 animal.x - animal.width / 2,
 2634:  2546:  2458: 2370: 2282: 25:                 screenY - animal.height / 2,
 2635:  2547:  2459: 2371: 2283: 26:                 animal.width,
 2636:  2548:  2460: 2372: 2284: 27:                 animal.height
 2637:  2549:  2461: 2373: 2285: 28:             );
 2638:  2550:  2462: 2374: 2286: 29:             // Draw bird wings with a simple flapping effect
 2639:  2551:  2463: 2375: 2287: 30:             ctx.fillStyle = "#000000";
 2640:  2552:  2464: 2376: 2288: 31:             if (Math.floor(Date.now() / 200) % 2 === 0) {
 2641:  2553:  2465: 2377: 2289: 32:                 ctx.beginPath();
 2642:  2554:  2466: 2378: 2290: 33:                 ctx.moveTo(animal.x, screenY);
 2643:  2555:  2467: 2379: 2291: 34:                 ctx.lineTo(animal.x - 20, screenY - 10);
 2644:  2556:  2468: 2380: 2292: 35:                 ctx.lineTo(animal.x + 20, screenY - 10);
 2645:  2557:  2469: 2381: 2293: 36:                 ctx.closePath();
 2646:  2558:  2470: 2382: 2294: 37:                 ctx.fill();
 2647:  2559:  2471: 2383: 2295: 38:             } else {
 2648:  2560:  2472: 2384: 2296: 39:                 ctx.beginPath();
 2649:  2561:  2473: 2385: 2297: 40:                 ctx.moveTo(animal.x, screenY);
 2650:  2562:  2474: 2386: 2298: 41:                 ctx.lineTo(animal.x - 20, screenY + 5);
 2651:  2563:  2475: 2387: 2299: 42:                 ctx.lineTo(animal.x + 20, screenY + 5);
 2652:  2564:  2476: 2388: 2300: 43:                 ctx.closePath();
 2653:  2565:  2477: 2389: 2301: 44:                 ctx.fill();
 2654:  2566:  2478: 2390: 2302: 45:             }
 2655:  2567:  2479: 2391: 2303: 46:             // Altitude indicator
 2656:  2568:  2480: 2392: 2304: 47:             let t = 1 - (animal.altitude / 100);
 2657:  2569:  2481: 2393: 2305: 48:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 2658:  2570:  2482: 2394: 2306: 49:             ctx.fillStyle = altitudeColor;
 2659:  2571:  2483: 2395: 2307: 50:             ctx.fillRect(
 2660:  2572:  2484: 2396: 2308: 51:                 animal.x + animal.width / 2 + 5,
 2661:  2573:  2485: 2397: 2309: 52:                 screenY - 5,
 2662:  2574:  2486: 2398: 2310: 53:                 10,
 2663:  2575:  2487: 2399: 2311: 54:                 10
 2664:  2576:  2488: 2400: 2312: 55:             );
 2665:  2577:  2489: 2401: 2313: 56:         }
 2666:  2578:  2490: 2402: 2314: 57:     };
 2667:  2579:  2491: 2403: 2315: 58:     if (typeof registerAnimalType === 'function') {
 2668:  2580:  2492: 2404: 2316: 59:         registerAnimalType(birdData);
 2669:  2581:  2493: 2405: 2317: 60:     } else {
 2670:  2582:  2494: 2406: 2318: 61:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
 2671:  2583:  2495: 2407: 2319: 62:     }
 2672:  2584:  2496: 2408: 2320: 63: })();
 2673:  2585:  2497: 2409: 2321: ````
 2674:  2586:  2498: 2410: 2322: 
 2675:  2587:  2499: 2411: 2323: ## File: js/input.js
 2676:  2588:  2500: 2412: 2324: ````javascript
 2677:  2589:  2501: 2413: 2325:  1: /* input.js - Keyboard Input Handling */
 2678:  2590:  2502: 2414: 2326:  2: // Global keyboard input tracking
 2679:  2591:  2503: 2415: 2327:  3: var keysDown = {};
 2680:  2592:  2504: 2416: 2328:  4: // Global cursor position tracking
 2681:  2593:  2505: 2417: 2329:  5: var cursorPosition = {
 2682:  2594:  2506: 2418: 2330:  6:   absoluteX: 0,
 2683:  2595:  2507: 2419: 2331:  7:   absoluteY: 0,
 2684:  2596:  2508: 2420: 2332:  8:   viewportX: 0,
 2685:  2597:  2509: 2421: 2333:  9:   viewportY: 0,
 2686:  2598:  2510: 2422: 2334: 10:   lastUpdateTime: 0
 2687:  2599:  2511: 2423: 2335: 11: };
 2688:  2600:  2512: 2424: 2336: 12: // Set up event listeners for keyboard input
 2689:  2601:  2513: 2425: 2337: 13: window.addEventListener("keydown", function(e) {
 2690:  2602:  2514: 2426: 2338: 14:   keysDown[e.key] = true;
 2691:  2603:  2515: 2427: 2339: 15: });
 2692:  2604:  2516: 2428: 2340: 16: window.addEventListener("keyup", function(e) {
 2693:  2605:  2517: 2429: 2341: 17:   keysDown[e.key] = false;
 2694:  2606:  2518: 2430: 2342: 18: });
 2695:  2607:  2519: 2431: 2343: 19: // Set up event listener for mouse movement
 2696:  2608:  2520: 2432: 2344: 20: window.addEventListener("mousemove", function(e) {
 2697:  2609:  2521: 2433: 2345: 21:   // Store both absolute and viewport coordinates
 2698:  2610:  2522: 2434: 2346: 22:   cursorPosition.absoluteX = e.pageX;
 2699:  2611:  2523: 2435: 2347: 23:   cursorPosition.absoluteY = e.pageY;
 2700:  2612:  2524: 2436: 2348: 24:   cursorPosition.viewportX = e.clientX;
 2701:  2613:  2525: 2437: 2349: 25:   cursorPosition.viewportY = e.clientY;
 2702:  2614:  2526: 2438: 2350: 26: });
 2703:  2615:  2527: 2439: 2351: 27: // Update the cursor position display
 2704:  2616:  2528: 2440: 2352: 28: function updateCursorPositionDisplay() {
 2705:  2617:  2529: 2441: 2353: 29:   const cursorPositionElement = document.getElementById("cursor-position");
 2706:  2618:  2530: 2442: 2354: 30:   if (cursorPositionElement) {
 2707:  2619:  2531: 2443: 2355: 31:     cursorPositionElement.textContent = `Abs-xy: (${cursorPosition.absoluteX}, ${cursorPosition.absoluteY}) | View: (${cursorPosition.viewportX}, ${cursorPosition.viewportY})`;
 2708:  2620:  2532: 2444: 2356: 32:   }
 2709:  2621:  2533: 2445: 2357: 33: }
 2710:  2622:  2534: 2446: 2358: 34: // Set up interval to update cursor position display once per second
 2711:  2623:  2535: 2447: 2359: 35: setInterval(updateCursorPositionDisplay, 1000);
 2712:  2624:  2536: 2448: 2360: 36: // Helper function to check if a key is currently pressed
 2713:  2625:  2537: 2449: 2361: 37: function isKeyDown(key) {
 2714:  2626:  2538: 2450: 2362: 38:   return keysDown[key] === true;
 2715:  2627:  2539: 2451: 2363: 39: }
 2716:  2628:  2540: 2452: 2364: ````
 2717:  2629:  2541: 2453: 2365: 
 2718:  2630:  2542: 2454: 2366: ## File: js/tricks.js
 2719:  2631:  2543: 2455: 2367: ````javascript
 2720:  2632:  2544: 2456: 2368:  1: /* tricks.js - Trick System & Logic */
 2721:  2633:  2545: 2457: 2369:  2: import { register } from './registry.js';
 2722:  2634:  2546: 2458: 2370:  3: function startTrick(trickName) {
 2723:  2635:  2547: 2459: 2371:  4:   if (player.currentTrick) return;
 2724:  2636:  2548: 2460: 2372:  5:   player.currentTrick = trickName;
 2725:  2637:  2549: 2461: 2373:  6:   player.trickTimer = 0;
 2726:  2638:  2550: 2462: 2374:  7:   player.trickRotation = 0;
 2727:  2639:  2551: 2463: 2375:  8:   player.trickOffset = 0;
 2728:  2640:  2552: 2464: 2376:  9:   let now = Date.now();
 2729:  2641:  2553: 2465: 2377: 10:   let cooldownEnd = player.trickCooldowns[trickName] || 0;
 2730:  2642:  2554: 2466: 2378: 11:   let timeLeft = Math.max(0, cooldownEnd - now);
 2731:  2643:  2555: 2467: 2379: 12:   player.currentTrickValueMultiplier = timeLeft > 0 ? Math.max(0.1, 1 - (timeLeft / TWEAK._trickCooldown)) : 1;
 2732:  2644:  2556: 2468: 2380: 13:   player.trickCooldowns[trickName] = now + TWEAK._trickCooldown;
 2733:  2645:  2557: 2469: 2381: 14:   console.log(`Starting ${trickName} (Value: ${(player.currentTrickValueMultiplier * 100).toFixed(0)}%)`);
 2734:  2646:  2558: 2470: 2382: 15: }
 2735:  2647:  2559: 2471: 2383: 16: register("startTrick", startTrick);
 2736:  2648:  2560: 2472: 2384: 17: function checkTrickInputs() {
 2737:  2649:  2561: 2473: 2385: 18:   if (!player.currentTrick && player.isJumping) {
 2738:  2650:  2562: 2474: 2386: 19:     if (keysDown["ArrowLeft"]) startTrick("leftHelicopter");
 2739:  2651:  2563: 2475: 2387: 20:     else if (keysDown["ArrowRight"]) startTrick("rightHelicopter");
 2740:  2652:  2564: 2476: 2388: 21:     else if (keysDown["ArrowUp"]) startTrick("airBrake");
 2741:  2653:  2565: 2477: 2389: 22:     else if (keysDown["ArrowDown"]) startTrick("parachute");
 2742:  2654:  2566: 2478: 2390: 23:   }
 2743:  2655:  2567: 2479: 2391: 24: }
 2744:  2656:  2568: 2480: 2392: 25: register("checkTrickInputs", checkTrickInputs);
 2745:  2657:  2569: 2481: 2393: 26: function processTrick(deltaTime) {
 2746:  2658:  2570: 2482: 2394: 27:   if (player.currentTrick) {
 2747:  2659:  2571: 2483: 2395: 28:     player.trickTimer += deltaTime;
 2748:  2660:  2572: 2484: 2396: 29:     let trickProgress = player.trickTimer / (TWEAK._trickBaseDuration * TWEAK._trickTimeMultiplier + TWEAK._trickTimeAdder);
 2749:  2661:  2573: 2485: 2397: 30:     switch (player.currentTrick) {
 2750:  2662:  2574: 2486: 2398: 31:       case "leftHelicopter":
 2751:  2663:  2575: 2487: 2399: 32:         player.trickRotation -= TWEAK._trickRotationSpeed * (deltaTime / 1000);
 2752:  2664:  2576: 2488: 2400: 33:         break;
 2753:  2665:  2577: 2489: 2401: 34:       case "rightHelicopter":
 2754:  2666:  2578: 2490: 2402: 35:         player.trickRotation += TWEAK._trickRotationSpeed * (deltaTime / 1000);
 2755:  2667:  2579: 2491: 2403: 36:         break;
 2756:  2668:  2580: 2492: 2404: 37:       case "airBrake":
 2757:  2669:  2581: 2493: 2405: 38:       case "parachute":
 2758:  2670:  2582: 2494: 2406: 39:         player.trickOffset = TWEAK._trickOffsetDistance * Math.sin(Math.PI * trickProgress);
 2759:  2671:  2583: 2495: 2407: 40:         break;
 2760:  2672:  2584: 2496: 2408: 41:     }
 2761:  2673:  2585: 2497: 2409: 42:     if (trickProgress >= 1) {
 2762:  2674:  2586: 2498: 2410: 43:       completeTrick();
 2763:  2675:  2587: 2499: 2411: 44:     }
 2764:  2676:  2588: 2500: 2412: 45:   }
 2765:  2677:  2589: 2501: 2413: 46: }
 2766:  2678:  2590: 2502: 2414: 47: register("processTrick", processTrick);
 2767:  2679:  2591: 2503: 2415: 48: function completeTrick() {
 2768:  2680:  2592: 2504: 2416: 49:   let trickMoney = TWEAK._trickMoneyBase;
 2769:  2681:  2593: 2505: 2417: 50:   let chainBonus = 1;
 2770:  2682:  2594: 2506: 2418: 51:   if (player.lastTrick && player.lastTrick !== player.currentTrick) {
 2771:  2683:  2595: 2507: 2419: 52:     player.trickChainCount++;
 2772:  2684:  2596: 2508: 2420: 53:     chainBonus = Math.pow(TWEAK._trickChainMultiplier, player.trickChainCount);
 2773:  2685:  2597: 2509: 2421: 54:     trickMoney *= chainBonus;
 2774:  2686:  2598: 2510: 2422: 55:   } else {
 2775:  2687:  2599: 2511: 2423: 56:     player.trickChainCount = 0;
 2776:  2688:  2600: 2512: 2424: 57:   }
 2777:  2689:  2601: 2513: 2425: 58:   trickMoney *= player.currentTrickValueMultiplier;
 2778:  2690:  2602: 2514: 2426: 59:   let finalMoney = Math.floor(trickMoney);
 2779:  2691:  2603: 2515: 2427: 60:   player.money += finalMoney;
 2780:  2692:  2604: 2516: 2428: 61:   showMoneyGain(finalMoney, `(${player.currentTrick})`);
 2781:  2693:  2605: 2517: 2429: 62:   addFloatingText(`+$${finalMoney} ${player.currentTrick}`, player.x, player.absY);
 2782:  2694:  2606: 2518: 2430: 63:   console.log(`Completed ${player.currentTrick}! +$${finalMoney}`);
 2783:  2695:  2607: 2519: 2431: 64:   player.lastTrick = player.currentTrick;
 2784:  2696:  2608: 2520: 2432: 65:   player.currentTrick = null;
 2785:  2697:  2609: 2521: 2433: 66:   player.trickTimer = 0;
 2786:  2698:  2610: 2522: 2434: 67:   player.trickRotation = 0;
 2787:  2699:  2611: 2523: 2435: 68:   player.trickOffset = 0;
 2788:  2700:  2612: 2524: 2436: 69:   playTrickCompleteSound();
 2789:  2701:  2613: 2525: 2437: 70: }
 2790:  2702:  2614: 2526: 2438: 71: register("completeTrick", completeTrick);
 2791:  2703:  2615: 2527: 2439: 72: function resetTrickState() {
 2792:  2704:  2616: 2528: 2440: 73:   player.currentTrick = null;
 2793:  2705:  2617: 2529: 2441: 74:   player.trickTimer = 0;
 2794:  2706:  2618: 2530: 2442: 75:   player.trickRotation = 0;
 2795:  2707:  2619: 2531: 2443: 76:   player.trickOffset = 0;
 2796:  2708:  2620: 2532: 2444: 77:   player.lastTrick = null;
 2797:  2709:  2621: 2533: 2445: 78:   player.trickChainCount = 0;
 2798:  2710:  2622: 2534: 2446: 79: }
 2799:  2711:  2623: 2535: 2447: 80: register("resetTrickState", resetTrickState);
 2800:  2712:  2624: 2536: 2448: 81: function playTrickCompleteSound() {
 2801:  2713:  2625: 2537: 2449: 82:   playTone(600, "sine", 0.1, 0.2);
 2802:  2714:  2626: 2538: 2450: 83: }
 2803:  2715:  2627: 2539: 2451: 84: register("playTrickCompleteSound", playTrickCompleteSound);
 2804:  2716:  2628: 2540: 2452: 85: // Expose checkTrickInputs globally so that other modules (like downhill.js) can call it.
 2805:  2717:  2629: 2541: 2453: 86: window.checkTrickInputs = checkTrickInputs;
 2806:  2718:  2630: 2542: 2454: 87: export {
 2807:  2719:  2631: 2543: 2455: 88:   startTrick,
 2808:  2720:  2632: 2544: 2456: 89:   checkTrickInputs,
 2809:  2721:  2633: 2545: 2457: 90:   processTrick,
 2810:  2722:  2634: 2546: 2458: 91:   completeTrick,
 2811:  2723:  2635: 2547: 2459: 92:   resetTrickState,
 2812:  2724:  2636: 2548: 2460: 93:   playTrickCompleteSound,
 2813:  2725:  2637: 2549: 2461: 94: };
 2814:  2726:  2638: 2550: 2462: ````
 2815:  2727:  2639: 2551: 2463: 
 2816:  2728:  2640: 2552: 2464: ## File: js/settings.js
 2817:  2729:  2641: 2553: 2465: ````javascript
 2818:  2730:  2642: 2554: 2466:   1: // settings.js - various TWEAK settings and their
 2819:  2731:  2643: 2555: 2467:   2: // knob-turnings go here
 2820:  2732:  2644: 2556: 2468:   3: /* Global Configuration & Shared Globals */
 2821:  2733:  2645: 2557: 2469:   4: // Define our current mountain biome and layer defaults.
 2822:  2734:  2646: 2558: 2470:   5: var currentBiome = "starterMountain";  // We're on the Starter Mountain by default.
 2823:  2735:  2647: 2559: 2471:   6: var currentMountainLayer = 1;          // Default layer (if you're using numeric layers)
 2824:  2736:  2648: 2560: 2472:   7: var currentLayerPercent = 25;          // Or if you're using percentages (0-100)
 2825:  2737:  2649: 2561: 2473:   8: var TWEAK = {
 2826:  2738:  2650: 2562: 2474:   9:     tweakNob: 1,
 2827:  2739:  2651: 2563: 2475:  10:     // Animal spawning and movement
 2828:  2740:  2652: 2564: 2476:  11:     minSpawnTime: 5000, // Minimum delay between spawns (5 sec)
 2829:  2741:  2653: 2565: 2477:  12:     maxSpawnTime: 10000, // Maximum delay between spawns (10 sec)
 2830:  2742:  2654: 2566: 2478:  13:     minIdleTime: 3000, // Minimum time an animal sits still (1 sec)
 2831:  2743:  2655: 2567: 2479:  14:     maxIdleTime: 8000, // Maximum time an animal sits still (20 sec)
 2832:  2744:  2656: 2568: 2480:  15:     minMoveSpeed: 5, // Slowest movement speed for animals
 2833:  2745:  2657: 2569: 2481:  16:     maxMoveSpeed: 11.2, // Fastest movement speed for animals
 2834:  2746:  2658: 2570: 2482:  17:     fleeAngle: 45, // This may be obsolete - confirm before removing
 2835:  2747:  2659: 2571: 2483:  18:     photoCooldown: 1000, // Must wait 1 second between photos
 2836:  2748:  2660: 2572: 2484:  19:     repeatPhotoPenalty: 0.5, // 50% less money if the same animal is photographed again
 2837:  2749:  2661: 2573: 2485:  20:     minAnimalSpawnDistance: 400,
 2838:  2750:  2662: 2574: 2486:  21:     maxAnimalSpawnDistance: 500,
 2839:  2751:  2663: 2575: 2487:  22:     bearSpawnProbability: 0.3, // 30% chance of a bear
 2840:  2752:  2664: 2576: 2488:  23:     bearSpeed: 6, // Bears move a bit slower
 2841:  2753:  2665: 2577: 2489:  24:     birdSpeed: 9, // Birds move faster
 2842:  2754:  2666: 2578: 2490:  25:     bearDetectionRadius: 150, // Bears detect player from farther away
 2843:  2755:  2667: 2579: 2491:  26:     birdDetectionRadius: 50, // Birds have smaller detection radius
 2844:  2756:  2668: 2580: 2492:  27:     maxAnimalPhotoDistance: 600, // Maximum distance for taking photos
 2845:  2757:  2669: 2581: 2493:  28:     // Jumping stuff
 2846:  2758:  2670: 2582: 2494:  29:     jumpType: "immediate",               // "immediate" or "charge" - DO NOT REMOVE
 2847:  2759:  2671: 2583: 2495:  30:     jumpCollisionMultiplier: 3,
 2848:  2760:  2672: 2584: 2496:  31:     jumpBaseAscent: 1000,                 // Base ascent time (ms)
 2849:  2761:  2673: 2585: 2497:  32:     jumpMaxHoldTime: 1000,               // Maximum charge duration (1 sec)
 2850:  2762:  2674: 2586: 2498:  33:     jumpPeakScale: 2,                    // Base peak visual jump scale
 2851:  2763:  2675: 2587: 2499:  34:     jumpHeightPerRocketSurgery: 0.05,    // Each level adds 5% to jump height
 2852:  2764:  2676: 2588: 2500:  35:     jumpTimePerRocketSurgery: 0.05,      // Each level adds 5% to jump duration
 2853:  2765:  2677: 2589: 2501:  36:     jumpZoomPerHeightIncrease: 0.5,      // For every 100% height increase, add 50% more zoom
 2854:  2766:  2678: 2590: 2502:  37:     // Re-Hit Jump System
 2855:  2767:  2679: 2591: 2503:  38:     reHitWindowStart: 0.70,              // When re-hit window opens (70% through jump)
 2856:  2768:  2680: 2592: 2504:  39:     reHitIndicatorScale: 2.5,            // Size multiplier for indicator circle
 2857:  2769:  2681: 2593: 2505:  40:     reHitIndicatorColor: "rgba(255, 0, 255, 0.4)",  // Bright magenta with more opacity
 2858:  2770:  2682: 2594: 2506:  41:     reHitIndicatorOutlineColor: "#FF00FF", // Solid magenta outline
 2859:  2771:  2683: 2595: 2507:  42:     reHitBonusDuration: 1.2,             // Duration multiplier for re-hit jumps
 2860:  2772:  2684: 2596: 2508:  43:     // Trick Physics Adjustments
 2861:  2773:  2685: 2597: 2509:  44:     parachuteGravityFactor: 0.8,         // Gravity reduction during parachute
 2862:  2774:  2686: 2598: 2510:  45:     airBrakeFrictionMultiplier: 0.85,    // Speed reduction during air brake
 2863:  2775:  2687: 2599: 2511:  46:     // Camera and aiming
 2864:  2776:  2688: 2600: 2512:  47:     basePOVAngle: 30,
 2865:  2777:  2689: 2601: 2513:  48:     optimalOpticsPOVIncrease: 5,
 2866:  2778:  2690: 2602: 2514:  49:     altitudeFlashMinSpeed: 200,
 2867:  2779:  2691: 2603: 2515:  50:     altitudeFlashMaxSpeed: 10,
 2868:  2780:  2692: 2604: 2516:  51:     altitudeGradientStart: "blue",
 2869:  2781:  2693: 2605: 2517:  52:     altitudeGradientEnd: "red",
 2870:  2782:  2694: 2606: 2518:  53:     // Photo scoring
 2871:  2783:  2695: 2607: 2519:  54:     basePhotoValue: 50, // Base money earned from a photo
 2872:  2784:  2696: 2608: 2520:  55:     altitudeMatchMultiplier: 2,
 2873:  2785:  2697: 2609: 2521:  56:     centerPOVMultiplier: 1.5,
 2874:  2786:  2698: 2610: 2522:  57:     fleeingAnimalMultiplier: 3,
 2875:  2787:  2699: 2611: 2523:  58:     // Animal multipliers
 2876:  2788:  2700: 2612: 2524:  59:     bearMultiplier: 1.5,
 2877:  2789:  2701: 2613: 2525:  60:     birdMultiplier: 1,
 2878:  2790:  2702: 2614: 2526:  61:     // House entry costs
 2879:  2791:  2703: 2615: 2527:  62:     houseEntryLoanDeduction: 0.005, // 0.5% loan deduction when entering house
 2880:  2792:  2704: 2616: 2528:  63:     // Underlying base values
 2881:  2793:  2705: 2617: 2529:  64:     _sledMass: 1.0,
 2882:  2794:  2706: 2618: 2530:  65:     _baseGravity: 0.1,
 2883:  2795:  2707: 2619: 2531:  66:     _baseHorizontalAccel: 0.25,
 2884:  2796:  2708: 2620: 2532:  67:     _baseFriction: 0.95,
 2885:  2797:  2709: 2621: 2533:  68:     _baseMaxXVel: 3,
 2886:  2798:  2710: 2622: 2534:  69:     _rocketSurgeryFactorPerLevel: 0.1,
 2887:  2799:  2711: 2623: 2535:  70:     _optimalOpticsAccelFactorPerLevel: 0.02,
 2888:  2800:  2712: 2624: 2536:  71:     _optimalOpticsFrictionFactorPerLevel: 0.005,
 2889:  2801:  2713: 2625: 2537:  72:     _fancierFootwearUpSpeedPerLevel: 0.3,
 2890:  2802:  2714: 2626: 2538:  73:     _baseUpSpeed: 2,
 2891:  2803:  2715: 2627: 2539:  74:     _baseCollisionsAllowed: 3,
 2892:  2804:  2716: 2628: 2540:  75:     _starterCash: 200, // Jacked up for testing
 2893:  2805:  2717: 2629: 2541:  76:     _bounceImpulse: 3,  // New bounce impulse value
 2894:  2806:  2718: 2630: 2542:  77:     // Trick system configuration
 2895:  2807:  2719: 2631: 2543:  78:     _trickCooldown: 5000,          // Base cooldown per trick (5 sec)
 2896:  2808:  2720: 2632: 2544:  79:     _trickTimeMultiplier: 1.0,     // Global trick duration multiplier
 2897:  2809:  2721: 2633: 2545:  80:     _trickTimeAdder: 0,            // Global trick duration additive time
 2898:  2810:  2722: 2634: 2546:  81:     _trickBaseDuration: 250,       // Base duration for tricks (ms)
 2899:  2811:  2723: 2635: 2547:  82:     _trickRotationSpeed: 720,     // Degrees per second for helicopter tricks (3 full spins)
 2900:  2812:  2724: 2636: 2548:  83:     _trickOffsetDistance: 40,      // Pixels to offset sled for air brake/parachute
 2901:  2813:  2725: 2637: 2549:  84:     _trickMoneyBase: 50,           // Base money earned per trick
 2902:  2814:  2726: 2638: 2550:  85:     _trickChainMultiplier: 1.5,    // Multiplier for chaining different tricks
 2903:  2815:  2727: 2639: 2551:  86:     // Getters to apply tweakNob multiplier
 2904:  2816:  2728: 2640: 2552:  87:     get sledMass() { return this._sledMass * this.tweakNob; },
 2905:  2817:  2729: 2641: 2553:  88:     set sledMass(val) { this._sledMass = val; },
 2906:  2818:  2730: 2642: 2554:  89:     get baseGravity() { return this._baseGravity * this.tweakNob; },
 2907:  2819:  2731: 2643: 2555:  90:     set baseGravity(val) { this._baseGravity = val; },
 2908:  2820:  2732: 2644: 2556:  91:     get baseHorizontalAccel() { return this._baseHorizontalAccel; },
 2909:  2821:  2733: 2645: 2557:  92:     set baseHorizontalAccel(val) { this._baseHorizontalAccel = val; },
 2910:  2822:  2734: 2646: 2558:  93:     get baseFriction() { return this._baseFriction; }, // * this.tweakNob
 2911:  2823:  2735: 2647: 2559:  94:     set baseFriction(val) { this._baseFriction = val; },
 2912:  2824:  2736: 2648: 2560:  95:     get baseMaxXVel() { return this._baseMaxXVel * this.tweakNob; },
 2913:  2825:  2737: 2649: 2561:  96:     set baseMaxXVel(val) { this._baseMaxXVel = val; },
 2914:  2826:  2738: 2650: 2562:  97:     get rocketSurgeryFactorPerLevel() { return this._rocketSurgeryFactorPerLevel * this.tweakNob; },
 2915:  2827:  2739: 2651: 2563:  98:     set rocketSurgeryFactorPerLevel(val) { this._rocketSurgeryFactorPerLevel = val; },
 2916:  2828:  2740: 2652: 2564:  99:     get optimalOpticsAccelFactorPerLevel() { return this._optimalOpticsAccelFactorPerLevel * this.tweakNob; },
 2917:  2829:  2741: 2653: 2565: 100:     set optimalOpticsAccelFactorPerLevel(val) { this._optimalOpticsAccelFactorPerLevel = val; },
 2918:  2830:  2742: 2654: 2566: 101:     get optimalOpticsFrictionFactorPerLevel() { return this._optimalOpticsFrictionFactorPerLevel * this.tweakNob; },
 2919:  2831:  2743: 2655: 2567: 102:     set optimalOpticsFrictionFactorPerLevel(val) { this._optimalOpticsFrictionFactorPerLevel = val; },
 2920:  2832:  2744: 2656: 2568: 103:     get fancierFootwearUpSpeedPerLevel() { return this._fancierFootwearUpSpeedPerLevel * this.tweakNob; },
 2921:  2833:  2745: 2657: 2569: 104:     set fancierFootwearUpSpeedPerLevel(val) { this._fancierFootwearUpSpeedPerLevel = val; },
 2922:  2834:  2746: 2658: 2570: 105:     get baseUpSpeed() { return this._baseUpSpeed * this.tweakNob; },
 2923:  2835:  2747: 2659: 2571: 106:     set baseUpSpeed(val) { this._baseUpSpeed = val; },
 2924:  2836:  2748: 2660: 2572: 107:     get baseCollisionsAllowed() { return this._baseCollisionsAllowed * this.tweakNob; },
 2925:  2837:  2749: 2661: 2573: 108:     set baseCollisionsAllowed(val) { this._baseCollisionsAllowed = val; },
 2926:  2838:  2750: 2662: 2574: 109:     get starterCash() { return this._starterCash * this.tweakNob; },
 2927:  2839:  2751: 2663: 2575: 110:     set starterCash(val) { this._starterCash = val; },
 2928:  2840:  2752: 2664: 2576: 111:     // New dynamic bounceImpulse getter/setter
 2929:  2841:  2753: 2665: 2577: 112:     get bounceImpulse() { return this._bounceImpulse * this.tweakNob; },
 2930:  2842:  2754: 2666: 2578: 113:     set bounceImpulse(val) { this._bounceImpulse = val; }
 2931:  2843:  2755: 2667: 2579: 114: };
 2932:  2844:  2756: 2668: 2580: 115: // New: function to compute max collisions
 2933:  2845:  2757: 2669: 2581: 116: TWEAK.getMaxCollisions = function() {
 2934:  2846:  2758: 2670: 2582: 117:     // Ensure playerUpgrades exists before accessing it
 2935:  2847:  2759: 2671: 2583: 118:     return TWEAK.baseCollisionsAllowed + (typeof playerUpgrades !== "undefined" && playerUpgrades.sledDurability ? playerUpgrades.sledDurability : 0);
 2936:  2848:  2760: 2672: 2584: 119: };
 2937:  2849:  2761: 2673: 2585: ````
 2938:  2850:  2762: 2674: 2586: 
 2939:  2851:  2763: 2675: 2587: ## File: !READ_FIRST-FILE_SUMMARY.txt
 2940:  2852:  2764: 2676: 2588: ````
 2941:  2853:  2765: 2677: 2589:  1: ## JavaScript Files:
 2942:  2854:  2766: 2678: 2590:  2: 
 2943:  2855:  2767: 2679: 2591:  3: - **js/entities.js**: Manages collision detection, camera overlay rendering, and animal spawning/behavior mechanics, including drawing animal entities and handling animal fleeing behavior.
 2944:  2856:  2768: 2680: 2592:  4: - **js/game.js**: Controls the core game loop and state transitions, including initializing gameplay, managing UI elements, and handling game start and loan payment logic.
 2945:  2857:  2769: 2681: 2593:  5: - **js/input.js**: Handles global keyboard input tracking, including setting up event listeners for keydown and keyup events, and provides helper functions for checking key states.
 2946:  2858:  2770: 2682: 2594:  6: - **js/mechanics.js**: Manages core gameplay mechanics such as loan repayment, jump and trick systems, collision detection, and movement handling for downhill and uphill phases.
 2947:  2859:  2771: 2683: 2595:  7: - **js/player.js**: Defines the player object with all state variables, including position, velocity, camera angles, trick tracking, and jump state properties.
 2948:  2860:  2772: 2684: 2596:  8: - **js/render.js**: Contains the rendering logic for drawing the player, terrain, floating texts, camera overlays, and animals. Manages visual effects like trick animations and the Re-Hit indicator.
 2949:  2861:  2773: 2685: 2597:  9: - **js/upgrades.js**: Manages player and mountain upgrades, including upgrade costs, UI display logic, and purchase mechanics.
 2950:  2862:  2774: 2686: 2598: 10: - **js/utils.js**: Provides utility functions and configurations, including game tweak parameters, audio functions, collision detection, mathematical helpers, and color interpolation utilities.
 2951:  2863:  2775: 2687: 2599: 11: - **js/wildlifephotos.js**: Contains logic for the wildlife photography mini-game, including animal spawning, photo scoring, and managing animal behaviors like fleeing.
 2952:  2864:  2776: 2688: 2600: 12: - **js/world.js**: Manages the generation of terrain and the awarding of money based on the player's distance traveled.
 2953:  2865:  2777: 2689: 2601: 13: 
 2954:  2866:  2778: 2690: 2602: 14: ## Project Files:
 2955:  2867:  2779: 2691: 2603: 15: 
 2956:  2868:  2780: 2692: 2604: 16: - **index.html**: Main HTML file linking JavaScript and CSS files, defines the game UI structure.
 2957:  2869:  2781: 2693: 2605: 17: - **styles.css**: Contains the game's styling, including layout and visual styles for UI elements.
 2958:  2870:  2782: 2694: 2606: 18: - **1.0_README.md**: Likely an initial readme or changelog document for version 1.0.
 2959:  2871:  2783: 2695: 2607: 19: - **README.md**: Primary documentation file for the project, describing setup and usage instructions.
 2960:  2872:  2784: 2696: 2608: 20: - **ROADMAP.md**: Outlines planned features and future development directions.
 2961:  2873:  2785: 2697: 2609: 21: - **LICENSE.md**: Contains the licensing terms for the project.
 2962:  2874:  2786: 2698: 2610: 22: - **.gitignore**: Specifies which files and directories should be ignored by version control.
 2963:  2875:  2787: 2699: 2611: 23: - **todo.txt**: Simple text file listing tasks and development priorities.
 2964:  2876:  2788: 2700: 2612: 24: - **!READ_FIRST-FILE_SUMMARY.txt**: Possibly an initial overview or summary of the project.
 2965:  2877:  2789: 2701: 2613: ````
 2966:  2878:  2790: 2702: 2614: 
 2967:  2879:  2791: 2703: 2615: ## File: docs/ROADMAP.md
 2968:  2880:  2792: 2704: 2616: ````markdown
 2969:  2881:  2793: 2705: 2617:   1: # 📍 **SledHEAD Comprehensive Development Roadmap**
 2970:  2882:  2794: 2706: 2618:   2: 
 2971:  2883:  2795: 2707: 2619:   3: This document outlines the detailed path from the current implementation to the complete "1.0" version of **SledHEAD**, including the critical gameplay shift to an **Up-Then-Down** stamina-based mechanic.
 2972:  2884:  2796: 2708: 2620:   4: 
 2973:  2885:  2797: 2709: 2621:   5: ---
 2974:  2886:  2798: 2710: 2622:   6: 
 2975:  2887:  2799: 2711: 2623:   7: ## 🎯 **Core Concept**
 2976:  2888:  2800: 2712: 2624:   8: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
 2977:  2889:  2801: 2713: 2625:   9: 
 2978:  2890:  2802: 2714: 2626:  10: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
 2979:  2891:  2803: 2715: 2627:  11: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
 2980:  2892:  2804: 2716: 2628:  12: 
 2981:  2893:  2805: 2717: 2629:  13: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
 2982:  2894:  2806: 2718: 2630:  14: 
 2983:  2895:  2807: 2719: 2631:  15: ## 🎯 **Gameplay Loop Overview**
 2984:  2896:  2808: 2720: 2632:  16: - Players start at the mountain's base, managing stamina as they climb upward.
 2985:  2897:  2809: 2721: 2633:  17: - Strategic decision-making to sled down for rewards before stamina depletion.
 2986:  2898:  2810: 2722: 2634:  18: - Higher altitudes host rare wildlife, higher rewards, and greater risks.
 2987:  2899:  2811: 2723: 2635:  19: 
 2988:  2900:  2812: 2724: 2636:  20: ---
 2989:  2901:  2813: 2725: 2637:  21: 
 2990:  2902:  2814: 2726: 2638:  22: ## 🌄 **Segmented Cylinder Wrapping (Layered Mountain Structure)**  
 2991:  2903:  2815: 2727: 2639:  23: **Handling Horizontal Wrapping at Different Elevations**
 2992:  2904:  2816: 2728: 2640:  24: 
 2993:  2905:  2817: 2729: 2641:  25: To create the effect of a **finite mountain with wraparound sides**, SledHEAD uses a **layered cylindrical system** instead of a continuous cone. The mountain is divided into **stacked segments**, each with its own **fixed circumference** that gets **smaller as you go higher**. This allows for a **consistent wraparound mechanic** while keeping movement predictable.
 2994:  2906:  2818: 2730: 2642:  26: 
 2995:  2907:  2819: 2731: 2643:  27: ### 🏔️ **How It Works:**
 2996:  2908:  2820: 2732: 2644:  28: - Each **layer** is a separate horizontal zone, like a **floating ring** around the mountain.  
 2997:  2909:  2821: 2733: 2645:  29: - If a player **crosses the left or right boundary** of a layer, they seamlessly wrap around to the other side.  
 2998:  2910:  2822: 2734: 2646:  30: - **Lower layers are wider**, giving more horizontal space.  
 2999:  2911:  2823: 2735: 2647:  31: - **Upper layers are narrower**, meaning wraparound happens sooner.  
 3000:  2912:  2824: 2736: 2648:  32: 
 3001:  2913:  2825: 2737: 2649:  33: ### ⬆️⬇️ **Moving Between Layers**
 3002:  2914:  2826: 2738: 2650:  34: When transitioning **between vertical segments**:
 3003:  2915:  2827: 2739: 2651:  35: 1. If the player **moves downward** past the bottom boundary of a layer:
 3004:  2916:  2828: 2740: 2652:  36:    - They **teleport to the top boundary** of the layer below.  
 3005:  2917:  2829: 2741: 2653:  37:    - Their **horizontal position scales** based on the new circumference to maintain a proportional location.  
 3006:  2918:  2830: 2742: 2654:  38:    
 3007:  2919:  2831: 2743: 2655:  39:    ```pseudocode
 3008:  2920:  2832: 2744: 2656:  40:    scale_factor = new_layer.circumference / old_layer.circumference
 3009:  2921:  2833: 2745: 2657:  41:    x_new = x_old * scale_factor
 3010:  2922:  2834: 2746: 2658:  42: 
 3011:  2923:  2835: 2747: 2659:  43: 2. If the player **moves upward** past the top boundary of a layer:
 3012:  2924:  2836: 2748: 2660:  44:    - They **appear at the bottom** of the next layer up with **their horizontal position **scaled.
 3013:  2925:  2837: 2749: 2661:  45: 
 3014:  2926:  2838: 2750: 2662:  46: ### 🏁 **Gameplay Implications**
 3015:  2927:  2839: 2751: 2663:  47:    - Predictable & Manageable: Keeps wraparound and movement feeling natural while allowing for different gameplay per layer.
 3016:  2928:  2840: 2752: 2664:  48: 
 3017:  2929:  2841: 2753: 2665:  49: ### **Layer-Specific Challenges**:
 3018:  2930:  2842: 2754: 2666:  50:    - Broader paths at lower levels = more open sledding.
 3019:  2931:  2843: 2755: 2667:  51:    - Tighter paths at higher levels = more technical, precision-based gameplay.
 3020:  2932:  2844: 2756: 2668:  52:    - Performance-Friendly: Each layer is an isolated map segment, simplifying collision checks and procedural generation.
 3021:  2933:  2845: 2757: 2669:  53: 
 3022:  2934:  2846: 2758: 2670:  54: ---
 3023:  2935:  2847: 2759: 2671:  55: 
 3024:  2936:  2848: 2760: 2672:  56: ## 🌄 **Light/Dark Gradient Altitude System**
 3025:  2937:  2849: 2761: 2673:  57: 
 3026:  2938:  2850: 2762: 2674:  58: - Introduce a dynamic visual gradient where snow and terrain visually shift, with the snow at higher altitudes lighter due to being cleaner, and the snow downhill from you appears darker (due to the dirt and debres that flows down hill). 🚀
 3027:  2939:  2851: 2763: 2675:  59: - The gradient will provide a dynamic natural visual guide for players to intuitively gauge altitude and plan their climbs and descents. 🎯
 3028:  2940:  2852: 2764: 2676:  60: 
 3029:  2941:  2853: 2765: 2677:  61: ---
 3030:  2942:  2854: 2766: 2678:  62: 
 3031:  2943:  2855: 2767: 2679:  63: ## 🌎 **Procedural World & Persistence**
 3032:  2944:  2856: 2768: 2680:  64: 
 3033:  2945:  2857: 2769: 2681:  65: - The mountain remains consistent during a playthrough.  
 3034:  2946:  2858: 2770: 2682:  66: - **New terrain is only generated when starting a new game.**  
 3035:  2947:  2859: 2771: 2683:  67: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
 3036:  2948:  2860: 2772: 2684:  68: - **Changes per run:**
 3037:  2949:  2861: 2773: 2685:  69:   - Tourists & fans shift positions.  
 3038:  2950:  2862: 2774: 2686:  70:   - Weather may change dynamically.  
 3039:  2951:  2863: 2775: 2687:  71:   - Wildlife encounters vary.
 3040:  2952:  2864: 2776: 2688:  72: 
 3041:  2953:  2865: 2777: 2689:  73: ---
 3042:  2954:  2866: 2778: 2690:  74: 
 3043:  2955:  2867: 2779: 2691:  75: ## 🎢 Gameplay Loops
 3044:  2956:  2868: 2780: 2692:  76: **Progression Goals:**  
 3045:  2957:  2869: 2781: 2693:  77: - **Prototype:** Repay the cost of the mountain.  
 3046:  2958:  2870: 2782: 2694:  78: - **Full Game:**  
 3047:  2959:  2871: 2783: 2695:  79:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
 3048:  2960:  2872: 2784: 2696:  80:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
 3049:  2961:  2873: 2785: 2697:  81:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
 3050:  2962:  2874: 2786: 2698:  82:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
 3051:  2963:  2875: 2787: 2699:  83: ### **⬆️1️⃣ Uphill Phase: Climbing & Exploration**
 3052:  2964:  2876: 2788: 2700:  84: #### 🚶 **Top-down adventure traversal with stamina management and exploration.**  
 3053:  2965:  2877: 2789: 2701:  85: - **Goal:** Ascend to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
 3054:  2966:  2878: 2790: 2702:  86: - **Stamina System:**  
 3055:  2967:  2879: 2791: 2703:  87:   - Stamina drains when moving.  
 3056:  2968:  2880: 2792: 2704:  88:   - Replenished by **food stands, resting points, or upgrades**.  
 3057:  2969:  2881: 2793: 2705:  89: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
 3058:  2970:  2882: 2794: 2706:  90:   - **Random animals appear every few seconds (TWEAK variable).**  
 3059:  2971:  2883: 2795: 2707:  91:   - Animals either **stay still and will run if you get too close.** Eventually they will **wander off**.  
 3060:  2972:  2884: 2796: 2708:  92:   - **Use the Left & Right Arrow Keys to aim the camera cone** around your character.  
 3061:  2973:  2885: 2797: 2709:  93:   - **Align the altitude line (using the Up & Down Arrow Keys)** with the animal’s altitude for a perfect shot.  
 3062:  2974:  2886: 2798: 2710:  94:   - **Photos earn money, with multipliers for:**  
 3063:  2975:  2887: 2799: 2711:  95:     - Accuracy (center of POV cone).  
 3064:  2976:  2888: 2800: 2712:  96:     - Altitude match precision.  
 3065:  2977:  2889: 2801: 2713:  97:     - Moving vs. stationary targets (moving = 3x value).
 3066:  2978:  2890: 2802: 2714:  98:     - Animal Rarity (more exotic animals the further up the mountain you are).
 3067:  2979:  2891: 2803: 2715:  99: 
 3068:  2980:  2892: 2804: 2716: 100: ### **⬇️2️⃣ Sledding Phase (Downhill)**
 3069:  2981:  2893: 2805: 2717: 101: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
 3070:  2982:  2894: 2806: 2718: 102: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
 3071:  2983:  2895: 2807: 2719: 103: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
 3072:  2984:  2896: 2808: 2720: 104: - **Obstacles:**
 3073:  2985:  2897: 2809: 2721: 105:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
 3074:  2986:  2898: 2810: 2722: 106:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
 3075:  2987:  2899: 2811: 2723: 107:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
 3076:  2988:  2900: 2812: 2724: 108: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
 3077:  2989:  2901: 2813: 2725: 109: - **Time Trials:**  
 3078:  2990:  2902: 2814: 2726: 110:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
 3079:  2991:  2903: 2815: 2727: 111:   - **Your time between activators determines your bonus.**  
 3080:  2992:  2904: 2816: 2728: 112:   - **Faster times = more money!**  
 3081:  2993:  2905: 2817: 2729: 113:   - Not all runs are timed; only those where you activate a trial.
 3082:  2994:  2906: 2818: 2730: 114: 
 3083:  2995:  2907: 2819: 2731: 115: ### 🏠3️⃣ **Management Phase (House & Upgrades)**
 3084:  2996:  2908: 2820: 2732: 116: 🏡 **Upgrade your gear, mountain, and social media presence.**  
 3085:  2997:  2909: 2821: 2733: 117: - **Spend earned money on:**
 3086:  2998:  2910: 2822: 2734: 118:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
 3087:  2999:  2911: 2823: 2735: 119:   - **Sled Upgrades:** Speed, handling, trick potential.  
 3088:  3000:  2912: 2824: 2736: 120:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
 3089:  3001:  2913: 2825: 2737: 121: - **New Game Start:**  
 3090:  3002:  2914: 2826: 2738: 122:   - Mountain **ONLY regenerates when starting a completely new game.**  
 3091:  3003:  2915: 2827: 2739: 123:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
 3092:  3004:  2916: 2828: 2740: 124:   - **Current seed is displayed at home.** 
 3093:  3005:  2917: 2829: 2741: 125: 
 3094:  3006:  2918: 2830: 2742: 126: ---
 3095:  3007:  2919: 2831: 2743: 127: 
 3096:  3008:  2920: 2832: 2744: 128: ## 🏡 **Tutorial Level: Childhood Memories on Grandpa’s Hill**  
 3097:  3009:  2921: 2833: 2745: 129: **Learning the Basics in a Cozy, Story-Driven Introduction**
 3098:  3010:  2922: 2834: 2746: 130: 
 3099:  3011:  2923: 2835: 2747: 131: Before tackling the **massive procedural mountains** of SledHEAD, players start with a heartwarming **tutorial level**, set in a **quiet rural winter landscape**. This **flashback sequence** lets players experience sledding as a **young child**, learning the fundamental mechanics under the guidance of their **grandfather**.
 3100:  3012:  2924: 2836: 2748: 132: 
 3101:  3013:  2925: 2837: 2749: 133: ### 📜 **Narrative Setup**
 3102:  3014:  2926: 2838: 2750: 134: The game opens on a **small, snow-covered hill** just outside a **cozy cabin**, where the protagonist—**a child version of themselves**—is spending time with their **grandfather** on a crisp winter afternoon. Grandpa is **wrapped up in a warm coat, standing at the base of the hill after sledding down himself**, watching proudly as the player **takes their maiden toboggan run, learning to sled**. The sky glows with the **soft oranges and purples of a winter sunset**, setting a nostalgic and peaceful mood.
 3103:  3015:  2927: 2839: 2751: 135: 
 3104:  3016:  2928: 2840: 2752: 136: Before long, Grandpa gives a gentle laugh:  
 3105:  3017:  2929: 2841: 2753: 137: > **"Ahh, y'know, I used to be the best sledder on this hill... but these ol' legs don’t have the stamina they used to! You go on, get a few more runs in—I’ll watch and cheer ya on from here! And remember - the snow's always whiter above you, and dirtier below!"**  
 3106:  3018:  2930: 2842: 2754: 138: 
 3107:  3019:  2931: 2843: 2755: 139: With that, the tutorial **fully hands control to the player**, reinforcing the **stamina system** and setting up a meaningful reason to **manage energy wisely**.
 3108:  3020:  2932: 2844: 2756: 140: 
 3109:  3021:  2933: 2845: 2757: 141: ---
 3110:  3022:  2934: 2846: 2758: 142: 
 3111:  3023:  2935: 2847: 2759: 143: ## 🎮 **Tutorial Mechanics Introduced**
 3112:  3024:  2936: 2848: 2760: 144: The tutorial unfolds organically through **simple, playful challenges**, without heavy UI elements. Players **learn by doing**, with Grandpa offering **gentle, supportive guidance**.
 3113:  3025:  2937: 2849: 2761: 145: 
 3114:  3026:  2938: 2850: 2762: 146: ### **⬆️ Walking Uphill (Basic Movement & Stamina)**
 3115:  3027:  2939: 2851: 2763: 147: - Players move **uphill by walking**, learning that **whiter snow = uphill, darker snow = downhill**.  
 3116:  3028:  2940: 2852: 2764: 148: - Moving uphill **drains stamina** gradually.  
 3117:  3029:  2941: 2853: 2765: 149: - Grandpa occasionally calls out:
 3118:  3030:  2942: 2854: 2766: 150:   > **"You’re strong, kid! But ya gotta pace yourself—harder climbs mean ya gotta rest up after!"**
 3119:  3031:  2943: 2855: 2767: 151: 
 3120:  3032:  2944: 2856: 2768: 152: ### **🛷 Sledding Downhill (Turning & Speed Control)**
 3121:  3033:  2945: 2857: 2769: 153: - Players start **at the top of the small hill** and practice their **first sled run**.  
 3122:  3034:  2946: 2858: 2770: 154: - **Turning left/right** is introduced, along with simple speed adjustments.  
 3123:  3035:  2947: 2859: 2771: 155: - Grandpa **cheers when the player makes a smooth turn**:
 3124:  3036:  2948: 2860: 2772: 156:   > **"Look at that! You’re a natural! Sleddin’s all about balance—lean just right and the hill will do the rest!"**
 3125:  3037:  2949: 2861: 2773: 157: 
 3126:  3038:  2950: 2862: 2774: 158: ### **🔄 Climbing & Repeating Runs**
 3127:  3039:  2951: 2863: 2775: 159: - After a few runs, Grandpa suggests:
 3128:  3040:  2952: 2864: 2776: 160:   > **"Why don’t ya take a few more runs? See if ya can get all the way to the bottom without wipin’ out!"**  
 3129:  3041:  2953: 2865: 2777: 161: - The player is **free to keep practicing**, reinforcing that **sledding is about trial and improvement**.  
 3130:  3042:  2954: 2866: 2778: 162: - The game subtly **introduces self-motivated play**, rewarding experimentation.
 3131:  3043:  2955: 2867: 2779: 163: 
 3132:  3044:  2956: 2868: 2780: 164: ### **🏁 Tutorial Completion**
 3133:  3045:  2957: 2869: 2781: 165: - Once the player **feels confident**, a final sled run **transitions seamlessly into the present day**, cutting to the **modern protagonist** standing atop their massive new mountain.
 3134:  3046:  2958: 2870: 2782: 166: - **Grandpa’s words echo**, setting the tone for the adventure ahead:
 3135:  3047:  2959: 2871: 2783: 167:   > **"One day, you’ll take on bigger mountains than this… but no matter how high you go, never forget the joy of the ride."**  
 3136:  3048:  2960: 2872: 2784: 168: - The camera pulls back, revealing the **full mountain**, and gameplay transitions into the **core SledHEAD experience**.
 3137:  3049:  2961: 2873: 2785: 169: 
 3138:  3050:  2962: 2874: 2786: 170: ---
 3139:  3051:  2963: 2875: 2787: 171: 
 3140:  3052:  2964: 2876: 2788: 172: ## ✨ **Why This Works**
 3141:  3053:  2965: 2877: 2789: 173: - **Emotionally Engaging** – Connects the player to their childhood roots and motivation.  
 3142:  3054:  2966: 2878: 2790: 174: - **Smooth Learning Curve** – Teaches fundamental mechanics **without forced tutorials**.  
 3143:  3055:  2967: 2879: 2791: 175: - **Worldbuilding & Nostalgia** – Grandpa’s wisdom adds charm and meaning to the stamina system.  
 3144:  3056:  2968: 2880: 2792: 176: - **Seamless Transition to Main Game** – Keeps momentum going without feeling like a "tutorial level."  
 3145:  3057:  2969: 2881: 2793: 177: 
 3146:  3058:  2970: 2882: 2794: 178: This opening ensures that **players feel connected to their journey**—from childhood sledding to **becoming a sledding legend**. 🎿🔥  
 3147:  3059:  2971: 2883: 2795: 179: 
 3148:  3060:  2972: 2884: 2796: 180: ---
 3149:  3061:  2973: 2885: 2797: 181: 
 3150:  3062:  2974: 2886: 2798: 182: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
 3151:  3063:  2975: 2887: 2799: 183: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
 3152:  3064:  2976: 2888: 2800: 184: 
 3153:  3065:  2977: 2889: 2801: 185: 1. **☁️🪂 Parachute (Up, Down)**  
 3154:  3066:  2978: 2890: 2802: 186:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
 3155:  3067:  2979: 2891: 2803: 187:    **Pixel Art Representation:**  
 3156:  3068:  2980: 2892: 2804: 188:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
 3157:  3069:  2981: 2893: 2805: 189: 
 3158:  3070:  2982: 2894: 2806: 190: 2. **🛑🎿 Air Brake (Up, Up)**  
 3159:  3071:  2983: 2895: 2807: 191:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
 3160:  3072:  2984: 2896: 2808: 192:    **Pixel Art Representation:**  
 3161:  3073:  2985: 2897: 2809: 193:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
 3162:  3074:  2986: 2898: 2810: 194: 
 3163:  3075:  2987: 2899: 2811: 195: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
 3164:  3076:  2988: 2900: 2812: 196:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
 3165:  3077:  2989: 2901: 2813: 197:    **Pixel Art Representation:**  
 3166:  3078:  2990: 2902: 2814: 198:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
 3167:  3079:  2991: 2903: 2815: 199: 
 3168:  3080:  2992: 2904: 2816: 200: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
 3169:  3081:  2993: 2905: 2817: 201:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
 3170:  3082:  2994: 2906: 2818: 202:    **Pixel Art Representation:**  
 3171:  3083:  2995: 2907: 2819: 203:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
 3172:  3084:  2996: 2908: 2820: 204: 
 3173:  3085:  2997: 2909: 2821: 205: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
 3174:  3086:  2998: 2910: 2822: 206:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
 3175:  3087:  2999: 2911: 2823: 207:    **Pixel Art Representation:**  
 3176:  3088:  3000: 2912: 2824: 208:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
 3177:  3089:  3001: 2913: 2825: 209: 
 3178:  3090:  3002: 2914: 2826: 210: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
 3179:  3091:  3003: 2915: 2827: 211:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
 3180:  3092:  3004: 2916: 2828: 212:    **Pixel Art Representation:**  
 3181:  3093:  3005: 2917: 2829: 213:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
 3182:  3094:  3006: 2918: 2830: 214: 
 3183:  3095:  3007: 2919: 2831: 215: 7. **🦸‍♂️✨ Superman (Down, Down)**  
 3184:  3096:  3008: 2920: 2832: 216:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
 3185:  3097:  3009: 2921: 2833: 217:    **Pixel Art Representation:**  
 3186:  3098:  3010: 2922: 2834: 218:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
 3187:  3099:  3011: 2923: 2835: 219: 
 3188:  3100:  3012: 2924: 2836: 220: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
 3189:  3101:  3013: 2925: 2837: 221:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
 3190:  3102:  3014: 2926: 2838: 222:    **Pixel Art Representation:**  
 3191:  3103:  3015: 2927: 2839: 223:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
 3192:  3104:  3016: 2928: 2840: 224: 
 3193:  3105:  3017: 2929: 2841: 225: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
 3194:  3106:  3018: 2930: 2842: 226:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
 3195:  3107:  3019: 2931: 2843: 227:    **Pixel Art Representation:**  
 3196:  3108:  3020: 2932: 2844: 228:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
 3197:  3109:  3021: 2933: 2845: 229: 
 3198:  3110:  3022: 2934: 2846: 230: 10. **👻🔥 Ghost Rider (Left, Right)**  
 3199:  3111:  3023: 2935: 2847: 231:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
 3200:  3112:  3024: 2936: 2848: 232:     **Pixel Art Representation:**  
 3201:  3113:  3025: 2937: 2849: 233:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
 3202:  3114:  3026: 2938: 2850: 234: 
 3203:  3115:  3027: 2939: 2851: 235: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
 3204:  3116:  3028: 2940: 2852: 236:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
 3205:  3117:  3029: 2941: 2853: 237:     **Pixel Art Representation:**  
 3206:  3118:  3030: 2942: 2854: 238:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
 3207:  3119:  3031: 2943: 2855: 239: 
 3208:  3120:  3032: 2944: 2856: 240: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
 3209:  3121:  3033: 2945: 2857: 241:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
 3210:  3122:  3034: 2946: 2858: 242:     **Pixel Art Representation:**  
 3211:  3123:  3035: 2947: 2859: 243:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
 3212:  3124:  3036: 2948: 2860: 244: 
 3213:  3125:  3037: 2949: 2861: 245: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
 3214:  3126:  3038: 2950: 2862: 246:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
 3215:  3127:  3039: 2951: 2863: 247:     **Pixel Art Representation:**  
 3216:  3128:  3040: 2952: 2864: 248:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
 3217:  3129:  3041: 2953: 2865: 249: 
 3218:  3130:  3042: 2954: 2866: 250: 14. **✨⬆️ Falling Star (Down, Up)**  
 3219:  3131:  3043: 2955: 2867: 251:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
 3220:  3132:  3044: 2956: 2868: 252:     **Pixel Art Representation:**  
 3221:  3133:  3045: 2957: 2869: 253:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
 3222:  3134:  3046: 2958: 2870: 254: 
 3223:  3135:  3047: 2959: 2871: 255: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
 3224:  3136:  3048: 2960: 2872: 256:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
 3225:  3137:  3049: 2961: 2873: 257:     **Pixel Art Representation:**  
 3226:  3138:  3050: 2962: 2874: 258:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
 3227:  3139:  3051: 2963: 2875: 259: 
 3228:  3140:  3052: 2964: 2876: 260: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
 3229:  3141:  3053: 2965: 2877: 261:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
 3230:  3142:  3054: 2966: 2878: 262:     **Pixel Art Representation:**  
 3231:  3143:  3055: 2967: 2879: 263:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
 3232:  3144:  3056: 2968: 2880: 264: 
 3233:  3145:  3057: 2969: 2881: 265: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
 3234:  3146:  3058: 2970: 2882: 266: 
 3235:  3147:  3059: 2971: 2883: 267: ### **Hazards & Interactions:**
 3236:  3148:  3060: 2972: 2884: 268: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
 3237:  3149:  3061: 2973: 2885: 269: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
 3238:  3150:  3062: 2974: 2886: 270: - **Ice Patches:** Reduce control and make turns trickier.
 3239:  3151:  3063: 2975: 2887: 271: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
 3240:  3152:  3064: 2976: 2888: 272: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
 3241:  3153:  3065: 2977: 2889: 273: 
 3242:  3154:  3066: 2978: 2890: 274: ---
 3243:  3155:  3067: 2979: 2891: 275: 
 3244:  3156:  3068: 2980: 2892: 276: ## 🔧 **Upgrade System**
 3245:  3157:  3069: 2981: 2893: 277: 
 3246:  3158:  3070: 2982: 2894: 278: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
 3247:  3159:  3071: 2983: 2895: 279: | Upgrade                    | Effect                                             |
 3248:  3160:  3072: 2984: 2896: 280: |----------------------------|----------------------------------------------------|
 3249:  3161:  3073: 2985: 2897: 281: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
 3250:  3162:  3074: 2986: 2898: 282: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
 3251:  3163:  3075: 2987: 2899: 283: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
 3252:  3164:  3076: 2988: 2900: 284: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
 3253:  3165:  3077: 2989: 2901: 285: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
 3254:  3166:  3078: 2990: 2902: 286: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
 3255:  3167:  3079: 2991: 2903: 287: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
 3256:  3168:  3080: 2992: 2904: 288: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
 3257:  3169:  3081: 2993: 2905: 289: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
 3258:  3170:  3082: 2994: 2906: 290: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
 3259:  3171:  3083: 2995: 2907: 291: 
 3260:  3172:  3084: 2996: 2908: 292: ### 🏔️ Mountain Upgrades (Resort Expansion)
 3261:  3173:  3085: 2997: 2909: 293: | Upgrade                        | Effect                                                         |
 3262:  3174:  3086: 2998: 2910: 294: |--------------------------------|----------------------------------------------------------------|
 3263:  3175:  3087: 2999: 2911: 295: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
 3264:  3176:  3088: 3000: 2912: 296: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
 3265:  3177:  3089: 3001: 2913: 297: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
 3266:  3178:  3090: 3002: 2914: 298: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
 3267:  3179:  3091: 3003: 2915: 299: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
 3268:  3180:  3092: 3004: 2916: 300: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
 3269:  3181:  3093: 3005: 2917: 301: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
 3270:  3182:  3094: 3006: 2918: 302: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
 3271:  3183:  3095: 3007: 2919: 303: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
 3272:  3184:  3096: 3008: 2920: 304: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
 3273:  3185:  3097: 3009: 2921: 305: 
 3274:  3186:  3098: 3010: 2922: 306: ---
 3275:  3187:  3099: 3011: 2923: 307: 
 3276:  3188:  3100: 3012: 2924: 308: ## 🎮 **Mini-Games in SledHEAD**
 3277:  3189:  3101: 3013: 2925: 309: 
 3278:  3190:  3102: 3014: 2926: 310: ### 1. **Animal Photography** 📸🐾
 3279:  3191:  3103: 3015: 2927: 311: - **Objective:**  
 3280:  3192:  3104: 3016: 2928: 312:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
 3281:  3193:  3105: 3017: 2929: 313: - **Mechanics:**  
 3282:  3194:  3106: 3018: 2930: 314:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
 3283:  3195:  3107: 3019: 2931: 315:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
 3284:  3196:  3108: 3020: 2932: 316:   - **Scoring Bonuses:**  
 3285:  3197:  3109: 3021: 2933: 317:     - **Altitude Match Multiplier**  
 3286:  3198:  3110: 3022: 2934: 318:     - **POV Centering Bonus**  
 3287:  3199:  3111: 3023: 2935: 319:     - **Speed Capture Bonus**  
 3288:  3200:  3112: 3024: 2936: 320: - **Upgrades:**  
 3289:  3201:  3113: 3025: 2937: 321:   - **Optimal Optics:** Increases the camera’s POV cone.  
 3290:  3202:  3114: 3026: 2938: 322:   - **Steady Hands:** Reduces camera sway.  
 3291:  3203:  3115: 3027: 2939: 323:   - **Animal Baiting:** Increases rare animal appearance.
 3292:  3204:  3116: 3028: 2940: 324: - **Special Events:**  
 3293:  3205:  3117: 3029: 2941: 325:   - **Rare Animal Sightings** and **Storm Photography**.
 3294:  3206:  3118: 3030: 2942: 326: - **Risk/Challenge:**  
 3295:  3207:  3119: 3031: 2943: 327:   - **Repeat Photo Penalty** and aggressive animal disruptions.
 3296:  3208:  3120: 3032: 2944: 328: 
 3297:  3209:  3121: 3033: 2945: 329: ---
 3298:  3210:  3122: 3034: 2946: 330: 
 3299:  3211:  3123: 3035: 2947: 331: ### 2. **Fishing** 🎣🐟  
 3300:  3212:  3124: 3036: 2948: 332: - **Objective:**  
 3301:  3213:  3125: 3037: 2949: 333:   Catch fish using various techniques and bait types.
 3302:  3214:  3126: 3038: 2950: 334: - **Mechanics:**  
 3303:  3215:  3127: 3039: 2951: 335:   - Dynamic water simulation with varied fish behaviors.  
 3304:  3216:  3128: 3040: 2952: 336:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
 3305:  3217:  3129: 3041: 2953: 337:   - Legendary fish yield major rewards.
 3306:  3218:  3130: 3042: 2954: 338: - **Upgrades:**  
 3307:  3219:  3131: 3043: 2955: 339:   - Stronger fishing lines, advanced lures, and sonar detection.
 3308:  3220:  3132: 3044: 2956: 340: - **Special Events:**  
 3309:  3221:  3133: 3045: 2957: 341:   - Fishing tournaments and rare migration patterns.
 3310:  3222:  3134: 3046: 2958: 342: - **Risk/Challenge:**  
 3311:  3223:  3135: 3047: 2959: 343:   - Line snapping and predator interference.
 3312:  3224:  3136: 3048: 2960: 344: 
 3313:  3225:  3137: 3049: 2961: 345: ---
 3314:  3226:  3138: 3050: 2962: 346: 
 3315:  3227:  3139: 3051: 2963: 347: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
 3316:  3228:  3140: 3052: 2964: 348: - **Objective:**  
 3317:  3229:  3141: 3053: 2965: 349:   Unlock doors, safes, and hidden compartments.
 3318:  3230:  3142: 3054: 2966: 350: - **Mechanics:**  
 3319:  3231:  3143: 3055: 2967: 351:   - Use tools like **rakes, hooks, and tension wrenches**.  
 3320:  3232:  3144: 3056: 2968: 352:   - Navigate traps such as alarms and rusted internals.
 3321:  3233:  3145: 3057: 2969: 353: - **Upgrades:**  
 3322:  3234:  3146: 3058: 2970: 354:   - High-quality picks, electronic bypass tools, and vibration sensors.
 3323:  3235:  3147: 3059: 2971: 355: - **Special Events:**  
 3324:  3236:  3148: 3060: 2972: 356:   - Timed heists and races with rival scavengers.
 3325:  3237:  3149: 3061: 2973: 357: - **Risk/Challenge:**  
 3326:  3238:  3150: 3062: 2974: 358:   - Unstable buildings and hazards that may alert authorities.
 3327:  3239:  3151: 3063: 2975: 359: 
 3328:  3240:  3152: 3064: 2976: 360: ---
 3329:  3241:  3153: 3065: 2977: 361: 
 3330:  3242:  3154: 3066: 2978: 362: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
 3331:  3243:  3155: 3067: 2979: 363: - **Objective:**  
 3332:  3244:  3156: 3068: 2980: 364:   Find buried treasure using maps, clues, and metal detectors.
 3333:  3245:  3157: 3069: 2981: 365: - **Mechanics:**  
 3334:  3246:  3158: 3070: 2982: 366:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
 3335:  3247:  3159: 3071: 2983: 367:   - Digging requires stamina management and upgraded tools.
 3336:  3248:  3160: 3072: 2984: 368: - **Upgrades:**  
 3337:  3249:  3161: 3073: 2985: 369:   - Advanced metal detectors, excavation tools, and digging drones.
 3338:  3250:  3162: 3074: 2986: 370: - **Special Events:**  
 3339:  3251:  3163: 3075: 2987: 371:   - NPC treasure races and secret cache discoveries.
 3340:  3252:  3164: 3076: 2988: 372: - **Risk/Challenge:**  
 3341:  3253:  3165: 3077: 2989: 373:   - Booby traps, hostile environments, and law enforcement risks.
 3342:  3254:  3166: 3078: 2990: 374: 
 3343:  3255:  3167: 3079: 2991: 375: ---
 3344:  3256:  3168: 3080: 2992: 376: 
 3345:  3257:  3169: 3081: 2993: 377: ### 5. **Kite Flying** 🪁🌬️  
 3346:  3258:  3170: 3082: 2994: 378: - **Objective:**  
 3347:  3259:  3171: 3083: 2995: 379:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
 3348:  3260:  3172: 3084: 2996: 380: - **Mechanics:**  
 3349:  3261:  3173: 3085: 2997: 381:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
 3350:  3262:  3174: 3086: 2998: 382:   - **Downhill:** Kites extend air time and grant special bonuses.
 3351:  3263:  3175: 3087: 2999: 383: - **Upgrades:**  
 3352:  3264:  3176: 3088: 3000: 384:   - **Glide Boost, Speed Stream, and Aero Control.**
 3353:  3265:  3177: 3089: 3001: 385: - **Special Events:**  
 3354:  3266:  3178: 3090: 3002: 386:   - **Storm Riding** with higher boosts but riskier winds.
 3355:  3267:  3179: 3091: 3003: 387: - **Risk/Challenge:**  
 3356:  3268:  3180: 3092: 3004: 388:   - Strong gusts may destabilize your kite.
 3357:  3269:  3181: 3093: 3005: 389: 
 3358:  3270:  3182: 3094: 3006: 390: ---
 3359:  3271:  3183: 3095: 3007: 391: 
 3360:  3272:  3184: 3096: 3008: 392: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
 3361:  3273:  3185: 3097: 3009: 393: - **Objective:**  
 3362:  3274:  3186: 3098: 3010: 394:   Search for valuable minerals, gems, and gold.
 3363:  3275:  3187: 3099: 3011: 395: - **Mechanics:**  
 3364:  3276:  3188: 3100: 3012: 396:   - Explore rivers, caves, and rock formations.  
 3365:  3277:  3189: 3101: 3013: 397:   - **Panning:** Swirl water to separate gold.  
 3366:  3278:  3190: 3102: 3014: 398:   - **Pickaxe Mining:** Break rocks for hidden gems.
 3367:  3279:  3191: 3103: 3015: 399: - **Upgrades:**  
 3368:  3280:  3192: 3104: 3016: 400:   - High-tech panning kits, seismic scanners, precision drills.
 3369:  3281:  3193: 3105: 3017: 401: - **Special Events:**  
 3370:  3282:  3194: 3106: 3018: 402:   - Gold rush hotspots, rare mineral finds, and cave-ins.
 3371:  3283:  3195: 3107: 3019: 403: - **Risk/Challenge:**  
 3372:  3284:  3196: 3108: 3020: 404:   - Unstable ground and rival prospectors.
 3373:  3285:  3197: 3109: 3021: 405: 
 3374:  3286:  3198: 3110: 3022: 406: ---
 3375:  3287:  3199: 3111: 3023: 407: 
 3376:  3288:  3200: 3112: 3024: 408: ### 7. **Cryptid Fossil Digging** 🦴🔍  
 3377:  3289:  3201: 3113: 3025: 409: - **Objective:**  
 3378:  3290:  3202: 3114: 3026: 410:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
 3379:  3291:  3203: 3115: 3027: 411: - **Mechanics:**  
 3380:  3292:  3204: 3116: 3028: 412:   - Use brushes, chisels, and excavation tools to reveal fossils.  
 3381:  3293:  3205: 3117: 3029: 413:   - Transport fossils to the museum at the base of the first mountain.
 3382:  3294:  3206: 3118: 3030: 414: - **Upgrades:**  
 3383:  3295:  3207: 3119: 3031: 415:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
 3384:  3296:  3208: 3120: 3032: 416: - **Special Events:**  
 3385:  3297:  3209: 3121: 3033: 417:   - Competing paleontologists and hidden dig sites.
 3386:  3298:  3210: 3122: 3034: 418: - **Risk/Challenge:**  
 3387:  3299:  3211: 3123: 3035: 419:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
 3388:  3300:  3212: 3124: 3036: 420: 
 3389:  3301:  3213: 3125: 3037: 421: ---
 3390:  3302:  3214: 3126: 3038: 422: 
 3391:  3303:  3215: 3127: 3039: 423: ### 8. **Sled Tricking** 🛷✨  
 3392:  3304:  3216: 3128: 3040: 424: - **Objective:**  
 3393:  3305:  3217: 3129: 3041: 425:   Chain together aerial sled tricks to earn cash and boost fan engagement.
 3394:  3306:  3218: 3130: 3042: 426: - **Mechanics:**  
 3395:  3307:  3219: 3131: 3043: 427:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
 3396:  3308:  3220: 3132: 3044: 428:   - Chain tricks for higher multipliers.
 3397:  3309:  3221: 3133: 3045: 429: - **Upgrades:**  
 3398:  3310:  3222: 3134: 3046: 430:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
 3399:  3311:  3223: 3135: 3047: 431: - **Special Events:**  
 3400:  3312:  3224: 3136: 3048: 432:   - Trick challenges and fan-requested stunt competitions.
 3401:  3313:  3225: 3137: 3049: 433: - **Risk/Challenge:**  
 3402:  3314:  3226: 3138: 3050: 434:   - Mistimed tricks can cause crashes and loss of earnings.
 3403:  3315:  3227: 3139: 3051: 435: 
 3404:  3316:  3228: 3140: 3052: 436: ---
 3405:  3317:  3229: 3141: 3053: 437: 
 3406:  3318:  3230: 3142: 3054: 438: ### 9. **Time Trial Racing** 🏁🛷  
 3407:  3319:  3231: 3143: 3055: 439: - **Objective:**  
 3408:  3320:  3232: 3144: 3056: 440:   Trigger time trial races by hitting gates while sledding for money rewards.
 3409:  3321:  3233: 3145: 3057: 441: - **Mechanics:**  
 3410:  3322:  3234: 3146: 3058: 442:   - Crossing a time trial gate starts a timer.  
 3411:  3323:  3235: 3147: 3059: 443:   - The faster and further you go, the more money you earn.
 3412:  3324:  3236: 3148: 3060: 444: - **Why It Fits:**  
 3413:  3325:  3237: 3149: 3061: 445:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
 3414:  3326:  3238: 3150: 3062: 446: 
 3415:  3327:  3239: 3151: 3063: 447: ---
 3416:  3328:  3240: 3152: 3064: 448: 
 3417:  3329:  3241: 3153: 3065: 449: ### 10. **RC Motor Sled** ❄️🏎️  
 3418:  3330:  3242: 3154: 3066: 450: - **Objective:**  
 3419:  3331:  3243: 3155: 3067: 451:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
 3420:  3332:  3244: 3156: 3068: 452: - **Mechanics:**  
 3421:  3333:  3245: 3157: 3069: 453:   - Maneuver nimble RC sleds across frozen tundra.  
 3422:  3334:  3246: 3158: 3070: 454:   - Nitro boosts and mid-air tricks enhance performance.  
 3423:  3335:  3247: 3159: 3071: 455:   - Customization options include different sled bodies, engines, and handling upgrades.
 3424:  3336:  3248: 3160: 3072: 456: - **Special Events:**  
 3425:  3337:  3249: 3161: 3073: 457:   - Avalanche races, night rides, and hazard runs.
 3426:  3338:  3250: 3162: 3074: 458: - **Risk/Challenge:**  
 3427:  3339:  3251: 3163: 3075: 459:   - Limited battery life, high winds, and signal loss in deep snow.
 3428:  3340:  3252: 3164: 3076: 460: 
 3429:  3341:  3253: 3165: 3077: 461: ---
 3430:  3342:  3254: 3166: 3078: 462: 
 3431:  3343:  3255: 3167: 3079: 463: ### 11. **Sap Sugaring** 🍁🔥  
 3432:  3344:  3256: 3168: 3080: 464: - **Objective:**  
 3433:  3345:  3257: 3169: 3081: 465:   Tap into nature’s sweetest resource—maple syrup! Harvest sap from trees to create energy-restoring treats and valuable trade goods.  
 3434:  3346:  3258: 3170: 3082: 466: - **Mechanics:**  
 3435:  3347:  3259: 3171: 3083: 467:   - Start by tapping maple trees on the starter mountain.  
 3436:  3348:  3260: 3172: 3084: 468:   - Explore new regions to discover exotic trees like the **Cinderwillow** on Volcano Mountain, producing rare and powerful saps.  
 3437:  3349:  3261: 3173: 3085: 469:   - Upgrade your tapping tools and storage tanks to increase yield and quality.  
 3438:  3350:  3262: 3174: 3086: 470: - **Upgrades:**  
 3439:  3351:  3263: 3175: 3087: 471:   - **Precision Taps:** Extract sap faster with reduced waste.  
 3440:  3352:  3264: 3176: 3088: 472:   - **Insulated Buckets:** Prevent spoilage and maximize collection.  
 3441:  3353:  3265: 3177: 3089: 473:   - **Sap Refinery:** Process sap into premium syrup with added benefits.  
 3442:  3354:  3266: 3178: 3090: 474: 
 3443:  3355:  3267: 3179: 3091: 475: ---
 3444:  3356:  3268: 3180: 3092: 476: 
 3445:  3357:  3269: 3181: 3093: 477: ### 12. **Beekeeping** 🐝🍯  
 3446:  3358:  3270: 3182: 3094: 478: - **Objective:**  
 3447:  3359:  3271: 3183: 3095: 479:   Raise and breed bees to produce high-quality honey and wax, each offering unique benefits for sledding, income, and buffs.  
 3448:  3360:  3272: 3184: 3096: 480: - **Mechanics:**  
 3449:  3361:  3273: 3185: 3097: 481:   - Manage beehives and optimize honey production.  
 3450:  3362:  3274: 3186: 3098: 482:   - Crossbreed bees to develop specialized traits.  
 3451:  3363:  3275: 3187: 3099: 483:   - Explore forests to find and capture new queen bees.  
 3452:  3364:  3276: 3188: 3100: 484:   - Maintain hive conditions to ensure steady honey and wax yields.  
 3453:  3365:  3277: 3189: 3101: 485: - **Upgrades:**  
 3454:  3366:  3278: 3190: 3102: 486:   - **Deluxe Hives:** Improve bee happiness and productivity.  
 3455:  3367:  3279: 3191: 3103: 487:   - **Queen Breeding Chambers:** Unlock advanced genetic traits for custom honey effects.  
 3456:  3368:  3280: 3192: 3104: 488:   - **Protective Suits & Smokers:** Handle bees safely and reduce swarm risks.  
 3457:  3369:  3281: 3193: 3105: 489: - **Special Events:**  
 3458:  3370:  3282: 3194: 3106: 490:   - **Swarm Rescues:** Save lost colonies for rare genetic lines.  
 3459:  3371:  3283: 3195: 3107: 491:   - **Beekeeper Pete’s Challenges:** Complete tricky hive management tasks for rewards.  
 3460:  3372:  3284: 3196: 3108: 492: 
 3461:  3373:  3285: 3197: 3109: 493: ---
 3462:  3374:  3286: 3198: 3110: 494: 
 3463:  3375:  3287: 3199: 3111: 495: ## 🌆 **NPCs & Mountain Ecosystem**
 3464:  3376:  3288: 3200: 3112: 496: A thriving **mountain resort** needs a mix of **essential services, skilled specialists, and quirky legends**. These NPCs **enhance gameplay, create dynamic events, and unlock hidden mechanics**.
 3465:  3377:  3289: 3201: 3113: 497: 
 3466:  3378:  3290: 3202: 3114: 498: ---
 3467:  3379:  3291: 3203: 3115: 499: 
 3468:  3380:  3292: 3204: 3116: 500: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
 3469:  3381:  3293: 3205: 3117: 501: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
 3470:  3382:  3294: 3206: 3118: 502: 
 3471:  3383:  3295: 3207: 3119: 503: #### 🏂 **Sled Tech Steve**
 3472:  3384:  3296: 3208: 3120: 504: - **Purpose:** Repairs damage, sells sled mods.
 3473:  3385:  3297: 3209: 3121: 505: - **Example Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
 3474:  3386:  3298: 3210: 3122: 506: - **Best Quote:** *"What’d ya do, run into a bear during a race? I can fix it… for a price."*
 3475:  3387:  3299: 3211: 3123: 507: 
 3476:  3388:  3300: 3212: 3124: 508: #### 🍔 **Food Vendor**
 3477:  3389:  3301: 3213: 3125: 509: - **Purpose:** Sells food that provides **stamina buffs & temporary performance boosts**.
 3478:  3390:  3302: 3214: 3126: 510: - **Example Menu:** **Hot cocoa (warmth boost), Protein bars (stamina regen), Energy drinks (speed burst).**
 3479:  3391:  3303: 3215: 3127: 511: - **Best Quote:** *"You can't land tricks on an empty stomach!"*
 3480:  3392:  3304: 3216: 3128: 512: 
 3481:  3393:  3305: 3217: 3129: 513: #### 🎈 **Lift Operator Jay** *(kite enthusiast)*
 3482:  3394:  3306: 3218: 3130: 514: - **Purpose:** Manages lifts, introduces **kite mechanics** for gliding shortcuts.
 3483:  3395:  3307: 3219: 3131: 515: - **Example Unlocks:** **Kite rentals, lift season passes, wind path hints.**
 3484:  3396:  3308: 3220: 3132: 516: - **Best Quote:** *"Ever thought about catching air... without your sled?"*
 3485:  3397:  3309: 3221: 3133: 517: 
 3486:  3398:  3310: 3222: 3134: 518: #### 🏨 **The Hotel Hostess**
 3487:  3399:  3311: 3223: 3135: 519: - **Purpose:** Offers accommodations & **passive income based on popularity**.
 3488:  3400:  3312: 3224: 3136: 520: - **Example Unlocks:** **Penthouse suites, reputation perks, tourism boosts.**
 3489:  3401:  3313: 3225: 3137: 521: - **Best Quote:** *"The more people love this place, the more we all win."*
 3490:  3402:  3314: 3226: 3138: 522: 
 3491:  3403:  3315: 3227: 3139: 523: #### 🏪 **Convenience Store Owner Tilly**
 3492:  3404:  3316: 3228: 3140: 524: - **Purpose:** Sells consumables, **prospecting gear**, and utility tools.
 3493:  3405:  3317: 3229: 3141: 525: - **Example Stock:** **Batteries, flares, bait, shovels.**
 3494:  3406:  3318: 3230: 3142: 526: - **Best Quote:** *"You never know when you’ll need an extra pack of hand warmers."*
 3495:  3407:  3319: 3231: 3143: 527: 
 3496:  3408:  3320: 3232: 3144: 528: #### 🏔️ **Resort Manager Montana Snow**
 3497:  3409:  3321: 3233: 3145: 529: - **Purpose:** Oversees **mountain upgrades & expansion.**
 3498:  3410:  3322: 3234: 3146: 530: - **Example Unlocks:** **New trails, safety patrols, winter festivals.**
 3499:  3411:  3323: 3235: 3147: 531: - **Best Quote:** *"A bigger, better mountain keeps ‘em coming back!"*
 3500:  3412:  3324: 3236: 3148: 532: 
 3501:  3413:  3325: 3237: 3149: 533: ---
 3502:  3414:  3326: 3238: 3150: 534: 
 3503:  3415:  3327: 3239: 3151: 535: ### 🏆 **Trick & Racing-Oriented NPCs**
 3504:  3416:  3328: 3240: 3152: 536: These **drive skill progression**—unlocking **better tricks, harder competitions, and high-stakes challenges**.
 3505:  3417:  3329: 3241: 3153: 537: 
 3506:  3418:  3330: 3242: 3154: 538: #### 📸 **Hype Photographer Darlene**
 3507:  3419:  3331: 3243: 3155: 539: - **Purpose:** **Photo verification & bonus earnings** for sick tricks.
 3508:  3420:  3332: 3244: 3156: 540: - **Example Unlocks:** **Sponsor deals, cinematic trick replays.**
 3509:  3421:  3333: 3245: 3157: 541: - **Best Quote:** *"If it ain't on camera, did it even happen?"*
 3510:  3422:  3334: 3246: 3158: 542: 
 3511:  3423:  3335: 3247: 3159: 543: #### 🏅 **Stunt Organizer Whistler**
 3512:  3424:  3336: 3248: 3160: 544: - **Purpose:** Hosts **extreme challenge events**—big air, freestyle sessions.
 3513:  3425:  3337: 3249: 3161: 545: - **Example Unlocks:** **Timed trick courses, skydiving sled events.**
 3514:  3426:  3338: 3250: 3162: 546: - **Best Quote:** *"I wanna see something so crazy I forget my own name!"*
 3515:  3427:  3339: 3251: 3163: 547: 
 3516:  3428:  3340: 3252: 3164: 548: #### 🏁 **Race Commissioner Cannon**
 3517:  3429:  3341: 3253: 3165: 549: - **Purpose:** Runs **competitions & time trials**.
 3518:  3430:  3342: 3254: 3166: 550: - **Example Unlocks:** **Speed sleds, racing circuits, timed event boards.**
 3519:  3431:  3343: 3255: 3167: 551: - **Best Quote:** *"Fastest run gets the trophy—simple as that."*
 3520:  3432:  3344: 3256: 3168: 552: 
 3521:  3433:  3345: 3257: 3169: 553: #### 🏂 **Retired Pro Burton**
 3522:  3434:  3346: 3258: 3170: 554: - **Purpose:** **Teaches advanced tricks & unlocks sledboarding**.
 3523:  3435:  3347: 3259: 3171: 555: - **Example Unlocks:** **Sled-to-board transitions, trick combos.**
 3524:  3436:  3348: 3260: 3172: 556: - **Best Quote:** *"Back in my day, we landed tricks with style. I can show ya how."*
 3525:  3437:  3349: 3261: 3173: 557: 
 3526:  3438:  3350: 3262: 3174: 558: ---
 3527:  3439:  3351: 3263: 3175: 559: 
 3528:  3440:  3352: 3264: 3176: 560: ### 🏔️ **World-Building & Exploration NPCs**
 3529:  3441:  3353: 3265: 3177: 561: These **add depth, side quests, and hidden mechanics** to the world.
 3530:  3442:  3354: 3266: 3178: 562: 
 3531:  3443:  3355: 3267: 3179: 563: #### 🐾 **Wildlife Researcher**
 3532:  3444:  3356: 3268: 3180: 564: - **Purpose:** Tracks **rare animal spawns, photographic missions, fishing spots.**
 3533:  3445:  3357: 3269: 3181: 565: - **Example Unlocks:** **Bear sightings, falcon partner, eco-tourism quests.**
 3534:  3446:  3358: 3270: 3182: 566: - **Best Quote:** *"You ever seen a snow leopard up close? Neither have I… yet."*
 3535:  3447:  3359: 3271: 3183: 567: 
 3536:  3448:  3360: 3272: 3184: 568: #### 🚑 **Sled Patrol Captain**
 3537:  3449:  3361: 3273: 3185: 569: - **Purpose:** Leads **rescue missions & avalanche drills.**
 3538:  3450:  3362: 3274: 3186: 570: - **Example Unlocks:** **Emergency sled deployment, survival training.**
 3539:  3451:  3363: 3275: 3187: 571: - **Best Quote:** *"We save people, we don’t just watch ‘em wipe out."*
 3540:  3452:  3364: 3276: 3188: 572: 
 3541:  3453:  3365: 3277: 3189: 573: ---
 3542:  3454:  3366: 3278: 3190: 574: 
 3543:  3455:  3367: 3279: 3191: 575: ### 🎭 **Traveling & Recurring NPCs**
 3544:  3456:  3368: 3280: 3192: 576: They **come and go**, bringing **special challenges, rare gear, and unpredictable encounters**.
 3545:  3457:  3369: 3281: 3193: 577: 
 3546:  3458:  3370: 3282: 3194: 578: #### 🔥 **Rival**
 3547:  3459:  3371: 3283: 3195: 579: - **Purpose:** **Dynamic trick/time trial duels.**
 3548:  3460:  3372: 3284: 3196: 580: - **Example Unlocks:** **Personalized callouts, grudge matches, rare sled decals.**
 3549:  3461:  3373: 3285: 3197: 581: - **Best Quote:** *"You think you’re better than me? Prove it."*
 3550:  3462:  3374: 3286: 3198: 582: 
 3551:  3463:  3375: 3287: 3199: 583: #### 🎩 **Mysterious Merchant**
 3552:  3464:  3376: 3288: 3200: 584: - **Purpose:** **Sells rare & high-risk tech**—limited stock, always random.
 3553:  3465:  3377: 3289: 3201: 585: - **Example Stock:** **Prototype sled engines, cloaking wax, ghost sled.**
 3554:  3466:  3378: 3290: 3202: 586: - **Best Quote:** *"I sell only to those who dare."*
 3555:  3467:  3379: 3291: 3203: 587: 
 3556:  3468:  3380: 3292: 3204: 588: #### 🔧 **Tinkerer**
 3557:  3469:  3381: 3293: 3205: 589: - **Purpose:** **Experimental tech**—RC sleds, lock-picking, custom builds.
 3558:  3470:  3382: 3294: 3206: 590: - **Example Unlocks:** **Remote sleds, grappling hooks, hacking upgrades.**
 3559:  3471:  3383: 3295: 3207: 591: - **Best Quote:** *"You didn’t hear this from me, but I might’ve… *enhanced* a sled or two."*
 3560:  3472:  3384: 3296: 3208: 592: 
 3561:  3473:  3385: 3297: 3209: 593: ---
 3562:  3474:  3386: 3298: 3210: 594: 
 3563:  3475:  3387: 3299: 3211: 595: ### ❄️ **Legendary NPCs**
 3564:  3476:  3388: 3300: 3212: 596: These are **mythic figures**, unlocking **wild game mechanics, hidden areas, and secret challenges**.
 3565:  3477:  3389: 3301: 3213: 597: 
 3566:  3478:  3390: 3302: 3214: 598: #### 🌨️ **Winter Shaman Bromley**
 3567:  3479:  3391: 3303: 3215: 599: - **Purpose:** **Controls weather effects**—snowstorms, icy terrain, wind boosts.
 3568:  3480:  3392: 3304: 3216: 600: - **Example Unlocks:** **Weather manipulation quests, legendary snowboards.**
 3569:  3481:  3393: 3305: 3217: 601: - **Best Quote:** *"The mountain speaks… and I listen."*
 3570:  3482:  3394: 3306: 3218: 602: 
 3571:  3483:  3395: 3307: 3219: 603: #### 🐻 **Bear Whisperer Carrie**
 3572:  3484:  3396: 3308: 3220: 604: - **Purpose:** Unlocks **bear-racing.**
 3573:  3485:  3397: 3309: 3221: 605: - **Example Unlocks:** **Bear races, such as Time Trials and Elimination.**
 3574:  3486:  3398: 3310: 3222: 606: - **Best Quote:** *"Bears don’t bite... if you know how to ask nicely."*
 3575:  3487:  3399: 3311: 3223: 607: 
 3576:  3488:  3400: 3312: 3224: 608: #### 🐝 **Beekeeper Pete**
 3577:  3489:  3401: 3313: 3225: 609: - **Purpose:** Sells **beekeeping upgrades**.
 3578:  3490:  3402: 3314: 3226: 610: - **Example Unlocks:** **Speed honey, frost-resistant sled wax.**
 3579:  3491:  3403: 3315: 3227: 611: - **Best Quote:** *"Snow bees? Oh yeah, they’re real… and fast."*
 3580:  3492:  3404: 3316: 3228: 612: 
 3581:  3493:  3405: 3317: 3229: 613: #### ⏳ **The Time Traveler**
 3582:  3494:  3406: 3318: 3230: 614: - **Purpose:** Unlocks **cryptid fossil digging & timeline anomalies.**
 3583:  3495:  3407: 3319: 3231: 615: - **Example Unlocks:** **Ancient sleds, legendary trails, prehistoric snowboard challenges.**
 3584:  3496:  3408: 3320: 3232: 616: - **Best Quote:** *"The past isn’t gone—it’s just buried under the snow."*
 3585:  3497:  3409: 3321: 3233: 617: 
 3586:  3498:  3410: 3322: 3234: 618: ---
 3587:  3499:  3411: 3323: 3235: 619: 
 3588:  3500:  3412: 3324: 3236: 620: ## 🎮 Enhanced Controls & UI Improvements
 3589:  3501:  3413: 3325: 3237: 621: - Fully customizable control remapping
 3590:  3502:  3414: 3326: 3238: 622: - Comprehensive tutorial and onboarding systems
 3591:  3503:  3415: 3327: 3239: 623: - Improved HUD clarity (stamina, trick scoring, wildlife photography)
 3592:  3504:  3416: 3328: 3240: 624: 
 3593:  3505:  3417: 3329: 3241: 625: ---
 3594:  3506:  3418: 3330: 3242: 626: 
 3595:  3507:  3419: 3331: 3243: 627: ## 🏔️ **Mountain Themes & Progression**
 3596:  3508:  3420: 3332: 3244: 628: 
 3597:  3509:  3421: 3333: 3245: 629: ### Lava Mountain 🌋
 3598:  3510:  3422: 3334: 3246: 630: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
 3599:  3511:  3423: 3335: 3247: 631: - **Mechanics:**  
 3600:  3512:  3424: 3336: 3248: 632:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
 3601:  3513:  3425: 3337: 3249: 633:   - **Ash Clouds:** Temporarily block visibility.
 3602:  3514:  3426: 3338: 3250: 634: - **Power-Up:** **Heat Shielding Sled Coating**  
 3603:  3515:  3427: 3339: 3251: 635:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
 3604:  3516:  3428: 3340: 3252: 636: 
 3605:  3517:  3429: 3341: 3253: 637: ---
 3606:  3518:  3430: 3342: 3254: 638: 
 3607:  3519:  3431: 3343: 3255: 639: ### Space Mountain 🌌
 3608:  3520:  3432: 3344: 3256: 640: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
 3609:  3521:  3433: 3345: 3257: 641: - **Mechanics:**  
 3610:  3522:  3434: 3346: 3258: 642:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
 3611:  3523:  3435: 3347: 3259: 643:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
 3612:  3524:  3436: 3348: 3260: 644: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
 3613:  3525:  3437: 3349: 3261: 645:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
 3614:  3526:  3438: 3350: 3262: 646: 
 3615:  3527:  3439: 3351: 3263: 647: ---
 3616:  3528:  3440: 3352: 3264: 648: 
 3617:  3529:  3441: 3353: 3265: 649: ### Underwater Mountain 🌊
 3618:  3530:  3442: 3354: 3266: 650: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
 3619:  3531:  3443: 3355: 3267: 651: - **Mechanics:**  
 3620:  3532:  3444: 3356: 3268: 652:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
 3621:  3533:  3445: 3357: 3269: 653: - **Power-Up:** **Aqua-Lung Mittens**  
 3622:  3534:  3446: 3358: 3270: 654:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
 3623:  3535:  3447: 3359: 3271: 655: 
 3624:  3536:  3448: 3360: 3272: 656: ---
 3625:  3537:  3449: 3361: 3273: 657: 
 3626:  3538:  3450: 3362: 3274: 658: ### Garbage Dump Glacier 🗑️❄️
 3627:  3539:  3451: 3363: 3275: 659: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
 3628:  3540:  3452: 3364: 3276: 660: - **Mechanics:**  
 3629:  3541:  3453: 3365: 3277: 661:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
 3630:  3542:  3454: 3366: 3278: 662: - **Power-Up:** **Slick Wax Spray**  
 3631:  3543:  3455: 3367: 3279: 663:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
 3632:  3544:  3456: 3368: 3280: 664: 
 3633:  3545:  3457: 3369: 3281: 665: ---
 3634:  3546:  3458: 3370: 3282: 666: 
 3635:  3547:  3459: 3371: 3283: 667: ### Micro Mountain 🐜🌱
 3636:  3548:  3460: 3372: 3284: 668: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
 3637:  3549:  3461: 3373: 3285: 669: - **Mechanics:**  
 3638:  3550:  3462: 3374: 3286: 670:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
 3639:  3551:  3463: 3375: 3287: 671: - **Power-Up:** **Antigrav Wax**  
 3640:  3552:  3464: 3376: 3288: 672:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
 3641:  3553:  3465: 3377: 3289: 673: 
 3642:  3554:  3466: 3378: 3290: 674: ---
 3643:  3555:  3467: 3379: 3291: 675: 
 3644:  3556:  3468: 3380: 3292: 676: ### Candy Cane Canyon 🍭
 3645:  3557:  3469: 3381: 3293: 677: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
 3646:  3558:  3470: 3382: 3294: 678: - **Mechanics:**  
 3647:  3559:  3471: 3383: 3295: 679:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
 3648:  3560:  3472: 3384: 3296: 680: - **Power-Up:** **Sweet-Tooth Coating**  
 3649:  3561:  3473: 3385: 3297: 681:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
 3650:  3562:  3474: 3386: 3298: 682: 
 3651:  3563:  3475: 3387: 3299: 683: ---
 3652:  3564:  3476: 3388: 3300: 684: 
 3653:  3565:  3477: 3389: 3301: 685: ### Crystal Cave Cavern 🔮
 3654:  3566:  3478: 3390: 3302: 686: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
 3655:  3567:  3479: 3391: 3303: 687: - **Mechanics:**  
 3656:  3568:  3480: 3392: 3304: 688:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
 3657:  3569:  3481: 3393: 3305: 689: - **Power-Up:** **Crystal Clear Goggles**  
 3658:  3570:  3482: 3394: 3306: 690:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
 3659:  3571:  3483: 3395: 3307: 691: 
 3660:  3572:  3484: 3396: 3308: 692: ---
 3661:  3573:  3485: 3397: 3309: 693: 
 3662:  3574:  3486: 3398: 3310: 694: ### Haunted Graveyard Hill 👻
 3663:  3575:  3487: 3399: 3311: 695: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
 3664:  3576:  3488: 3400: 3312: 696: - **Mechanics:**  
 3665:  3577:  3489: 3401: 3313: 697:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
 3666:  3578:  3490: 3402: 3314: 698: - **Power-Up:** **Spirit Lantern**  
 3667:  3579:  3491: 3403: 3315: 699:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
 3668:  3580:  3492: 3404: 3316: 700: 
 3669:  3581:  3493: 3405: 3317: 701: ---
 3670:  3582:  3494: 3406: 3318: 702: 
 3671:  3583:  3495: 3407: 3319: 703: ### Sky Jellyfish Mountain ☁️🪼
 3672:  3584:  3496: 3408: 3320: 704: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
 3673:  3585:  3497: 3409: 3321: 705: - **Mechanics:**  
 3674:  3586:  3498: 3410: 3322: 706:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
 3675:  3587:  3499: 3411: 3323: 707: - **Power-Up:** **Stabilizer Sled Rails**  
 3676:  3588:  3500: 3412: 3324: 708:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
 3677:  3589:  3501: 3413: 3325: 709: 
 3678:  3590:  3502: 3414: 3326: 710: ---
 3679:  3591:  3503: 3415: 3327: 711: 
 3680:  3592:  3504: 3416: 3328: 712: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
 3681:  3593:  3505: 3417: 3329: 713: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
 3682:  3594:  3506: 3418: 3330: 714: - **Mechanics:**  
 3683:  3595:  3507: 3419: 3331: 715:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
 3684:  3596:  3508: 3420: 3332: 716: - **Power-Up:** **Clockwork Treads**  
 3685:  3597:  3509: 3421: 3333: 717:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
 3686:  3598:  3510: 3422: 3334: 718: 
 3687:  3599:  3511: 3423: 3335: 719: ---
 3688:  3600:  3512: 3424: 3336: 720: 
 3689:  3601:  3513: 3425: 3337: 721: ### Pyramid Peak 🐫🏜️
 3690:  3602:  3514: 3426: 3338: 722: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
 3691:  3603:  3515: 3427: 3339: 723: - **Mechanics:**  
 3692:  3604:  3516: 3428: 3340: 724:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
 3693:  3605:  3517: 3429: 3341: 725: - **Power-Up:** **Sandrunner Skis**  
 3694:  3606:  3518: 3430: 3342: 726:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
 3695:  3607:  3519: 3431: 3343: 727: 
 3696:  3608:  3520: 3432: 3344: 728: ---
 3697:  3609:  3521: 3433: 3345: 729: 
 3698:  3610:  3522: 3434: 3346: 730: ### Digital Mountain (Cyber Slopes) 💻🔮
 3699:  3611:  3523: 3435: 3347: 731: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
 3700:  3612:  3524: 3436: 3348: 732: - **Mechanics:**  
 3701:  3613:  3525: 3437: 3349: 733:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
 3702:  3614:  3526: 3438: 3350: 734: - **Power-Up:** **Data Shielding**  
 3703:  3615:  3527: 3439: 3351: 735:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
 3704:  3616:  3528: 3440: 3352: 736: 
 3705:  3617:  3529: 3441: 3353: 737: ---
 3706:  3618:  3530: 3442: 3354: 738: 
 3707:  3619:  3531: 3443: 3355: 739: 🔄 Infinite Upgrades with Soft Caps
 3708:  3620:  3532: 3444: 3356: 740: ===================================
 3709:  3621:  3533: 3445: 3357: 741: 
 3710:  3622:  3534: 3446: 3358: 742: **Expanding Progression Without Breaking Balance**
 3711:  3623:  3535: 3447: 3359: 743: 
 3712:  3624:  3536: 3448: 3360: 744: Currently, upgrades in **SledHEAD** have **hard caps**, limiting how many times they can be purchased. While this provides structure, it **restricts long-term progression** and prevents **emergent playstyles** from evolving over multiple runs. To keep **each run fresh and engaging**, we're shifting to an **infinite upgrade system** with **diminishing returns** beyond a **soft cap** for
 3713:  3625:  3537: 3449: 3361: 745: **Personal Upgrades**. **Mountain Upgrades** will
 3714:  3626:  3538: 3450: 3362: 746: need to be rebought for each new mountain purchased, and
 3715:  3627:  3539: 3451: 3363: 747: may or may not be infinite as appropriate to the upgrade.
 3716:  3628:  3540: 3452: 3364: 748: 
 3717:  3629:  3541: 3453: 3365: 749: 🎯 Proposed Solution
 3718:  3630:  3542: 3454: 3366: 750: --------------------
 3719:  3631:  3543: 3455: 3367: 751: 
 3720:  3632:  3544: 3456: 3368: 752: -   **All upgrades become infinitely upgradable.**
 3721:  3633:  3545: 3457: 3369: 753: -   Each upgrade **retains its effectiveness early on** but **scales down gradually** beyond a set level.
 3722:  3634:  3546: 3458: 3370: 754: -   **Soft caps vary** depending on the upgrade type:
 3723:  3635:  3547: 3459: 3371: 755:     -   **Speed upgrades** could start diminishing at **Level 10**.
 3724:  3636:  3548: 3460: 3372: 756:     -   **Trick bonuses** could scale freely until **Level 20** before slowing down.
 3725:  3637:  3549: 3461: 3373: 757: -   **Mathematical balancing** ensures that upgrades remain **meaningful** but **don't become overpowered**.
 3726:  3638:  3550: 3462: 3374: 758: 
 3727:  3639:  3551: 3463: 3375: 759: 📊 Scaling Formula: Exponential & Logarithmic Decay
 3728:  3640:  3552: 3464: 3376: 760: ---------------------------------------------------
 3729:  3641:  3553: 3465: 3377: 761: 
 3730:  3642:  3554: 3466: 3378: 762: Instead of **linear scaling** (e.g., "+1 Speed per level"), we use **diminishing returns** to keep upgrades valuable without breaking balance.
 3731:  3643:  3555: 3467: 3379: 763: 
 3732:  3644:  3556: 3468: 3380: 764: ### ✏ Formula Example:
 3733:  3645:  3557: 3469: 3381: 765: 
 3734:  3646:  3558: 3470: 3382: 766: newValue = baseValue + (scalingFactor * sqrt(level))
 3735:  3647:  3559: 3471: 3383: 767: 
 3736:  3648:  3560: 3472: 3384: 768: -   **Early levels feel impactful**, allowing noticeable improvements.
 3737:  3649:  3561: 3473: 3385: 769: -   **Later levels slow down naturally**, preventing infinite stacking from making players overpowered.
 3738:  3650:  3562: 3474: 3386: 770: -   Works across **various upgrade types**, from **speed boosts to trick multipliers**.
 3739:  3651:  3563: 3475: 3387: 771: 
 3740:  3652:  3564: 3476: 3388: 772: 🔎 **Alternative Approach: Logarithmic Scaling**\
 3741:  3653:  3565: 3477: 3389: 773: For upgrades that should scale *aggressively early on* but taper off smoothly:
 3742:  3654:  3566: 3478: 3390: 774: 
 3743:  3655:  3567: 3479: 3391: 775: newValue = baseValue * (1 + (scalingFactor * log(level + 1)))
 3744:  3656:  3568: 3480: 3392: 776: 
 3745:  3657:  3569: 3481: 3393: 777: -   Great for upgrades like **boost charge rates or sled handling**, where a **big early impact** makes sense but **total mastery should be gradual**.
 3746:  3658:  3570: 3482: 3394: 778: 
 3747:  3659:  3571: 3483: 3395: 779: ✅ Benefits of Infinite Upgrades with Soft Caps
 3748:  3660:  3572: 3484: 3396: 780: ----------------------------------------------
 3749:  3661:  3573: 3485: 3397: 781: 
 3750:  3662:  3574: 3486: 3398: 782: ✔ **Keeps long-term progression engaging** -- No artificial "max level" bottleneck.\
 3751:  3663:  3575: 3487: 3399: 783: ✔ **Encourages specialized strategies** -- Players can **focus on speed, tricks, or economy-based builds**.\
 3752:  3664:  3576: 3488: 3400: 784: ✔ **Prevents upgrade obsolescence** -- Players **always have something meaningful to invest in**.\
 3753:  3665:  3577: 3489: 3401: 785: ✔ **Maintains challenge balance** -- Runs become **progressively stronger**, but not infinitely easy.
 3754:  3666:  3578: 3490: 3402: 786: 
 3755:  3667:  3579: 3491: 3403: 787: 📌 Tasks & Implementation Plan
 3756:  3668:  3580: 3492: 3404: 788: ------------------------------
 3757:  3669:  3581: 3493: 3405: 789: 
 3758:  3670:  3582: 3494: 3406: 790: -   [ ]  **Remove hard upgrade caps** for all current upgrades.
 3759:  3671:  3583: 3495: 3407: 791: -   [ ]  **Implement soft cap mechanics** using **square root or logarithmic scaling**.
 3760:  3672:  3584: 3496: 3408: 792: -   [ ]  **Fine-tune soft cap levels** for different upgrade categories (e.g., Speed vs. Trick Boosts).
 3761:  3673:  3585: 3497: 3409: 793: -   [ ]  **Balance test progression** to ensure **long-term upgrades stay meaningful but not overpowered**.
 3762:  3674:  3586: 3498: 3410: 794: 
 3763:  3675:  3587: 3499: 3411: 795: This system ensures **players always have room to grow**, while keeping **SledHEAD's challenge intact**. 🚀🔥
 3764:  3676:  3588: 3500: 3412: 796: 
 3765:  3677:  3589: 3501: 3413: 797: ---
 3766:  3678:  3590: 3502: 3414: 798: 
 3767:  3679:  3591: 3503: 3415: 799: ## 🏆 Endgame & Prestige Content
 3768:  3680:  3592: 3504: 3416: 800: - Prestige system for continued replayability
 3769:  3681:  3593: 3505: 3417: 801: - Elite sled runs with intensified challenges
 3770:  3682:  3594: 3506: 3418: 802: - Legendary animal photo hunts for ultimate rewards
 3771:  3683:  3595: 3507: 3419: 803: 
 3772:  3684:  3596: 3508: 3420: 804: ---
 3773:  3685:  3597: 3509: 3421: 805: 
 3774:  3686:  3598: 3510: 3422: 806: ## 📅 Development Milestones & Timeline
 3775:  3687:  3599: 3511: 3423: 807: ### Short-Term:
 3776:  3688:  3600: 3512: 3424: 808: - Implement stamina system, basic uphill-downhill gameplay
 3777:  3689:  3601: 3513: 3425: 809: - Expand wildlife photography with rare animals at altitude
 3778:  3690:  3602: 3514: 3426: 810: - Basic personal and mountain upgrades functionality
 3779:  3691:  3603: 3515: 3427: 811: 
 3780:  3692:  3604: 3516: 3428: 812: ### Mid-Term:
 3781:  3693:  3605: 3517: 3429: 813: - Integrate the light/dark gradient altitude system to enhance visual depth and player navigation
 3782:  3694:  3606: 3518: 3430: 814: - Introduce NPCs and interactive infrastructure
 3783:  3695:  3607: 3519: 3431: 815: - Initial mini-games integration
 3784:  3696:  3608: 3520: 3432: 816: 
 3785:  3697:  3609: 3521: 3433: 817: ### Long-Term:
 3786:  3698:  3610: 3522: 3434: 818: - Add mountain biomes and unique thematic mechanics
 3787:  3699:  3611: 3523: 3435: 819: - Fully expand trick system
 3788:  3700:  3612: 3524: 3436: 820: - Complete mini-games and endgame challenges
 3789:  3701:  3613: 3525: 3437: 821: - Polish UI/UX and refine progression systems
 3790:  3702:  3614: 3526: 3438: 822: 
 3791:  3703:  3615: 3527: 3439: 823: ---
 3792:  3704:  3616: 3528: 3440: 824: 
 3793:  3705:  3617: 3529: 3441: 825: This comprehensive roadmap encapsulates all planned features and mechanics, clearly outlines the development trajectory, and integrates your newly defined gameplay mechanic. Use this as your foundational documentation moving forward to guide development clearly and effectively.
 3794:  3706:  3618: 3530: 3442: ````
 3795:  3707:  3619: 3531: 3443: 
 3796:  3708:  3620: 3532: 3444: ## File: js/stamina.js
 3797:  3709:  3621: 3533: 3445: ````javascript
 3798:  3710:  3622: 3534: 3446:   1: // Global counter for stamina depletion re-entries
 3799:  3711:  3623: 3535: 3447:   2: let reentryCount = 0;
 3800:  3712:  3624: 3536: 3448:   3: // In stamina.js
 3801:  3713:  3625: 3537: 3449:   4: class Stamina {
 3802:  3714:  3626: 3538: 3450:   5:     constructor() {
 3803:  3715:  3627: 3539: 3451:   6:       this.maxStamina = 100;
 3804:  3716:  3628: 3540: 3452:   7:       this.currentStamina = this.maxStamina;
 3805:  3717:  3629: 3541: 3453:   8:       this.staminaDrainWalking = 0.1;  // Drains steadily when walking uphill
 3806:  3718:  3630: 3542: 3454:   9:       this.staminaDrainJumping = 2.0;    // Drains once on jump launch
 3807:  3719:  3631: 3543: 3455:  10:       this.staminaDrainSledding = 0.01;  // Drains very slowly when sledding
 3808:  3720:  3632: 3544: 3456:  11:       this.isVisible = false;
 3809:  3721:  3633: 3545: 3457:  12:       this.jumpTriggered = false;        // Initialize jump flag
 3810:  3722:  3634: 3546: 3458:  13:       this.previousState = null;         // Track previous game state
 3811:  3723:  3635: 3547: 3459:  14:       this.lastLogTime = 0;              // Timestamp for throttling log messages
 3812:  3724:  3636: 3548: 3460:  15:       this.canvas = document.createElement("canvas");
 3813:  3725:  3637: 3549: 3461:  16:       this.ctx = this.canvas.getContext("2d");
 3814:  3726:  3638: 3550: 3462:  17:       this.canvas.width = 200;
 3815:  3727:  3639: 3551: 3463:  18:       this.canvas.height = 20;
 3816:  3728:  3640: 3552: 3464:  19:       this.canvas.style.position = "fixed";
 3817:  3729:  3641: 3553: 3465:  20:       this.canvas.style.top = "40px";
 3818:  3730:  3642: 3554: 3466:  21:       this.canvas.style.left = "40px";
 3819:  3731:  3643: 3555: 3467:  22:       this.canvas.style.zIndex = "1000";
 3820:  3732:  3644: 3556: 3468:  23:       document.body.appendChild(this.canvas);
 3821:  3733:  3645: 3557: 3469:  24:     }
 3822:  3734:  3646: 3558: 3470:  25:     // New method to drain stamina on jump initiation
 3823:  3735:  3647: 3559: 3471:  26:     drainJump() {
 3824:  3736:  3648: 3560: 3472:  27:       if (!this.jumpTriggered) {
 3825:  3737:  3649: 3561: 3473:  28:         this.currentStamina -= this.staminaDrainJumping;
 3826:  3738:  3650: 3562: 3474:  29:         this.jumpTriggered = true;
 3827:  3739:  3651: 3563: 3475:  30:         this.throttledLog("Jump drain: stamina reduced by " + this.staminaDrainJumping + " New stamina: " + this.currentStamina);
 3828:  3740:  3652: 3564: 3476:  31:       }
 3829:  3741:  3653: 3565: 3477:  32:     }
 3830:  3742:  3654: 3566: 3478:  33:     // Reset jump flag (to be called on landing)
 3831:  3743:  3655: 3567: 3479:  34:     resetJumpTrigger() {
 3832:  3744:  3656: 3568: 3480:  35:       this.jumpTriggered = false;
 3833:  3745:  3657: 3569: 3481:  36:       this.throttledLog("Jump trigger reset");
 3834:  3746:  3658: 3570: 3482:  37:     }
 3835:  3747:  3659: 3571: 3483:  38:     // Throttled logging function to limit messages to once per second
 3836:  3748:  3660: 3572: 3484:  39:     throttledLog(message) {
 3837:  3749:  3661: 3573: 3485:  40:       const currentTime = Date.now();
 3838:  3750:  3662: 3574: 3486:  41:       if (currentTime - this.lastLogTime >= 1000) { // Only log once per second
 3839:  3751:  3663: 3575: 3487:  42:         console.log(message);
 3840:  3752:  3664: 3576: 3488:  43:         this.lastLogTime = currentTime;
 3841:  3753:  3665: 3577: 3489:  44:       }
 3842:  3754:  3666: 3578: 3490:  45:     }
 3843:  3755:  3667: 3579: 3491:  46:     handleStaminaDepletion() {
 3844:  3756:  3668: 3580: 3492:  47:         this.throttledLog("Stamina depleted - returning to house");
 3845:  3757:  3669: 3581: 3493:  48:         // Move player to house
 3846:  3758:  3670: 3582: 3494:  49:         changeState(window.GameState.HOUSE);
 3847:  3759:  3671: 3583: 3495:  50:         // Refill stamina
 3848:  3760:  3672: 3584: 3496:  51:         this.currentStamina = this.maxStamina;
 3849:  3761:  3673: 3585: 3497:  52:         this.throttledLog("Stamina refilled to maximum");
 3850:  3762:  3674: 3586: 3498:  53:         // Despawn all animals
 3851:  3763:  3675: 3587: 3499:  54:         despawnAllAnimals();
 3852:  3764:  3676: 3588: 3500:  55:         this.throttledLog("All animals despawned");
 3853:  3765:  3677: 3589: 3501:  56:         // Calculate and charge re-entry fee
 3854:  3766:  3678: 3590: 3502:  57:         const fee = 100 * (reentryCount + 1);
 3855:  3767:  3679: 3591: 3503:  58:         player.money = Math.max(0, player.money - fee);
 3856:  3768:  3680: 3592: 3504:  59:         this.throttledLog(`Charged re-entry fee: $${fee}`);
 3857:  3769:  3681: 3593: 3505:  60:         // Increment re-entry counter
 3858:  3770:  3682: 3594: 3506:  61:         reentryCount++;
 3859:  3771:  3683: 3595: 3507:  62:         this.throttledLog(`Re-entry count increased to: ${reentryCount}`);
 3860:  3772:  3684: 3596: 3508:  63:     }
 3861:  3773:  3685: 3597: 3509:  64:     update() {
 3862:  3774:  3686: 3598: 3510:  65:       // Check for entering house state (state transition)
 3863:  3775:  3687: 3599: 3511:  66:       const enteringHouse = this.previousState !== window.GameState.HOUSE && window.currentState === window.GameState.HOUSE;
 3864:  3776:  3688: 3600: 3512:  67:       // Only show stamina bar if the player is NOT at home
 3865:  3777:  3689: 3601: 3513:  68:       this.isVisible = (window.currentState !== window.GameState.HOUSE);
 3866:  3778:  3690: 3602: 3514:  69:       if (!this.isVisible) {
 3867:  3779:  3691: 3603: 3515:  70:         if (enteringHouse) {
 3868:  3780:  3692: 3604: 3516:  71:           this.currentStamina = this.maxStamina; // Reset stamina only when entering the house
 3869:  3781:  3693: 3605: 3517:  72:           this.throttledLog("At home - resetting stamina");
 3870:  3782:  3694: 3606: 3518:  73:         }
 3871:  3783:  3695: 3607: 3519:  74:         this.canvas.style.display = "none";
 3872:  3784:  3696: 3608: 3520:  75:         this.previousState = window.currentState; // Update previous state
 3873:  3785:  3697: 3609: 3521:  76:         return;
 3874:  3786:  3698: 3610: 3522:  77:       }
 3875:  3787:  3699: 3611: 3523:  78:       this.canvas.style.display = "block";
 3876:  3788:  3700: 3612: 3524:  79:       // Drain stamina when moving uphill
 3877:  3789:  3701: 3613: 3525:  80:       if (window.currentState === window.GameState.UPHILL) {
 3878:  3790:  3702: 3614: 3526:  81:         if (keysDown["w"] || keysDown["a"] || keysDown["s"] || keysDown["d"]) {
 3879:  3791:  3703: 3615: 3527:  82:           this.currentStamina -= this.staminaDrainWalking;
 3880:  3792:  3704: 3616: 3528:  83:           this.throttledLog("UPHILL movement: draining stamina by " + this.staminaDrainWalking + " Current stamina: " + this.currentStamina);
 3881:  3793:  3705: 3617: 3529:  84:         }
 3882:  3794:  3706: 3618: 3530:  85:       }
 3883:  3795:  3707: 3619: 3531:  86:       // (No jump drain logic here now—it's moved to mechanics.js)
 3884:  3796:  3708: 3620: 3532:  87:       // Drain stamina very slowly when sledding
 3885:  3797:  3709: 3621: 3533:  88:       if (player.isSliding) {
 3886:  3798:  3710: 3622: 3534:  89:         this.currentStamina -= this.staminaDrainSledding;
 3887:  3799:  3711: 3623: 3535:  90:         this.throttledLog("Sledding: draining stamina by " + this.staminaDrainSledding + " Current stamina: " + this.currentStamina);
 3888:  3800:  3712: 3624: 3536:  91:       }
 3889:  3801:  3713: 3625: 3537:  92:       // Check for stamina depletion
 3890:  3802:  3714: 3626: 3538:  93:       if (this.currentStamina <= 0 && window.currentState !== window.GameState.HOUSE) {
 3891:  3803:  3715: 3627: 3539:  94:         this.handleStaminaDepletion();
 3892:  3804:  3716: 3628: 3540:  95:       }
 3893:  3805:  3717: 3629: 3541:  96:       // Clamp stamina value between 0 and max
 3894:  3806:  3718: 3630: 3542:  97:       this.currentStamina = Math.max(0, Math.min(this.currentStamina, this.maxStamina));
 3895:  3807:  3719: 3631: 3543:  98:       // Render the stamina bar
 3896:  3808:  3720: 3632: 3544:  99:       this.render();
 3897:  3809:  3721: 3633: 3545: 100:       // Update previous state
 3898:  3810:  3722: 3634: 3546: 101:       this.previousState = window.currentState;
 3899:  3811:  3723: 3635: 3547: 102:     }
 3900:  3812:  3724: 3636: 3548: 103:     render() {
 3901:  3813:  3725: 3637: 3549: 104:       this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
 3902:  3814:  3726: 3638: 3550: 105:       // Determine stamina bar color based on stamina percentage
 3903:  3815:  3727: 3639: 3551: 106:       let staminaRatio = this.currentStamina / this.maxStamina;
 3904:  3816:  3728: 3640: 3552: 107:       let color = "#00FF00"; // Green (full stamina)
 3905:  3817:  3729: 3641: 3553: 108:       if (staminaRatio < 0.5) color = "#FFA500"; // Orange (moderate stamina)
 3906:  3818:  3730: 3642: 3554: 109:       if (staminaRatio < 0.2) color = "#FF0000"; // Red (critical stamina)
 3907:  3819:  3731: 3643: 3555: 110:       // Draw the bar background
 3908:  3820:  3732: 3644: 3556: 111:       this.ctx.fillStyle = "#333";
 3909:  3821:  3733: 3645: 3557: 112:       this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
 3910:  3822:  3734: 3646: 3558: 113:       // Draw the stamina portion
 3911:  3823:  3735: 3647: 3559: 114:       this.ctx.fillStyle = color;
 3912:  3824:  3736: 3648: 3560: 115:       this.ctx.fillRect(0, 0, this.canvas.width * staminaRatio, this.canvas.height);
 3913:  3825:  3737: 3649: 3561: 116:     }
 3914:  3826:  3738: 3650: 3562: 117:   }
 3915:  3827:  3739: 3651: 3563: 118:   // Initialize stamina system
 3916:  3828:  3740: 3652: 3564: 119:   const stamina = new Stamina();
 3917:  3829:  3741: 3653: 3565: 120:   // Hook into the game's update loop
 3918:  3830:  3742: 3654: 3566: 121:   function updateStamina() {
 3919:  3831:  3743: 3655: 3567: 122:     stamina.update();
 3920:  3832:  3744: 3656: 3568: 123:     requestAnimationFrame(updateStamina);
 3921:  3833:  3745: 3657: 3569: 124:   }
 3922:  3834:  3746: 3658: 3570: 125:   updateStamina();
 3923:  3835:  3747: 3659: 3571: 126: // Make stamina available globally
 3924:  3836:  3748: 3660: 3572: 127: window.stamina = stamina;
 3925:  3837:  3749: 3661: 3573: ````
 3926:  3838:  3750: 3662: 3574: 
 3927:  3839:  3751: 3663: 3575: ## File: js/wildlife.js
 3928:  3840:  3752: 3664: 3576: ````javascript
 3929:  3841:  3753: 3665: 3577:   1: /* wildlife.js - Wildlife Simulation (Refactored with Spawning Biomes and Fallback)
 3930:  3842:  3754: 3666: 3578:   2: // This file handles the overall wildlife simulation logic using a registration system.
 3931:  3843:  3755: 3667: 3579:   3: // Each animal module (e.g., bear.js, bird.js, mountainlion.js) registers itself by calling registerAnimalType().
 3932:  3844:  3756: 3668: 3580:   4: // Animals have a "spawningBiomes" property that defines in which biomes and mountain layers they spawn.
 3933:  3845:  3757: 3669: 3581:   5: // If currentBiome is not defined or unrecognized, the system assumes every mountain is valid.
 3934:  3846:  3758: 3670: 3582:   6: */
 3935:  3847:  3759: 3671: 3583:   7: // Global registry for animal types
 3936:  3848:  3760: 3672: 3584:   8: var animalRegistry = [];
 3937:  3849:  3761: 3673: 3585:   9: // Function for animal modules to register themselves
 3938:  3850:  3762: 3674: 3586:  10: function registerAnimalType(animalData) {
 3939:  3851:  3763: 3675: 3587:  11:     animalRegistry.push(animalData);
 3940:  3852:  3764: 3676: 3588:  12:     console.log("Registered animal type: " + animalData.type);
 3941:  3853:  3765: 3677: 3589:  13: }
 3942:  3854:  3766: 3678: 3590:  14: // Global variables for the animal system
 3943:  3855:  3767: 3679: 3591:  15: var activeAnimal = null;
 3944:  3856:  3768: 3680: 3592:  16: var animalStateCheckInterval = null;
 3945:  3857:  3769: 3681: 3593:  17: // ------------------- Animal (Critter) Update Logic -------------------
 3946:  3858:  3770: 3682: 3594:  18: function updateAnimal() {
 3947:  3859:  3771: 3683: 3595:  19:   if (!activeAnimal) return;
 3948:  3860:  3772: 3684: 3596:  20:   // Call custom update if provided
 3949:  3861:  3773: 3685: 3597:  21:   if (activeAnimal.customUpdate && typeof activeAnimal.customUpdate === 'function') {
 3950:  3862:  3774: 3686: 3598:  22:       activeAnimal.customUpdate(activeAnimal);
 3951:  3863:  3775: 3687: 3599:  23:   }
 3952:  3864:  3776: 3688: 3600:  24:   checkPlayerProximity();
 3953:  3865:  3777: 3689: 3601:  25:   if (activeAnimal.state === "fleeing") {
 3954:  3866:  3778: 3690: 3602:  26:     if (!activeAnimal.fleeingLogOnce) {
 3955:  3867:  3779: 3691: 3603:  27:       console.log(`Animal fleeing - Type: ${activeAnimal.type}, Angle: ${activeAnimal.fleeAngleActual.toFixed(2)}°, Speed: ${activeAnimal.speed}`);
 3956:  3868:  3780: 3692: 3604:  28:       activeAnimal.fleeingLogOnce = true;
 3957:  3869:  3781: 3693: 3605:  29:     }
 3958:  3870:  3782: 3694: 3606:  30:     let rad = activeAnimal.fleeAngleActual * Math.PI / 180;
 3959:  3871:  3783: 3695: 3607:  31:     activeAnimal.x += Math.cos(rad) * activeAnimal.speed * 0.5;
 3960:  3872:  3784: 3696: 3608:  32:     activeAnimal.y += Math.sin(rad) * activeAnimal.speed * 0.5;
 3961:  3873:  3785: 3697: 3609:  33:     let dx = activeAnimal.x - player.x;
 3962:  3874:  3786: 3698: 3610:  34:     let dy = activeAnimal.y - player.absY;
 3963:  3875:  3787: 3699: 3611:  35:     let distance = Math.sqrt(dx * dx + dy * dy);
 3964:  3876:  3788: 3700: 3612:  36:     if (distance > 1000 && !activeAnimal.despawnScheduled) {
 3965:  3877:  3789: 3701: 3613:  37:       activeAnimal.despawnScheduled = true;
 3966:  3878:  3790: 3702: 3614:  38:       console.log(`Animal is more than 1000 away. Scheduling despawn in 500ms.`);
 3967:  3879:  3791: 3703: 3615:  39:       setTimeout(() => {
 3968:  3880:  3792: 3704: 3616:  40:         if (activeAnimal) {
 3969:  3881:  3793: 3705: 3617:  41:           console.log(`Animal despawned after 500ms out of range`);
 3970:  3882:  3794: 3706: 3618:  42:           activeAnimal = null;
 3971:  3883:  3795: 3707: 3619:  43:           spawnAnimal();
 3972:  3884:  3796: 3708: 3620:  44:         }
 3973:  3885:  3797: 3709: 3621:  45:       }, 5000);
 3974:  3886:  3798: 3710: 3622:  46:     }
 3975:  3887:  3799: 3711: 3623:  47:   } else if (activeAnimal.state === "sitting") {
 3976:  3888:  3800: 3712: 3624:  48:     if (Math.random() < 0.0001) {
 3977:  3889:  3801: 3713: 3625:  49:       console.log(`Animal (${activeAnimal.type}) spontaneously changing state from sitting to fleeing`);
 3978:  3890:  3802: 3714: 3626:  50:       activeAnimal.state = "fleeing";
 3979:  3891:  3803: 3715: 3627:  51:       activeAnimal.fleeingLogOnce = false;
 3980:  3892:  3804: 3716: 3628:  52:     }
 3981:  3893:  3805: 3717: 3629:  53:   }
 3982:  3894:  3806: 3718: 3630:  54: }
 3983:  3895:  3807: 3719: 3631:  55: function checkPlayerProximity() {
 3984:  3896:  3808: 3720: 3632:  56:   if (!activeAnimal || activeAnimal.state === "fleeing") return;
 3985:  3897:  3809: 3721: 3633:  57:   let dx = activeAnimal.x - player.x;
 3986:  3898:  3810: 3722: 3634:  58:   let dy = activeAnimal.y - player.absY;
 3987:  3899:  3811: 3723: 3635:  59:   let distanceSquared = dx * dx + dy * dy;
 3988:  3900:  3812: 3724: 3636:  60:   if (distanceSquared < activeAnimal.detectionRadius * activeAnimal.detectionRadius) {
 3989:  3901:  3813: 3725: 3637:  61:     console.log(`Player too close to animal (${Math.sqrt(distanceSquared).toFixed(1)} < ${activeAnimal.detectionRadius}) - animal fleeing`);
 3990:  3902:  3814: 3726: 3638:  62:     activeAnimal.state = "fleeing";
 3991:  3903:  3815: 3727: 3639:  63:     activeAnimal.fleeingLogOnce = false;
 3992:  3904:  3816: 3728: 3640:  64:     activeAnimal.fleeAngleActual = Math.atan2(dy, dx) * (180 / Math.PI);
 3993:  3905:  3817: 3729: 3641:  65:     activeAnimal.fleeAngleActual += (Math.random() - 0.5) * 30;
 3994:  3906:  3818: 3730: 3642:  66:   }
 3995:  3907:  3819: 3731: 3643:  67: }
 3996:  3908:  3820: 3732: 3644:  68: // Spawn a new animal using the registered types, with biome filtering and fallback.
 3997:  3909:  3821: 3733: 3645:  69: function spawnAnimal() {
 3998:  3910:  3822: 3734: 3646:  70:   if (currentState !== GameState.UPHILL || activeAnimal !== null) return;
 3999:  3911:  3823: 3735: 3647:  71:   // Define recognized mountain biomes.
 4000:  3912:  3824: 3736: 3648:  72:   var recognizedBiomes = ["starterMountain", "spaceMountain", "volcanoMountain"];
 4001:  3913:  3825: 3737: 3649:  73:   let availableAnimals;
 4002:  3914:  3826: 3738: 3650:  74:   // If currentBiome is not defined or unrecognized, allow all animals.
 4003:  3915:  3827: 3739: 3651:  75:   if (!currentBiome || recognizedBiomes.indexOf(currentBiome) === -1) {
 4004:  3916:  3828: 3740: 3652:  76:       availableAnimals = animalRegistry;
 4005:  3917:  3829: 3741: 3653:  77:   } else {
 4006:  3918:  3830: 3742: 3654:  78:       availableAnimals = animalRegistry.filter(animal => {
 4007:  3919:  3831: 3743: 3655:  79:           // If spawningBiomes is not specified, default to spawning only on the Starter Mountain.
 4008:  3920:  3832: 3744: 3656:  80:           if (!animal.spawningBiomes || animal.spawningBiomes.length === 0) {
 4009:  3921:  3833: 3745: 3657:  81:               return currentBiome === "starterMountain";
 4010:  3922:  3834: 3746: 3658:  82:           }
 4011:  3923:  3835: 3747: 3659:  83:           return animal.spawningBiomes.some(rule => {
 4012:  3924:  3836: 3748: 3660:  84:               if (rule.biome !== currentBiome) return false;
 4013:  3925:  3837: 3749: 3661:  85:               if (rule.layers && Array.isArray(rule.layers)) {
 4014:  3926:  3838: 3750: 3662:  86:                   return rule.layers.includes(currentMountainLayer);
 4015:  3927:  3839: 3751: 3663:  87:               }
 4016:  3928:  3840: 3752: 3664:  88:               if (rule.layerRange && typeof rule.layerRange.min === 'number' && typeof rule.layerRange.max === 'number') {
 4017:  3929:  3841: 3753: 3665:  89:                   return currentLayerPercent >= rule.layerRange.min && currentLayerPercent <= rule.layerRange.max;
 4018:  3930:  3842: 3754: 3666:  90:               }
 4019:  3931:  3843: 3755: 3667:  91:               return true;
 4020:  3932:  3844: 3756: 3668:  92:           });
 4021:  3933:  3845: 3757: 3669:  93:       });
 4022:  3934:  3846: 3758: 3670:  94:   }
 4023:  3935:  3847: 3759: 3671:  95:   if (availableAnimals.length === 0) {
 4024:  3936:  3848: 3760: 3672:  96:       console.error("No animal types available for current biome and layer!");
 4025:  3937:  3849: 3761: 3673:  97:       return;
 4026:  3938:  3850: 3762: 3674:  98:   }
 4027:  3939:  3851: 3763: 3675:  99:   let spawnX = (window.innerWidth * 0.1) + (Math.random() * window.innerWidth * 0.9);
 4028:  3940:  3852: 3764: 3676: 100:   let spawnY = player.absY - (window.innerHeight / 2);
 4029:  3941:  3853: 3765: 3677: 101:   let altitude = Math.floor(Math.random() * 100);
 4030:  3942:  3854: 3766: 3678: 102:   let initialState = "sitting";
 4031:  3943:  3855: 3767: 3679: 103:   let baseAngle = spawnX > window.innerWidth / 2 ?
 4032:  3944:  3856: 3768: 3680: 104:                   Math.random() * (170 - 135) + 135 :
 4033:  3945:  3857: 3769: 3681: 105:                   Math.random() * (55 - 20) + 20;
 4034:  3946:  3858: 3770: 3682: 106:   let angleOffset = Math.random() * 15;
 4035:  3947:  3859: 3771: 3683: 107:   let fleeAngleActual = baseAngle + (Math.random() < 0.5 ? -angleOffset : angleOffset);
 4036:  3948:  3860: 3772: 3684: 108:   let totalWeight = availableAnimals.reduce((sum, animal) => sum + animal.spawnProbability, 0);
 4037:  3949:  3861: 3773: 3685: 109:   let r = Math.random() * totalWeight;
 4038:  3950:  3862: 3774: 3686: 110:   let chosenAnimalType = null;
 4039:  3951:  3863: 3775: 3687: 111:   for (let animal of availableAnimals) {
 4040:  3952:  3864: 3776: 3688: 112:     r -= animal.spawnProbability;
 4041:  3953:  3865: 3777: 3689: 113:     if (r <= 0) {
 4042:  3954:  3866: 3778: 3690: 114:       chosenAnimalType = animal;
 4043:  3955:  3867: 3779: 3691: 115:       break;
 4044:  3956:  3868: 3780: 3692: 116:     }
 4045:  3957:  3869: 3781: 3693: 117:   }
 4046:  3958:  3870: 3782: 3694: 118:   if (!chosenAnimalType) chosenAnimalType = availableAnimals[0];
 4047:  3959:  3871: 3783: 3695: 119:   activeAnimal = {
 4048:  3960:  3872: 3784: 3696: 120:     type: chosenAnimalType.type,
 4049:  3961:  3873: 3785: 3697: 121:     x: spawnX,
 4050:  3962:  3874: 3786: 3698: 122:     y: spawnY,
 4051:  3963:  3875: 3787: 3699: 123:     width: chosenAnimalType.width,
 4052:  3964:  3876: 3788: 3700: 124:     height: chosenAnimalType.height,
 4053:  3965:  3877: 3789: 3701: 125:     state: initialState,
 4054:  3966:  3878: 3790: 3702: 126:     speed: chosenAnimalType.speed,
 4055:  3967:  3879: 3791: 3703: 127:     altitude: altitude,
 4056:  3968:  3880: 3792: 3704: 128:     hasBeenPhotographed: false,
 4057:  3969:  3881: 3793: 3705: 129:     detectionRadius: chosenAnimalType.detectionRadius,
 4058:  3970:  3882: 3794: 3706: 130:     fleeAngleActual: fleeAngleActual,
 4059:  3971:  3883: 3795: 3707: 131:     fleeingLogOnce: false,
 4060:  3972:  3884: 3796: 3708: 132:     lastStateChange: Date.now(),
 4061:  3973:  3885: 3797: 3709: 133:     stateChangeCount: 0,
 4062:  3974:  3886: 3798: 3710: 134:     basePhotoBonus: chosenAnimalType.basePhotoBonus || 0,
 4063:  3975:  3887: 3799: 3711: 135:     customUpdate: chosenAnimalType.customUpdate || null,
 4064:  3976:  3888: 3800: 3712: 136:     customDraw: chosenAnimalType.customDraw || null,
 4065:  3977:  3889: 3801: 3713: 137:   };
 4066:  3978:  3890: 3802: 3714: 138:   console.log(`Spawned ${activeAnimal.type} at (${spawnX.toFixed(1)}, ${spawnY.toFixed(1)}), altitude: ${altitude}, state: ${initialState}, speed: ${activeAnimal.speed}, detectionRadius: ${activeAnimal.detectionRadius}`);
 4067:  3979:  3891: 3803: 3715: 139:   if (!animalStateCheckInterval) {
 4068:  3980:  3892: 3804: 3716: 140:     animalStateCheckInterval = setInterval(logAnimalState, 3000);
 4069:  3981:  3893: 3805: 3717: 141:   }
 4070:  3982:  3894: 3806: 3718: 142: }
 4071:  3983:  3895: 3807: 3719: 143: function despawnAllAnimals() {
 4072:  3984:  3896: 3808: 3720: 144:     activeAnimal = null;
 4073:  3985:  3897: 3809: 3721: 145:     console.log('All animals despawned');
 4074:  3986:  3898: 3810: 3722: 146: }
 4075:  3987:  3899: 3811: 3723: 147: function logAnimalState() {
 4076:  3988:  3900: 3812: 3724: 148:   if (!activeAnimal) {
 4077:  3989:  3901: 3813: 3725: 149:     console.log("No active animal right now");
 4078:  3990:  3902: 3814: 3726: 150:     clearInterval(animalStateCheckInterval);
 4079:  3991:  3903: 3815: 3727: 151:     animalStateCheckInterval = null;
 4080:  3992:  3904: 3816: 3728: 152:     return;
 4081:  3993:  3905: 3817: 3729: 153:   }
 4082:  3994:  3906: 3818: 3730: 154:   let playerDist = Math.sqrt(
 4083:  3995:  3907: 3819: 3731: 155:     Math.pow(activeAnimal.x - player.x, 2) + 
 4084:  3996:  3908: 3820: 3732: 156:     Math.pow(activeAnimal.y - player.absY, 2)
 4085:  3997:  3909: 3821: 3733: 157:   );
 4086:  3998:  3910: 3822: 3734: 158:   console.log(`Animal status: ${activeAnimal.type}, state: ${activeAnimal.state}, position: (${activeAnimal.x.toFixed(1)}, ${activeAnimal.y.toFixed(1)}), distance to player: ${playerDist.toFixed(1)}`);
 4087:  3999:  3911: 3823: 3735: 159: }
 4088:  4000:  3912: 3824: 3736: 160: function drawAnimal() {
 4089:  4001:  3913: 3825: 3737: 161:   if (!activeAnimal || currentState !== GameState.UPHILL) return;
 4090:  4002:  3914: 3826: 3738: 162:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 4091:  4003:  3915: 3827: 3739: 163:   let animalScreenY = activeAnimal.y - cameraOffset;
 4092:  4004:  3916: 3828: 3740: 164:   if (activeAnimal.customDraw && typeof activeAnimal.customDraw === 'function') {
 4093:  4005:  3917: 3829: 3741: 165:       activeAnimal.customDraw(activeAnimal, animalScreenY, ctx);
 4094:  4006:  3918: 3830: 3742: 166:   } else {
 4095:  4007:  3919: 3831: 3743: 167:       ctx.fillStyle = activeAnimal.color || "#888888";
 4096:  4008:  3920: 3832: 3744: 168:       ctx.fillRect(
 4097:  4009:  3921: 3833: 3745: 169:         activeAnimal.x - activeAnimal.width / 2,
 4098:  4010:  3922: 3834: 3746: 170:         animalScreenY - activeAnimal.height / 2,
 4099:  4011:  3923: 3835: 3747: 171:         activeAnimal.width,
 4100:  4012:  3924: 3836: 3748: 172:         activeAnimal.height
 4101:  4013:  3925: 3837: 3749: 173:       );
 4102:  4014:  3926: 3838: 3750: 174:   }
 4103:  4015:  3927: 3839: 3751: 175: }
 4104:  4016:  3928: 3840: 3752: 176: window.registerAnimalType = registerAnimalType;
 4105:  4017:  3929: 3841: 3753: 177: window.updateAnimal = updateAnimal;
 4106:  4018:  3930: 3842: 3754: 178: window.spawnAnimal = spawnAnimal;
 4107:  4019:  3931: 3843: 3755: 179: window.despawnAllAnimals = despawnAllAnimals;
 4108:  4020:  3932: 3844: 3756: 180: window.drawAnimal = drawAnimal;
 4109:  4021:  3933: 3845: 3757: ````
 4110:  4022:  3934: 3846: 3758: 
 4111:  4023:  3935: 3847: 3759: ## File: todo.txt
 4112:  4024:  3936: 3848: 3760: ````
 4113:  4025:  3937: 3849: 3761:  1: Feat: Swap from down-to-up to up-to-down.
 4114:  4026:  3938: 3850: 3762:  2: 
 4115:  4027:  3939: 3851: 3763:  3: Docs: Find some NPC to cover prospecting, treasure hunting, and rescue missions
 4116:  4028:  3940: 3852: 3764:  4: 
 4117:  4029:  3941: 3853: 3765:  5: Refactor: Refactor mechanics.js & utils.js
 4118:  4030:  3942: 3854: 3766:  6: 
 4119:  4031:  3943: 3855: 3767:  7: Refactor: Switch tricks from press to hold (so you choose if you do a 180 or a 1080)
 4120:  4032:  3944: 3856: 3768:  8: (more advanced tricks can still be some sort of combo press)
 4121:  4033:  3945: 3857: 3769:  9: 
 4122:  4034:  3946: 3858: 3770: 10: Feat: Nerf jumping, buff ramps, attend leg day affects jump height
 4123:  4035:  3947: 3859: 3771: ````
 4124:  4036:  3948: 3860: 3772: 
 4125:  4037:  3949: 3861: 3773: ## File: js/downhill.js
 4126:  4038:  3950: 3862: 3774: ````javascript
 4127:  4039:  3951: 3863: 3775:   1: /* downhill.js - Downhill Mechanics & Physics */
 4128:  4040:  3952: 3864: 3776:   2: import {
 4129:  4041:  3953: 3865: 3777:   3:   processTrick,
 4130:  4042:  3954: 3866: 3778:   4:   checkTrickInputs,
 4131:  4043:  3955: 3867: 3779:   5:   resetTrickState
 4132:  4044:  3956: 3868: 3780:   6: } from './tricks.js';
 4133:  4045:  3957: 3869: 3781:   7: // Update all downhill-specific physics and mechanics
 4134:  4046:  3958: 3870: 3782:   8: function updateDownhill(deltaTime) {
 4135:  4047:  3959: 3871: 3783:   9:   console.log("handleDownhillMovement START");
 4136:  4048:  3960: 3872: 3784:  10:   let rocketFactor = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.rocketSurgeryFactorPerLevel);
 4137:  4049:  3961: 3873: 3785:  11:   let gravity = TWEAK.baseGravity * rocketFactor;
 4138:  4050:  3962: 3874: 3786:  12:   let maxXVel = TWEAK.baseMaxXVel * (rocketFactor - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel));
 4139:  4051:  3963: 3875: 3787:  13:   maxXVel = Math.max(0, maxXVel);
 4140:  4052:  3964: 3876: 3788:  14:   let opticsFactor = 1 + (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsAccelFactorPerLevel);
 4141:  4053:  3965: 3877: 3789:  15:   let horizontalAccel = TWEAK.baseHorizontalAccel * opticsFactor;
 4142:  4054:  3966: 3878: 3790:  16:   let friction = TWEAK.baseFriction - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel);
 4143:  4055:  3967: 3879: 3791:  17:   if (friction < 0.8) friction = 0.8;
 4144:  4056:  3968: 3880: 3792:  18:   // Horizontal movement handling with bounds checking
 4145:  4057:  3969: 3881: 3793:  19:   if (window.keysDown["a"]) { player.xVel -= horizontalAccel; }
 4146:  4058:  3970: 3882: 3794:  20:   if (window.keysDown["d"]) { player.xVel += horizontalAccel; }
 4147:  4059:  3971: 3883: 3795:  21:   player.xVel *= friction;
 4148:  4060:  3972: 3884: 3796:  22:   player.xVel = clamp(player.xVel, -maxXVel, maxXVel);
 4149:  4061:  3973: 3885: 3797:  23:   let newX = player.x + player.xVel;
 4150:  4062:  3974: 3886: 3798:  24:   // Prevent going off screen horizontally
 4151:  4063:  3975: 3887: 3799:  25:   player.x = clamp(newX, player.width/2, window.canvas.width - player.width/2);
 4152:  4064:  3976: 3888: 3800:  26:   console.log("handleDownhillMovement: Before jump mechanics");
 4153:  4065:  3977: 3889: 3801:  27:   // --- Jump Input Handling ---
 4154:  4066:  3978: 3890: 3802:  28:   // Immediate Mode:
 4155:  4067:  3979: 3891: 3803:  29:   if (TWEAK.jumpType === "immediate") {
 4156:  4068:  3980: 3892: 3804:  30:     if (window.keysDown[" "] && !player.isJumping && player.canJump) {
 4157:  4069:  3981: 3893: 3805:  31:       player.isJumping = true;
 4158:  4070:  3982: 3894: 3806:  32:       player.canJump = false;
 4159:  4071:  3983: 3895: 3807:  33:       player.isCharging = false;
 4160:  4072:  3984: 3896: 3808:  34:       let heightBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpHeightPerRocketSurgery);
 4161:  4073:  3985: 3897: 3809:  35:       let timeBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpTimePerRocketSurgery);
 4162:  4074:  3986: 3898: 3810:  36:       let heightIncrease = heightBonus - 1;
 4163:  4075:  3987: 3899: 3811:  37:       let extraZoom = heightIncrease * TWEAK.jumpZoomPerHeightIncrease;
 4164:  4076:  3988: 3900: 3812:  38:       player.jumpHeightFactor = heightBonus;
 4165:  4077:  3989: 3901: 3813:  39:       player.jumpDuration = TWEAK.jumpBaseAscent * timeBonus;
 4166:  4078:  3990: 3902: 3814:  40:       player.jumpZoomBonus = extraZoom;
 4167:  4079:  3991: 3903: 3815:  41:       player.jumpTimer = 0;
 4168:  4080:  3992: 3904: 3816:  42:       player.hasReachedJumpPeak = false;
 4169:  4081:  3993: 3905: 3817:  43:       if (window.playerUpgrades.rocketSurgery > 0) {
 4170:  4082:  3994: 3906: 3818:  44:         console.log(`Jump boosted by Rocket Surgery ${window.playerUpgrades.rocketSurgery}: Height x${heightBonus.toFixed(2)}, Time x${timeBonus.toFixed(2)}, Zoom +${(extraZoom*100).toFixed(0)}%`);
 4171:  4083:  3995: 3907: 3819:  45:       }
 4172:  4084:  3996: 3908: 3820:  46:       onPlayerJumpStart();
 4173:  4085:  3997: 3909: 3821:  47:     }
 4174:  4086:  3998: 3910: 3822:  48:   }
 4175:  4087:  3999: 3911: 3823:  49:   // Charge Mode:
 4176:  4088:  4000: 3912: 3824:  50:   else if (TWEAK.jumpType === "charge") {
 4177:  4089:  4001: 3913: 3825:  51:     if (window.keysDown[" "] && !player.isJumping && !player.isCharging && player.canJump) {
 4178:  4090:  4002: 3914: 3826:  52:       player.isCharging = true;
 4179:  4091:  4003: 3915: 3827:  53:       player.canJump = false;
 4180:  4092:  4004: 3916: 3828:  54:       player.jumpChargeTime = 0;
 4181:  4093:  4005: 3917: 3829:  55:     }
 4182:  4094:  4006: 3918: 3830:  56:     if (player.isCharging) {
 4183:  4095:  4007: 3919: 3831:  57:       player.jumpChargeTime += deltaTime;
 4184:  4096:  4008: 3920: 3832:  58:       if (!window.keysDown[" "]) {
 4185:  4097:  4009: 3921: 3833:  59:         let chargeRatio = Math.min(1, player.jumpChargeTime / TWEAK.jumpMaxHoldTime);
 4186:  4098:  4010: 3922: 3834:  60:         player.isCharging = false;
 4187:  4099:  4011: 3923: 3835:  61:         player.isJumping = true;
 4188:  4100:  4012: 3924: 3836:  62:         player.jumpHeightFactor = chargeRatio;
 4189:  4101:  4013: 3925: 3837:  63:         player.jumpDuration = 500 + 500 * chargeRatio;
 4190:  4102:  4014: 3926: 3838:  64:         player.jumpTimer = 0;
 4191:  4103:  4015: 3927: 3839:  65:         player.hasReachedJumpPeak = false;
 4192:  4104:  4016: 3928: 3840:  66:         onPlayerJumpStart();
 4193:  4105:  4017: 3929: 3841:  67:       } else if (player.jumpChargeTime >= TWEAK.jumpMaxHoldTime) {
 4194:  4106:  4018: 3930: 3842:  68:         player.isCharging = false;
 4195:  4107:  4019: 3931: 3843:  69:         player.isJumping = true;
 4196:  4108:  4020: 3932: 3844:  70:         player.jumpHeightFactor = 1;
 4197:  4109:  4021: 3933: 3845:  71:         player.jumpDuration = 1000;
 4198:  4110:  4022: 3934: 3846:  72:         player.jumpTimer = 0;
 4199:  4111:  4023: 3935: 3847:  73:         player.hasReachedJumpPeak = false;
 4200:  4112:  4024: 3936: 3848:  74:         onPlayerJumpStart();
 4201:  4113:  4025: 3937: 3849:  75:       }
 4202:  4114:  4026: 3938: 3850:  76:     }
 4203:  4115:  4027: 3939: 3851:  77:   }
 4204:  4116:  4028: 3940: 3852:  78:   // Jump Animation & Trick Handling:
 4205:  4117:  4029: 3941: 3853:  79:   if (player.isJumping) {
 4206:  4118:  4030: 3942: 3854:  80:     player.jumpTimer += deltaTime;
 4207:  4119:  4031: 3943: 3855:  81:     let progress = player.jumpTimer / player.jumpDuration;
 4208:  4120:  4032: 3944: 3856:  82:     // Re-hit window handling:
 4209:  4121:  4033: 3945: 3857:  83:     if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
 4210:  4122:  4034: 3946: 3858:  84:       if (window.keysDown[" "] && !player.reHitActivated && !player.isCharging) {
 4211:  4123:  4035: 3947: 3859:  85:         console.log("Re-hit jump activated!");
 4212:  4124:  4036: 3948: 3860:  86:         player.reHitActivated = true;
 4213:  4125:  4037: 3949: 3861:  87:         player.jumpTimer = 0;
 4214:  4126:  4038: 3950: 3862:  88:         player.jumpDuration *= TWEAK.reHitBonusDuration;
 4215:  4127:  4039: 3951: 3863:  89:         player.jumpHeightFactor = 1;
 4216:  4128:  4040: 3952: 3864:  90:         playTone(600, "sine", 0.1, 0.3);
 4217:  4129:  4041: 3953: 3865:  91:         return;
 4218:  4130:  4042: 3954: 3866:  92:       }
 4219:  4131:  4043: 3955: 3867:  93:     }
 4220:  4132:  4044: 3956: 3868:  94:     if (player.isJumping && jumpOsc) {
 4221:  4133:  4045: 3957: 3869:  95:       let f_start = 300, f_peak = 800, f_end = 300, freq;
 4222:  4134:  4046: 3958: 3870:  96:       if (progress < 0.5) {
 4223:  4135:  4047: 3959: 3871:  97:         let t = progress / 0.5;
 4224:  4136:  4048: 3960: 3872:  98:         freq = f_start + (f_peak - f_start) * (t * t);
 4225:  4137:  4049: 3961: 3873:  99:       } else {
 4226:  4138:  4050: 3962: 3874: 100:         let t = (progress - 0.5) / 0.5;
 4227:  4139:  4051: 3963: 3875: 101:         freq = f_peak - (f_peak - f_end) * (t * t);
 4228:  4140:  4052: 3964: 3876: 102:       }
 4229:  4141:  4053: 3965: 3877: 103:       jumpOsc.frequency.setValueAtTime(freq, audioCtx.currentTime);
 4230:  4142:  4054: 3966: 3878: 104:     }
 4231:  4143:  4055: 3967: 3879: 105:     // Check for trick inputs and process any active tricks
 4232:  4144:  4056: 3968: 3880: 106:     checkTrickInputs();
 4233:  4145:  4057: 3969: 3881: 107:     processTrick(deltaTime);
 4234:  4146:  4058: 3970: 3882: 108:     if (!player.hasReachedJumpPeak && progress >= 0.5) {
 4235:  4147:  4059: 3971: 3883: 109:       player.hasReachedJumpPeak = true;
 4236:  4148:  4060: 3972: 3884: 110:       onPlayerJumpPeak();
 4237:  4149:  4061: 3973: 3885: 111:     }
 4238:  4150:  4062: 3974: 3886: 112:     if (progress >= 1) {
 4239:  4151:  4063: 3975: 3887: 113:       // End jump: reset jump/trick state and restore scale
 4240:  4152:  4064: 3976: 3888: 114:       player.isJumping = false;
 4241:  4153:  4065: 3977: 3889: 115:       player.jumpTimer = 0;
 4242:  4154:  4066: 3978: 3890: 116:       player.hasReachedJumpPeak = false;
 4243:  4155:  4067: 3979: 3891: 117:       resetTrickState();
 4244:  4156:  4068: 3980: 3892: 118:       player.width = player.baseWidth;
 4245:  4157:  4069: 3981: 3893: 119:       player.height = player.baseHeight;
 4246:  4158:  4070: 3982: 3894: 120:       onPlayerLand();
 4247:  4159:  4071: 3983: 3895: 121:       // Check for landing collisions
 4248:  4160:  4072: 3984: 3896: 122:       for (let i = 0; i < terrain.length; i++) {
 4249:  4161:  4073: 3985: 3897: 123:         let obstacle = terrain[i];
 4250:  4162:  4074: 3986: 3898: 124:         if (checkCollision(
 4251:  4163:  4075: 3987: 3899: 125:             player.x - player.width / 2, player.absY - player.height / 2,
 4252:  4164:  4076: 3988: 3900: 126:             player.width, player.height,
 4253:  4165:  4077: 3989: 3901: 127:             obstacle.x, obstacle.y,
 4254:  4166:  4078: 3990: 3902: 128:             obstacle.width, obstacle.height
 4255:  4167:  4079: 3991: 3903: 129:         )) {
 4256:  4168:  4080: 3992: 3904: 130:           console.log("Collision on landing.");
 4257:  4169:  4081: 3993: 3905: 131:           player.velocityY = -TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
 4258:  4170:  4082: 3994: 3906: 132:           player.absY -= TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
 4259:  4171:  4083: 3995: 3907: 133:           player.collisions++;
 4260:  4172:  4084: 3996: 3908: 134:           terrain.splice(i, 1);
 4261:  4173:  4085: 3997: 3909: 135:           if (player.collisions >= TWEAK.getMaxCollisions()) {
 4262:  4174:  4086: 3998: 3910: 136:             console.log("Max collisions reached.");
 4263:  4175:  4087: 3999: 3911: 137:             player.sledDamaged = 1; // Mark sled as damaged
 4264:  4176:  4088: 4000: 3912: 138:             console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
 4265:  4177:  4089: 4001: 3913: 139:             playCrashSound();
 4266:  4178:  4090: 4002: 3914: 140:             changeState(GameState.UPHILL);
 4267:  4179:  4091: 4003: 3915: 141:             return;
 4268:  4180:  4092: 4004: 3916: 142:           } else {
 4269:  4181:  4093: 4005: 3917: 143:             playRockHitSound();
 4270:  4182:  4094: 4006: 3918: 144:           }
 4271:  4183:  4095: 4007: 3919: 145:           break;
 4272:  4184:  4096: 4008: 3920: 146:         }
 4273:  4185:  4097: 4009: 3921: 147:       }
 4274:  4186:  4098: 4010: 3922: 148:     } else {
 4275:  4187:  4099: 4011: 3923: 149:       // Scale player sprite for jump arc effect
 4276:  4188:  4100: 4012: 3924: 150:       let baseScale = TWEAK.jumpPeakScale + player.jumpZoomBonus;
 4277:  4189:  4101: 4013: 3925: 151:       let scale = 1 + (baseScale - 1) * Math.sin(Math.PI * progress) * player.jumpHeightFactor;
 4278:  4190:  4102: 4014: 3926: 152:       player.width = player.baseWidth * scale;
 4279:  4191:  4103: 4015: 3927: 153:       player.height = player.baseHeight * scale;
 4280:  4192:  4104: 4016: 3928: 154:     }
 4281:  4193:  4105: 4017: 3929: 155:   }
 4282:  4194:  4106: 4018: 3930: 156:   console.log("handleDownhillMovement: After jump mechanics");
 4283:  4195:  4107: 4019: 3931: 157:   // Allow jump restart when space is released
 4284:  4196:  4108: 4020: 3932: 158:   if (!window.keysDown[" "]) {
 4285:  4197:  4109: 4021: 3933: 159:     player.canJump = true;
 4286:  4198:  4110: 4022: 3934: 160:   }
 4287:  4199:  4111: 4023: 3935: 161:   console.log("handleDownhillMovement: Before obstacle collisions");
 4288:  4200:  4112: 4024: 3936: 162:   // Normal downhill physics & collision handling (skip during jump)
 4289:  4201:  4113: 4025: 3937: 163:   let prevAbsY = player.absY;
 4290:  4202:  4114: 4026: 3938: 164:   if (!player.isJumping) {
 4291:  4203:  4115: 4027: 3939: 165:     for (let i = 0; i < terrain.length; i++) {
 4292:  4204:  4116: 4028: 3940: 166:       let obstacle = terrain[i];
 4293:  4205:  4117: 4029: 3941: 167:       if (checkCollision(
 4294:  4206:  4118: 4030: 3942: 168:           player.x - player.width / 2, player.absY - player.height / 2,
 4295:  4207:  4119: 4031: 3943: 169:           player.width, player.height,
 4296:  4208:  4120: 4032: 3944: 170:           obstacle.x, obstacle.y,
 4297:  4209:  4121: 4033: 3945: 171:           obstacle.width, obstacle.height
 4298:  4210:  4122: 4034: 3946: 172:       )) {
 4299:  4211:  4123: 4035: 3947: 173:         console.log("Collision on downhill.");
 4300:  4212:  4124: 4036: 3948: 174:         player.velocityY = -TWEAK.bounceImpulse;
 4301:  4213:  4125: 4037: 3949: 175:         player.absY = prevAbsY - TWEAK.bounceImpulse;
 4302:  4214:  4126: 4038: 3950: 176:         player.collisions++;
 4303:  4215:  4127: 4039: 3951: 177:         terrain.splice(i, 1);
 4304:  4216:  4128: 4040: 3952: 178:         if (player.collisions >= TWEAK.getMaxCollisions()) {
 4305:  4217:  4129: 4041: 3953: 179:           console.log("Max collisions reached. Ending run.");
 4306:  4218:  4130: 4042: 3954: 180:           player.sledDamaged = 1; // Mark sled as damaged
 4307:  4219:  4131: 4043: 3955: 181:           console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
 4308:  4220:  4132: 4044: 3956: 182:           awardMoney();
 4309:  4221:  4133: 4045: 3957: 183:           playCrashSound();
 4310:  4222:  4134: 4046: 3958: 184:           changeState(GameState.UPHILL);
 4311:  4223:  4135: 4047: 3959: 185:           return;
 4312:  4224:  4136: 4048: 3960: 186:         } else {
 4313:  4225:  4137: 4049: 3961: 187:           playRockHitSound();
 4314:  4226:  4138: 4050: 3962: 188:         }
 4315:  4227:  4139: 4051: 3963: 189:       }
 4316:  4228:  4140: 4052: 3964: 190:     }
 4317:  4229:  4141: 4053: 3965: 191:   }
 4318:  4230:  4142: 4054: 3966: 192:   console.log("handleDownhillMovement: After obstacle collisions");
 4319:  4231:  4143: 4055: 3967: 193:   player.velocityY += player.isJumping ? TWEAK.baseGravity : gravity;
 4320:  4232:  4144: 4056: 3968: 194:   player.absY += player.velocityY;
 4321:  4233:  4145: 4057: 3969: 195:   updateLiveMoney();
 4322:  4234:  4146: 4058: 3970: 196:   // Check for transition to UPHILL mode near bottom
 4323:  4235:  4147: 4059: 3971: 197:   if (player.absY >= mountainHeight - (player.height * 4)) {
 4324:  4236:  4148: 4060: 3972: 198:     player.absY = mountainHeight - (player.height * 4);
 4325:  4237:  4149: 4061: 3973: 199:     player.velocityY = 0;
 4326:  4238:  4150: 4062: 3974: 200:     console.log("Reached transition point. Switching to uphill mode.");
 4327:  4239:  4151: 4063: 3975: 201:     // Fix for jumping transition - handle jump state before changing modes
 4328:  4240:  4152: 4064: 3976: 202:     if (player.isJumping) {
 4329:  4241:  4153: 4065: 3977: 203:       // Smoothly reset jump zoom and finalize landing
 4330:  4242:  4154: 4066: 3978: 204:       lerpJumpZoomToZero(() => {
 4331:  4243:  4155: 4067: 3979: 205:         onPlayerJumpLand(); // handles trick cleanup, sound, etc.
 4332:  4244:  4156: 4068: 3980: 206:       });
 4333:  4245:  4157: 4069: 3981: 207:     }
 4334:  4246:  4158: 4070: 3982: 208:     changeState(GameState.UPHILL);
 4335:  4247:  4159: 4071: 3983: 209:     return;
 4336:  4248:  4160: 4072: 3984: 210:   }
 4337:  4249:  4161: 4073: 3985: 211:   // Check for actual bottom
 4338:  4250:  4162: 4074: 3986: 212:   if (player.absY >= mountainHeight) {
 4339:  4251:  4163: 4075: 3987: 213:     player.absY = mountainHeight;
 4340:  4252:  4164: 4076: 3988: 214:     console.log("Reached bottom. Returning to house.");
 4341:  4253:  4165: 4077: 3989: 215:     awardMoney();
 4342:  4254:  4166: 4078: 3990: 216:     changeState(GameState.HOUSE);
 4343:  4255:  4167: 4079: 3991: 217:   }
 4344:  4256:  4168: 4080: 3992: 218:   console.log("handleDownhillMovement END");
 4345:  4257:  4169: 4081: 3993: 219: }
 4346:  4258:  4170: 4082: 3994: 220: // Helper function for smooth jump transition
 4347:  4259:  4171: 4083: 3995: 221: function lerpJumpZoomToZero(callback) {
 4348:  4260:  4172: 4084: 3996: 222:   const startZoom = player.jumpZoomBonus;
 4349:  4261:  4173: 4085: 3997: 223:   const duration = 250; // ms
 4350:  4262:  4174: 4086: 3998: 224:   const startTime = performance.now();
 4351:  4263:  4175: 4087: 3999: 225:   function animate(time) {
 4352:  4264:  4176: 4088: 4000: 226:     const elapsed = time - startTime;
 4353:  4265:  4177: 4089: 4001: 227:     const t = Math.min(1, elapsed / duration);
 4354:  4266:  4178: 4090: 4002: 228:     player.jumpZoomBonus = startZoom * (1 - t);
 4355:  4267:  4179: 4091: 4003: 229:     if (t < 1) {
 4356:  4268:  4180: 4092: 4004: 230:       requestAnimationFrame(animate);
 4357:  4269:  4181: 4093: 4005: 231:     } else {
 4358:  4270:  4182: 4094: 4006: 232:       player.jumpZoomBonus = 0;
 4359:  4271:  4183: 4095: 4007: 233:       player.isJumping = false;
 4360:  4272:  4184: 4096: 4008: 234:       player.jumpTimer = 0;
 4361:  4273:  4185: 4097: 4009: 235:       player.hasReachedJumpPeak = false;
 4362:  4274:  4186: 4098: 4010: 236:       resetTrickState();
 4363:  4275:  4187: 4099: 4011: 237:       player.width = player.baseWidth;
 4364:  4276:  4188: 4100: 4012: 238:       player.height = player.baseHeight;
 4365:  4277:  4189: 4101: 4013: 239:       if (callback) callback();
 4366:  4278:  4190: 4102: 4014: 240:     }
 4367:  4279:  4191: 4103: 4015: 241:   }
 4368:  4280:  4192: 4104: 4016: 242:   requestAnimationFrame(animate);
 4369:  4281:  4193: 4105: 4017: 243: }
 4370:  4282:  4194: 4106: 4018: 244: // Export necessary functions
 4371:  4283:  4195: 4107: 4019: 245: export { updateDownhill, lerpJumpZoomToZero };
 4372:  4284:  4196: 4108: 4020: ````
 4373:  4285:  4197: 4109: 4021: 
 4374:  4286:  4198: 4110: 4022: ## File: js/player.js
 4375:  4287:  4199: 4111: 4023: ````javascript
 4376:  4288:  4200: 4112: 4024:  1: /* player.js */
 4377:  4289:  4201: 4113: 4025:  2: let player = {
 4378:  4290:  4202: 4114: 4026:  3:   x: window.canvas.width / 2,  // Use global canvas reference
 4379:  4291:  4203: 4115: 4027:  4:   absY: 0,
 4380:  4292:  4204: 4116: 4028:  5:   width: 20,
 4381:  4293:  4205: 4117: 4029:  6:   height: 20,
 4382:  4294:  4206: 4118: 4030:  7:   velocityY: 0,
 4383:  4295:  4207: 4119: 4031:  8:   xVel: 0,
 4384:  4296:  4208: 4120: 4032:  9:   collisions: 0,
 4385:  4297:  4209: 4121: 4033: 10:   bestTime: Infinity,
 4386:  4298:  4210: 4122: 4034: 11:   money: 200, // Default initial value instead of directly accessing TWEAK.starterCash
 4387:  4299:  4211: 4123: 4035: 12:   sledDamaged: 0,  // Track if sled is damaged: 0 = not damaged, >0 = damaged
 4388:  4300:  4212: 4124: 4036: 13:   // Camera aim properties
 4389:  4301:  4213: 4125: 4037: 14:   cameraAngle: 270,  // Camera rotation in degrees
 4390:  4302:  4214: 4126: 4038: 15:   altitudeLine: 50,  // Starts at 50% of the view range
 4391:  4303:  4215: 4127: 4039: 16:   // Trick system properties
 4392:  4304:  4216: 4128: 4040: 17:   currentTrick: null,        // Currently active trick
 4393:  4305:  4217: 4129: 4041: 18:   trickTimer: 0,            // Time elapsed in current trick
 4394:  4306:  4218: 4130: 4042: 19:   trickRotation: 0,         // Current rotation angle for helicopter tricks
 4395:  4307:  4219: 4131: 4043: 20:   trickOffset: 0,           // Current offset for air brake/parachute
 4396:  4308:  4220: 4132: 4044: 21:   lastTrick: null,          // Last completed trick for chain tracking
 4397:  4309:  4221: 4133: 4045: 22:   trickChainCount: 0,       // Number of different tricks chained
 4398:  4310:  4222: 4134: 4046: 23:   trickCooldowns: {         // Individual cooldown timers for each trick
 4399:  4311:  4223: 4135: 4047: 24:     leftHelicopter: 0,
 4400:  4312:  4224: 4136: 4048: 25:     rightHelicopter: 0,
 4401:  4313:  4225: 4137: 4049: 26:     airBrake: 0,
 4402:  4314:  4226: 4138: 4050: 27:     parachute: 0
 4403:  4315:  4227: 4139: 4051: 28:   },
 4404:  4316:  4228: 4140: 4052: 29:   // *** NEW: Jump State Properties ***
 4405:  4317:  4229: 4141: 4053: 30:   isJumping: false,          // Are we in a jump?
 4406:  4318:  4230: 4142: 4054: 31:   isCharging: false,         // For "charge" mode to accumulate jump time
 4407:  4319:  4231: 4143: 4055: 32:   canJump: true,             // Ensures jump is triggered only once per key press
 4408:  4320:  4232: 4144: 4056: 33:   reHitActivated: false,     // Prevents multiple re-hits during one key press
 4409:  4321:  4233: 4145: 4057: 34:   jumpTimer: 0,              // Elapsed time since jump started (ms)
 4410:  4322:  4234: 4146: 4058: 35:   jumpDuration: 0,           // Total duration of the jump (ascent + descent)
 4411:  4323:  4235: 4147: 4059: 36:   jumpChargeTime: 0,         // Accumulated hold time for charge mode
 4412:  4324:  4236: 4148: 4060: 37:   hasReachedJumpPeak: false, // Flag to trigger the peak hook only once per jump
 4413:  4325:  4237: 4149: 4061: 38:   jumpHeightFactor: 0,       // Height multiplier from Rocket Surgery (1.0 = normal)
 4414:  4326:  4238: 4150: 4062: 39:   jumpZoomBonus: 0,         // Extra zoom from increased jump height
 4415:  4327:  4239: 4151: 4063: 40:   baseWidth: 20,             // Original sprite width (for scaling)
 4416:  4328:  4240: 4152: 4064: 41:   baseHeight: 20             // Original sprite height (for scaling)
 4417:  4329:  4241: 4153: 4065: 42: };
 4418:  4330:  4242: 4154: 4066: 43: // Initialize player money from TWEAK settings once they're available
 4419:  4331:  4243: 4155: 4067: 44: function initializePlayerMoney() {
 4420:  4332:  4244: 4156: 4068: 45:   if (window.TWEAK && typeof window.TWEAK.starterCash !== 'undefined') {
 4421:  4333:  4245: 4157: 4069: 46:     player.money = window.TWEAK.starterCash;
 4422:  4334:  4246: 4158: 4070: 47:     console.log("Player money initialized to:", player.money);
 4423:  4335:  4247: 4159: 4071: 48:   }
 4424:  4336:  4248: 4160: 4072: 49: }
 4425:  4337:  4249: 4161: 4073: 50: // Call this function after TWEAK is initialized (e.g., from game.js)
 4426:  4338:  4250: 4162: 4074: 51: window.initializePlayerMoney = initializePlayerMoney;
 4427:  4339:  4251: 4163: 4075: ````
 4428:  4340:  4252: 4164: 4076: 
 4429:  4341:  4253: 4165: 4077: ## File: .gitignore
 4430:  4342:  4254: 4166: 4078: ````
 4431:  4343:  4255: 4167: 4079: 1: repomix-output.txt
 4432:  4344:  4256: 4168: 4080: 2: repomix-output.txt.xml
 4433:  4345:  4257: 4169: 4081: 3: .repomix/bundles.json
 4434:  4346:  4258: 4170: 4082: 4: OLD Codebase.xml
 4435:  4347:  4259: 4171: 4083: 5: repomix-output.txt.md
 4436:  4348:  4260: 4172: 4084: 6: complete-condensed-codebase-for-reference.md
 4437:  4349:  4261: 4173: 4085: ````
 4438:  4350:  4262: 4174: 4086: 
 4439:  4351:  4263: 4175: 4087: ## File: js/entities.js
 4440:  4352:  4264: 4176: 4088: ````javascript
 4441:  4353:  4265: 4177: 4089:   1: /* entities.js - Pruned version to avoid overlap with wildlifephotos.js */
 4442:  4354:  4266: 4178: 4090:   2: // Resolves collisions between the player and obstacles.
 4443:  4355:  4267: 4179: 4091:   3: function resolveCollision(player, obstacle) {
 4444:  4356:  4268: 4180: 4092:   4:   let playerCenterX = player.x;
 4445:  4357:  4269: 4181: 4093:   5:   let playerCenterY = player.absY;
 4446:  4358:  4270: 4182: 4094:   6:   let obstacleCenterX = obstacle.x + obstacle.width / 2;
 4447:  4359:  4271: 4183: 4095:   7:   let obstacleCenterY = obstacle.y + obstacle.height / 2;
 4448:  4360:  4272: 4184: 4096:   8:   let halfWidthPlayer = player.width / 2;
 4449:  4361:  4273: 4185: 4097:   9:   let halfWidthObstacle = obstacle.width / 2;
 4450:  4362:  4274: 4186: 4098:  10:   let halfHeightPlayer = player.height / 2;
 4451:  4363:  4275: 4187: 4099:  11:   let halfHeightObstacle = obstacle.height / 2;
 4452:  4364:  4276: 4188: 4100:  12:   let dx = playerCenterX - obstacleCenterX;
 4453:  4365:  4277: 4189: 4101:  13:   let dy = playerCenterY - obstacleCenterY;
 4454:  4366:  4278: 4190: 4102:  14:   let overlapX = halfWidthPlayer + halfWidthObstacle - Math.abs(dx);
 4455:  4367:  4279: 4191: 4103:  15:   let overlapY = halfHeightPlayer + halfHeightObstacle - Math.abs(dy);
 4456:  4368:  4280: 4192: 4104:  16:   if (overlapX < 0 || overlapY < 0) return;
 4457:  4369:  4281: 4193: 4105:  17:   if (overlapX < overlapY) {
 4458:  4370:  4282: 4194: 4106:  18:     if (dx > 0) {
 4459:  4371:  4283: 4195: 4107:  19:       player.x += overlapX * 0.3;
 4460:  4372:  4284: 4196: 4108:  20:     } else {
 4461:  4373:  4285: 4197: 4109:  21:       player.x -= overlapX * 0.3;
 4462:  4374:  4286: 4198: 4110:  22:     }
 4463:  4375:  4287: 4199: 4111:  23:   } else {
 4464:  4376:  4288: 4200: 4112:  24:     if (dy > 0) {
 4465:  4377:  4289: 4201: 4113:  25:       player.absY += overlapY * 0.3;
 4466:  4378:  4290: 4202: 4114:  26:     } else {
 4467:  4379:  4291: 4203: 4115:  27:       player.absY -= overlapY * 0.3;
 4468:  4380:  4292: 4204: 4116:  28:     }
 4469:  4381:  4293: 4205: 4117:  29:   }
 4470:  4382:  4294: 4206: 4118:  30: }
 4471:  4383:  4295: 4207: 4119:  31: // Draws the camera overlay with the POV cone and a steady altitude line.
 4472:  4384:  4296: 4208: 4120:  32: function drawCameraOverlay() {
 4473:  4385:  4297: 4209: 4121:  33:   // Only display the overlay when in UPHILL mode.
 4474:  4386:  4298: 4210: 4122:  34:   if (currentState !== GameState.UPHILL) return;
 4475:  4387:  4299: 4211: 4123:  35:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 4476:  4388:  4300: 4212: 4124:  36:   let centerX = player.x;
 4477:  4389:  4301: 4213: 4125:  37:   let centerY = player.absY - cameraOffset;
 4478:  4390:  4302: 4214: 4126:  38:   let coneLength = 300; // Length of the camera cone
 4479:  4391:  4303: 4215: 4127:  39:   // Draw the camera POV Cone.
 4480:  4392:  4304: 4216: 4128:  40:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
 4481:  4393:  4305: 4217: 4129:  41:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
 4482:  4394:  4306: 4218: 4130:  42:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
 4483:  4395:  4307: 4219: 4131:  43:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
 4484:  4396:  4308: 4220: 4132:  44:   ctx.beginPath();
 4485:  4397:  4309: 4221: 4133:  45:   ctx.moveTo(centerX, centerY);
 4486:  4398:  4310: 4222: 4134:  46:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
 4487:  4399:  4311: 4223: 4135:  47:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
 4488:  4400:  4312: 4224: 4136:  48:   ctx.closePath();
 4489:  4401:  4313: 4225: 4137:  49:   ctx.fill();
 4490:  4402:  4314: 4226: 4138:  50:   // Draw the altitude line.
 4491:  4403:  4315: 4227: 4139:  51:   // Map altitudeLine [0,100] to an offset along the camera's central axis:
 4492:  4404:  4316: 4228: 4140:  52:   // 0 aligns with the player sprite’s bottom, 100 with its top.
 4493:  4405:  4317: 4229: 4141:  53:   let offsetTop = ((coneLength / 2) + player.height);
 4494:  4406:  4318: 4230: 4142:  54:   let offsetBottom = player.height / 2;
 4495:  4407:  4319: 4231: 4143:  55:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
 4496:  4408:  4320: 4232: 4144:  56:   let rad = player.cameraAngle * Math.PI / 180;
 4497:  4409:  4321: 4233: 4145:  57:   let lineCenterX = centerX + offset * Math.cos(rad);
 4498:  4410:  4322: 4234: 4146:  58:   let lineCenterY = centerY + offset * Math.sin(rad);
 4499:  4411:  4323: 4235: 4147:  59:   // Draw altitude line perpendicular to camera direction.
 4500:  4412:  4324: 4236: 4148:  60:   let lineLength = 100;
 4501:  4413:  4325: 4237: 4149:  61:   let perpX = -Math.sin(rad);
 4502:  4414:  4326: 4238: 4150:  62:   let perpY = Math.cos(rad);
 4503:  4415:  4327: 4239: 4151:  63:   let x1 = lineCenterX - (lineLength / 2) * perpX;
 4504:  4416:  4328: 4240: 4152:  64:   let y1 = lineCenterY - (lineLength / 2) * perpY;
 4505:  4417:  4329: 4241: 4153:  65:   let x2 = lineCenterX + (lineLength / 2) * perpX;
 4506:  4418:  4330: 4242: 4154:  66:   let y2 = lineCenterY + (lineLength / 2) * perpY;
 4507:  4419:  4331: 4243: 4155:  67:   // Steady color gradient from red (bottom) to blue (top)
 4508:  4420:  4332: 4244: 4156:  68:   let t = 1 - (player.altitudeLine / 100);
 4509:  4421:  4333: 4245: 4157:  69:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 4510:  4422:  4334: 4246: 4158:  70:   ctx.strokeStyle = altitudeColor;
 4511:  4423:  4335: 4247: 4159:  71:   ctx.lineWidth = 3;
 4512:  4424:  4336: 4248: 4160:  72:   // Draw the altitude line without any flashing.
 4513:  4425:  4337: 4249: 4161:  73:   ctx.beginPath();
 4514:  4426:  4338: 4250: 4162:  74:   ctx.moveTo(x1, y1);
 4515:  4427:  4339: 4251: 4163:  75:   ctx.lineTo(x2, y2);
 4516:  4428:  4340: 4252: 4164:  76:   ctx.stroke();
 4517:  4429:  4341: 4253: 4165:  77: }
 4518:  4430:  4342: 4254: 4166:  78: // Draws the game entities such as the background, terrain, player, and sled.
 4519:  4431:  4343: 4255: 4167:  79: function drawEntities() {
 4520:  4432:  4344: 4256: 4168:  80:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 4521:  4433:  4345: 4257: 4169:  81:   ctx.clearRect(0, 0, canvas.width, canvas.height);
 4522:  4434:  4346: 4258: 4170:  82:   // Draw background.
 4523:  4435:  4347: 4259: 4171:  83:   ctx.fillStyle = currentState === GameState.DOWNHILL ? "#ADD8E6" : "#98FB98";
 4524:  4436:  4348: 4260: 4172:  84:   ctx.fillRect(0, 0, canvas.width, canvas.height);
 4525:  4437:  4349: 4261: 4173:  85:   // Draw terrain obstacles.
 4526:  4438:  4350: 4262: 4174:  86:   terrain.forEach(obstacle => {
 4527:  4439:  4351: 4263: 4175:  87:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
 4528:  4440:  4352: 4264: 4176:  88:       ctx.fillStyle = "#808080"; // Obstacles are drawn in grey.
 4529:  4441:  4353: 4265: 4177:  89:       ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
 4530:  4442:  4354: 4266: 4178:  90:     }
 4531:  4443:  4355: 4267: 4179:  91:   });
 4532:  4444:  4356: 4268: 4180:  92:   let playerDrawY = player.absY - cameraOffset;
 4533:  4445:  4357: 4269: 4181:  93:   ctx.save(); // Save the current context state
 4534:  4446:  4358: 4270: 4182:  94:   // Apply trick-specific transformations.
 4535:  4447:  4359: 4271: 4183:  95:   if (player.currentTrick) {
 4536:  4448:  4360: 4272: 4184:  96:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
 4537:  4449:  4361: 4273: 4185:  97:       // Rotate around the player's center for helicopter tricks.
 4538:  4450:  4362: 4274: 4186:  98:       ctx.translate(player.x, playerDrawY);
 4539:  4451:  4363: 4275: 4187:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
 4540:  4452:  4364: 4276: 4188: 100:       ctx.translate(-player.x, -playerDrawY);
 4541:  4453:  4365: 4277: 4189: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 4542:  4454:  4366: 4278: 4190: 102:       // Offset for air brake/parachute tricks.
 4543:  4455:  4367: 4279: 4191: 103:       if (player.currentTrick === "airBrake") {
 4544:  4456:  4368: 4280: 4192: 104:         playerDrawY += player.trickOffset;  // Move sled behind the player.
 4545:  4457:  4369: 4281: 4193: 105:       } else {
 4546:  4458:  4370: 4282: 4194: 106:         playerDrawY -= player.trickOffset;  // Move player above the sled for parachute.
 4547:  4459:  4371: 4283: 4195: 107:       }
 4548:  4460:  4372: 4284: 4196: 108:     }
 4549:  4461:  4373: 4285: 4197: 109:   }
 4550:  4462:  4374: 4286: 4198: 110:   // Draw the sled (as a red square).
 4551:  4463:  4375: 4287: 4199: 111:   ctx.fillStyle = "#FF0000";
 4552:  4464:  4376: 4288: 4200: 112:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
 4553:  4465:  4377: 4289: 4201: 113:   // Draw the player (as a yellow circle) when applicable.
 4554:  4466:  4378: 4290: 4202: 114:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 4555:  4467:  4379: 4291: 4203: 115:     ctx.fillStyle = "#FFFF00";
 4556:  4468:  4380: 4292: 4204: 116:     ctx.beginPath();
 4557:  4469:  4381: 4293: 4205: 117:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
 4558:  4470:  4382: 4294: 4206: 118:     ctx.fill();
 4559:  4471:  4383: 4295: 4207: 119:   }
 4560:  4472:  4384: 4296: 4208: 120:   ctx.restore(); // Restore the context state
 4561:  4473:  4385: 4297: 4209: 121:   // Draw the camera overlay.
 4562:  4474:  4386: 4298: 4210: 122:   drawCameraOverlay();
 4563:  4475:  4387: 4299: 4211: 123: }
 4564:  4476:  4388: 4300: 4212: ````
 4565:  4477:  4389: 4301: 4213: 
 4566:  4478:  4390: 4302: 4214: ## File: js/render.js
 4567:  4479:  4391: 4303: 4215: ````javascript
 4568:  4480:  4392: 4304: 4216:   1: /* render.js - Rendering Logic */
 4569:  4481:  4393: 4305: 4217:   2: // Floating Text System (unchanged)
 4570:  4482:  4394: 4306: 4218:   3: class FloatingText {
 4571:  4483:  4395: 4307: 4219:   4:   constructor(text, x, y) {
 4572:  4484:  4396: 4308: 4220:   5:     this.text = text;
 4573:  4485:  4397: 4309: 4221:   6:     this.x = x;
 4574:  4486:  4398: 4310: 4222:   7:     this.initialY = y;
 4575:  4487:  4399: 4311: 4223:   8:     this.age = 0;
 4576:  4488:  4400: 4312: 4224:   9:     this.lifetime = 1000;
 4577:  4489:  4401: 4313: 4225:  10:     this.visualOffsetY = -30;
 4578:  4490:  4402: 4314: 4226:  11:   }
 4579:  4491:  4403: 4315: 4227:  12:   update(deltaTime) {
 4580:  4492:  4404: 4316: 4228:  13:     this.age += deltaTime;
 4581:  4493:  4405: 4317: 4229:  14:     this.visualOffsetY -= deltaTime * 0.25;
 4582:  4494:  4406: 4318: 4230:  15:     return this.age < this.lifetime;
 4583:  4495:  4407: 4319: 4231:  16:   }
 4584:  4496:  4408: 4320: 4232:  17:   draw(ctx, cameraY) {
 4585:  4497:  4409: 4321: 4233:  18:     const alpha = 1 - (this.age / this.lifetime);
 4586:  4498:  4410: 4322: 4234:  19:     ctx.fillStyle = `rgba(0, 0, 0, ${alpha})`;
 4587:  4499:  4411: 4323: 4235:  20:     ctx.font = "bold 24px Arial";
 4588:  4500:  4412: 4324: 4236:  21:     ctx.textAlign = "center";
 4589:  4501:  4413: 4325: 4237:  22:     const screenY = player.absY - cameraY + this.visualOffsetY;
 4590:  4502:  4414: 4326: 4238:  23:     ctx.fillText(this.text, this.x, screenY);
 4591:  4503:  4415: 4327: 4239:  24:   }
 4592:  4504:  4416: 4328: 4240:  25: }
 4593:  4505:  4417: 4329: 4241:  26: function addFloatingText(text, x, y) {
 4594:  4506:  4418: 4330: 4242:  27:   window.floatingTexts.push(new FloatingText(text, x, y - 30));
 4595:  4507:  4419: 4331: 4243:  28: }
 4596:  4508:  4420: 4332: 4244:  29: // No changes to money display logic
 4597:  4509:  4421: 4333: 4245:  30: function updateLiveMoney() {
 4598:  4510:  4422: 4334: 4246:  31:   let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
 4599:  4511:  4423: 4335: 4247:  32:   distanceTraveled = Math.max(1, distanceTraveled);
 4600:  4512:  4424: 4336: 4248:  33:   let moneyEarned = Math.floor(distanceTraveled / 100);
 4601:  4513:  4425: 4337: 4249:  34:   moneyEarned = Math.max(1, moneyEarned);
 4602:  4514:  4426: 4338: 4250:  35:   let moneyText = document.getElementById("moneyText");
 4603:  4515:  4427: 4339: 4251:  36:   if (moneyText) {
 4604:  4516:  4428: 4340: 4252:  37:     moneyText.textContent = `Money: $${player.money} (+$${moneyEarned})`;
 4605:  4517:  4429: 4341: 4253:  38:   }
 4606:  4518:  4430: 4342: 4254:  39: }
 4607:  4519:  4431: 4343: 4255:  40: function showMoneyGain(amount, source = "") {
 4608:  4520:  4432: 4344: 4256:  41:   let moneyText = document.getElementById("moneyText");
 4609:  4521:  4433: 4345: 4257:  42:   if (moneyText) {
 4610:  4522:  4434: 4346: 4258:  43:     if (source) {
 4611:  4523:  4435: 4347: 4259:  44:       moneyText.textContent = `Money: $${player.money} (+$${amount} ${source})`;
 4612:  4524:  4436: 4348: 4260:  45:     } else {
 4613:  4525:  4437: 4349: 4261:  46:       moneyText.textContent = `Money: $${player.money} (+$${amount})`;
 4614:  4526:  4438: 4350: 4262:  47:     }
 4615:  4527:  4439: 4351: 4263:  48:     moneyText.classList.add("money-increase");
 4616:  4528:  4440: 4352: 4264:  49:     setTimeout(() => {
 4617:  4529:  4441: 4353: 4265:  50:       moneyText.classList.remove("money-increase");
 4618:  4530:  4442: 4354: 4266:  51:     }, 100);
 4619:  4531:  4443: 4355: 4267:  52:   }
 4620:  4532:  4444: 4356: 4268:  53: }
 4621:  4533:  4445: 4357: 4269:  54: function updateMoneyDisplay() {
 4622:  4534:  4446: 4358: 4270:  55:   let moneyText = document.getElementById("moneyText");
 4623:  4535:  4447: 4359: 4271:  56:   if (moneyText) {
 4624:  4536:  4448: 4360: 4272:  57:     moneyText.textContent = `Money: $${player.money}`;
 4625:  4537:  4449: 4361: 4273:  58:   }
 4626:  4538:  4450: 4362: 4274:  59: }
 4627:  4539:  4451: 4363: 4275:  60: // MAIN RENDER
 4628:  4540:  4452: 4364: 4276:  61: function render() {
 4629:  4541:  4453: 4365: 4277:  62:   console.log("render START");
 4630:  4542:  4454: 4366: 4278:  63:   // Clear the canvas each frame
 4631:  4543:  4455: 4367: 4279:  64:   ctx.clearRect(0, 0, canvas.width, canvas.height);
 4632:  4544:  4456: 4368: 4280:  65:   // Background color depends on state
 4633:  4545:  4457: 4369: 4281:  66:   ctx.fillStyle = (window.currentState === window.GameState.DOWNHILL) ? "#ADD8E6" : "#98FB98";
 4634:  4546:  4458: 4370: 4282:  67:   ctx.fillRect(0, 0, canvas.width, canvas.height);
 4635:  4547:  4459: 4371: 4283:  68:   drawEntities();
 4636:  4548:  4460: 4372: 4284:  69:   ctx.save();
 4637:  4549:  4461: 4373: 4285:  70:   window.floatingTexts.forEach(text => text.draw(ctx, player.absY - canvas.height / 2));
 4638:  4550:  4462: 4374: 4286:  71:   ctx.restore();
 4639:  4551:  4463: 4375: 4287:  72:   drawReHitIndicator();
 4640:  4552:  4464: 4376: 4288:  73:   console.log("render END");
 4641:  4553:  4465: 4377: 4289:  74: }
 4642:  4554:  4466: 4378: 4290:  75: function drawEntities() {
 4643:  4555:  4467: 4379: 4291:  76:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 4644:  4556:  4468: 4380: 4292:  77:   // Terrain
 4645:  4557:  4469: 4381: 4293:  78:   terrain.forEach(obstacle => {
 4646:  4558:  4470: 4382: 4294:  79:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
 4647:  4559:  4471: 4383: 4295:  80:       if (obstacle.type === 'tree') {
 4648:  4560:  4472: 4384: 4296:  81:         drawTree(ctx, {
 4649:  4561:  4473: 4385: 4297:  82:           x: obstacle.x,
 4650:  4562:  4474: 4386: 4298:  83:           y: obstacle.y - cameraOffset,
 4651:  4563:  4475: 4387: 4299:  84:           width: obstacle.width,
 4652:  4564:  4476: 4388: 4300:  85:           height: obstacle.height
 4653:  4565:  4477: 4389: 4301:  86:         });
 4654:  4566:  4478: 4390: 4302:  87:       } else {
 4655:  4567:  4479: 4391: 4303:  88:         ctx.fillStyle = "#808080";
 4656:  4568:  4480: 4392: 4304:  89:         ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
 4657:  4569:  4481: 4393: 4305:  90:       }
 4658:  4570:  4482: 4394: 4306:  91:     }
 4659:  4571:  4483: 4395: 4307:  92:   });
 4660:  4572:  4484: 4396: 4308:  93:   // Player
 4661:  4573:  4485: 4397: 4309:  94:   let playerDrawY = player.absY - cameraOffset;
 4662:  4574:  4486: 4398: 4310:  95:   ctx.save();
 4663:  4575:  4487: 4399: 4311:  96:   if (player.currentTrick) {
 4664:  4576:  4488: 4400: 4312:  97:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
 4665:  4577:  4489: 4401: 4313:  98:       ctx.translate(player.x, playerDrawY);
 4666:  4578:  4490: 4402: 4314:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
 4667:  4579:  4491: 4403: 4315: 100:       ctx.translate(-player.x, -playerDrawY);
 4668:  4580:  4492: 4404: 4316: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 4669:  4581:  4493: 4405: 4317: 102:       playerDrawY += (player.currentTrick === "airBrake") ? player.trickOffset : -player.trickOffset;
 4670:  4582:  4494: 4406: 4318: 103:     }
 4671:  4583:  4495: 4407: 4319: 104:   }
 4672:  4584:  4496: 4408: 4320: 105:   ctx.fillStyle = "#FF0000";
 4673:  4585:  4497: 4409: 4321: 106:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
 4674:  4586:  4498: 4410: 4322: 107:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 4675:  4587:  4499: 4411: 4323: 108:     ctx.fillStyle = "#FFFF00";
 4676:  4588:  4500: 4412: 4324: 109:     ctx.beginPath();
 4677:  4589:  4501: 4413: 4325: 110:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
 4678:  4590:  4502: 4414: 4326: 111:     ctx.fill();
 4679:  4591:  4503: 4415: 4327: 112:   }
 4680:  4592:  4504: 4416: 4328: 113:   ctx.restore();
 4681:  4593:  4505: 4417: 4329: 114:   drawCameraOverlay();
 4682:  4594:  4506: 4418: 4330: 115:   drawAnimal();
 4683:  4595:  4507: 4419: 4331: 116: }
 4684:  4596:  4508: 4420: 4332: 117: function drawCameraOverlay() {
 4685:  4597:  4509: 4421: 4333: 118:   if (window.currentState !== window.GameState.UPHILL) return;
 4686:  4598:  4510: 4422: 4334: 119:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 4687:  4599:  4511: 4423: 4335: 120:   let centerX = player.x;
 4688:  4600:  4512: 4424: 4336: 121:   let centerY = player.absY - cameraOffset;
 4689:  4601:  4513: 4425: 4337: 122:   let coneLength = 300;
 4690:  4602:  4514: 4426: 4338: 123:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
 4691:  4603:  4515: 4427: 4339: 124:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
 4692:  4604:  4516: 4428: 4340: 125:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
 4693:  4605:  4517: 4429: 4341: 126:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
 4694:  4606:  4518: 4430: 4342: 127:   ctx.beginPath();
 4695:  4607:  4519: 4431: 4343: 128:   ctx.moveTo(centerX, centerY);
 4696:  4608:  4520: 4432: 4344: 129:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
 4697:  4609:  4521: 4433: 4345: 130:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
 4698:  4610:  4522: 4434: 4346: 131:   ctx.closePath();
 4699:  4611:  4523: 4435: 4347: 132:   ctx.fill();
 4700:  4612:  4524: 4436: 4348: 133:   let offsetTop = (coneLength / 2) + player.height;
 4701:  4613:  4525: 4437: 4349: 134:   let offsetBottom = player.height / 2;
 4702:  4614:  4526: 4438: 4350: 135:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
 4703:  4615:  4527: 4439: 4351: 136:   let rad = player.cameraAngle * Math.PI / 180;
 4704:  4616:  4528: 4440: 4352: 137:   let lineCenterX = centerX + offset * Math.cos(rad);
 4705:  4617:  4529: 4441: 4353: 138:   let lineCenterY = centerY + offset * Math.sin(rad);
 4706:  4618:  4530: 4442: 4354: 139:   let lineLength = 100;
 4707:  4619:  4531: 4443: 4355: 140:   let perpX = -Math.sin(rad);
 4708:  4620:  4532: 4444: 4356: 141:   let perpY = Math.cos(rad);
 4709:  4621:  4533: 4445: 4357: 142:   let x1 = lineCenterX - (lineLength / 2) * perpX;
 4710:  4622:  4534: 4446: 4358: 143:   let y1 = lineCenterY - (lineLength / 2) * perpY;
 4711:  4623:  4535: 4447: 4359: 144:   let x2 = lineCenterX + (lineLength / 2) * perpX;
 4712:  4624:  4536: 4448: 4360: 145:   let y2 = lineCenterY + (lineLength / 2) * perpY;
 4713:  4625:  4537: 4449: 4361: 146:   let t = 1 - (player.altitudeLine / 100);
 4714:  4626:  4538: 4450: 4362: 147:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 4715:  4627:  4539: 4451: 4363: 148:   ctx.strokeStyle = altitudeColor;
 4716:  4628:  4540: 4452: 4364: 149:   ctx.lineWidth = 3;
 4717:  4629:  4541: 4453: 4365: 150:   if (activeAnimal && isAnimalInsideCone(activeAnimal)) {
 4718:  4630:  4542: 4454: 4366: 151:     let flashSpeed = mapRange(Math.abs(player.altitudeLine - activeAnimal.altitude), 0, 100, TWEAK.altitudeFlashMaxSpeed, TWEAK.altitudeFlashMinSpeed);
 4719:  4631:  4543: 4455: 4367: 152:     if (Math.floor(Date.now() / flashSpeed) % 2 === 0) {
 4720:  4632:  4544: 4456: 4368: 153:       ctx.beginPath();
 4721:  4633:  4545: 4457: 4369: 154:       ctx.moveTo(x1, y1);
 4722:  4634:  4546: 4458: 4370: 155:       ctx.lineTo(x2, y2);
 4723:  4635:  4547: 4459: 4371: 156:       ctx.stroke();
 4724:  4636:  4548: 4460: 4372: 157:     }
 4725:  4637:  4549: 4461: 4373: 158:   } else {
 4726:  4638:  4550: 4462: 4374: 159:     ctx.beginPath();
 4727:  4639:  4551: 4463: 4375: 160:     ctx.moveTo(x1, y1);
 4728:  4640:  4552: 4464: 4376: 161:     ctx.lineTo(x2, y2);
 4729:  4641:  4553: 4465: 4377: 162:     ctx.stroke();
 4730:  4642:  4554: 4466: 4378: 163:   }
 4731:  4643:  4555: 4467: 4379: 164: }
 4732:  4644:  4556: 4468: 4380: 165: function drawReHitIndicator() {
 4733:  4645:  4557: 4469: 4381: 166:   if (!player.isJumping) return;
 4734:  4646:  4558: 4470: 4382: 167:   const progress = player.jumpTimer / player.jumpDuration;
 4735:  4647:  4559: 4471: 4383: 168:   if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
 4736:  4648:  4560: 4472: 4384: 169:     ctx.save();
 4737:  4649:  4561: 4473: 4385: 170:     ctx.beginPath();
 4738:  4650:  4562: 4474: 4386: 171:     const radius = (player.baseWidth * TWEAK.reHitIndicatorScale) / 2;
 4739:  4651:  4563: 4475: 4387: 172:     const cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 4740:  4652:  4564: 4476: 4388: 173:     const screenY = canvas.height / 2 + (player.absY - cameraOffset - canvas.height / 2);
 4741:  4653:  4565: 4477: 4389: 174:     ctx.shadowColor = TWEAK.reHitIndicatorOutlineColor;
 4742:  4654:  4566: 4478: 4390: 175:     ctx.shadowBlur = 20;
 4743:  4655:  4567: 4479: 4391: 176:     ctx.lineWidth = 3;
 4744:  4656:  4568: 4480: 4392: 177:     const pulseScale = 1 + Math.sin(Date.now() / 100) * 0.1;
 4745:  4657:  4569: 4481: 4393: 178:     ctx.arc(player.x, screenY, radius * pulseScale, 0, Math.PI * 2);
 4746:  4658:  4570: 4482: 4394: 179:     ctx.fillStyle = TWEAK.reHitIndicatorColor;
 4747:  4659:  4571: 4483: 4395: 180:     ctx.fill();
 4748:  4660:  4572: 4484: 4396: 181:     ctx.strokeStyle = TWEAK.reHitIndicatorOutlineColor;
 4749:  4661:  4573: 4485: 4397: 182:     ctx.stroke();
 4750:  4662:  4574: 4486: 4398: 183:     ctx.closePath();
 4751:  4663:  4575: 4487: 4399: 184:     ctx.restore();
 4752:  4664:  4576: 4488: 4400: 185:   }
 4753:  4665:  4577: 4489: 4401: 186: }
 4754:  4666:  4578: 4490: 4402: ````
 4755:  4667:  4579: 4491: 4403: 
 4756:  4668:  4580: 4492: 4404: ## File: js/world.js
 4757:  4669:  4581: 4493: 4405: ````javascript
 4758:  4670:  4582: 4494: 4406:  1: /* world.js */
 4759:  4671:  4583: 4495: 4407:  2: const mountainHeight = 200000; // Mountain is now 100x bigger!
 4760:  4672:  4584: 4496: 4408:  3: let terrain = [];
 4761:  4673:  4585: 4497: 4409:  4: const obstacleCount = 1500; // Reduced rock count to make room for trees
 4762:  4674:  4586: 4498: 4410:  5: const treeClusterCount = 3000; // Number of tree clusters to generate
 4763:  4675:  4587: 4499: 4411:  6: let earlyFinish = false;
 4764:  4676:  4588: 4500: 4412:  7: const heightMultiplierBase = 1; // Base value for height multiplier - can be adjusted later
 4765:  4677:  4589: 4501: 4413:  8: const distanceMultiplierBase = 1; // Base value for distance multiplier - can be adjusted later
 4766:  4678:  4590: 4502: 4414:  9: const speedMultiplierBase = 1; // Base value for speed multiplier - can be adjusted later
 4767:  4679:  4591: 4503: 4415: 10: function generateTerrain() {
 4768:  4680:  4592: 4504: 4416: 11:   terrain = [];
 4769:  4681:  4593: 4505: 4417: 12:   // Generate rock obstacles
 4770:  4682:  4594: 4506: 4418: 13:   for (let i = 0; i < obstacleCount; i++) {
 4771:  4683:  4595: 4507: 4419: 14:     let obstacle = {
 4772:  4684:  4596: 4508: 4420: 15:       x: Math.random() * (canvas.width - 70) + 10,
 4773:  4685:  4597: 4509: 4421: 16:       y: Math.random() * mountainHeight,
 4774:  4686:  4598: 4510: 4422: 17:       width: 30 + Math.random() * 40,
 4775:  4687:  4599: 4511: 4423: 18:       height: 10 + Math.random() * 20,
 4776:  4688:  4600: 4512: 4424: 19:       type: 'rock' // Explicitly mark as rock
 4777:  4689:  4601: 4513: 4425: 20:     };
 4778:  4690:  4602: 4514: 4426: 21:     terrain.push(obstacle);
 4779:  4691:  4603: 4515: 4427: 22:   }
 4780:  4692:  4604: 4516: 4428: 23:   // Generate tree clusters
 4781:  4693:  4605: 4517: 4429: 24:   const terrainBounds = { 
 4782:  4694:  4606: 4518: 4430: 25:     xMin: 0, 
 4783:  4695:  4607: 4519: 4431: 26:     xMax: canvas.width, 
 4784:  4696:  4608: 4520: 4432: 27:     yMin: 0, 
 4785:  4697:  4609: 4521: 4433: 28:     yMax: mountainHeight 
 4786:  4698:  4610: 4522: 4434: 29:   };
 4787:  4699:  4611: 4523: 4435: 30:   // Assume player size reference (can be adjusted based on actual player dimensions)
 4788:  4700:  4612: 4524: 4436: 31:   const playerSize = 30; // Estimate based on what's visible in the game
 4789:  4701:  4613: 4525: 4437: 32:   const treeObstacles = generateTreeClumps({ 
 4790:  4702:  4614: 4526: 4438: 33:     count: treeClusterCount, 
 4791:  4703:  4615: 4527: 4439: 34:     terrainBounds, 
 4792:  4704:  4616: 4528: 4440: 35:     playerSize 
 4793:  4705:  4617: 4529: 4441: 36:   });
 4794:  4706:  4618: 4530: 4442: 37:   // Add trees to terrain array
 4795:  4707:  4619: 4531: 4443: 38:   terrain.push(...treeObstacles);
 4796:  4708:  4620: 4532: 4444: 39:   // Sort all obstacles by Y position for rendering order
 4797:  4709:  4621: 4533: 4445: 40:   terrain.sort((a, b) => a.y - b.y);
 4798:  4710:  4622: 4534: 4446: 41: }
 4799:  4711:  4623: 4535: 4447: 42: function awardMoney() {
 4800:  4712:  4624: 4536: 4448: 43:     // Calculate real distance traveled based on starting and ending Y positions
 4801:  4713:  4625: 4537: 4449: 44:     // Note: In this game's coordinate system, higher Y values mean lower on the mountain
 4802:  4714:  4626: 4538: 4450: 45:     // So the distance traveled downhill is player.absY - playerStartAbsY
 4803:  4715:  4627: 4539: 4451: 46:     let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
 4804:  4716:  4628: 4540: 4452: 47:     // Ensure at least 1 unit
 4805:  4717:  4629: 4541: 4453: 48:     distanceTraveled = Math.max(1, distanceTraveled);
 4806:  4718:  4630: 4542: 4454: 49:     // Calculate the height multiplier based on starting position
 4807:  4719:  4631: 4543: 4455: 50:     // Higher up the mountain (lower playerStartAbsY value) gives better multiplier
 4808:  4720:  4632: 4544: 4456: 51:     // This will make a run from the top worth 3x more than from the bottom
 4809:  4721:  4633: 4545: 4457: 52:     const startHeightRatio = 1 - (playerStartAbsY / mountainHeight); // 0 at bottom, 1 at top
 4810:  4722:  4634: 4546: 4458: 53:     const startHeightMultiplier = 1 + (startHeightRatio * 2 * heightMultiplierBase); // Range: 1-3x
 4811:  4723:  4635: 4547: 4459: 54:     // Calculate the distance multiplier based on how much of the mountain was traversed
 4812:  4724:  4636: 4548: 4460: 55:     // This makes longer runs more valuable (e.g., a full mountain run worth 3x more than 10 runs of 10% each)
 4813:  4725:  4637: 4549: 4461: 56:     const distanceRatio = distanceTraveled / mountainHeight; // What fraction of the mountain was traversed
 4814:  4726:  4638: 4550: 4462: 57:     const distanceMultiplier = 1 + (Math.min(1, distanceRatio * 10) * 2 * distanceMultiplierBase); // Range: 1-3x
 4815:  4727:  4639: 4551: 4463: 58:     // The formula ensures a full mountain run (10% of mountain = 1.2x, 20% = 1.4x, ... 100% = 3x)
 4816:  4728:  4640: 4552: 4464: 59:     // Calculate speed multiplier based on the time taken to complete the run
 4817:  4729:  4641: 4553: 4465: 60:     let speedMultiplier = 1;
 4818:  4730:  4642: 4554: 4466: 61:     if (downhillStartTime !== null) {
 4819:  4731:  4643: 4555: 4467: 62:         const runDuration = (performance.now() - downhillStartTime) / 1000; // Convert to seconds
 4820:  4732:  4644: 4556: 4468: 63:         // Calculate expected time based on distance
 4821:  4733:  4645: 4557: 4469: 64:         // Assuming an "average" speed would be covering the entire mountain in the below number of seconds
 4822:  4734:  4646: 4558: 4470: 65:         const expectedTime = (distanceTraveled / mountainHeight) * 500;
 4823:  4735:  4647: 4559: 4471: 66:         // Calculate speed ratio: lower than 1 means faster than expected
 4824:  4736:  4648: 4560: 4472: 67:         // We want lower times to give higher multipliers
 4825:  4737:  4649: 4561: 4473: 68:         const speedRatio = Math.max(0.1, Math.min(2, runDuration / Math.max(1, expectedTime)));
 4826:  4738:  4650: 4562: 4474: 69:         // Invert the ratio: 1/speedRatio, so faster runs (lower speedRatio) get higher multipliers
 4827:  4739:  4651: 4563: 4475: 70:         // Adjust the curve to get 1x for average speed, up to 3x for twice as fast
 4828:  4740:  4652: 4564: 4476: 71:         speedMultiplier = 1 + (Math.max(0, (1 - speedRatio)) * 3 * speedMultiplierBase); // Range: 1-3x
 4829:  4741:  4653: 4565: 4477: 72:         console.log(`Run duration: ${runDuration.toFixed(2)}s, Expected: ${expectedTime.toFixed(2)}s, Speed ratio: ${speedRatio.toFixed(2)}, Multiplier: ${speedMultiplier.toFixed(2)}x`);
 4830:  4742:  4654: 4566: 4478: 73:     }
 4831:  4743:  4655: 4567: 4479: 74:     // Apply all multipliers to the money calculation
 4832:  4744:  4656: 4568: 4480: 75:     let moneyEarned = Math.floor((distanceTraveled / 100) * startHeightMultiplier * distanceMultiplier * speedMultiplier);
 4833:  4745:  4657: 4569: 4481: 76:     moneyEarned = Math.max(0, moneyEarned); // Guarantee no negative values
 4834:  4746:  4658: 4570: 4482: 77:     console.log(`Awarding money: $${moneyEarned} (Distance: ${distanceTraveled}, Height multiplier: ${startHeightMultiplier.toFixed(2)}, Distance multiplier: ${distanceMultiplier.toFixed(2)}, Speed multiplier: ${speedMultiplier.toFixed(2)})`);
 4835:  4747:  4659: 4571: 4483: 78:     player.money += moneyEarned;
 4836:  4748:  4660: 4572: 4484: 79:     updateMoneyDisplay();
 4837:  4749:  4661: 4573: 4485: 80: }
 4838:  4750:  4662: 4574: 4486: ````
 4839:  4751:  4663: 4575: 4487: 
 4840:  4752:  4664: 4576: 4488: ## File: js/mechanics.js
 4841:  4753:  4665: 4577: 4489: ````javascript
 4842:  4754:  4666: 4578: 4490:  1: /* mechanics.js - Gameplay Mechanics & Interactions */
 4843:  4755:  4667: 4579: 4491:  2: // Update all gameplay state and physics – including jump/trick handling and collision updates.
 4844:  4756:  4668: 4580: 4492:  3: function updateMechanics(deltaTime) {
 4845:  4757:  4669: 4581: 4493:  4:     deltaTime *= 1;
 4846:  4758:  4670: 4582: 4494:  5:     if (currentState === GameState.DOWNHILL) {
 4847:  4759:  4671: 4583: 4495:  6:       console.log("updateMechanics DOWNHILL START");
 4848:  4760:  4672: 4584: 4496:  7:       // Call the refactored downhill function from downhill.js
 4849:  4761:  4673: 4585: 4497:  8:       updateDownhill(deltaTime);
 4850:  4762:  4674: 4586: 4498:  9:       console.log("updateMechanics DOWNHILL END");
 4851:  4763:  4675: 4587: 4499: 10:     } else if (currentState === GameState.UPHILL) {
 4852:  4764:  4676: 4588: 4500: 11:       // Call the refactored uphill function from uphill.js
 4853:  4765:  4677: 4589: 4501: 12:       updateUphill(deltaTime);
 4854:  4766:  4678: 4590: 4502: 13:     }
 4855:  4767:  4679: 4591: 4503: 14:   }
 4856:  4768:  4680: 4592: 4504: 15:   // Note: Jump-related functions moved to jumpsled.js
 4857:  4769:  4681: 4593: 4505: 16: function lerpPlayerToGround(duration, onComplete) {
 4858:  4770:  4682: 4594: 4506: 17:   const startY = player.absY;
 4859:  4771:  4683: 4595: 4507: 18:   const endY = mountainHeight - (player.height * 3); // Safe landing height
 4860:  4772:  4684: 4596: 4508: 19:   const startTime = performance.now();
 4861:  4773:  4685: 4597: 4509: 20:   function animate() {
 4862:  4774:  4686: 4598: 4510: 21:     const now = performance.now();
 4863:  4775:  4687: 4599: 4511: 22:     const t = Math.min(1, (now - startTime) / duration);
 4864:  4776:  4688: 4600: 4512: 23:     // Use smooth easing
 4865:  4777:  4689: 4601: 4513: 24:     const easedT = t * t * (3 - 2 * t);
 4866:  4778:  4690: 4602: 4514: 25:     player.absY = startY + (endY - startY) * easedT;
 4867:  4779:  4691: 4603: 4515: 26:     if (t < 1) {
 4868:  4780:  4692: 4604: 4516: 27:       requestAnimationFrame(animate);
 4869:  4781:  4693: 4605: 4517: 28:     } else {
 4870:  4782:  4694: 4606: 4518: 29:       player.absY = endY;
 4871:  4783:  4695: 4607: 4519: 30:       if (onComplete) onComplete();
 4872:  4784:  4696: 4608: 4520: 31:     }
 4873:  4785:  4697: 4609: 4521: 32:   }
 4874:  4786:  4698: 4610: 4522: 33:   animate();
 4875:  4787:  4699: 4611: 4523: 34: }
 4876:  4788:  4700: 4612: 4524: ````
 4877:  4789:  4701: 4613: 4525: 
 4878:  4790:  4702: 4614: 4526: ## File: js/utils.js
 4879:  4791:  4703: 4615: 4527: ````javascript
 4880:  4792:  4704: 4616: 4528:   1: /* utils.js */
 4881:  4793:  4705: 4617: 4529:   2: // Global Configuration & Shared Globals moved to settings.js
 4882:  4794:  4706: 4618: 4530:   3: window.GameState = {
 4883:  4795:  4707: 4619: 4531:   4:     HOUSE: 'house',
 4884:  4796:  4708: 4620: 4532:   5:     DOWNHILL: 'downhill',
 4885:  4797:  4709: 4621: 4533:   6:     UPHILL: 'uphill'
 4886:  4798:  4710: 4622: 4534:   7: };
 4887:  4799:  4711: 4623: 4535:   8: // Instead of getting the canvas element (which no longer exists),
 4888:  4800:  4712: 4624: 4536:   9: // we define a dummy canvas object for width/height references.
 4889:  4801:  4713: 4625: 4537:  10: var canvas = { width: 800, height: 450 };
 4890:  4802:  4714: 4626: 4538:  11: // We'll expose canvas globally for other scripts to access
 4891:  4803:  4715: 4627: 4539:  12: window.canvas = canvas;
 4892:  4804:  4716: 4628: 4540:  13: // We'll set ctx in game.js once the Phaser Canvas Texture is created.
 4893:  4805:  4717: 4629: 4541:  14: var ctx = null;
 4894:  4806:  4718: 4630: 4542:  15: /* NEW: Global keysDown object and event listeners */
 4895:  4807:  4719: 4631: 4543:  16: var keysDown = {};
 4896:  4808:  4720: 4632: 4544:  17: var spacePressed = false;
 4897:  4809:  4721: 4633: 4545:  18: window.addEventListener("keydown", function (e) {
 4898:  4810:  4722: 4634: 4546:  19:     // Prevent default behavior for arrow keys, space, and tab to ensure correct capture
 4899:  4811:  4723: 4635: 4547:  20:     if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", " ", "Tab"].includes(e.key)) {
 4900:  4812:  4724: 4636: 4548:  21:         e.preventDefault();
 4901:  4813:  4725: 4637: 4549:  22:     }
 4902:  4814:  4726: 4638: 4550:  23:     keysDown[e.key] = true;
 4903:  4815:  4727: 4639: 4551:  24:     // Track space in HOUSE state
 4904:  4816:  4728: 4640: 4552:  25:     if (e.key === " " && currentState === GameState.HOUSE) {
 4905:  4817:  4729: 4641: 4553:  26:         spacePressed = true;
 4906:  4818:  4730: 4642: 4554:  27:     }
 4907:  4819:  4731: 4643: 4555:  28:     // Take a photo in UPHILL state when space is pressed
 4908:  4820:  4732: 4644: 4556:  29:     if (e.key === " " && currentState === GameState.UPHILL) {
 4909:  4821:  4733: 4645: 4557:  30:         takePhoto();
 4910:  4822:  4734: 4646: 4558:  31:     }
 4911:  4823:  4735: 4647: 4559:  32:     // Press "E" to manually spawn an animal in UPHILL mode (DEBUG)
 4912:  4824:  4736: 4648: 4560:  33:     if (e.key.toLowerCase() === 'e' && currentState === GameState.UPHILL) {
 4913:  4825:  4737: 4649: 4561:  34:         spawnAnimal();
 4914:  4826:  4738: 4650: 4562:  35:     }
 4915:  4827:  4739: 4651: 4563:  36:     // Handle Tab key to toggle between UPHILL and DOWNHILL
 4916:  4828:  4740: 4652: 4564:  37:     if (e.key === "Tab" && currentState !== GameState.HOUSE) {
 4917:  4829:  4741: 4653: 4565:  38:         if (currentState === GameState.UPHILL && player.sledDamaged === 1) {
 4918:  4830:  4742: 4654: 4566:  39:             console.log("Cannot switch to DOWNHILL mode - Sled is damaged and needs repair");
 4919:  4831:  4743: 4655: 4567:  40:             showSledDamageNotice();
 4920:  4832:  4744: 4656: 4568:  41:             return;
 4921:  4833:  4745: 4657: 4569:  42:         }
 4922:  4834:  4746: 4658: 4570:  43:         const newState = currentState === GameState.UPHILL ? GameState.DOWNHILL : GameState.UPHILL;
 4923:  4835:  4747: 4659: 4571:  44:         changeState(newState);
 4924:  4836:  4748: 4660: 4572:  45:     }
 4925:  4837:  4749: 4661: 4573:  46: });
 4926:  4838:  4750: 4662: 4574:  47: window.addEventListener("keyup", function (e) {
 4927:  4839:  4751: 4663: 4575:  48:     delete keysDown[e.key];
 4928:  4840:  4752: 4664: 4576:  49:     if (e.key === " " && currentState === GameState.HOUSE) {
 4929:  4841:  4753: 4665: 4577:  50:         spacePressed = false;
 4930:  4842:  4754: 4666: 4578:  51:         console.log("Space released, starting sled run.");
 4931:  4843:  4755: 4667: 4579:  52:         unlockAudioContext();
 4932:  4844:  4756: 4668: 4580:  53:         playStartGameSound();
 4933:  4845:  4757: 4669: 4581:  54:         changeState(GameState.DOWNHILL);
 4934:  4846:  4758: 4670: 4582:  55:     }
 4935:  4847:  4759: 4671: 4583:  56: });
 4936:  4848:  4760: 4672: 4584:  57: /* Utility functions */
 4937:  4849:  4761: 4673: 4585:  58: function formatUpgradeName(name) {
 4938:  4850:  4762: 4674: 4586:  59:     let formattedName = name.replace(/([A-Z])/g, ' $1').trim();
 4939:  4851:  4763: 4675: 4587:  60:     return formattedName.charAt(0).toUpperCase() + formattedName.slice(1);
 4940:  4852:  4764: 4676: 4588:  61: }
 4941:  4853:  4765: 4677: 4589:  62: function capitalizeFirstLetter(string) {
 4942:  4854:  4766: 4678: 4590:  63:     return string.charAt(0).toUpperCase() + string.slice(1);
 4943:  4855:  4767: 4679: 4591:  64: }
 4944:  4856:  4768: 4680: 4592:  65: function checkCollision(ax, ay, aw, ah, bx, by, bw, bh) {
 4945:  4857:  4769: 4681: 4593:  66:     return ax < bx + bw && ax + aw > bx && ay < by + bh && ay + ah > by;
 4946:  4858:  4770: 4682: 4594:  67: }
 4947:  4859:  4771: 4683: 4595:  68: function clamp(val, min, max) {
 4948:  4860:  4772: 4684: 4596:  69:     return Math.max(min, Math.min(max, val));
 4949:  4861:  4773: 4685: 4597:  70: }
 4950:  4862:  4774: 4686: 4598:  71: function getCameraOffset(playerAbsY, canvasHeight, mountainHeight) {
 4951:  4863:  4775: 4687: 4599:  72:     let offset = playerAbsY - canvasHeight / 2;
 4952:  4864:  4776: 4688: 4600:  73:     return clamp(offset, 0, mountainHeight - canvasHeight);
 4953:  4865:  4777: 4689: 4601:  74: }
 4954:  4866:  4778: 4690: 4602:  75: // Make utility functions available globally for both normal scripts and modules
 4955:  4867:  4779: 4691: 4603:  76: window.formatUpgradeName = formatUpgradeName;
 4956:  4868:  4780: 4692: 4604:  77: window.capitalizeFirstLetter = capitalizeFirstLetter;
 4957:  4869:  4781: 4693: 4605:  78: window.checkCollision = checkCollision;
 4958:  4870:  4782: 4694: 4606:  79: window.clamp = clamp;
 4959:  4871:  4783: 4695: 4607:  80: window.getCameraOffset = getCameraOffset;
 4960:  4872:  4784: 4696: 4608:  81: /* Ensure Web Audio API is unlocked */
 4961:  4873:  4785: 4697: 4609:  82: let audioCtx;
 4962:  4874:  4786: 4698: 4610:  83: function unlockAudioContext() {
 4963:  4875:  4787: 4699: 4611:  84:     if (!audioCtx) {
 4964:  4876:  4788: 4700: 4612:  85:         audioCtx = new (window.AudioContext || window.webkitAudioContext)();
 4965:  4877:  4789: 4701: 4613:  86:     }
 4966:  4878:  4790: 4702: 4614:  87: }
 4967:  4879:  4791: 4703: 4615:  88: /* Audio Utility Functions */
 4968:  4880:  4792: 4704: 4616:  89: function playTone(frequency = 440, type = "sine", duration = 0.5, volume = 0.3) {
 4969:  4881:  4793: 4705: 4617:  90:     unlockAudioContext(); // Ensure audio context is unlocked
 4970:  4882:  4794: 4706: 4618:  91:     const oscillator = audioCtx.createOscillator();
 4971:  4883:  4795: 4707: 4619:  92:     const gainNode = audioCtx.createGain();
 4972:  4884:  4796: 4708: 4620:  93:     oscillator.type = type;
 4973:  4885:  4797: 4709: 4621:  94:     oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);
 4974:  4886:  4798: 4710: 4622:  95:     gainNode.gain.setValueAtTime(volume, audioCtx.currentTime);
 4975:  4887:  4799: 4711: 4623:  96:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);
 4976:  4888:  4800: 4712: 4624:  97:     oscillator.connect(gainNode);
 4977:  4889:  4801: 4713: 4625:  98:     gainNode.connect(audioCtx.destination);
 4978:  4890:  4802: 4714: 4626:  99:     oscillator.start();
 4979:  4891:  4803: 4715: 4627: 100:     oscillator.stop(audioCtx.currentTime + duration);
 4980:  4892:  4804: 4716: 4628: 101: }
 4981:  4893:  4805: 4717: 4629: 102: /* Sound Effects */
 4982:  4894:  4806: 4718: 4630: 103: function playStartGameSound() {
 4983:  4895:  4807: 4719: 4631: 104:     playTone(440, "triangle", 0.5);
 4984:  4896:  4808: 4720: 4632: 105: }
 4985:  4897:  4809: 4721: 4633: 106: function playCrashSound() {
 4986:  4898:  4810: 4722: 4634: 107:     unlockAudioContext();
 4987:  4899:  4811: 4723: 4635: 108:     const oscillator = audioCtx.createOscillator();
 4988:  4900:  4812: 4724: 4636: 109:     const gainNode = audioCtx.createGain();
 4989:  4901:  4813: 4725: 4637: 110:     oscillator.type = "sawtooth";
 4990:  4902:  4814: 4726: 4638: 111:     oscillator.frequency.setValueAtTime(800, audioCtx.currentTime);
 4991:  4903:  4815: 4727: 4639: 112:     oscillator.frequency.exponentialRampToValueAtTime(100, audioCtx.currentTime + 0.5);
 4992:  4904:  4816: 4728: 4640: 113:     gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
 4993:  4905:  4817: 4729: 4641: 114:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.5);
 4994:  4906:  4818: 4730: 4642: 115:     oscillator.connect(gainNode);
 4995:  4907:  4819: 4731: 4643: 116:     gainNode.connect(audioCtx.destination);
 4996:  4908:  4820: 4732: 4644: 117:     oscillator.start();
 4997:  4909:  4821: 4733: 4645: 118:     oscillator.stop(audioCtx.currentTime + 0.5);
 4998:  4910:  4822: 4734: 4646: 119: }
 4999:  4911:  4823: 4735: 4647: 120: function playRockHitSound() {
 5000:  4912:  4824: 4736: 4648: 121:     playTone(200, "square", 0.2);
 5001:  4913:  4825: 4737: 4649: 122: }
 5002:  4914:  4826: 4738: 4650: 123: function playMoneyGainSound() {
 5003:  4915:  4827: 4739: 4651: 124:     playTone(1000, "sine", 0.15, 0.2);
 5004:  4916:  4828: 4740: 4652: 125: }
 5005:  4917:  4829: 4741: 4653: 126: function mapRange(value, inMin, inMax, outMin, outMax) {
 5006:  4918:  4830: 4742: 4654: 127:     return outMin + ((value - inMin) * (outMax - outMin)) / (inMax - inMin);
 5007:  4919:  4831: 4743: 4655: 128: }
 5008:  4920:  4832: 4744: 4656: 129: // Helper functions for color conversion and interpolation
 5009:  4921:  4833: 4745: 4657: 130: function hexToRgb(hex) {
 5010:  4922:  4834: 4746: 4658: 131:     hex = hex.replace(/^#/, '');
 5011:  4923:  4835: 4747: 4659: 132:     if (hex.length === 3) {
 5012:  4924:  4836: 4748: 4660: 133:       hex = hex.split('').map(c => c + c).join('');
 5013:  4925:  4837: 4749: 4661: 134:     }
 5014:  4926:  4838: 4750: 4662: 135:     let bigint = parseInt(hex, 16);
 5015:  4927:  4839: 4751: 4663: 136:     let r = (bigint >> 16) & 255;
 5016:  4928:  4840: 4752: 4664: 137:     let g = (bigint >> 8) & 255;
 5017:  4929:  4841: 4753: 4665: 138:     let b = (bigint & 255) & 255;
 5018:  4930:  4842: 4754: 4666: 139:     return { r, g, b };
 5019:  4931:  4843: 4755: 4667: 140: }
 5020:  4932:  4844: 4756: 4668: 141: function rgbToHex(r, g, b) {
 5021:  4933:  4845: 4757: 4669: 142:     return "#" + ((1 << 24) + (r << 16) + (g << 8) + b)
 5022:  4934:  4846: 4758: 4670: 143:       .toString(16)
 5023:  4935:  4847: 4759: 4671: 144:       .slice(1)
 5024:  4936:  4848: 4760: 4672: 145:       .toUpperCase();
 5025:  4937:  4849: 4761: 4673: 146: }
 5026:  4938:  4850: 4762: 4674: 147: function lerpColor(color1, color2, t) {
 5027:  4939:  4851: 4763: 4675: 148:     let c1 = hexToRgb(color1);
 5028:  4940:  4852: 4764: 4676: 149:     let c2 = hexToRgb(color2);
 5029:  4941:  4853: 4765: 4677: 150:     let r = Math.round(c1.r + (c2.r - c1.r) * t);
 5030:  4942:  4854: 4766: 4678: 151:     let g = Math.round(c1.g + (c2.g - c1.g) * t);
 5031:  4943:  4855: 4767: 4679: 152:     let b = Math.round(c1.b + (c2.b - c1.b) * t);
 5032:  4944:  4856: 4768: 4680: 153:     return rgbToHex(r, g, b);
 5033:  4945:  4857: 4769: 4681: 154: }
 5034:  4946:  4858: 4770: 4682: 155: // Notification helpers
 5035:  4947:  4859: 4771: 4683: 156: function showSledDamageNotice() {
 5036:  4948:  4860: 4772: 4684: 157:   showErrorNotification('Sled Damaged! Please Repair');
 5037:  4949:  4861: 4773: 4685: 158: }
 5038:  4950:  4862: 4774: 4686: 159: function showSledRepairedNotice() {
 5039:  4951:  4863: 4775: 4687: 160:   showSuccessNotification('Sled Repaired!');
 5040:  4952:  4864: 4776: 4688: 161: }
 5041:  4953:  4865: 4777: 4689: 162: // Add additional utility functions to window object
 5042:  4954:  4866: 4778: 4690: 163: window.mapRange = mapRange;
 5043:  4955:  4867: 4779: 4691: 164: window.hexToRgb = hexToRgb;
 5044:  4956:  4868: 4780: 4692: 165: window.rgbToHex = rgbToHex;
 5045:  4957:  4869: 4781: 4693: 166: window.lerpColor = lerpColor;
 5046:  4958:  4870: 4782: 4694: 167: window.showSledDamageNotice = showSledDamageNotice;
 5047:  4959:  4871: 4783: 4695: 168: window.showSledRepairedNotice = showSledRepairedNotice;
 5048:  4960:  4872: 4784: 4696: 169: window.playTone = playTone;
 5049:  4961:  4873: 4785: 4697: 170: window.playStartGameSound = playStartGameSound;
 5050:  4962:  4874: 4786: 4698: 171: window.playCrashSound = playCrashSound;
 5051:  4963:  4875: 4787: 4699: 172: window.playRockHitSound = playRockHitSound;
 5052:  4964:  4876: 4788: 4700: 173: window.playMoneyGainSound = playMoneyGainSound;
 5053:  4965:  4877: 4789: 4701: 174: window.unlockAudioContext = unlockAudioContext;
 5054:  4966:  4878: 4790: 4702: 175: // Note: export statement has been removed and all functions are now attached to window
 5055:  4967:  4879: 4791: 4703: ````
 5056:  4968:  4880: 4792: 4704: 
 5057:  4969:  4881: 4793: 4705: ## File: index.html
 5058:  4970:  4882: 4794: 4706: ````html
 5059:  4971:  4883: 4795: 4707:  1: <!DOCTYPE html>
 5060:  4972:  4884: 4796: 4708:  2: <html lang="en">
 5061:  4973:  4885: 4797: 4709:  3: <head>
 5062:  4974:  4886: 4798: 4710:  4:   <meta charset="UTF-8" />
 5063:  4975:  4887: 4799: 4711:  5:   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 5064:  4976:  4888: 4800: 4712:  6:   <title>SledHEAD</title>
 5065:  4977:  4889: 4801: 4713:  7:   <link rel="stylesheet" href="styles.css">
 5066:  4978:  4890: 4802: 4714:  8:   <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
 5067:  4979:  4891: 4803: 4715:  9: </head>
 5068:  4980:  4892: 4804: 4716: 10: <body>
 5069:  4981:  4893: 4805: 4717: 11:   <!-- UI Elements -->
 5070:  4982:  4894: 4806: 4718: 12:   <div id="cursor-position"
 5071:  4983:  4895: 4807: 4719: 13:        style="position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white;
 5072:  4984:  4896: 4808: 4720: 14:               padding: 5px; border-radius: 3px; font-family: monospace; z-index: 1000;">
 5073:  4985:  4897: 4809: 4721: 15:     Abs: (0, 0) | View: (0, 0)
 5074:  4986:  4898: 4810: 4722: 16:   </div>
 5075:  4987:  4899: 4811: 4723: 17:   <div id="victoryBanner"
 5076:  4988:  4900: 4812: 4724: 18:        style="display: none; position: fixed; top: 50%; left: 50%;
 5077:  4989:  4901: 4813: 4725: 19:               transform: translate(-50%, -50%); background: gold; padding: 20px;
 5078:  4990:  4902: 4814: 4726: 20:               border-radius: 10px; text-align: center; font-size: 24px; font-weight: bold; z-index: 1000;">
 5079:  4991:  4903: 4815: 4727: 21:     🎉 VICTORY! 🎉<br>
 5080:  4992:  4904: 4816: 4728: 22:     You've paid off your loan!
 5081:  4993:  4905: 4817: 4729: 23:   </div>
 5082:  4994:  4906: 4818: 4730: 24:   <h1>SledHEAD</h1>
 5083:  4995:  4907: 4819: 4731: 25:   <div id="moneyDisplay">
 5084:  4996:  4908: 4820: 4732: 26:     <p id="moneyText">Money: $200</p>
 5085:  4997:  4909: 4821: 4733: 27:   </div>
 5086:  4998:  4910: 4822: 4734: 28:   <div id="game-screen"></div>
 5087:  4999:  4911: 4823: 4735: 29:   <!-- Upgrades -->
 5088:  5000:  4912: 4824: 4736: 30:   <div id="upgrade-menu">
 5089:  5001:  4913: 4825: 4737: 31:     <div class="game-controls">
 5090:  5002:  4914: 4826: 4738: 32:       <button id="startGame">Start Sled Run</button>
 5091:  5003:  4915: 4827: 4739: 33:       <button id="payLoan">Pay Loan ($100,000)</button>
 5092:  5004:  4916: 4828: 4740: 34:     </div>
 5093:  5005:  4917: 4829: 4741: 35:     <div id="dynamic-upgrade-columns" class="upgrade-menu-columns">
 5094:  5006:  4918: 4830: 4742: 36:       <!-- Populated dynamically -->
 5095:  5007:  4919: 4831: 4743: 37:     </div>
 5096:  5008:  4920: 4832: 4744: 38:     <p id="bestTimeText">Best Time: N/A</p>
 5097:  5009:  4921: 4833: 4745: 39:   </div>
 5098:  5010:  4922: 4834: 4746: 40:   <!-- JS Includes -->
 5099:  5011:  4923: 4835: 4747: 41:   <script src="js/settings.js"></script>
 5100:  5012:  4924: 4836: 4748: 42:   <script src="js/notify.js"></script>
 5101:  5013:  4925: 4837: 4749: 43:   <script src="js/utils.js"></script>
 5102:  5014:  4926: 4838: 4750: 44:   <script src="js/input.js"></script>
 5103:  5015:  4927: 4839: 4751: 45:   <script src="js/world.js"></script>
 5104:  5016:  4928: 4840: 4752: 46:   <script src="js/player.js"></script>
 5105:  5017:  4929: 4841: 4753: 47:   <script src="js/entities.js"></script>
 5106:  5018:  4930: 4842: 4754: 48:   <script src="js/wildlife.js"></script>
 5107:  5019:  4931: 4843: 4755: 49:   <script src="js/mobs/bear.js"></script>
 5108:  5020:  4932: 4844: 4756: 50:   <script src="js/mobs/mountainlion.js"></script>
 5109:  5021:  4933: 4845: 4757: 51:   <script src="js/mobs/bird.js"></script>
 5110:  5022:  4934: 4846: 4758: 52:   <script src="js/trees.js"></script>
 5111:  5023:  4935: 4847: 4759: 53:   <script src="js/camera.js"></script>
 5112:  5024:  4936: 4848: 4760: 54:   <script src="js/jumpsled.js"></script>
 5113:  5025:  4937: 4849: 4761: 55:   <script src="js/mechanics.js"></script>
 5114:  5026:  4938: 4850: 4762: 56:   <script src="js/render.js"></script>
 5115:  5027:  4939: 4851: 4763: 57:   <script src="js/stamina.js"></script>
 5116:  5028:  4940: 4852: 4764: 58:   <script src="js/loan.js"></script>
 5117:  5029:  4941: 4853: 4765: 59:   <script src="js/uphill.js"></script>
 5118:  5030:  4942: 4854: 4766: 60:   <!-- Modules -->
 5119:  5031:  4943: 4855: 4767: 61:   <script type="module" src="js/registry.js"></script>
 5120:  5032:  4944: 4856: 4768: 62:   <script type="module" src="js/tricks.js"></script>
 5121:  5033:  4945: 4857: 4769: 63:   <script type="module" src="js/downhill.js"></script>
 5122:  5034:  4946: 4858: 4770: 64:   <script type="module" src="js/upgradeData.js"></script>
 5123:  5035:  4947: 4859: 4771: 65:   <script type="module" src="js/upgradeLogic.js"></script>
 5124:  5036:  4948: 4860: 4772: 66:   <script type="module" src="js/upgrades.js"></script>
 5125:  5037:  4949: 4861: 4773: 67:   <script type="module" src="js/game.js"></script>
 5126:  5038:  4950: 4862: 4774: 68: </body>
 5127:  5039:  4951: 4863: 4775: 69: </html>
 5128:  5040:  4952: 4864: 4776: ````
 5129:  5041:  4953: 4865: 4777: 
 5130:  5042:  4954: 4866: 4778: ## File: js/game.js
 5131:  5043:  4955: 4867: 4779: ````javascript
 5132:  5044:  4956: 4868: 4780:   1: /* game.js - Core Loop & State Management (Phaserized) */
 5133:  5045:  4957: 4869: 4781:   2: // Import necessary functions and variables
 5134:  5046:  4958: 4870: 4782:   3: import { playerUpgrades, mountainUpgrades, initUpgradeButton, purchaseUpgrade, updateMoneyDisplay } from './upgradeLogic.js';
 5135:  5047:  4959: 4871: 4783:   4: // Keep your globals
 5136:  5048:  4960: 4872: 4784:   5: var downhillStartTime = null;
 5137:  5049:  4961: 4873: 4785:   6: var lastTime = 0;
 5138:  5050:  4962: 4874: 4786:   7: var currentState = window.GameState.HOUSE;  // Reference from global window.GameState
 5139:  5051:  4963: 4875: 4787:   8: var jumpOsc = null;
 5140:  5052:  4964: 4876: 4788:   9: var jumpGain = null;
 5141:  5053:  4965: 4877: 4789:  10: var loanAmount = 100000;
 5142:  5054:  4966: 4878: 4790:  11: window.floatingTexts = [];  // Make floatingTexts accessible globally
 5143:  5055:  4967: 4879: 4791:  12: var isFirstHouseEntry = true;
 5144:  5056:  4968: 4880: 4792:  13: var houseReEntry = 0;
 5145:  5057:  4969: 4881: 4793:  14: var playerStartAbsY = 0;
 5146:  5058:  4970: 4882: 4794:  15: // We'll access the global canvas object
 5147:  5059:  4971: 4883: 4795:  16: // var ctx is defined later after context creation
 5148:  5060:  4972: 4884: 4796:  17: // Create a Phaser Scene to run your game logic
 5149:  5061:  4973: 4885: 4797:  18: class MainScene extends Phaser.Scene {
 5150:  5062:  4974: 4886: 4798:  19:   constructor() {
 5151:  5063:  4975: 4887: 4799:  20:     super("MainScene");
 5152:  5064:  4976: 4888: 4800:  21:   }
 5153:  5065:  4977: 4889: 4801:  22:   preload() {
 5154:  5066:  4978: 4890: 4802:  23:     // If you had assets, you'd load them here
 5155:  5067:  4979: 4891: 4803:  24:   }
 5156:  5068:  4980: 4892: 4804:  25:   create() {
 5157:  5069:  4981: 4893: 4805:  26:     // Create a Canvas Texture of the same size as your old canvas
 5158:  5070:  4982: 4894: 4806:  27:     this.rt = this.textures.createCanvas("myCanvas", window.canvas.width, window.canvas.height);
 5159:  5071:  4983: 4895: 4807:  28:     // Get the canvas context with willReadFrequently option
 5160:  5072:  4984: 4896: 4808:  29:     ctx = this.rt.context;
 5161:  5073:  4985: 4897: 4809:  30:     // Set willReadFrequently for better performance with getImageData calls
 5162:  5074:  4986: 4898: 4810:  31:     ctx.canvas.getContext = () => ctx.canvas.getContext('2d', { willReadFrequently: true });
 5163:  5075:  4987: 4899: 4811:  32:     // Add it to the scene as an Image so Phaser will display it
 5164:  5076:  4988: 4900: 4812:  33:     this.image = this.add.image(0, 0, "myCanvas").setOrigin(0, 0);
 5165:  5077:  4989: 4901: 4813:  34:     // Initialize player money now that TWEAK is available
 5166:  5078:  4990: 4902: 4814:  35:     if (typeof window.initializePlayerMoney === 'function') {
 5167:  5079:  4991: 4903: 4815:  36:       window.initializePlayerMoney();
 5168:  5080:  4992: 4904: 4816:  37:     }
 5169:  5081:  4993: 4905: 4817:  38:     // Hook up your DOM event listeners for buttons
 5170:  5082:  4994: 4906: 4818:  39:     document.getElementById("startGame").addEventListener("click", () => {
 5171:  5083:  4995: 4907: 4819:  40:       console.log("Start run clicked.");
 5172:  5084:  4996: 4908: 4820:  41:       unlockAudioContext();
 5173:  5085:  4997: 4909: 4821:  42:       playStartGameSound();
 5174:  5086:  4998: 4910: 4822:  43:       changeState(window.GameState.DOWNHILL);
 5175:  5087:  4999: 4911: 4823:  44:     });
 5176:  5088:  5000: 4912: 4824:  45:     document.getElementById("payLoan").addEventListener("click", () => {
 5177:  5089:  5001: 4913: 4825:  46:       console.log("Paying loan...");
 5178:  5090:  5002: 4914: 4826:  47:       payLoan();
 5179:  5091:  5003: 4915: 4827:  48:     });
 5180:  5092:  5004: 4916: 4828:  49:     // Initialize upgrade buttons
 5181:  5093:  5005: 4917: 4829:  50:     Object.keys(playerUpgrades).forEach(upg => {
 5182:  5094:  5006: 4918: 4830:  51:       initUpgradeButton(upg, playerUpgrades[upg]);
 5183:  5095:  5007: 4919: 4831:  52:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
 5184:  5096:  5008: 4920: 4832:  53:       document.getElementById(btnId).addEventListener("click", () => {
 5185:  5097:  5009: 4921: 4833:  54:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
 5186:  5098:  5010: 4922: 4834:  55:         purchaseUpgrade(playerUpgrades, upg);
 5187:  5099:  5011: 4923: 4835:  56:       });
 5188:  5100:  5012: 4924: 4836:  57:     });
 5189:  5101:  5013: 4925: 4837:  58:     Object.keys(mountainUpgrades).forEach(upg => {
 5190:  5102:  5014: 4926: 4838:  59:       initUpgradeButton(upg, mountainUpgrades[upg]);
 5191:  5103:  5015: 4927: 4839:  60:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
 5192:  5104:  5016: 4928: 4840:  61:       document.getElementById(btnId).addEventListener("click", () => {
 5193:  5105:  5017: 4929: 4841:  62:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
 5194:  5106:  5018: 4930: 4842:  63:         purchaseUpgrade(mountainUpgrades, upg);
 5195:  5107:  5019: 4931: 4843:  64:       });
 5196:  5108:  5020: 4932: 4844:  65:     });
 5197:  5109:  5021: 4933: 4845:  66:     // Set up the world
 5198:  5110:  5022: 4934: 4846:  67:     generateTerrain();
 5199:  5111:  5023: 4935: 4847:  68:     updateLoanButton();
 5200:  5112:  5024: 4936: 4848:  69:     changeState(window.GameState.HOUSE);
 5201:  5113:  5025: 4937: 4849:  70:   }
 5202:  5114:  5026: 4938: 4850:  71:   update(time, delta) {
 5203:  5115:  5027: 4939: 4851:  72:     console.log("MainScene update START");
 5204:  5116:  5028: 4940: 4852:  73:     // Update game mechanics (delta in ms)
 5205:  5117:  5029: 4941: 4853:  74:     updateMechanics(delta);
 5206:  5118:  5030: 4942: 4854:  75:     // Update floating texts
 5207:  5119:  5031: 4943: 4855:  76:     window.floatingTexts = window.floatingTexts.filter(text => text.update(delta));
 5208:  5120:  5032: 4944: 4856:  77:     // Call the render function (draws onto ctx)
 5209:  5121:  5033: 4945: 4857:  78:     render();
 5210:  5122:  5034: 4946: 4858:  79:     // Refresh the Canvas Texture so Phaser displays the new drawing
 5211:  5123:  5035: 4947: 4859:  80:     this.rt.refresh();
 5212:  5124:  5036: 4948: 4860:  81:     console.log("MainScene update END");
 5213:  5125:  5037: 4949: 4861:  82:   }
 5214:  5126:  5038: 4950: 4862:  83: }
 5215:  5127:  5039: 4951: 4863:  84: // Original changeState function (unchanged in logic)
 5216:  5128:  5040: 4952: 4864:  85: function changeState(newState) {
 5217:  5129:  5041: 4953: 4865:  86:   // Guard clause to prevent redundant state changes
 5218:  5130:  5042: 4954: 4866:  87:   if (newState === window.currentState) {
 5219:  5131:  5043: 4955: 4867:  88:     console.log(`State change ignored: already in state ${newState}`);
 5220:  5132:  5044: 4956: 4868:  89:     return;
 5221:  5133:  5045: 4957: 4869:  90:   }
 5222:  5134:  5046: 4958: 4870:  91:   const prevState = currentState;
 5223:  5135:  5047: 4959: 4871:  92:   if (player.isJumping && newState !== window.GameState.HOUSE) {
 5224:  5136:  5048: 4960: 4872:  93:     if (player.currentTrick) {
 5225:  5137:  5049: 4961: 4873:  94:       resetTrickState();
 5226:  5138:  5050: 4962: 4874:  95:       playCrashSound();
 5227:  5139:  5051: 4963: 4875:  96:       console.log("State change interrupted trick - counted as crash");
 5228:  5140:  5052: 4964: 4876:  97:     }
 5229:  5141:  5053: 4965: 4877:  98:     lerpPlayerToGround(250, () => {
 5230:  5142:  5054: 4966: 4878:  99:       player.isJumping = false;
 5231:  5143:  5055: 4967: 4879: 100:       onPlayerLand();
 5232:  5144:  5056: 4968: 4880: 101:       completeStateChange(newState, prevState);
 5233:  5145:  5057: 4969: 4881: 102:     });
 5234:  5146:  5058: 4970: 4882: 103:     return;
 5235:  5147:  5059: 4971: 4883: 104:   }
 5236:  5148:  5060: 4972: 4884: 105:   completeStateChange(newState, prevState);
 5237:  5149:  5061: 4973: 4885: 106: }
 5238:  5150:  5062: 4974: 4886: 107: function completeStateChange(newState, prevState) {
 5239:  5151:  5063: 4975: 4887: 108:   currentState = newState;
 5240:  5152:  5064: 4976: 4888: 109:   if (currentState === window.GameState.HOUSE) {
 5241:  5153:  5065: 4977: 4889: 110:     document.getElementById("upgrade-menu").style.display = "block";
 5242:  5154:  5066: 4978: 4890: 111:     document.getElementById("game-screen").style.display = "none";
 5243:  5155:  5067: 4979: 4891: 112:     const bestTimeText = document.getElementById("bestTimeText");
 5244:  5156:  5068: 4980: 4892: 113:     bestTimeText.textContent = player.bestTime === Infinity ? "Best Time: N/A"
 5245:  5157:  5069: 4981: 4893: 114:                                                            : `Best Time: ${player.bestTime.toFixed(2)}s`;
 5246:  5158:  5070: 4982: 4894: 115:     if (player.sledDamaged > 0) {
 5247:  5159:  5071: 4983: 4895: 116:       player.sledDamaged = 0;
 5248:  5160:  5072: 4984: 4896: 117:       console.log("Sled has been repaired at the house!");
 5249:  5161:  5073: 4985: 4897: 118:       showSledRepairedNotice();
 5250:  5162:  5074: 4986: 4898: 119:     }
 5251:  5163:  5075: 4987: 4899: 120:     if (!isFirstHouseEntry && (prevState === window.GameState.DOWNHILL || prevState === window.GameState.UPHILL)) {
 5252:  5164:  5076: 4988: 4900: 121:       if (typeof despawnAllAnimals === 'function') {
 5253:  5165:  5077: 4989: 4901: 122:         despawnAllAnimals();
 5254:  5166:  5078: 4990: 4902: 123:       }
 5255:  5167:  5079: 4991: 4903: 124:       if (loanAmount > 0) {
 5256:  5168:  5080: 4992: 4904: 125:         const deduction = Math.ceil(loanAmount * TWEAK.houseEntryLoanDeduction);
 5257:  5169:  5081: 4993: 4905: 126:         loanAmount += deduction;
 5258:  5170:  5082: 4994: 4906: 127:         updateLoanButton();
 5259:  5171:  5083: 4995: 4907: 128:         houseReEntry++;
 5260:  5172:  5084: 4996: 4908: 129:         console.log(`House entry fee: -$${deduction} (${TWEAK.houseEntryLoanDeduction * 100}% of $${loanAmount} loan)`);
 5261:  5173:  5085: 4997: 4909: 130:         console.log("House re-entry count:", houseReEntry);
 5262:  5174:  5086: 4998: 4910: 131:       }
 5263:  5175:  5087: 4999: 4911: 132:     }
 5264:  5176:  5088: 5000: 4912: 133:     if (isFirstHouseEntry) {
 5265:  5177:  5089: 5001: 4913: 134:       isFirstHouseEntry = false;
 5266:  5178:  5090: 5002: 4914: 135:     }
 5267:  5179:  5091: 5003: 4915: 136:     updateMoneyDisplay();
 5268:  5180:  5092: 5004: 4916: 137:   }
 5269:  5181:  5093: 5005: 4917: 138:   else if (currentState === window.GameState.DOWNHILL) {
 5270:  5182:  5094: 5006: 4918: 139:     document.getElementById("upgrade-menu").style.display = "none";
 5271:  5183:  5095: 5007: 4919: 140:     document.getElementById("game-screen").style.display = "block";
 5272:  5184:  5096: 5008: 4920: 141:     if (prevState === window.GameState.HOUSE) {
 5273:  5185:  5097: 5009: 4921: 142:       earlyFinish = false;
 5274:  5186:  5098: 5010: 4922: 143:       player.collisions = 0;
 5275:  5187:  5099: 5011: 4923: 144:       player.x = window.canvas.width / 2;
 5276:  5188:  5100: 5012: 4924: 145:       player.absY = mountainHeight - (player.height * 3);
 5277:  5189:  5101: 5013: 4925: 146:       player.velocityY = 0;
 5278:  5190:  5102: 5014: 4926: 147:       player.xVel = 0;
 5279:  5191:  5103: 5015: 4927: 148:       downhillStartTime = performance.now();
 5280:  5192:  5104: 5016: 4928: 149:       playerStartAbsY = player.absY;
 5281:  5193:  5105: 5017: 4929: 150:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
 5282:  5194:  5106: 5018: 4930: 151:     }
 5283:  5195:  5107: 5019: 4931: 152:     else if (prevState === window.GameState.UPHILL) {
 5284:  5196:  5108: 5020: 4932: 153:       player.velocityY = 0;
 5285:  5197:  5109: 5021: 4933: 154:       player.xVel = 0;
 5286:  5198:  5110: 5022: 4934: 155:       downhillStartTime = performance.now();
 5287:  5199:  5111: 5023: 4935: 156:       playerStartAbsY = player.absY;
 5288:  5200:  5112: 5024: 4936: 157:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
 5289:  5201:  5113: 5025: 4937: 158:     }
 5290:  5202:  5114: 5026: 4938: 159:   }
 5291:  5203:  5115: 5027: 4939: 160:   else if (currentState === window.GameState.UPHILL) {
 5292:  5204:  5116: 5028: 4940: 161:     document.getElementById("upgrade-menu").style.display = "none";
 5293:  5205:  5117: 5029: 4941: 162:     document.getElementById("game-screen").style.display = "block";
 5294:  5206:  5118: 5030: 4942: 163:     if (prevState === window.GameState.DOWNHILL) {
 5295:  5207:  5119: 5031: 4943: 164:       awardMoney();
 5296:  5208:  5120: 5032: 4944: 165:     }
 5297:  5209:  5121: 5033: 4945: 166:     player.xVel = 0;
 5298:  5210:  5122: 5034: 4946: 167:   }
 5299:  5211:  5123: 5035: 4947: 168:   console.log(`Game state changed: ${prevState} -> ${currentState}`);
 5300:  5212:  5124: 5036: 4948: 169: }
 5301:  5213:  5125: 5037: 4949: 170: // Create and launch the Phaser game with scale options for responsiveness
 5302:  5214:  5126: 5038: 4950: 171: var config = {
 5303:  5215:  5127: 5039: 4951: 172:   type: Phaser.AUTO,
 5304:  5216:  5128: 5040: 4952: 173:   parent: "game-screen",
 5305:  5217:  5129: 5041: 4953: 174:   width: window.canvas.width,  // Reference from global window.canvas
 5306:  5218:  5130: 5042: 4954: 175:   height: window.canvas.height, // Reference from global window.canvas
 5307:  5219:  5131: 5043: 4955: 176:   scene: MainScene,
 5308:  5220:  5132: 5044: 4956: 177:   backgroundColor: "#000000",
 5309:  5221:  5133: 5045: 4957: 178:   scale: {
 5310:  5222:  5134: 5046: 4958: 179:     mode: Phaser.Scale.FIT,
 5311:  5223:  5135: 5047: 4959: 180:     autoCenter: Phaser.Scale.CENTER_BOTH
 5312:  5224:  5136: 5048: 4960: 181:   }
 5313:  5225:  5137: 5049: 4961: 182: };
 5314:  5226:  5138: 5050: 4962: 183: var phaserGame = new Phaser.Game(config);
 5315:  5227:  5139: 5051: 4963: 184: // Make functions available globally
 5316:  5228:  5140: 5052: 4964: 185: window.changeState = changeState;
 5317:  5229:  5141: 5053: 4965: 186: window.currentState = currentState;
 5318:  5230:  5142: 5054: 4966: ````
 5319:  5231:  5143: 5055: `````
 5320:  5232:  5144: 5056: 
 5321:  5233:  5145: 5057: ## File: docs/CONTRIBUTING.md
 5322:  5234:  5146: 5058: `````markdown
 5323:  5235:  5147: 5059:   1: How to Contribute to SledHEAD
 5324:  5236:  5148: 5060:   2: =============================
 5325:  5237:  5149: 5061:   3: 
 5326:  5238:  5150: 5062:   4: Thank you for considering contributing to SledHEAD! Community involvement is crucial for making the game the best it can be. Whether you're fixing bugs, adding features, or improving documentation, your efforts are appreciated.
 5327:  5239:  5151: 5063:   5: 
 5328:  5240:  5152: 5064:   6: * * * * *
 5329:  5241:  5153: 5065:   7: 
 5330:  5242:  5154: 5066:   8: Key Resources
 5331:  5243:  5155: 5067:   9: -------------
 5332:  5244:  5156: 5068:  10: 
 5333:  5245:  5157: 5069:  11: -   SledHEAD README -- Learn about the game's core concepts and current features.
 5334:  5246:  5158: 5070:  12: 
 5335:  5247:  5159: 5071:  13: -   SledHEAD License -- Understand the licensing terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets).
 5336:  5248:  5160: 5072:  14: 
 5337:  5249:  5161: 5073:  15: -   Issues & Roadmap -- Check the GitHub Issues section for current tasks and future goals.
 5338:  5250:  5162: 5074:  16: 
 5339:  5251:  5163: 5075:  17: -   Discussions -- Engage with the community, ask questions, and brainstorm ideas.
 5340:  5252:  5164: 5076:  18: 
 5341:  5253:  5165: 5077:  19: * * * * *
 5342:  5254:  5166: 5078:  20: 
 5343:  5255:  5167: 5079:  21: Getting Started
 5344:  5256:  5168: 5080:  22: ---------------
 5345:  5257:  5169: 5081:  23: 
 5346:  5258:  5170: 5082:  24: 1.  Fork the Repository\
 5347:  5259:  5171: 5083:  25:     Create your own fork of the repository and clone it locally.
 5348:  5260:  5172: 5084:  26: 
 5349:  5261:  5173: 5085:  27: 1.  Install Dependencies\
 5350:  5262:  5174: 5086:  28:     SledHEAD is a web-based game built with JavaScript and Phaser.js. You'll just need a local HTTP server to test changes (like Python's http.server or Node's http-server).
 5351:  5263:  5175: 5087:  29: 
 5352:  5264:  5176: 5088:  30: 1.  Create a Branch\
 5353:  5265:  5177: 5089:  31:     Work in a feature-specific branch:
 5354:  5266:  5178: 5090:  32: 
 5355:  5267:  5179: 5091:  33: git  checkout  -b  feature/your-feature-name
 5356:  5268:  5180: 5092:  34: 
 5357:  5269:  5181: 5093:  35: * * * * *
 5358:  5270:  5182: 5094:  36: 
 5359:  5271:  5183: 5095:  37: Testing Your Contributions
 5360:  5272:  5184: 5096:  38: --------------------------
 5361:  5273:  5185: 5097:  39: 
 5362:  5274:  5186: 5098:  40: -   Manually playtest any gameplay changes and check for bugs.
 5363:  5275:  5187: 5099:  41: -   Ensure that UI elements render correctly and gameplay mechanics (like tricks, upgrades, and photography) behave as expected.
 5364:  5276:  5188: 5100:  42: -   Keep console errors to a minimum. Use `console.log` for temporary debugging but clean up before submitting.
 5365:  5277:  5189: 5101:  43: 
 5366:  5278:  5190: 5102:  44: * * * * *
 5367:  5279:  5191: 5103:  45: 
 5368:  5280:  5192: 5104:  46: Submitting Changes
 5369:  5281:  5193: 5105:  47: ------------------
 5370:  5282:  5194: 5106:  48: 
 5371:  5283:  5195: 5107:  49: 1.  **Code Style**
 5372:  5284:  5196: 5108:  50: 
 5373:  5285:  5197: 5109:  51:     -   Use **two spaces for indentation, not tabs**.
 5374:  5286:  5198: 5110:  52:     -   Write clean, readable code with comments where necessary.
 5375:  5287:  5199: 5111:  53:     -   Follow existing naming conventions (camelCase for variables, PascalCase for classes).
 5376:  5288:  5200: 5112:  54:     -   Avoid deeply nested logic---break it into functions for clarity.
 5377:  5289:  5201: 5113:  55: 2.  **Commit Messages**\
 5378:  5290:  5202: 5114:  56:     Write clear commit messages. For example:
 5379:  5291:  5203: 5115:  57: 
 5380:  5292:  5204: 5116:  58:     bash
 5381:  5293:  5205: 5117:  59: 
 5382:  5294:  5206: 5118:  60:     CopyEdit
 5383:  5295:  5207: 5119:  61: 
 5384:  5296:  5208: 5120:  62:     `git commit -m "Fix: Correct collision detection on uphill phase
 5385:  5297:  5209: 5121:  63: 
 5386:  5298:  5210: 5122:  64:     The collision detection logic for obstacles during the uphill phase
 5387:  5299:  5211: 5123:  65:     now accurately accounts for terrain height variations."`
 5388:  5300:  5212: 5124:  66: 
 5389:  5301:  5213: 5125:  67: 3.  **Pull Request (PR)**
 5390:  5302:  5214: 5126:  68: 
 5391:  5303:  5215: 5127:  69:     -   Open a PR against the `main` branch.
 5392:  5304:  5216: 5128:  70:     -   Include a clear description of what you've done and why.
 5393:  5305:  5217: 5129:  71:     -   If your change fixes a bug or closes an issue, reference it in the PR description (e.g., `Closes #42`).
 5394:  5306:  5218: 5130:  72:     -   Include screenshots or screen recordings if the change is visual.
 5395:  5307:  5219: 5131:  73:     -   Be prepared for feedback---collaboration is key!
 5396:  5308:  5220: 5132:  74: 
 5397:  5309:  5221: 5133:  75: * * * * *
 5398:  5310:  5222: 5134:  76: 
 5399:  5311:  5223: 5135:  77: Coding Conventions
 5400:  5312:  5224: 5136:  78: ------------------
 5401:  5313:  5225: 5137:  79: 
 5402:  5314:  5226: 5138:  80: -   **Consistency is key!** When in doubt, follow the style of existing code.
 5403:  5315:  5227: 5139:  81: -   Use **strict equality** (`===` and `!==`).
 5404:  5316:  5228: 5140:  82: -   Prefer `const` and `let` over `var`.
 5405:  5317:  5229: 5141:  83: -   Document functions with comments explaining inputs, outputs, and purpose.
 5406:  5318:  5230: 5142:  84: -   Keep functions focused and concise---single responsibility.
 5407:  5319:  5231: 5143:  85: -   Handle errors gracefully and avoid silent failures.
 5408:  5320:  5232: 5144:  86: -   Clean up `console.log` or temporary debug code before submitting.
 5409:  5321:  5233: 5145:  87: 
 5410:  5322:  5234: 5146:  88: * * * * *
 5411:  5323:  5235: 5147:  89: 
 5412:  5324:  5236: 5148:  90: Licensing of Contributions
 5413:  5325:  5237: 5149:  91: --------------------------
 5414:  5326:  5238: 5150:  92: 
 5415:  5327:  5239: 5151:  93: -   **All contributions become licensed under AGPL 3.0 (for code) and CC BY-NC-SA 4.0 (for assets)**, consistent with the project's dual-license model.
 5416:  5328:  5240: 5152:  94: -   By submitting a PR, you agree that your contributions may be included in SledHEAD and will be publicly available under these licenses.
 5417:  5329:  5241: 5153:  95: 
 5418:  5330:  5242: 5154:  96: * * * * *
 5419:  5331:  5243: 5155:  97: 
 5420:  5332:  5244: 5156:  98: Contributor License Agreement (CLA)
 5421:  5333:  5245: 5157:  99: --------------------------
 5422:  5334:  5246: 5158: 100: 
 5423:  5335:  5247: 5159: 101: By contributing to **SledHEAD**, you agree to the Contributor License Agreement (CLA), granting the project owner the rights to use, modify, and commercialize your contributions. You retain ownership, but your work must be licensed under the project's current terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets) and can be re-licensed for commercial purposes.
 5424:  5336:  5248: 5160: 102: 
 5425:  5337:  5249: 5161: 103: By submitting a pull request, you confirm that you have the right to contribute and agree to these terms. 
 5426:  5338:  5250: 5162: 104: 
 5427:  5339:  5251: 5163: 105: See https://github.com/truevox/SledHEAD/docs/CONTRIBUTOR_LICENSE_AGREEMENT.md for more details.
 5428:  5340:  5252: 5164: 106: 
 5429:  5341:  5253: 5165: 107: 
 5430:  5342:  5254: 5166: 108: * * * * *
 5431:  5343:  5255: 5167: 109: 
 5432:  5344:  5256: 5168: 110: Reporting Bugs & Requesting Features
 5433:  5345:  5257: 5169: 111: ------------------------------------
 5434:  5346:  5258: 5170: 112: 
 5435:  5347:  5259: 5171: 113: -   Open a **GitHub Issue** describing the problem or request.
 5436:  5348:  5260: 5172: 114: -   Be clear and detailed---steps to reproduce bugs, expected behavior, and screenshots help!
 5437:  5349:  5261: 5173: 115: -   Mark issues with appropriate labels (like `bug`, `enhancement`, or `question`).
 5438:  5350:  5262: 5174: 116: 
 5439:  5351:  5263: 5175: 117: * * * * *
 5440:  5352:  5264: 5176: 118: 
 5441:  5353:  5265: 5177: 119: Need Help?
 5442:  5354:  5266: 5178: 120: ----------
 5443:  5355:  5267: 5179: 121: 
 5444:  5356:  5268: 5180: 122: -   Join discussions on the GitHub repo.
 5445:  5357:  5269: 5181: 123: -   Open an issue for technical support or feature questions.
 5446:  5358:  5270: 5182: 124: -   Feedback, ideas, and constructive criticism are welcome!
 5447:  5359:  5271: 5183: 125: 
 5448:  5360:  5272: 5184: 126: * * * * *
 5449:  5361:  5273: 5185: 127: 
 5450:  5362:  5274: 5186: 128: Thank you for helping SledHEAD grow!
 5451:  5363:  5275: 5187: `````
 5452:  5364:  5276: 5188: 
 5453:  5365:  5277: 5189: ## File: docs/CONTRIBUTOR_LICENSE_AGREEMENT.md
 5454:  5366:  5278: 5190: `````markdown
 5455:  5367:  5279: 5191:  1: # SledHEAD Contributor License Agreement (CLA)
 5456:  5368:  5280: 5192:  2: 
 5457:  5369:  5281: 5193:  3: Thank you for your interest in contributing to SledHEAD.
 5458:  5370:  5282: 5194:  4: 
 5459:  5371:  5283: 5195:  5: By submitting a contribution, you agree to the following terms:
 5460:  5372:  5284: 5196:  6: 
 5461:  5373:  5285: 5197:  7: 1. **License Grant**  
 5462:  5374:  5286: 5198:  8:    You hereby grant Marvin Bentley II ("Project Owner") an **irrevocable, perpetual, worldwide, royalty-free license** to use, reproduce, modify, adapt, publish, translate, sublicense, distribute, and create derivative works of your contribution, in any medium, for any purpose, including commercial purposes.
 5463:  5375:  5287: 5199:  9: 
 5464:  5376:  5288: 5200: 10: 2. **Ownership**  
 5465:  5377:  5289: 5201: 11:    You retain ownership of your contribution. However, you agree that your contribution is licensed under the project's current open-source licenses (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets), and you grant the Project Owner the right to relicense your contribution for commercial, proprietary, or any other purposes as the Project Owner requres.
 5466:  5378:  5290: 5202: 12: 
 5467:  5379:  5291: 5203: 13: 3. **Warranties**  
 5468:  5380:  5292: 5204: 14:    - You confirm that you are legally entitled to submit the contribution and that it does not violate any third-party rights.  
 5469:  5381:  5293: 5205: 15:    - You confirm that the contribution is your original work, or you have obtained the necessary rights for its use.
 5470:  5382:  5294: 5206: 16: 
 5471:  5383:  5295: 5207: 17: 4. **Contribution Scope**  
 5472:  5384:  5296: 5208: 18:    This agreement applies to any future contributions you make to SledHEAD unless you explicitly state otherwise.
 5473:  5385:  5297: 5209: 19: 
 5474:  5386:  5298: 5210: 20: 5. **No Obligation to Use**  
 5475:  5387:  5299: 5211: 21:    The Project Owner is under no obligation to use, merge, or distribute your contributions.
 5476:  5388:  5300: 5212: 22: 
 5477:  5389:  5301: 5213: 23: ---
 5478:  5390:  5302: 5214: 24: 
 5479:  5391:  5303: 5215: 25: By submitting a contribution, you indicate that you have read, understood, and agree to the terms of this Contributor License Agreement.
 5480:  5392:  5304: 5216: 26: 
 5481:  5393:  5305: 5217: 27: ---
 5482:  5394:  5306: 5218: 28: 
 5483:  5395:  5307: 5219: 29: *Signed electronically via your submission of a Pull Request.*
 5484:  5396:  5308: 5220: `````
 5485:  5397:  5309: 5221: 
 5486:  5398:  5310: 5222: ## File: docs/LICENSE.md
 5487:  5399:  5311: 5223: `````markdown
 5488:  5400:  5312: 5224:   1: # SledHEAD Dual License Agreement
 5489:  5401:  5313: 5225:   2: Version 1.2 – March 2025
 5490:  5402:  5314: 5226:   3: 
 5491:  5403:  5315: 5227:   4: This License Agreement applies to SledHEAD (the "Game"), including its source code and assets, created by the original author Marvin Bentley II ("Licensor"). By copying, modifying, distributing, or otherwise using the Game or any of its components, you (the "Licensee") agree to the following terms:
 5492:  5404:  5316: 5228:   5: 
 5493:  5405:  5317: 5229:   6: ## 1. Definitions
 5494:  5406:  5318: 5230:   7: 
 5495:  5407:  5319: 5231:   8: * "Source Code": The software code of the Game, including all scripts, programs, and software files intended to produce the Game’s functionality.
 5496:  5408:  5320: 5232:   9: * "Assets": All non-code content in the Game, including but not limited to artwork, images, textures, models, sprites, music, sound effects, voice, dialogue, level designs, animations, and any other audiovisual or creative works included with the Game.
 5497:  5409:  5321: 5233:  10: * "Mod" or "Modification": Any derivative work that is based on or uses any portion of the Game’s Source Code or Assets, including add-ons, plugins, expansions, or fan-made content that extends or alters the Game.
 5498:  5410:  5322: 5234:  11: * "Commercial Use": Use of the Game or its components that is intended for or directed toward commercial advantage or monetary compensation. (For clarity: selling the Game or Mods, charging money for access to the Game or Mods, or monetizing the Game’s Assets as standalone products are considered Commercial Use. However, monetization of gameplay videos/streams is addressed separately in Section 4.)
 5499:  5411:  5323: 5235:  12: * "You" (or "Licensee"): Any individual or legal entity exercising the rights granted by this License (for example, a player, developer, or modder who uses the Game or its content).
 5500:  5412:  5324: 5236:  13: * "Licensor": The original author and copyright holder of SledHEAD.
 5501:  5413:  5325: 5237:  14: 
 5502:  5414:  5326: 5238:  15: ## 2. Open Source License for Source Code
 5503:  5415:  5327: 5239:  16: 
 5504:  5416:  5328: 5240:  17: The Source Code of SledHEAD is licensed to you under the terms of the GNU Affero General Public License, version 3 (AGPLv3), or (at your option) any later version of the AGPL published by the Free Software Foundation. This means:
 5505:  5417:  5329: 5241:  18: 
 5506:  5418:  5330: 5242:  19: * You may use, study, copy, modify, and distribute the Source Code freely, provided you comply with the AGPLv3 terms. In particular, if you distribute your modified version of the Source Code or if you make it available for use over a network (e.g. running a modified game server for others to play), you must make your Source Code modifications publicly available under the same license (AGPLv3).
 5507:  5419:  5331: 5243:  20: * The full text of the AGPLv3 is provided along with this agreement (usually in a file named AGPL-3.0.txt or similar). By accepting this License, you agree to abide by the conditions of AGPLv3 for the Game’s Source Code.
 5508:  5420:  5332: 5244:  21: * No Additional Restrictions on Source Code: Except as expressly stated in this Agreement, you may not impose any further restrictions on the exercise of the rights granted or affirmed under the AGPLv3 for the Source Code. (In other words, the Source Code remains free and open under AGPLv3 terms whenever it is distributed or deployed, unless a separate Commercial License is obtained as described in Section 6.)
 5509:  5421:  5333: 5245:  22: 
 5510:  5422:  5334: 5246:  23: ## 3. Creative Commons License for Assets
 5511:  5423:  5335: 5247:  24: 
 5512:  5424:  5336: 5248:  25: All Assets of SledHEAD (non-code content) are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). Under this license:
 5513:  5425:  5337: 5249:  26: 
 5514:  5426:  5338: 5250:  27: * You are free to:
 5515:  5427:  5339: 5251:  28:   * Share – copy and redistribute the Assets in any medium or format.
 5516:  5428:  5340: 5252:  29:   * Adapt – remix, transform, and build upon the Assets for any non-commercial purpose.
 5517:  5429:  5341: 5253:  30: * Attribution – You must give appropriate credit to the original author (see Section 5), provide a link to the CC BY-NC-SA 4.0 license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the Licensor endorses you or your use.
 5518:  5430:  5342: 5254:  31: * NonCommercial – You may not use the Assets for commercial purposes. (Using the Assets or any derivative of them to generate revenue or for any commercial advantage is prohibited unless you have obtained a separate Commercial License as per Section 6.)
 5519:  5431:  5343: 5255:  32: * ShareAlike – If you remix, transform, or build upon the Assets, you must distribute your contributions under the same license (CC BY-NC-SA 4.0) or a license that is more permissive. “More permissive” means any license that grants equal or greater rights to the public than CC BY-NC-SA (for example, you may choose to release your own original derivative Assets under CC BY-SA or CC BY, which would allow commercial use or omit the ShareAlike requirement, but you cannot apply a more restrictive license or make the assets wholly proprietary).
 5520:  5432:  5344: 5256:  33: * The full text of the CC BY-NC-SA 4.0 license is provided with this agreement (or accessible via the Creative Commons website). By using the Game’s Assets, you agree to the terms of CC BY-NC-SA 4.0.
 5521:  5433:  5345: 5257:  34: * No Commercial Exploitation of Assets: For clarity, you cannot sell, license, or otherwise commercially exploit the Game’s Assets (original or modified) on their own or as part of a product, except under a separate Commercial License (Section 6). For example, you cannot charge money for a soundtrack that includes the Game’s music, or include the Game’s art in a paid product, without permission.
 5522:  5434:  5346: 5258:  35: 
 5523:  5435:  5347: 5259:  36: ## 4. Permission for Videos, Streaming, and Screenshots
 5524:  5436:  5348: 5260:  37: 
 5525:  5437:  5349: 5261:  38: The Licensor explicitly grants permission to all users to capture, use, and share audiovisual content from the Game (including gameplay videos, streams, screenshots, and similar content), even if monetized, without needing any additional license or permission, as long as such use does not misrepresent the origin of the Game. This means:
 5526:  5438:  5350: 5262:  39: 
 5527:  5439:  5351: 5263:  40: * You may stream or record gameplay on platforms like Twitch, YouTube, etc., and you may monetize these videos/streams (for example, through ads, sponsorships, or donations). This use is allowed and considered non-commercial with respect to the Game’s Assets because it is promotional/fan content by the community. The NonCommercial restriction in Section 3 is waived for this specific type of content creation.
 5528:  5440:  5352: 5264:  41: * You do not need to ask the Licensor for permission to create let’s play videos, reviews, or live streams of SledHEAD. This is encouraged as part of community engagement. Attribution (such as naming the Game) in the video/stream description or verbally is appreciated but not strictly required beyond what the platform norms are, since the content itself usually makes it clear it’s SledHEAD. (However, you still must not claim to be the creator of the Game.)
 5529:  5441:  5353: 5265:  42: * This permission for videos/streams does not grant you the right to extract the Assets and use them separately in other commercial products (Section 3’s NonCommercial rule still applies to the Assets themselves). It only covers the use of recorded or displayed in-game content as part of video/stream content. For example, using a game’s music as background of an unrelated commercial video would not be covered by this clause, but showing the game’s music as it plays during gameplay footage is fine.
 5530:  5442:  5354: 5266:  43: 
 5531:  5443:  5355: 5267:  44: ## 5. Attribution Requirement
 5532:  5444:  5356: 5268:  45: 
 5533:  5445:  5357: 5269:  46: You must give appropriate credit to the original author (Licensor) when you distribute or publicly use the Game (or any substantial portion of it, including Mods). This is a condition of the CC BY-NC-SA license for Assets and is hereby made a condition of this overall license. The attribution should be placed in a manner appropriate to the medium:
 5534:  5446:  5358: 5270:  47: 
 5535:  5447:  5359: 5271:  48: * If you distribute the Game in unmodified form, include the original credits (which should already list the author) and license information. Typically, the Game already contains an in-game credits section or documentation listing the author and contributors — retain that.
 5536:  5448:  5360: 5272:  49: * If you create a Mod or a fork of the Game, you must credit SledHEAD and the original author somewhere in your project. For example, in an “About” menu, “Credits” screen, README file, or documentation for your Mod, include a notice such as: “This project is based on SledHEAD, originally created by Marvin Bentley II. SledHEAD is © 2024 Marvin Bentley II and is licensed under AGPLv3 (code) and CC BY-NC-SA 4.0 (assets).” Adjust the wording as appropriate, but it should be reasonably prominent, as appropriate for the medium.
 5537:  5449:  5361: 5273:  50: * If you use parts of the Source Code in another project, you must keep the copyright and license notices in those source files per AGPL requirements. Additionally, an attribution in your project’s documentation or credits to the SledHEAD project is required.
 5538:  5450:  5362: 5274:  51: * The attribution requirement is not intended to be burdensome: it’s mainly to ensure the original creators are acknowledged. A single mention in a credits section or README is typically sufficient, as long as it's accessible to users of your product or Mod.
 5539:  5451:  5363: 5275:  52: 
 5540:  5452:  5364: 5276:  53: ## 6. Modding and Derivative Works
 5541:  5453:  5365: 5277:  54: 
 5542:  5454:  5366: 5278:  55: SledHEAD is mod-friendly and open to community contributions, under the following conditions:
 5543:  5455:  5367: 5279:  56: 
 5544:  5456:  5368: 5280:  57: * **Mods - Source Code:** If you create a Mod that includes or is based on the Game’s Source Code, the Mod’s source code must be released under the AGPLv3 (same as the Game) or an even more permissive open-source license. More permissive licenses include, for example, GNU GPLv3, MIT, Apache 2.0, etc., which do not impose additional restrictions beyond AGPL. This ensures that anyone who plays or uses your Mod has the same rights to obtain and modify the source. You cannot make a closed-source mod using the Game’s code without a separate Commercial License (see Section 7).
 5545:  5457:  5369: 5281:  58: * **Mods - Assets:** If your Mod includes or modifies any of the Game’s Assets, then all such Assets in your Mod must be licensed under CC BY-NC-SA 4.0 (the same license as the base game assets) or a more permissive license. “More permissive” in this context could be, for example, CC BY-SA 4.0 (which allows commercial use but still requires ShareAlike) or CC BY 4.0 (which allows commercial use and no ShareAlike). You may choose a more permissive license for your original assets if you want to allow broader use, but you must at least allow the same scope of use that CC BY-NC-SA permits. You cannot put additional restrictions on derivatives of the Game’s Assets beyond CC BY-NC-SA.
 5546:  5458:  5370: 5282:  59: * **No circumvention via Mods:** You may not create a Mod or derivative work that is essentially a way to evade the NonCommercial restriction on the original Assets. For example, you can’t repackage a level of SledHEAD as a “mod” and sell it, claiming the new level’s art is under a different license. Any part of a Mod derived from original Assets inherits the NonCommercial restriction.
 5547:  5459:  5371: 5283:  60: * **Paid Mods:** SledHEAD’s open licenses are designed such that Mods are freely shareable and open. While charging money for a Mod is strongly discouraged under this license scheme, we acknowledge it can happen. If you choose to sell or paywall a Mod, you do so at your own risk under the license terms:
 5548:  5460:  5372: 5284:  61:   * The Mod’s source code must still be AGPLv3 (or open-source), meaning anyone who obtains the Mod (even by purchasing it) must have access to the source and the right to redistribute it. Practically, this means once one person has bought your Mod, they have the legal right to share the code with others for free. You cannot revoke that right, so a paywalled open-source mod is of limited enforceability (the “paywall” is more of a donation or early access mechanism, not a true sale of exclusive rights).
 5549:  5461:  5373: 5285:  62:   * Any of the Mod’s assets that derive from SledHEAD Assets carry the NonCommercial clause. This means you technically cannot charge for those assets or any product containing them. If your Mod contains only your own original assets and you license them under a more permissive license (such as CC BY-SA or even a proprietary license you own), you have more leeway to charge for the Mod. However, by including SledHEAD’s original game content or requiring the Game to run, your Mod is still a derivative work of the Game as a whole, and thus selling it without the Licensor’s permission could violate the spirit of the NonCommercial clause.
 5550:  5462:  5374: 5286:  63:   * In summary: If you want to monetize a Mod, you should seek a Commercial License from the Licensor (see Section 7) to cover that, or ensure that your Mod is completely your own independent work and doesn’t include NonCommercial content. Otherwise, anyone is legally free to redistribute your Mod for non-commercial purposes (or as allowed by whatever license you chose) without paying, and the Licensor reserves the right to enforce the NonCommercial clause if needed.
 5551:  5463:  5375: 5287:  64: * **Mods Must Credit Original:** As noted in Section 5, Mods should credit SledHEAD and the original author. Making mods open-source and crediting the base game helps build a healthy community and is a condition of using the Game’s content.
 5552:  5464:  5376: 5288:  65: * **Upstream Contributions:** If you make improvements or fixes to the base Game’s Source Code (as opposed to separate mods), you are encouraged to contribute them back to the main project. You can do this by submitting patches or pull requests to the original repository. Note that by contributing, you agree that your contribution will be licensed under the same terms as this License (so it remains AGPL for code and CC BY-NC-SA for any assets you contribute, unless otherwise agreed). The Licensor may ask you to sign a contributor agreement (see Section 9) to clarify licensing of contributions.
 5553:  5465:  5377: 5289:  66: 
 5554:  5466:  5378: 5290:  67: ## 7. Commercial License Option
 5555:  5467:  5379: 5291:  68: 
 5556:  5468:  5380: 5292:  69: The Licensor offers the possibility of a separate Commercial License for parties interested in using SledHEAD in ways not permitted by the above open licenses (AGPL and CC BY-NC-SA). This could apply if, for example, you want to: distribute the game in a proprietary (closed-source) manner, use the Assets commercially, include SledHEAD in a commercial product, or otherwise not comply with AGPL/CC BY-NC-SA terms. The following terms govern the Commercial License option:
 5557:  5469:  5381: 5293:  70: 
 5558:  5470:  5382: 5294:  71: * **By Request:** You must contact the Licensor to request a Commercial License. Terms (including scope, duration, and fees) are negotiable on a case-by-case basis. For instance, the Licensor may offer a one-time purchase license, a revenue-sharing agreement, or a subscription model, depending on the nature of the use.
 5559:  5471:  5383: 5295:  72: * **No Guaranteed Approval:** The Licensor has sole discretion to decide whether or not to grant a Commercial License to any requesting party. Simply requesting a Commercial License does not guarantee you will receive one. The Licensor may decline for any reason or require certain conditions.
 5560:  5472:  5384: 5296:  73: * **Override of Open Terms:** A duly granted Commercial License will override or modify the AGPL and CC BY-NC-SA terms for the party to whom it is granted, as specified in that license agreement. For example, a Commercial License may allow you to keep your source code modifications proprietary, or to use the Assets in a commercial game, notwithstanding Sections 2 and 3. The exact permissions and exceptions will be written in that separate agreement. Unless and until you have a signed Commercial License, you are bound by the AGPL and CC BY-NC-SA terms described in this document.
 5561:  5473:  5385: 5297:  74: * **Closed Source Allowed with Commercial License:** Under a Commercial License, the Licensor may permit you to create a closed-source derivative or include SledHEAD code in a larger proprietary project. This is an exception to the copyleft requirement, granted only through the Commercial License.
 5562:  5474:  5386: 5298:  75: * **Written Agreement:** Any Commercial License will be provided in writing (which may be a separate contract or license document). It will detail the rights granted, any limitations, and the financial terms. You will likely be required to prominently credit the original author even in commercial use, unless otherwise agreed.
 5563:  5475:  5387: 5299:  76: 
 5564:  5476:  5388: 5300:  77: ## 8. Reservation of Rights and Future Relicensing
 5565:  5477:  5389: 5301:  78: 
 5566:  5478:  5390: 5302:  79: * **Ownership:** The Licensor (original author) retains all rights, title, and interest in SledHEAD and its Source Code and Assets, except for the licenses expressly granted to you under this Agreement. No trademark rights are granted (the name SledHEAD is not necessarily covered by this license—separate permissions may be needed to use the name or logos in commercial contexts).
 5567:  5479:  5391: 5303:  80: * **Right to Relicense:** The Licensor reserves the right to relicense or release parts or all of the Game under different terms in the future, including more permissive open-source licenses. For example, the Licensor may later decide to release certain Assets under a license like CC BY 4.0 (which would allow commercial use) or even dedicate some components to the public domain. Similarly, future versions of the Source Code might be released under a license like MIT or GPL, etc., at the Licensor’s discretion.
 5568:  5480:  5392: 5304:  81: * **Effect on Existing License:** Any such re-licensing by the Licensor in the future will not retroactively revoke the rights you've obtained under this Agreement. (For example, if you received the game under AGPL/CC BY-NC-SA, that specific release is still under those terms for you.) However, the Licensor may offer upgraded license terms for future versions or for specific components, which you can opt to use under those new terms.
 5569:  5481:  5393: 5305:  82: * **Contributions from Others:** If the project receives contributions from other developers (community contributions), the Licensor will ensure that those contributions are either made under a contributor agreement or appropriate terms such that the Licensor can include them in future releases. This is to maintain the ability to relicense if needed. (See Section 9 about contributor agreements.)
 5570:  5482:  5394: 5306:  83: * **No Obligation to Future Licensing:** Nothing in this clause guarantees that the Licensor will release a more permissive version, only that it’s a possibility. Users and contributors should be aware that license terms might be adjusted in future releases, but any such change will be clearly communicated and, if necessary, consent from contributors will be obtained.
 5571:  5483:  5395: 5307:  84: 
 5572:  5484:  5396: 5308:  85: ## 9. Contributor License Agreement (CLA) (for external contributors)
 5573:  5485:  5397: 5309:  86: 
 5574:  5486:  5398: 5310:  87: At present (initial release), all code and assets in SledHEAD are authored by the original Licensor. If you wish to contribute to the project (e.g., by submitting code or asset improvements), the Licensor may ask you to sign a Contributor License Agreement. A CLA typically confirms that: (a) you have the right to contribute what you send, (b) you grant the Licensor permission to use and relicense your contribution under this project’s license and potentially other licenses in the future, and (c) you understand your contribution is provided under the same open license to all users.
 5575:  5487:  5399: 5311:  88: 
 5576:  5488:  5400: 5312:  89: * **Necessity of CLA:** The CLA is intended to make future license changes or commercial licensing of the project smoother, by ensuring all contributors agree on how their contributions can be used. If you do not sign such an agreement, the Licensor might not be able to accept your contribution, especially if it’s significant, because it could complicate the ability to relicense or offer commercial terms later.
 5577:  5489:  5401: 5313:  90: * **Timing:** You generally won’t need to sign a CLA until you are about to make the first contribution that will be merged into the project. Simply using or modding the game doesn’t require a CLA. It’s only for when you contribute code or assets back to the official project. The Licensor may publish the CLA text and a process (e.g., an online sign-off) when the project starts accepting outside contributions.
 5578:  5490:  5402: 5314:  91: * **Contributor Rights:** Even after signing a CLA, you (as a contributor) still retain copyright to your contributions and you can reuse your contributed code elsewhere. The CLA just gives the Licensor a broad right to include your work in SledHEAD and relicense as needed (for instance, if in the future SledHEAD moves to a different license or a commercial dual-license model, your contribution can be included).
 5579:  5491:  5403: 5315:  92: * **No CLA at Initial Release:** If you are simply downloading or using the game, this section doesn’t affect you. It’s informational in case the project grows with community help. The Licensor will announce when a CLA becomes required (likely before accepting the first non-trivial external commit).
 5580:  5492:  5404: 5316:  93: 
 5581:  5493:  5405: 5317:  94: ## 10. Disclaimer of Warranty
 5582:  5494:  5406: 5318:  95: 
 5583:  5495:  5407: 5319:  96: THE GAME (INCLUDING SOURCE CODE AND ASSETS) IS PROVIDED "AS IS" AND WITHOUT WARRANTY OF ANY KIND. To the fullest extent permitted by law, the Licensor disclaims all warranties, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement. You accept all risk as to the quality and performance of the Game. Should the Game prove defective, you assume the cost of all necessary servicing, repair, or correction. No oral or written information or advice provided by the Licensor shall create any warranty. (This disclaimer is in line with Section 15 of the AGPLv3 and Section 5 of CC BY-NC-SA 4.0.)
 5584:  5496:  5408: 5320:  97: 
 5585:  5497:  5409: 5321:  98: ## 11. Limitation of Liability
 5586:  5498:  5410: 5322:  99: 
 5587:  5499:  5411: 5323: 100: Under no circumstances and under no legal theory (including, without limitation, tort (including negligence), contract, or otherwise) shall the Licensor, or anyone who has contributed to the Game, be liable to you for any direct, indirect, incidental, consequential, special, or exemplary damages arising out of or relating to this License or the use of the Game, even if the Licensor has been advised of the possibility of such damages. In jurisdictions that do not allow the exclusion or limitation of certain damages, the Licensor’s liability shall be limited to the minimum extent permitted by law. You acknowledge that the Licensor is not liable for how you use the Game or Mods, or any outcomes of using it (for example, no liability for loss of data, loss of profits, or legal issues you might incur by violating this Agreement).
 5588:  5500:  5412: 5324: 101: 
 5589:  5501:  5413: 5325: 102: ## 12. General
 5590:  5502:  5414: 5326: 103: 
 5591:  5503:  5415: 5327: 104: * **Severability:** If any provision of this License is held to be unenforceable or invalid by a court of competent jurisdiction, that provision will be modified to the minimum extent necessary to make it enforceable (or severed if necessary), and the rest of the License will remain in effect.
 5592:  5504:  5416: 5328: 105: * **No Endorsement:** Nothing in this License gives you rights to use the name, logos, or trademarks of SledHEAD or the Licensor for promotional purposes (aside from factual attribution as required). You cannot imply that your Mod or product is endorsed by the original author without separate permission.
 5593:  5505:  5417: 5329: 106: * **License Acceptance:** By using the Game (or any of its Source Code or Assets), you indicate your acceptance of this License. If you do not agree to these terms, you do not have permission to use the Game or its contents.
 5594:  5506:  5418: 5330: 107: * **Copyright Notice:** © 2024 Marvin Bentley II. All rights reserved, except as explicitly granted by this License.
 5595:  5507:  5419: 5331: `````
 5596:  5508:  5420: 5332: 
 5597:  5509:  5421: 5333: ## File: js/mobs/mountainlion.js
 5598:  5510:  5422: 5334: `````javascript
 5599:  5511:  5423: 5335:  1: /* mountainlion.js - Mountain Lion Animal Module
 5600:  5512:  5424: 5336:  2: // This module defines the mountain lion characteristics for the wildlife simulation.
 5601:  5513:  5425: 5337:  3: // It registers itself with wildlife.js by calling registerAnimalType().
 5602:  5514:  5426: 5338:  4: // Drawn in a style consistent with our bear and bird modules, with a pretty kitty flair.
 5603:  5515:  5427: 5339:  5: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 5604:  5516:  5428: 5340:  6: */
 5605:  5517:  5429: 5341:  7: (function() {
 5606:  5518:  5430: 5342:  8:     // Helper function to draw a rectangle at an angle, centered at (cx, cy)
 5607:  5519:  5431: 5343:  9:     function drawRectAtAngle(ctx, cx, cy, width, height, angleDeg, fillStyle) {
 5608:  5520:  5432: 5344: 10:         let rad = angleDeg * Math.PI / 180;
 5609:  5521:  5433: 5345: 11:         ctx.save();
 5610:  5522:  5434: 5346: 12:         ctx.translate(cx, cy);
 5611:  5523:  5435: 5347: 13:         ctx.rotate(rad);
 5612:  5524:  5436: 5348: 14:         ctx.fillStyle = fillStyle;
 5613:  5525:  5437: 5349: 15:         ctx.fillRect(-width / 2, -height / 2, width, height);
 5614:  5526:  5438: 5350: 16:         ctx.restore();
 5615:  5527:  5439: 5351: 17:     }
 5616:  5528:  5440: 5352: 18:     var mountainLionData = {
 5617:  5529:  5441: 5353: 19:         type: "mountainlion",
 5618:  5530:  5442: 5354: 20:         spawnProbability: 2.0, // Very high spawn chance
 5619:  5531:  5443: 5355: 21:         width: 50,
 5620:  5532:  5444: 5356: 22:         height: 30,
 5621:  5533:  5445: 5357: 23:         detectionRadius: 60,
 5622:  5534:  5446: 5358: 24:         speed: 10,
 5623:  5535:  5447: 5359: 25:         basePhotoBonus: 15, // Good bonus for a pretty kitty
 5624:  5536:  5448: 5360: 26:         color: "#F9E79F",   // A soft golden color
 5625:  5537:  5449: 5361: 27:         spawningBiomes: [
 5626:  5538:  5450: 5362: 28:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
 5627:  5539:  5451: 5363: 29:         ],
 5628:  5540:  5452: 5364: 30:         customUpdate: null,
 5629:  5541:  5453: 5365: 31:         customDraw: function(animal, screenY, ctx) {
 5630:  5542:  5454: 5366: 32:             // Draw the body
 5631:  5543:  5455: 5367: 33:             ctx.fillStyle = animal.color;
 5632:  5544:  5456: 5368: 34:             ctx.fillRect(
 5633:  5545:  5457: 5369: 35:                 animal.x - animal.width / 2,
 5634:  5546:  5458: 5370: 36:                 screenY - animal.height / 2,
 5635:  5547:  5459: 5371: 37:                 animal.width,
 5636:  5548:  5460: 5372: 38:                 animal.height
 5637:  5549:  5461: 5373: 39:             );
 5638:  5550:  5462: 5374: 40:             // Draw left ear as a triangle
 5639:  5551:  5463: 5375: 41:             ctx.beginPath();
 5640:  5552:  5464: 5376: 42:             ctx.moveTo(animal.x - animal.width / 4, screenY - animal.height / 2);
 5641:  5553:  5465: 5377: 43:             ctx.lineTo(animal.x - animal.width / 4 - 10, screenY - animal.height / 2 - 15);
 5642:  5554:  5466: 5378: 44:             ctx.lineTo(animal.x - animal.width / 4 + 10, screenY - animal.height / 2 - 15);
 5643:  5555:  5467: 5379: 45:             ctx.closePath();
 5644:  5556:  5468: 5380: 46:             ctx.fillStyle = "#000000";
 5645:  5557:  5469: 5381: 47:             ctx.fill();
 5646:  5558:  5470: 5382: 48:             // Draw right ear
 5647:  5559:  5471: 5383: 49:             ctx.beginPath();
 5648:  5560:  5472: 5384: 50:             ctx.moveTo(animal.x + animal.width / 4, screenY - animal.height / 2);
 5649:  5561:  5473: 5385: 51:             ctx.lineTo(animal.x + animal.width / 4 - 10, screenY - animal.height / 2 - 15);
 5650:  5562:  5474: 5386: 52:             ctx.lineTo(animal.x + animal.width / 4 + 10, screenY - animal.height / 2 - 15);
 5651:  5563:  5475: 5387: 53:             ctx.closePath();
 5652:  5564:  5476: 5388: 54:             ctx.fill();
 5653:  5565:  5477: 5389: 55:             // Draw a tail using an angled rectangle
 5654:  5566:  5478: 5390: 56:             let tailPivotX = animal.x + animal.width / 2;
 5655:  5567:  5479: 5391: 57:             let tailPivotY = screenY + animal.height / 2;
 5656:  5568:  5480: 5392: 58:             let tailAngle = -45;
 5657:  5569:  5481: 5393: 59:             let tailWidth = 20;
 5658:  5570:  5482: 5394: 60:             let tailHeight = 8;
 5659:  5571:  5483: 5395: 61:             drawRectAtAngle(ctx, 
 5660:  5572:  5484: 5396: 62:                 tailPivotX + (tailWidth / 2) * Math.cos(tailAngle * Math.PI / 180),
 5661:  5573:  5485: 5397: 63:                 tailPivotY + (tailWidth / 2) * Math.sin(tailAngle * Math.PI / 180),
 5662:  5574:  5486: 5398: 64:                 tailWidth, 
 5663:  5575:  5487: 5399: 65:                 tailHeight, 
 5664:  5576:  5488: 5400: 66:                 tailAngle, 
 5665:  5577:  5489: 5401: 67:                 animal.color
 5666:  5578:  5490: 5402: 68:             );
 5667:  5579:  5491: 5403: 69:             // Altitude indicator
 5668:  5580:  5492: 5404: 70:             let t = 1 - (animal.altitude / 100);
 5669:  5581:  5493: 5405: 71:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 5670:  5582:  5494: 5406: 72:             ctx.fillStyle = altitudeColor;
 5671:  5583:  5495: 5407: 73:             ctx.fillRect(
 5672:  5584:  5496: 5408: 74:                 animal.x + animal.width / 2 + 5,
 5673:  5585:  5497: 5409: 75:                 screenY - 5,
 5674:  5586:  5498: 5410: 76:                 10,
 5675:  5587:  5499: 5411: 77:                 10
 5676:  5588:  5500: 5412: 78:             );
 5677:  5589:  5501: 5413: 79:         }
 5678:  5590:  5502: 5414: 80:     };
 5679:  5591:  5503: 5415: 81:     if (typeof registerAnimalType === 'function') {
 5680:  5592:  5504: 5416: 82:         registerAnimalType(mountainLionData);
 5681:  5593:  5505: 5417: 83:     } else {
 5682:  5594:  5506: 5418: 84:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
 5683:  5595:  5507: 5419: 85:     }
 5684:  5596:  5508: 5420: 86: })();
 5685:  5597:  5509: 5421: `````
 5686:  5598:  5510: 5422: 
 5687:  5599:  5511: 5423: ## File: js/camera.js
 5688:  5600:  5512: 5424: `````javascript
 5689:  5601:  5513: 5425:  1: // camera.js
 5690:  5602:  5514: 5426:  2: // This file is responsible for handling the photography
 5691:  5603:  5515: 5427:  3: // mechanics.
 5692:  5604:  5516: 5428:  4: // Global variables for photo system
 5693:  5605:  5517: 5429:  5: var lastPhotoTime = 0;
 5694:  5606:  5518: 5430:  6: // ------------------- Photo (Critter) Minigame Logic -------------------
 5695:  5607:  5519: 5431:  7: // Handles taking a photo of an animal when conditions are met.
 5696:  5608:  5520: 5432:  8: function takePhoto() {
 5697:  5609:  5521: 5433:  9:   let now = Date.now();
 5698:  5610:  5522: 5434: 10:   if (now - lastPhotoTime < TWEAK.photoCooldown) return; // Enforce cooldown
 5699:  5611:  5523: 5435: 11:   if (!activeAnimal || !isAnimalInsideCone(activeAnimal)) return;
 5700:  5612:  5524: 5436: 12:   lastPhotoTime = now;
 5701:  5613:  5525: 5437: 13:   let baseValue = TWEAK.basePhotoValue;
 5702:  5614:  5526: 5438: 14:   // Altitude Bonus: exponential falloff within 50 units.
 5703:  5615:  5527: 5439: 15:   let diffAlt = Math.abs(player.altitudeLine - activeAnimal.altitude);
 5704:  5616:  5528: 5440: 16:   let altitudeMatchBonus;
 5705:  5617:  5529: 5441: 17:   if (diffAlt > 50) {
 5706:  5618:  5530: 5442: 18:     altitudeMatchBonus = 1;
 5707:  5619:  5531: 5443: 19:   } else {
 5708:  5620:  5532: 5444: 20:     altitudeMatchBonus = 1 + (TWEAK.altitudeMatchMultiplier - 1) * Math.exp(-diffAlt / 15);
 5709:  5621:  5533: 5445: 21:   }
 5710:  5622:  5534: 5446: 22:   // Center Bonus: based on the angle difference between camera direction and animal.
 5711:  5623:  5535: 5447: 23:   let animalAngle = Math.atan2(activeAnimal.y - player.absY, activeAnimal.x - player.x) * (180 / Math.PI);
 5712:  5624:  5536: 5448: 24:   if (animalAngle < 0) animalAngle += 360;
 5713:  5625:  5537: 5449: 25:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
 5714:  5626:  5538: 5450: 26:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
 5715:  5627:  5539: 5451: 27:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
 5716:  5628:  5540: 5452: 28:   let sweetSpotPercentage = 0.10 + (playerUpgrades.optimalOptics * 0.01);
 5717:  5629:  5541: 5453: 29:   let sweetSpotAngle = coneAngle * sweetSpotPercentage;
 5718:  5630:  5542: 5454: 30:   let centerBonus;
 5719:  5631:  5543: 5455: 31:   if (diffAngle <= sweetSpotAngle) {
 5720:  5632:  5544: 5456: 32:     centerBonus = TWEAK.centerPOVMultiplier;
 5721:  5633:  5545: 5457: 33:   } else if (diffAngle < coneAngle / 2) {
 5722:  5634:  5546: 5458: 34:     let factor = (diffAngle - sweetSpotAngle) / (coneAngle / 2 - sweetSpotAngle);
 5723:  5635:  5547: 5459: 35:     centerBonus = 1 + (TWEAK.centerPOVMultiplier - 1) * Math.exp(-factor * 3);
 5724:  5636:  5548: 5460: 36:   } else {
 5725:  5637:  5549: 5461: 37:     centerBonus = 1;
 5726:  5638:  5550: 5462: 38:   }
 5727:  5639:  5551: 5463: 39:   // Movement Bonus and Animal Type Multiplier:
 5728:  5640:  5552: 5464: 40:   let movementBonus = activeAnimal.state !== "sitting" ? TWEAK.fleeingAnimalMultiplier : 1;
 5729:  5641:  5553: 5465: 41:   let animalTypeMultiplier = activeAnimal.type === "bear" ? TWEAK.bearMultiplier : TWEAK.birdMultiplier;
 5730:  5642:  5554: 5466: 42:   let repeatPenalty = activeAnimal.hasBeenPhotographed ? TWEAK.repeatPhotoPenalty : 1;
 5731:  5643:  5555: 5467: 43:   let totalMoney = Math.floor(baseValue * altitudeMatchBonus * centerBonus * movementBonus * animalTypeMultiplier * repeatPenalty);
 5732:  5644:  5556: 5468: 44:   player.money += totalMoney;
 5733:  5645:  5557: 5469: 45:   showMoneyGain(totalMoney, `(📸 ${activeAnimal.type})`);
 5734:  5646:  5558: 5470: 46:   addFloatingText(`+$${totalMoney} 📸`, player.x, player.absY);
 5735:  5647:  5559: 5471: 47:   console.log(`Captured ${activeAnimal.type}! Calculation details: Base=$${baseValue}, AltitudeBonus=${altitudeMatchBonus.toFixed(2)}, CenterBonus=${centerBonus.toFixed(2)}, MovementBonus=${movementBonus.toFixed(2)}, AnimalTypeMultiplier=${animalTypeMultiplier}, RepeatPenalty=${repeatPenalty}, Total=$${totalMoney}.`);
 5736:  5648:  5560: 5472: 48:   // After taking a photo, animal should always flee
 5737:  5649:  5561: 5473: 49:   if (activeAnimal.state === "sitting") {
 5738:  5650:  5562: 5474: 50:     console.log(`Animal (${activeAnimal.type}) startled by camera - changing state from sitting to fleeing`);
 5739:  5651:  5563: 5475: 51:     activeAnimal.state = "fleeing";
 5740:  5652:  5564: 5476: 52:     activeAnimal.fleeingLogOnce = false; // Reset so we get the fleeing log message
 5741:  5653:  5565: 5477: 53:   }
 5742:  5654:  5566: 5478: 54:   activeAnimal.hasBeenPhotographed = true;
 5743:  5655:  5567: 5479: 55: }
 5744:  5656:  5568: 5480: 56: // Check if the animal is inside the camera cone
 5745:  5657:  5569: 5481: 57: function isAnimalInsideCone(animal) {
 5746:  5658:  5570: 5482: 58:   // Distance check
 5747:  5659:  5571: 5483: 59:   let dx = animal.x - player.x;
 5748:  5660:  5572: 5484: 60:   let dy = animal.y - player.absY;
 5749:  5661:  5573: 5485: 61:   let distanceSquared = dx * dx + dy * dy;
 5750:  5662:  5574: 5486: 62:   let maxDistance = TWEAK.maxAnimalPhotoDistance;
 5751:  5663:  5575: 5487: 63:   if (distanceSquared > maxDistance * maxDistance) return false;
 5752:  5664:  5576: 5488: 64:   // Angle check
 5753:  5665:  5577: 5489: 65:   let animalAngle = Math.atan2(dy, dx) * (180 / Math.PI);
 5754:  5666:  5578: 5490: 66:   if (animalAngle < 0) animalAngle += 360;
 5755:  5667:  5579: 5491: 67:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
 5756:  5668:  5580: 5492: 68:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
 5757:  5669:  5581: 5493: 69:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
 5758:  5670:  5582: 5494: 70:   return diffAngle <= coneAngle / 2;
 5759:  5671:  5583: 5495: 71: }
 5760:  5672:  5584: 5496: `````
 5761:  5673:  5585: 5497: 
 5762:  5674:  5586: 5498: ## File: js/jumpsled.js
 5763:  5675:  5587: 5499: `````javascript
 5764:  5676:  5588: 5500:  1: // jumpsled.js
 5765:  5677:  5589: 5501:  2: // This file contains all jump-related functions for SledHEAD
 5766:  5678:  5590: 5502:  3: function onPlayerJumpStart() {
 5767:  5679:  5591: 5503:  4:   player.jumpStartTime = performance.now();
 5768:  5680:  5592: 5504:  5:   player.jumpStartY = player.absY;
 5769:  5681:  5593: 5505:  6:   player.jumpPeakY = player.absY;
 5770:  5682:  5594: 5506:  7:   console.log("Jump initiated at Y:", player.jumpStartY.toFixed(1));
 5771:  5683:  5595: 5507:  8:   unlockAudioContext();
 5772:  5684:  5596: 5508:  9:   jumpOsc = audioCtx.createOscillator();
 5773:  5685:  5597: 5509: 10:   jumpGain = audioCtx.createGain();
 5774:  5686:  5598: 5510: 11:   jumpOsc.type = "sine";
 5775:  5687:  5599: 5511: 12:   jumpGain.gain.setValueAtTime(0.3, audioCtx.currentTime);
 5776:  5688:  5600: 5512: 13:   jumpOsc.connect(jumpGain);
 5777:  5689:  5601: 5513: 14:   jumpGain.connect(audioCtx.destination);
 5778:  5690:  5602: 5514: 15:   jumpOsc.start();
 5779:  5691:  5603: 5515: 16:   // Drain stamina on jump initiation
 5780:  5692:  5604: 5516: 17:   stamina.drainJump();
 5781:  5693:  5605: 5517: 18: }
 5782:  5694:  5606: 5518: 19: function onPlayerJumpPeak() {
 5783:  5695:  5607: 5519: 20:   console.log("Reached peak of jump.");
 5784:  5696:  5608: 5520: 21:   // Optionally add a sound effect here.
 5785:  5697:  5609: 5521: 22: }
 5786:  5698:  5610: 5522: 23: function cleanupJumpSound() {
 5787:  5699:  5611: 5523: 24:   if (jumpOsc) {
 5788:  5700:  5612: 5524: 25:     jumpOsc.stop();
 5789:  5701:  5613: 5525: 26:     jumpOsc.disconnect();
 5790:  5702:  5614: 5526: 27:     jumpOsc = null;
 5791:  5703:  5615: 5527: 28:   }
 5792:  5704:  5616: 5528: 29:   if (jumpGain) {
 5793:  5705:  5617: 5529: 30:     jumpGain.disconnect();
 5794:  5706:  5618: 5530: 31:     jumpGain = null;
 5795:  5707:  5619: 5531: 32:   }
 5796:  5708:  5620: 5532: 33: }
 5797:  5709:  5621: 5533: 34: function onPlayerLand() {
 5798:  5710:  5622: 5534: 35:   const jumpTime = (performance.now() - player.jumpStartTime) / 1000;
 5799:  5711:  5623: 5535: 36:   const jumpHeight = player.jumpPeakY - player.jumpStartY;
 5800:  5712:  5624: 5536: 37:   const totalDistance = player.absY - player.jumpStartY;
 5801:  5713:  5625: 5537: 38:   console.log(`Jump complete! Time: ${jumpTime.toFixed(2)}s, Peak Height: ${jumpHeight.toFixed(1)}, Distance: ${totalDistance.toFixed(1)}`);
 5802:  5714:  5626: 5538: 39:   cleanupJumpSound();
 5803:  5715:  5627: 5539: 40:   stamina.resetJumpTrigger();
 5804:  5716:  5628: 5540: 41: }
 5805:  5717:  5629: 5541: `````
 5806:  5718:  5630: 5542: 
 5807:  5719:  5631: 5543: ## File: js/loan.js
 5808:  5720:  5632: 5544: `````javascript
 5809:  5721:  5633: 5545:  1: /* loan.js - Loan Management & Victory Condition */
 5810:  5722:  5634: 5546:  2: // Loan System
 5811:  5723:  5635: 5547:  3: var loanAmount = 100000; // Initial loan amount
 5812:  5724:  5636: 5548:  4: function updateLoanButton() {
 5813:  5725:  5637: 5549:  5:   const loanButton = document.getElementById("payLoan");
 5814:  5726:  5638: 5550:  6:   if (loanButton) {
 5815:  5727:  5639: 5551:  7:     if (loanAmount <= 0) {
 5816:  5728:  5640: 5552:  8:       loanButton.textContent = "LOAN PAID OFF!";
 5817:  5729:  5641: 5553:  9:       loanButton.disabled = true;
 5818:  5730:  5642: 5554: 10:       // Show victory banner
 5819:  5731:  5643: 5555: 11:       document.getElementById("victoryBanner").style.display = "block";
 5820:  5732:  5644: 5556: 12:     } else {
 5821:  5733:  5645: 5557: 13:       loanButton.textContent = `Pay Loan ($${loanAmount.toLocaleString()})`;
 5822:  5734:  5646: 5558: 14:       loanButton.disabled = false;
 5823:  5735:  5647: 5559: 15:     }
 5824:  5736:  5648: 5560: 16:   }
 5825:  5737:  5649: 5561: 17: }
 5826:  5738:  5650: 5562: 18: function payLoan() {
 5827:  5739:  5651: 5563: 19:   if (player.money > 0) {
 5828:  5740:  5652: 5564: 20:     const payment = Math.min(player.money, loanAmount);
 5829:  5741:  5653: 5565: 21:     loanAmount -= payment;
 5830:  5742:  5654: 5566: 22:     player.money -= payment;
 5831:  5743:  5655: 5567: 23:     updateMoneyDisplay(); // This function should update the on-screen money (see below)
 5832:  5744:  5656: 5568: 24:     updateLoanButton();
 5833:  5745:  5657: 5569: 25:     if (loanAmount <= 0) {
 5834:  5746:  5658: 5570: 26:       console.log("🎉 Loan paid off! Victory!");
 5835:  5747:  5659: 5571: 27:       playTone(800, "sine", 0.3, 0.5); // Victory sound
 5836:  5748:  5660: 5572: 28:     } else {
 5837:  5749:  5661: 5573: 29:       console.log(`💰 Loan payment: $${payment}. Remaining: $${loanAmount}`);
 5838:  5750:  5662: 5574: 30:       playTone(600, "sine", 0.1, 0.2); // Payment sound
 5839:  5751:  5663: 5575: 31:     }
 5840:  5752:  5664: 5576: 32:   }
 5841:  5753:  5665: 5577: 33: }
 5842:  5754:  5666: 5578: `````
 5843:  5755:  5667: 5579: 
 5844:  5756:  5668: 5580: ## File: js/notify.js
 5845:  5757:  5669: 5581: `````javascript
 5846:  5758:  5670: 5582:  1: /* notify.js */
 5847:  5759:  5671: 5583:  2: // Generic notification framework for SledHEAD
 5848:  5760:  5672: 5584:  3: // Base function to show notifications
 5849:  5761:  5673: 5585:  4: function showNotification(message, colorRGBA = [255, 255, 0, 0.8], duration = 1000) {
 5850:  5762:  5674: 5586:  5:   // Generate a unique ID based on the message
 5851:  5763:  5675: 5587:  6:   const notificationId = 'notification-' + message.replace(/\s+/g, '-').toLowerCase();
 5852:  5764:  5676: 5588:  7:   // Create or get the notification element
 5853:  5765:  5677: 5589:  8:   let notification = document.getElementById(notificationId);
 5854:  5766:  5678: 5590:  9:   if (!notification) {
 5855:  5767:  5679: 5591: 10:     notification = document.createElement('div');
 5856:  5768:  5680: 5592: 11:     notification.id = notificationId;
 5857:  5769:  5681: 5593: 12:     notification.style.position = 'fixed';
 5858:  5770:  5682: 5594: 13:     notification.style.top = '50%';
 5859:  5771:  5683: 5595: 14:     notification.style.left = '50%';
 5860:  5772:  5684: 5596: 15:     notification.style.transform = 'translate(-50%, -50%)';
 5861:  5773:  5685: 5597: 16:     notification.style.backgroundColor = `rgba(${colorRGBA[0]}, ${colorRGBA[1]}, ${colorRGBA[2]}, ${colorRGBA[3]})`;
 5862:  5774:  5686: 5598: 17:     notification.style.color = 'white';
 5863:  5775:  5687: 5599: 18:     notification.style.padding = '20px';
 5864:  5776:  5688: 5600: 19:     notification.style.borderRadius = '10px';
 5865:  5777:  5689: 5601: 20:     notification.style.fontWeight = 'bold';
 5866:  5778:  5690: 5602: 21:     notification.style.fontSize = '24px';
 5867:  5779:  5691: 5603: 22:     notification.style.textAlign = 'center';
 5868:  5780:  5692: 5604: 23:     notification.style.zIndex = '1000';
 5869:  5781:  5693: 5605: 24:     notification.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.7)';
 5870:  5782:  5694: 5606: 25:     document.body.appendChild(notification);
 5871:  5783:  5695: 5607: 26:   }
 5872:  5784:  5696: 5608: 27:   // Set content and make visible
 5873:  5785:  5697: 5609: 28:   notification.textContent = message;
 5874:  5786:  5698: 5610: 29:   notification.style.display = 'block';
 5875:  5787:  5699: 5611: 30:   // Fade out after specified duration
 5876:  5788:  5700: 5612: 31:   setTimeout(() => {
 5877:  5789:  5701: 5613: 32:     notification.style.transition = 'opacity 0.5s';
 5878:  5790:  5702: 5614: 33:     notification.style.opacity = '0';
 5879:  5791:  5703: 5615: 34:     setTimeout(() => {
 5880:  5792:  5704: 5616: 35:       notification.style.display = 'none';
 5881:  5793:  5705: 5617: 36:       notification.style.opacity = '1';
 5882:  5794:  5706: 5618: 37:       notification.style.transition = '';
 5883:  5795:  5707: 5619: 38:     }, 500);
 5884:  5796:  5708: 5620: 39:   }, duration);
 5885:  5797:  5709: 5621: 40: }
 5886:  5798:  5710: 5622: 41: // Specific notification types with predefined colors
 5887:  5799:  5711: 5623: 42: function showErrorNotification(message, duration = 1000) {
 5888:  5800:  5712: 5624: 43:   // Red background for errors
 5889:  5801:  5713: 5625: 44:   showNotification(message, [255, 0, 0, 0.8], duration);
 5890:  5802:  5714: 5626: 45:   // Play an error sound if available
 5891:  5803:  5715: 5627: 46:   if (typeof playTone === 'function') {
 5892:  5804:  5716: 5628: 47:     playTone(200, "square", 0.3, 0.4);
 5893:  5805:  5717: 5629: 48:   }
 5894:  5806:  5718: 5630: 49: }
 5895:  5807:  5719: 5631: 50: function showSuccessNotification(message, duration = 1000) {
 5896:  5808:  5720: 5632: 51:   // Green background for success
 5897:  5809:  5721: 5633: 52:   showNotification(message, [0, 128, 0, 0.8], duration);
 5898:  5810:  5722: 5634: 53:   // Play a positive sound if available
 5899:  5811:  5723: 5635: 54:   if (typeof playTone === 'function') {
 5900:  5812:  5724: 5636: 55:     playTone(600, "sine", 0.3, 0.4);
 5901:  5813:  5725: 5637: 56:   }
 5902:  5814:  5726: 5638: 57: }
 5903:  5815:  5727: 5639: 58: function showWarningNotification(message, duration = 1000) {
 5904:  5816:  5728: 5640: 59:   // Yellow background for warnings
 5905:  5817:  5729: 5641: 60:   showNotification(message, [255, 255, 0, 0.8], duration);
 5906:  5818:  5730: 5642: 61:   // Play a warning sound if available
 5907:  5819:  5731: 5643: 62:   if (typeof playTone === 'function') {
 5908:  5820:  5732: 5644: 63:     playTone(400, "triangle", 0.3, 0.4);
 5909:  5821:  5733: 5645: 64:   }
 5910:  5822:  5734: 5646: 65: }
 5911:  5823:  5735: 5647: 66: function showInfoNotification(message, duration = 1000) {
 5912:  5824:  5736: 5648: 67:   // Blue background for info
 5913:  5825:  5737: 5649: 68:   showNotification(message, [0, 0, 255, 0.8], duration);
 5914:  5826:  5738: 5650: 69: }
 5915:  5827:  5739: 5651: 70: // Export functions for use in other modules
 5916:  5828:  5740: 5652: 71: if (typeof module !== 'undefined' && module.exports) {
 5917:  5829:  5741: 5653: 72:   module.exports = {
 5918:  5830:  5742: 5654: 73:     showNotification,
 5919:  5831:  5743: 5655: 74:     showErrorNotification,
 5920:  5832:  5744: 5656: 75:     showSuccessNotification,
 5921:  5833:  5745: 5657: 76:     showWarningNotification,
 5922:  5834:  5746: 5658: 77:     showInfoNotification
 5923:  5835:  5747: 5659: 78:   };
 5924:  5836:  5748: 5660: 79: }
 5925:  5837:  5749: 5661: `````
 5926:  5838:  5750: 5662: 
 5927:  5839:  5751: 5663: ## File: js/registry.js
 5928:  5840:  5752: 5664: `````javascript
 5929:  5841:  5753: 5665:  1: /*
 5930:  5842:  5754: 5666:  2: // registry.js
 5931:  5843:  5755: 5667:  3: export const functionRegistry = {};
 5932:  5844:  5756: 5668:  4: export function register(name) {
 5933:  5845:  5757: 5669:  5:   return function(target, key, descriptor) {
 5934:  5846:  5758: 5670:  6:     const fnName = name || key;
 5935:  5847:  5759: 5671:  7:     functionRegistry[fnName] = descriptor.value;
 5936:  5848:  5760: 5672:  8:     return descriptor;
 5937:  5849:  5761: 5673:  9:   };
 5938:  5850:  5762: 5674: 10: }
 5939:  5851:  5763: 5675: 11: */
 5940:  5852:  5764: 5676: 12: // registry.js
 5941:  5853:  5765: 5677: 13: export const functionRegistry = {};
 5942:  5854:  5766: 5678: 14: export function register(name, fn) {
 5943:  5855:  5767: 5679: 15:   functionRegistry[name] = fn;
 5944:  5856:  5768: 5680: 16: }
 5945:  5857:  5769: 5681: `````
 5946:  5858:  5770: 5682: 
 5947:  5859:  5771: 5683: ## File: js/trees.js
 5948:  5860:  5772: 5684: `````javascript
 5949:  5861:  5773: 5685:  1: /* trees.js - Tree Generation and Rendering */
 5950:  5862:  5774: 5686:  2: /**
 5951:  5863:  5775: 5687:  3:  * Generates clusters of trees across the terrain
 5952:  5864:  5776: 5688:  4:  * @param {Object} options Configuration options
 5953:  5865:  5777: 5689:  5:  * @param {number} options.count Number of tree clusters to generate
 5954:  5866:  5778: 5690:  6:  * @param {Object} options.terrainBounds Bounds for placing trees {xMin, xMax, yMin, yMax}
 5955:  5867:  5779: 5691:  7:  * @param {number} options.playerSize Reference size to scale trees relative to player
 5956:  5868:  5780: 5692:  8:  * @returns {Array} Array of tree objects with positions and dimensions
 5957:  5869:  5781: 5693:  9:  */
 5958:  5870:  5782: 5694: 10: function generateTreeClumps(options) {
 5959:  5871:  5783: 5695: 11:   const { count, terrainBounds, playerSize } = options;
 5960:  5872:  5784: 5696: 12:   const clumps = [];
 5961:  5873:  5785: 5697: 13:   for (let i = 0; i < count; i++) {
 5962:  5874:  5786: 5698: 14:     const clump = [];
 5963:  5875:  5787: 5699: 15:     const clumpSize = 2 + Math.floor(Math.random() * 3); // 2-4 trees per clump
 5964:  5876:  5788: 5700: 16:     const clumpX = terrainBounds.xMin + Math.random() * (terrainBounds.xMax - terrainBounds.xMin);
 5965:  5877:  5789: 5701: 17:     const clumpY = terrainBounds.yMin + Math.random() * (terrainBounds.yMax - terrainBounds.yMin);
 5966:  5878:  5790: 5702: 18:     for (let j = 0; j < clumpSize; j++) {
 5967:  5879:  5791: 5703: 19:       const sizeFactor = 0.5 + Math.random() * 1.5; // 50–200%
 5968:  5880:  5792: 5704: 20:       const squareSize = playerSize * sizeFactor;
 5969:  5881:  5793: 5705: 21:       const offsetX = (Math.random() - 0.5) * playerSize * 2;
 5970:  5882:  5794: 5706: 22:       const offsetY = (Math.random() - 0.5) * playerSize * 2;
 5971:  5883:  5795: 5707: 23:       clump.push({
 5972:  5884:  5796: 5708: 24:         x: clumpX + offsetX,
 5973:  5885:  5797: 5709: 25:         y: clumpY + offsetY,
 5974:  5886:  5798: 5710: 26:         width: squareSize,
 5975:  5887:  5799: 5711: 27:         height: squareSize,
 5976:  5888:  5800: 5712: 28:         type: 'tree'
 5977:  5889:  5801: 5713: 29:       });
 5978:  5890:  5802: 5714: 30:     }
 5979:  5891:  5803: 5715: 31:     clumps.push(...clump);
 5980:  5892:  5804: 5716: 32:   }
 5981:  5893:  5805: 5717: 33:   return clumps;
 5982:  5894:  5806: 5718: 34: }
 5983:  5895:  5807: 5719: 35: /**
 5984:  5896:  5808: 5720: 36:  * Helper function to draw a more visually interesting tree
 5985:  5897:  5809: 5721: 37:  * @param {CanvasRenderingContext2D} ctx Canvas context to draw on
 5986:  5898:  5810: 5722: 38:  * @param {Object} tree Tree object with position and size information
 5987:  5899:  5811: 5723: 39:  */
 5988:  5900:  5812: 5724: 40: function drawTree(ctx, tree) {
 5989:  5901:  5813: 5725: 41:   // Tree trunk (brown rectangle)
 5990:  5902:  5814: 5726: 42:   const trunkWidth = tree.width * 0.3;
 5991:  5903:  5815: 5727: 43:   const trunkHeight = tree.height * 0.6;
 5992:  5904:  5816: 5728: 44:   const trunkX = tree.x + (tree.width - trunkWidth) / 2;
 5993:  5905:  5817: 5729: 45:   const trunkY = tree.y + tree.height - trunkHeight;
 5994:  5906:  5818: 5730: 46:   ctx.fillStyle = "#8B4513"; // saddle brown for trunk
 5995:  5907:  5819: 5731: 47:   ctx.fillRect(trunkX, trunkY, trunkWidth, trunkHeight);
 5996:  5908:  5820: 5732: 48:   // Tree canopy (green circle)
 5997:  5909:  5821: 5733: 49:   const canopyRadius = tree.width * 0.6;
 5998:  5910:  5822: 5734: 50:   const canopyCenterX = tree.x + tree.width / 2;
 5999:  5911:  5823: 5735: 51:   const canopyCenterY = tree.y + tree.height * 0.4;
 6000:  5912:  5824: 5736: 52:   ctx.fillStyle = "#228B22"; // forest green
 6001:  5913:  5825: 5737: 53:   ctx.beginPath();
 6002:  5914:  5826: 5738: 54:   ctx.arc(canopyCenterX, canopyCenterY, canopyRadius, 0, Math.PI * 2);
 6003:  5915:  5827: 5739: 55:   ctx.fill();
 6004:  5916:  5828: 5740: 56: }
 6005:  5917:  5829: 5741: `````
 6006:  5918:  5830: 5742: 
 6007:  5919:  5831: 5743: ## File: js/upgradeData.js
 6008:  5920:  5832: 5744: `````javascript
 6009:  5921:  5833: 5745:   1: // js/upgradeData.js
 6010:  5922:  5834: 5746:   2: export const upgradeCategories = [
 6011:  5923:  5835: 5747:   3:     {
 6012:  5924:  5836: 5748:   4:       name: "Personal Upgrades",
 6013:  5925:  5837: 5749:   5:       type: "player",
 6014:  5926:  5838: 5750:   6:       upgrades: [
 6015:  5927:  5839: 5751:   7:         {
 6016:  5928:  5840: 5752:   8:           key: "rocketSurgery",
 6017:  5929:  5841: 5753:   9:           label: "Rocket Surgery",
 6018:  5930:  5842: 5754:  10:           desc: "Boosts top speed & acceleration for faster downhill runs.",
 6019:  5931:  5843: 5755:  11:           max: 10,
 6020:  5932:  5844: 5756:  12:           icon: "🚀"
 6021:  5933:  5845: 5757:  13:         },
 6022:  5934:  5846: 5758:  14:         {
 6023:  5935:  5847: 5759:  15:           key: "optimalOptics",
 6024:  5936:  5848: 5760:  16:           label: "Optimal Optics",
 6025:  5937:  5849: 5761:  17:           desc: "Frees focus & boosts fan engagement for easier weaving.",
 6026:  5938:  5850: 5762:  18:           max: 10,
 6027:  5939:  5851: 5763:  19:           icon: "📸"
 6028:  5940:  5852: 5764:  20:         },
 6029:  5941:  5853: 5765:  21:         {
 6030:  5942:  5854: 5766:  22:           key: "sledDurability",
 6031:  5943:  5855: 5767:  23:           label: "Sled Durability",
 6032:  5944:  5856: 5768:  24:           desc: "Reinforce your sled to withstand bigger impacts.",
 6033:  5945:  5857: 5769:  25:           max: 10,
 6034:  5946:  5858: 5770:  26:           icon: "🛷"
 6035:  5947:  5859: 5771:  27:         },
 6036:  5948:  5860: 5772:  28:         {
 6037:  5949:  5861: 5773:  29:           key: "fancierFootwear",
 6038:  5950:  5862: 5774:  30:           label: "Fancier Footwear",
 6039:  5951:  5863: 5775:  31:           desc: "Less time climbing, more time sledding.",
 6040:  5952:  5864: 5776:  32:           max: 10,
 6041:  5953:  5865: 5777:  33:           icon: "👢"
 6042:  5954:  5866: 5778:  34:         },
 6043:  5955:  5867: 5779:  35:         {
 6044:  5956:  5868: 5780:  36:           key: "grapplingAnchor",
 6045:  5957:  5869: 5781:  37:           label: "Grappling Anchor",
 6046:  5958:  5870: 5782:  38:           desc: "Hook onto terrain to swing into tricky spots.",
 6047:  5959:  5871: 5783:  39:           max: 0,
 6048:  5960:  5872: 5784:  40:           icon: "🪝"
 6049:  5961:  5873: 5785:  41:         },
 6050:  5962:  5874: 5786:  42:         {
 6051:  5963:  5875: 5787:  43:           key: "attendLegDay",
 6052:  5964:  5876: 5788:  44:           label: "Attend Leg Day",
 6053:  5965:  5877: 5789:  45:           desc: "Reduce stamina cost for climbing back up.",
 6054:  5966:  5878: 5790:  46:           max: 0,
 6055:  5967:  5879: 5791:  47:           icon: "🏋️"
 6056:  5968:  5880: 5792:  48:         },
 6057:  5969:  5881: 5793:  49:         {
 6058:  5970:  5882: 5794:  50:           key: "shortcutAwareness",
 6059:  5971:  5883: 5795:  51:           label: "Shortcut Awareness",
 6060:  5972:  5884: 5796:  52:           desc: "Reveal hidden shortcuts & groomed trails.",
 6061:  5973:  5885: 5797:  53:           max: 0,
 6062:  5974:  5886: 5798:  54:           icon: "🗺️"
 6063:  5975:  5887: 5799:  55:         },
 6064:  5976:  5888: 5800:  56:         {
 6065:  5977:  5889: 5801:  57:           key: "crowdHypeman",
 6066:  5978:  5890: 5802:  58:           label: "Crowd Hypeman",
 6067:  5979:  5891: 5803:  59:           desc: "Perform tricks near fans for boosts.",
 6068:  5980:  5892: 5804:  60:           max: 0,
 6069:  5981:  5893: 5805:  61:           icon: "📣"
 6070:  5982:  5894: 5806:  62:         },
 6071:  5983:  5895: 5807:  63:         {
 6072:  5984:  5896: 5808:  64:           key: "crowdWeaver",
 6073:  5985:  5897: 5809:  65:           label: "Crowd Weaver",
 6074:  5986:  5898: 5810:  66:           desc: "Crowds move aside more often.",
 6075:  5987:  5899: 5811:  67:           max: 0,
 6076:  5988:  5900: 5812:  68:           icon: "🧍‍♂️"
 6077:  5989:  5901: 5813:  69:         },
 6078:  5990:  5902: 5814:  70:         {
 6079:  5991:  5903: 5815:  71:           key: "weatherWarrior",
 6080:  5992:  5904: 5816:  72:           label: "Weather Warrior",
 6081:  5993:  5905: 5817:  73:           desc: "Storms & blizzards barely slow you down.",
 6082:  5994:  5906: 5818:  74:           max: 0,
 6083:  5995:  5907: 5819:  75:           icon: "🌨️"
 6084:  5996:  5908: 5820:  76:         }
 6085:  5997:  5909: 5821:  77:       ]
 6086:  5998:  5910: 5822:  78:     },
 6087:  5999:  5911: 5823:  79:     {
 6088:  6000:  5912: 5824:  80:       name: "Mountain Upgrades",
 6089:  6001:  5913: 5825:  81:       type: "mountain",
 6090:  6002:  5914: 5826:  82:       upgrades: [
 6091:  6003:  5915: 5827:  83:         {
 6092:  6004:  5916: 5828:  84:           key: "skiLifts",
 6093:  6005:  5917: 5829:  85:           label: "High-Speed Ski Lift Expansion",
 6094:  6006:  5918: 5830:  86:           desc: "Ride lifts faster & attract more visitors.",
 6095:  6007:  5919: 5831:  87:           max: 0,
 6096:  6008:  5920: 5832:  88:           icon: "🎿"
 6097:  6009:  5921: 5833:  89:         },
 6098:  6010:  5922: 5834:  90:         {
 6099:  6011:  5923: 5835:  91:           key: "snowmobileRentals",
 6100:  6012:  5924: 5836:  92:           label: "Snowmobile Rentals",
 6101:  6013:  5925: 5837:  93:           desc: "Rent them out or ride them yourself.",
 6102:  6014:  5926: 5838:  94:           max: 0,
 6103:  6015:  5927: 5839:  95:           icon: "🏍️"
 6104:  6016:  5928: 5840:  96:         },
 6105:  6017:  5929: 5841:  97:         {
 6106:  6018:  5930: 5842:  98:           key: "eateries",
 6107:  6019:  5931: 5843:  99:           label: "Eateries & Snack Bars",
 6108:  6020:  5932: 5844: 100:           desc: "Restore stamina and make money.",
 6109:  6021:  5933: 5845: 101:           max: 0,
 6110:  6022:  5934: 5846: 102:           icon: "🍔"
 6111:  6023:  5935: 5847: 103:         },
 6112:  6024:  5936: 5848: 104:         {
 6113:  6025:  5937: 5849: 105:           key: "groomedTrails",
 6114:  6026:  5938: 5850: 106:           label: "Groomed Trails",
 6115:  6027:  5939: 5851: 107:           desc: "Smoothed paths with boosty sections.",
 6116:  6028:  5940: 5852: 108:           max: 0,
 6117:  6029:  5941: 5853: 109:           icon: "🥾"
 6118:  6030:  5942: 5854: 110:         },
 6119:  6031:  5943: 5855: 111:         {
 6120:  6032:  5944: 5856: 112:           key: "firstAidStations",
 6121:  6033:  5945: 5857: 113:           label: "Safety & First-Aid Stations",
 6122:  6034:  5946: 5858: 114:           desc: "Heal and reduce collision penalties.",
 6123:  6035:  5947: 5859: 115:           max: 0,
 6124:  6036:  5948: 5860: 116:           icon: "⛑️"
 6125:  6037:  5949: 5861: 117:         },
 6126:  6038:  5950: 5862: 118:         {
 6127:  6039:  5951: 5863: 119:           key: "scenicOverlooks",
 6128:  6040:  5952: 5864: 120:           label: "Scenic Overlook Platforms",
 6129:  6041:  5953: 5865: 121:           desc: "Lure tourists or use as shortcuts.",
 6130:  6042:  5954: 5866: 122:           max: 0,
 6131:  6043:  5955: 5867: 123:           icon: "📷"
 6132:  6044:  5956: 5868: 124:         },
 6133:  6045:  5957: 5869: 125:         {
 6134:  6046:  5958: 5870: 126:           key: "advertisingRamps",
 6135:  6047:  5959: 5871: 127:           label: "Advertising Ramp-Billboards",
 6136:  6048:  5960: 5872: 128:           desc: "Sponsor revenue and epic trick ramps.",
 6137:  6049:  5961: 5873: 129:           max: 0,
 6138:  6050:  5962: 5874: 130:           icon: "📢"
 6139:  6051:  5963: 5875: 131:         },
 6140:  6052:  5964: 5876: 132:         {
 6141:  6053:  5965: 5877: 133:           key: "resortLodges",
 6142:  6054:  5966: 5878: 134:           label: "Resort Amenities & Lodges",
 6143:  6055:  5967: 5879: 135:           desc: "Start from fancy remote lodges.",
 6144:  6056:  5968: 5880: 136:           max: 0,
 6145:  6057:  5969: 5881: 137:           icon: "🏨"
 6146:  6058:  5970: 5882: 138:         },
 6147:  6059:  5971: 5883: 139:         {
 6148:  6060:  5972: 5884: 140:           key: "nightLighting",
 6149:  6061:  5973: 5885: 141:           label: "Night Lighting Upgrades",
 6150:  6062:  5974: 5886: 142:           desc: "Unlock night sledding.",
 6151:  6063:  5975: 5887: 143:           max: 0,
 6152:  6064:  5976: 5888: 144:           icon: "🌙"
 6153:  6065:  5977: 5889: 145:         },
 6154:  6066:  5978: 5890: 146:         {
 6155:  6067:  5979: 5891: 147:           key: "weatherControl",
 6156:  6068:  5980: 5892: 148:           label: "Weather Control Systems",
 6157:  6069:  5981: 5893: 149:           desc: "Control the challenge for higher rewards.",
 6158:  6070:  5982: 5894: 150:           max: 0,
 6159:  6071:  5983: 5895: 151:           icon: "🌦️"
 6160:  6072:  5984: 5896: 152:         }
 6161:  6073:  5985: 5897: 153:       ]
 6162:  6074:  5986: 5898: 154:     }
 6163:  6075:  5987: 5899: 155:   ];
 6164:  6076:  5988: 5900: `````
 6165:  6077:  5989: 5901: 
 6166:  6078:  5990: 5902: ## File: js/upgradeLogic.js
 6167:  6079:  5991: 5903: `````javascript
 6168:  6080:  5992: 5904:   1: // js/upgradeLogic.js
 6169:  6081:  5993: 5905:   2: // Using global utility functions instead of imports
 6170:  6082:  5994: 5906:   3: // Track upgrade levels
 6171:  6083:  5995: 5907:   4: let playerUpgrades = {
 6172:  6084:  5996: 5908:   5:   rocketSurgery: 0,
 6173:  6085:  5997: 5909:   6:   optimalOptics: 0,
 6174:  6086:  5998: 5910:   7:   sledDurability: 0,
 6175:  6087:  5999: 5911:   8:   fancierFootwear: 0,
 6176:  6088:  6000: 5912:   9:   grapplingAnchor: 0,
 6177:  6089:  6001: 5913:  10:   attendLegDay: 0,
 6178:  6090:  6002: 5914:  11:   shortcutAwareness: 0,
 6179:  6091:  6003: 5915:  12:   crowdHypeman: 0,
 6180:  6092:  6004: 5916:  13:   crowdWeaver: 0,
 6181:  6093:  6005: 5917:  14:   weatherWarrior: 0
 6182:  6094:  6006: 5918:  15: };
 6183:  6095:  6007: 5919:  16: let mountainUpgrades = {
 6184:  6096:  6008: 5920:  17:   skiLifts: 0,
 6185:  6097:  6009: 5921:  18:   snowmobileRentals: 0,
 6186:  6098:  6010: 5922:  19:   eateries: 0,
 6187:  6099:  6011: 5923:  20:   groomedTrails: 0,
 6188:  6100:  6012: 5924:  21:   firstAidStations: 0,
 6189:  6101:  6013: 5925:  22:   scenicOverlooks: 0,
 6190:  6102:  6014: 5926:  23:   advertisingRamps: 0,
 6191:  6103:  6015: 5927:  24:   resortLodges: 0,
 6192:  6104:  6016: 5928:  25:   nightLighting: 0,
 6193:  6105:  6017: 5929:  26:   weatherControl: 0
 6194:  6106:  6018: 5930:  27: };
 6195:  6107:  6019: 5931:  28: const upgradeMaxLevel = {
 6196:  6108:  6020: 5932:  29:   rocketSurgery: 10,
 6197:  6109:  6021: 5933:  30:   optimalOptics: 10,
 6198:  6110:  6022: 5934:  31:   sledDurability: 10,
 6199:  6111:  6023: 5935:  32:   fancierFootwear: 10,
 6200:  6112:  6024: 5936:  33:   grapplingAnchor: 0,
 6201:  6113:  6025: 5937:  34:   attendLegDay: 0,
 6202:  6114:  6026: 5938:  35:   shortcutAwareness: 0,
 6203:  6115:  6027: 5939:  36:   crowdHypeman: 0,
 6204:  6116:  6028: 5940:  37:   crowdWeaver: 0,
 6205:  6117:  6029: 5941:  38:   weatherWarrior: 0,
 6206:  6118:  6030: 5942:  39:   skiLifts: 0,
 6207:  6119:  6031: 5943:  40:   snowmobileRentals: 0,
 6208:  6120:  6032: 5944:  41:   eateries: 0,
 6209:  6121:  6033: 5945:  42:   groomedTrails: 0,
 6210:  6122:  6034: 5946:  43:   firstAidStations: 0,
 6211:  6123:  6035: 5947:  44:   scenicOverlooks: 0,
 6212:  6124:  6036: 5948:  45:   advertisingRamps: 0,
 6213:  6125:  6037: 5949:  46:   resortLodges: 0,
 6214:  6126:  6038: 5950:  47:   nightLighting: 0,
 6215:  6127:  6039: 5951:  48:   weatherControl: 0
 6216:  6128:  6040: 5952:  49: };
 6217:  6129:  6041: 5953:  50: function getUpgradeCost(upgradeKey, currentLevel) {
 6218:  6130:  6042: 5954:  51:   return Math.floor(100 * Math.pow(1.1, currentLevel + 1));
 6219:  6131:  6043: 5955:  52: }
 6220:  6132:  6044: 5956:  53: function updateMoneyDisplay() {
 6221:  6133:  6045: 5957:  54:   const moneyText = document.getElementById("moneyText");
 6222:  6134:  6046: 5958:  55:   if (moneyText) {
 6223:  6135:  6047: 5959:  56:     moneyText.textContent = "Money: $" + player.money;
 6224:  6136:  6048: 5960:  57:   }
 6225:  6137:  6049: 5961:  58: }
 6226:  6138:  6050: 5962:  59: function getUpgradeDisplayText(upgradeKey, currentLevel, maxLevel) {
 6227:  6139:  6051: 5963:  60:   let text = formatUpgradeName(upgradeKey) + ` (Lv ${currentLevel}/${maxLevel})`;
 6228:  6140:  6052: 5964:  61:   if (maxLevel > 0 && currentLevel < maxLevel) {
 6229:  6141:  6053: 5965:  62:     let cost = getUpgradeCost(upgradeKey, currentLevel);
 6230:  6142:  6054: 5966:  63:     text += " – Cost: $" + cost;
 6231:  6143:  6055: 5967:  64:   }
 6232:  6144:  6056: 5968:  65:   return text;
 6233:  6145:  6057: 5969:  66: }
 6234:  6146:  6058: 5970:  67: function initUpgradeButton(upgradeKey, upgradeValue) {
 6235:  6147:  6059: 5971:  68:   const maxLevel = upgradeMaxLevel[upgradeKey];
 6236:  6148:  6060: 5972:  69:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
 6237:  6149:  6061: 5973:  70:   const button = document.getElementById(btnId);
 6238:  6150:  6062: 5974:  71:   button.innerText = getUpgradeDisplayText(upgradeKey, upgradeValue, maxLevel);
 6239:  6151:  6063: 5975:  72:   if (maxLevel === 0 || upgradeValue >= maxLevel) {
 6240:  6152:  6064: 5976:  73:     button.disabled = true;
 6241:  6153:  6065: 5977:  74:   }
 6242:  6154:  6066: 5978:  75: }
 6243:  6155:  6067: 5979:  76: function purchaseUpgrade(upgradeType, upgradeKey) {
 6244:  6156:  6068: 5980:  77:   const currentLevel = upgradeType[upgradeKey];
 6245:  6157:  6069: 5981:  78:   const maxLevel = upgradeMaxLevel[upgradeKey];
 6246:  6158:  6070: 5982:  79:   if (maxLevel === 0 || currentLevel >= maxLevel) {
 6247:  6159:  6071: 5983:  80:     console.log("Upgrade", upgradeKey, "is locked or already maxed.");
 6248:  6160:  6072: 5984:  81:     return;
 6249:  6161:  6073: 5985:  82:   }
 6250:  6162:  6074: 5986:  83:   const cost = getUpgradeCost(upgradeKey, currentLevel);
 6251:  6163:  6075: 5987:  84:   if (player.money < cost) {
 6252:  6164:  6076: 5988:  85:     console.log("Not enough money to purchase", upgradeKey, ". Cost:", cost, "Money:", player.money);
 6253:  6165:  6077: 5989:  86:     return;
 6254:  6166:  6078: 5990:  87:   }
 6255:  6167:  6079: 5991:  88:   player.money -= cost;
 6256:  6168:  6080: 5992:  89:   upgradeType[upgradeKey]++;
 6257:  6169:  6081: 5993:  90:   const newLevel = upgradeType[upgradeKey];
 6258:  6170:  6082: 5994:  91:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
 6259:  6171:  6083: 5995:  92:   document.getElementById(btnId).innerText = getUpgradeDisplayText(upgradeKey, newLevel, maxLevel);
 6260:  6172:  6084: 5996:  93:   if (newLevel >= maxLevel) {
 6261:  6173:  6085: 5997:  94:     document.getElementById(btnId).disabled = true;
 6262:  6174:  6086: 5998:  95:   }
 6263:  6175:  6087: 5999:  96:   updateMoneyDisplay();
 6264:  6176:  6088: 6000:  97:   console.log("Purchased upgrade", upgradeKey, "New level:", newLevel, "Remaining money:", player.money);
 6265:  6177:  6089: 6001:  98: }
 6266:  6178:  6090: 6002:  99: // Export all necessary variables and functions
 6267:  6179:  6091: 6003: 100: export {
 6268:  6180:  6092: 6004: 101:   playerUpgrades,
 6269:  6181:  6093: 6005: 102:   mountainUpgrades,
 6270:  6182:  6094: 6006: 103:   upgradeMaxLevel,
 6271:  6183:  6095: 6007: 104:   getUpgradeCost,
 6272:  6184:  6096: 6008: 105:   getUpgradeDisplayText,
 6273:  6185:  6097: 6009: 106:   initUpgradeButton,
 6274:  6186:  6098: 6010: 107:   updateMoneyDisplay,
 6275:  6187:  6099: 6011: 108:   purchaseUpgrade
 6276:  6188:  6100: 6012: 109: };
 6277:  6189:  6101: 6013: `````
 6278:  6190:  6102: 6014: 
 6279:  6191:  6103: 6015: ## File: js/upgrades.js
 6280:  6192:  6104: 6016: `````javascript
 6281:  6193:  6105: 6017:  1: // js/upgrades.js
 6282:  6194:  6106: 6018:  2: import { upgradeCategories } from './upgradeData.js';
 6283:  6195:  6107: 6019:  3: import { 
 6284:  6196:  6108: 6020:  4:   playerUpgrades, 
 6285:  6197:  6109: 6021:  5:   mountainUpgrades, 
 6286:  6198:  6110: 6022:  6:   upgradeMaxLevel, 
 6287:  6199:  6111: 6023:  7:   purchaseUpgrade, 
 6288:  6200:  6112: 6024:  8:   getUpgradeCost,
 6289:  6201:  6113: 6025:  9:   getUpgradeDisplayText 
 6290:  6202:  6114: 6026: 10: } from './upgradeLogic.js';
 6291:  6203:  6115: 6027: 11: // Using global capitalizeFirstLetter instead of importing it
 6292:  6204:  6116: 6028: 12: function createUpgradeElement(upgrade, isPlayerUpgrade = true) {
 6293:  6205:  6117: 6029: 13:   const upgradeType = isPlayerUpgrade ? playerUpgrades : mountainUpgrades;
 6294:  6206:  6118: 6030: 14:   const currentLevel = upgradeType[upgrade.key];
 6295:  6207:  6119: 6031: 15:   const maxLevel = upgradeMaxLevel[upgrade.key];
 6296:  6208:  6120: 6032: 16:   const cost = getUpgradeCost(upgrade.key, currentLevel);
 6297:  6209:  6121: 6033: 17:   const entry = document.createElement('div');
 6298:  6210:  6122: 6034: 18:   entry.className = 'upgrade-entry';
 6299:  6211:  6123: 6035: 19:   const button = document.createElement('button');
 6300:  6212:  6124: 6036: 20:   const btnId = `upgrade${capitalizeFirstLetter(upgrade.key)}`;
 6301:  6213:  6125: 6037: 21:   button.id = btnId;
 6302:  6214:  6126: 6038: 22:   button.innerText = getUpgradeDisplayText(upgrade.key, currentLevel, maxLevel);
 6303:  6215:  6127: 6039: 23:   // Disable if maxed or locked
 6304:  6216:  6128: 6040: 24:   if (maxLevel === 0 || currentLevel >= maxLevel) {
 6305:  6217:  6129: 6041: 25:     button.disabled = true;
 6306:  6218:  6130: 6042: 26:   }
 6307:  6219:  6131: 6043: 27:   button.addEventListener('click', () => {
 6308:  6220:  6132: 6044: 28:     purchaseUpgrade(upgradeType, upgrade.key);
 6309:  6221:  6133: 6045: 29:   });
 6310:  6222:  6134: 6046: 30:   const desc = document.createElement('p');
 6311:  6223:  6135: 6047: 31:   desc.className = 'upgrade-desc';
 6312:  6224:  6136: 6048: 32:   desc.textContent = upgrade.desc;
 6313:  6225:  6137: 6049: 33:   entry.appendChild(button);
 6314:  6226:  6138: 6050: 34:   entry.appendChild(desc);
 6315:  6227:  6139: 6051: 35:   return entry;
 6316:  6228:  6140: 6052: 36: }
 6317:  6229:  6141: 6053: 37: function renderUpgradeMenu() {
 6318:  6230:  6142: 6054: 38:   const container = document.getElementById('dynamic-upgrade-columns');
 6319:  6231:  6143: 6055: 39:   if (!container) return;
 6320:  6232:  6144: 6056: 40:   upgradeCategories.forEach(category => {
 6321:  6233:  6145: 6057: 41:     const column = document.createElement('div');
 6322:  6234:  6146: 6058: 42:     column.className = 'upgrade-column';
 6323:  6235:  6147: 6059: 43:     const header = document.createElement('h2');
 6324:  6236:  6148: 6060: 44:     header.textContent = category.name;
 6325:  6237:  6149: 6061: 45:     column.appendChild(header);
 6326:  6238:  6150: 6062: 46:     const isPlayerUpgrade = category.type === "player";
 6327:  6239:  6151: 6063: 47:     category.upgrades.forEach(upgrade => {
 6328:  6240:  6152: 6064: 48:       const element = createUpgradeElement(upgrade, isPlayerUpgrade);
 6329:  6241:  6153: 6065: 49:       column.appendChild(element);
 6330:  6242:  6154: 6066: 50:     });
 6331:  6243:  6155: 6067: 51:     container.appendChild(column);
 6332:  6244:  6156: 6068: 52:   });
 6333:  6245:  6157: 6069: 53: }
 6334:  6246:  6158: 6070: 54: renderUpgradeMenu();
 6335:  6247:  6159: 6071: `````
 6336:  6248:  6160: 6072: 
 6337:  6249:  6161: 6073: ## File: js/uphill.js
 6338:  6250:  6162: 6074: `````javascript
 6339:  6251:  6163: 6075:  1: /* uphill.js - Uphill Movement & Camera Control */
 6340:  6252:  6164: 6076:  2: // Handle all uphill movement, camera controls, and related mechanics
 6341:  6253:  6165: 6077:  3: function updateUphill(deltaTime) {
 6342:  6254:  6166: 6078:  4:   let upSpeed = TWEAK.baseUpSpeed + (playerUpgrades.fancierFootwear * TWEAK.fancierFootwearUpSpeedPerLevel);
 6343:  6255:  6167: 6079:  5:   // Vertical movement
 6344:  6256:  6168: 6080:  6:   if (keysDown["w"]) { player.absY -= upSpeed; }
 6345:  6257:  6169: 6081:  7:   if (keysDown["s"]) { player.absY += upSpeed; }
 6346:  6258:  6170: 6082:  8:   // Horizontal movement with bounds checking
 6347:  6259:  6171: 6083:  9:   let newXUphill = player.x;
 6348:  6260:  6172: 6084: 10:   if (keysDown["a"]) { newXUphill -= upSpeed; }
 6349:  6261:  6173: 6085: 11:   if (keysDown["d"]) { newXUphill += upSpeed; }
 6350:  6262:  6174: 6086: 12:   player.x = clamp(newXUphill, player.width/2, canvas.width - player.width/2);
 6351:  6263:  6175: 6087: 13:   // Prevent going beyond mountain bounds vertically
 6352:  6264:  6176: 6088: 14:   player.absY = clamp(player.absY, 0, mountainHeight);
 6353:  6265:  6177: 6089: 15:   // Camera and altitude control
 6354:  6266:  6178: 6090: 16:   if (keysDown["ArrowLeft"]) { player.cameraAngle -= 2; }
 6355:  6267:  6179: 6091: 17:   if (keysDown["ArrowRight"]) { player.cameraAngle += 2; }
 6356:  6268:  6180: 6092: 18:   if (keysDown["ArrowUp"]) { player.altitudeLine = Math.max(0, player.altitudeLine - 2); }
 6357:  6269:  6181: 6093: 19:   if (keysDown["ArrowDown"]) { player.altitudeLine = Math.min(100, player.altitudeLine + 2); }
 6358:  6270:  6182: 6094: 20:   // Normalize camera angle
 6359:  6271:  6183: 6095: 21:   if (player.cameraAngle < 0) player.cameraAngle += 360;
 6360:  6272:  6184: 6096: 22:   if (player.cameraAngle >= 360) player.cameraAngle -= 360;
 6361:  6273:  6185: 6097: 23:   // Reset horizontal velocity in uphill mode
 6362:  6274:  6186: 6098: 24:   player.xVel = 0;
 6363:  6275:  6187: 6099: 25:   // Check for collisions with terrain
 6364:  6276:  6188: 6100: 26:   terrain.forEach(obstacle => {
 6365:  6277:  6189: 6101: 27:     if (checkCollision(
 6366:  6278:  6190: 6102: 28:         player.x - player.width / 2, player.absY - player.height / 2,
 6367:  6279:  6191: 6103: 29:         player.width, player.height,
 6368:  6280:  6192: 6104: 30:         obstacle.x, obstacle.y,
 6369:  6281:  6193: 6105: 31:         obstacle.width, obstacle.height
 6370:  6282:  6194: 6106: 32:     )) {
 6371:  6283:  6195: 6107: 33:       console.log("Collision on uphill.");
 6372:  6284:  6196: 6108: 34:       resolveCollision(player, obstacle);
 6373:  6285:  6197: 6109: 35:     }
 6374:  6286:  6198: 6110: 36:   });
 6375:  6287:  6199: 6111: 37:   // Call animal update from wildlife.js
 6376:  6288:  6200: 6112: 38:   updateAnimal();
 6377:  6289:  6201: 6113: 39:   // Return to house if player reaches bottom of mountain
 6378:  6290:  6202: 6114: 40:   if (player.absY >= mountainHeight) {
 6379:  6291:  6203: 6115: 41:     player.absY = mountainHeight;
 6380:  6292:  6204: 6116: 42:     console.log("Reached bottom. Returning to house.");
 6381:  6293:  6205: 6117: 43:     changeState(GameState.HOUSE);
 6382:  6294:  6206: 6118: 44:   }
 6383:  6295:  6207: 6119: 45: }
 6384:  6296:  6208: 6120: `````
 6385:  6297:  6209: 6121: 
 6386:  6298:  6210: 6122: ## File: styles.css
 6387:  6299:  6211: 6123: `````css
 6388:  6300:  6212: 6124:   1: /* gameplay.css */
 6389:  6301:  6213: 6125:   2: /* Styles for the gameplay phase (canvas-based) */
 6390:  6302:  6214: 6126:   3: #game-screen {
 6391:  6303:  6215: 6127:   4:   position: absolute;
 6392:  6304:  6216: 6128:   5:   top: 50px;
 6393:  6305:  6217: 6129:   6:   left: 0;
 6394:  6306:  6218: 6130:   7:   width: 100%;
 6395:  6307:  6219: 6131:   8:   height: calc(100% - 50px);
 6396:  6308:  6220: 6132:   9:   /* No fixed width/height here—the Phaser Scale Manager will resize the canvas */
 6397:  6309:  6221: 6133:  10: }
 6398:  6310:  6222: 6134:  11: #gameCanvas {
 6399:  6311:  6223: 6135:  12:   width: 100%;
 6400:  6312:  6224: 6136:  13:   height: 100%;
 6401:  6313:  6225: 6137:  14:   display: block;
 6402:  6314:  6226: 6138:  15:   background-color: #87CEEB;
 6403:  6315:  6227: 6139:  16:   border: none;
 6404:  6316:  6228: 6140:  17: }
 6405:  6317:  6229: 6141:  18: /* house.css */
 6406:  6318:  6230: 6142:  19: /* Styles for the house phase & upgrade menu */
 6407:  6319:  6231: 6143:  20: #upgrade-menu {
 6408:  6320:  6232: 6144:  21:   position: absolute;
 6409:  6321:  6233: 6145:  22:   top: 50px;
 6410:  6322:  6234: 6146:  23:   left: 0;
 6411:  6323:  6235: 6147:  24:   width: 100%;
 6412:  6324:  6236: 6148:  25:   height: calc(100% - 50px);
 6413:  6325:  6237: 6149:  26:   background-color: rgba(0, 0, 0, 0.9);
 6414:  6326:  6238: 6150:  27:   padding: 20px;
 6415:  6327:  6239: 6151:  28:   box-sizing: border-box;
 6416:  6328:  6240: 6152:  29:   display: block;
 6417:  6329:  6241: 6153:  30:   overflow-y: auto;
 6418:  6330:  6242: 6154:  31: }
 6419:  6331:  6243: 6155:  32: .upgrade-menu-columns {
 6420:  6332:  6244: 6156:  33:   display: flex;
 6421:  6333:  6245: 6157:  34:   justify-content: space-around;
 6422:  6334:  6246: 6158:  35:   align-items: flex-start;
 6423:  6335:  6247: 6159:  36:   flex-wrap: wrap;
 6424:  6336:  6248: 6160:  37: }
 6425:  6337:  6249: 6161:  38: .upgrade-column {
 6426:  6338:  6250: 6162:  39:   width: 45%;
 6427:  6339:  6251: 6163:  40:   margin: 10px 0;
 6428:  6340:  6252: 6164:  41: }
 6429:  6341:  6253: 6165:  42: .upgrade-column h2 {
 6430:  6342:  6254: 6166:  43:   text-align: center;
 6431:  6343:  6255: 6167:  44:   margin-bottom: 10px;
 6432:  6344:  6256: 6168:  45: }
 6433:  6345:  6257: 6169:  46: .upgrade-entry {
 6434:  6346:  6258: 6170:  47:   margin-bottom: 15px;
 6435:  6347:  6259: 6171:  48: }
 6436:  6348:  6260: 6172:  49: .upgrade-entry button {
 6437:  6349:  6261: 6173:  50:   width: 100%;
 6438:  6350:  6262: 6174:  51:   margin: 5px 0 2px 0;
 6439:  6351:  6263: 6175:  52:   padding: 10px;
 6440:  6352:  6264: 6176:  53:   font-size: 16px;
 6441:  6353:  6265: 6177:  54:   background-color: #007bff;
 6442:  6354:  6266: 6178:  55:   color: white;
 6443:  6355:  6267: 6179:  56:   border: none;
 6444:  6356:  6268: 6180:  57:   border-radius: 5px;
 6445:  6357:  6269: 6181:  58:   cursor: pointer;
 6446:  6358:  6270: 6182:  59:   transition: background-color 0.2s ease;
 6447:  6359:  6271: 6183:  60: }
 6448:  6360:  6272: 6184:  61: .upgrade-entry button:hover {
 6449:  6361:  6273: 6185:  62:   background-color: #0056b3;
 6450:  6362:  6274: 6186:  63: }
 6451:  6363:  6275: 6187:  64: .upgrade-entry button:disabled {
 6452:  6364:  6276: 6188:  65:   background-color: #555;
 6453:  6365:  6277: 6189:  66:   cursor: not-allowed;
 6454:  6366:  6278: 6190:  67: }
 6455:  6367:  6279: 6191:  68: .upgrade-desc {
 6456:  6368:  6280: 6192:  69:   font-size: 14px;
 6457:  6369:  6281: 6193:  70:   line-height: 1.2;
 6458:  6370:  6282: 6194:  71:   margin: 0;
 6459:  6371:  6283: 6195:  72:   color: #ccc;
 6460:  6372:  6284: 6196:  73: }
 6461:  6373:  6285: 6197:  74: #bestTimeText {
 6462:  6374:  6286: 6198:  75:   margin-top: 20px;
 6463:  6375:  6287: 6199:  76:   text-align: center;
 6464:  6376:  6288: 6200:  77:   color: #fff;
 6465:  6377:  6289: 6201:  78: }
 6466:  6378:  6290: 6202:  79: #startGame {
 6467:  6379:  6291: 6203:  80:   display: block;
 6468:  6380:  6292: 6204:  81:   margin: 10px auto;
 6469:  6381:  6293: 6205:  82:   font-size: 16px;
 6470:  6382:  6294: 6206:  83:   padding: 8px 16px;
 6471:  6383:  6295: 6207:  84:   cursor: pointer;
 6472:  6384:  6296: 6208:  85:   background-color: #28a745;
 6473:  6385:  6297: 6209:  86:   border: none;
 6474:  6386:  6298: 6210:  87:   border-radius: 5px;
 6475:  6387:  6299: 6211:  88:   transition: background-color 0.2s ease;
 6476:  6388:  6300: 6212:  89: }
 6477:  6389:  6301: 6213:  90: #startGame:hover {
 6478:  6390:  6302: 6214:  91:   background-color: #218838;
 6479:  6391:  6303: 6215:  92: }
 6480:  6392:  6304: 6216:  93: /* Global UI elements (title, money display) */
 6481:  6393:  6305: 6217:  94: h1 {
 6482:  6394:  6306: 6218:  95:   text-align: center;
 6483:  6395:  6307: 6219:  96:   margin-top: 10px;
 6484:  6396:  6308: 6220:  97:   color: #000;
 6485:  6397:  6309: 6221:  98:   font-size: 36px;
 6486:  6398:  6310: 6222:  99:   font-weight: bold;
 6487:  6399:  6311: 6223: 100: }
 6488:  6400:  6312: 6224: 101: /* Improved money display */
 6489:  6401:  6313: 6225: 102: #moneyDisplay {
 6490:  6402:  6314: 6226: 103:   position: fixed;
 6491:  6403:  6315: 6227: 104:   top: 10px;
 6492:  6404:  6316: 6228: 105:   right: 10px;
 6493:  6405:  6317: 6229: 106:   font-size: 20px;
 6494:  6406:  6318: 6230: 107:   background-color: rgba(0, 0, 0, 0.9);
 6495:  6407:  6319: 6231: 108:   padding: 12px 16px;
 6496:  6408:  6320: 6232: 109:   border-radius: 10px;
 6497:  6409:  6321: 6233: 110:   color: #FFD700;
 6498:  6410:  6322: 6234: 111:   font-weight: bold;
 6499:  6411:  6323: 6235: 112:   z-index: 1000;
 6500:  6412:  6324: 6236: 113: }
 6501:  6413:  6325: 6237: 114: /* Live money updates should stand out */
 6502:  6414:  6326: 6238: 115: #moneyText {
 6503:  6415:  6327: 6239: 116:   font-size: 22px;
 6504:  6416:  6328: 6240: 117:   font-weight: bold;
 6505:  6417:  6329: 6241: 118:   color: #FFD700;
 6506:  6418:  6330: 6242: 119:   transition: transform 0.1s ease-in-out, color 0.2s ease-in-out;
 6507:  6419:  6331: 6243: 120: }
 6508:  6420:  6332: 6244: 121: /* Bounce effect when money updates */
 6509:  6421:  6333: 6245: 122: .money-increase {
 6510:  6422:  6334: 6246: 123:   transform: scale(1.2);
 6511:  6423:  6335: 6247: 124:   color: #FFFFFF;
 6512:  6424:  6336: 6248: 125: }
 6513:  6425:  6337: 6249: `````
 6514:  6426:  6338: 6250: 
 6515:  6427:  6339: 6251: ## File: docs/1.0_README.md
 6516:  6428:  6340: 6252: `````markdown
 6517:  6429:  6341: 6253:   1: # **SledHEAD**
 6518:  6430:  6342: 6254:   2: **Genre:** Roguelike | Trick & Time Trial Racer | Adventure  
 6519:  6431:  6343: 6255:   3: **Platform:** Web-based (PC, potentially mobile)  
 6520:  6432:  6344: 6256:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
 6521:  6433:  6345: 6257:   5: 
 6522:  6434:  6346: 6258:   6: ---
 6523:  6435:  6347: 6259:   7: 
 6524:  6436:  6348: 6260:   8: ## Table of Contents
 6525:  6437:  6349: 6261:   9: 1. [Core Concept](#core-concept)
 6526:  6438:  6350: 6262:  10: 2. [Procedural World & Persistence](#procedural-world--persistence)
 6527:  6439:  6351: 6263:  11: 3. [Gameplay Loops](#gameplay-loops)
 6528:  6440:  6352: 6264:  12:    - [Sledding Phase (Downhill)](#1-sledding-phase-downhill)
 6529:  6441:  6353: 6265:  13:    - [Climbing Phase (Uphill)](#2-climbing-phase-uphill)
 6530:  6442:  6354: 6266:  14:    - [Management Phase (House & Upgrades)](#3-management-phase-house--upgrades)
 6531:  6443:  6355: 6267:  15: 4. [Trick System (For Extra Cash & Fan Engagement)](#trick-system-for-extra-cash--fan-engagement)
 6532:  6444:  6356: 6268:  16: 5. [Upgrade System](#upgrade-system)
 6533:  6445:  6357: 6269:  17:    - [Personal Upgrades](#personal-upgrades-character-enhancements)
 6534:  6446:  6358: 6270:  18:    - [Mountain Upgrades](#mountain-upgrades-resort-expansion)
 6535:  6447:  6359: 6271:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)
 6536:  6448:  6360: 6272:  20: 7. [Mountain Themes & Progression](#mountain-themes--progression)
 6537:  6449:  6361: 6273:  21: 8. [Mini-Games in SledHEAD](#mini-games-in-sledhead)
 6538:  6450:  6362: 6274:  22: 9. [NPCs & Mountain Town Ecosystem](#npcs--mountain-town-ecosystem)
 6539:  6451:  6363: 6275:  23: 
 6540:  6452:  6364: 6276:  24: 
 6541:  6453:  6365: 6277:  25: ---
 6542:  6454:  6366: 6278:  26: 
 6543:  6455:  6367: 6279:  27: ## 🎯 **Core Concept**
 6544:  6456:  6368: 6280:  28: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
 6545:  6457:  6369: 6281:  29: 
 6546:  6458:  6370: 6282:  30: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
 6547:  6459:  6371: 6283:  31: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
 6548:  6460:  6372: 6284:  32: 
 6549:  6461:  6373: 6285:  33: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
 6550:  6462:  6374: 6286:  34: 
 6551:  6463:  6375: 6287:  35: ---
 6552:  6464:  6376: 6288:  36: 
 6553:  6465:  6377: 6289:  37: ## 🎮 **Controls & Gameplay Mechanics**
 6554:  6466:  6378: 6290:  38: 
 6555:  6467:  6379: 6291:  39: ### **⬇️ Downhill Phase: Fast-Paced Sledding**
 6556:  6468:  6380: 6292:  40: In the **downhill phase**, you’re controlling your sled as it races down procedurally generated slopes, dodging obstacles, pulling off tricks, and aiming for the fastest times.
 6557:  6469:  6381: 6293:  41: 
 6558:  6470:  6382: 6294:  42: #### **Basic Movement:**
 6559:  6471:  6383: 6295:  43: - **Left / Right Arrow Keys (← →)** – Steer your sled left or right.  
 6560:  6472:  6384: 6296:  44: - **Down Arrow (↓)** – Crouch for extra speed on straightaways.  
 6561:  6473:  6385: 6297:  45: - **Up Arrow (↑)** – Prepare for a jump off a ramp.  
 6562:  6474:  6386: 6298:  46: 
 6563:  6475:  6387: 6299:  47: #### **Trick System:**
 6564:  6476:  6388: 6300:  48: - Tricks are executed using combinations of **Up, Down, Left, and Right Arrows**.
 6565:  6477:  6389: 6301:  49: - Landing tricks successfully grants extra money and fan engagement.
 6566:  6478:  6390: 6302:  50: - Be mindful of your timing - land while doing a trick, and you could crash!
 6567:  6479:  6391: 6303:  51: 
 6568:  6480:  6392: 6304:  52: #### **Hazards & Interactions:**
 6569:  6481:  6393: 6305:  53: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
 6570:  6482:  6394: 6306:  54: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
 6571:  6483:  6395: 6307:  55: - **Ice Patches:** Reduce control and make turns trickier.
 6572:  6484:  6396: 6308:  56: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
 6573:  6485:  6397: 6309:  57: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
 6574:  6486:  6398: 6310:  58: 
 6575:  6487:  6399: 6311:  59: ---
 6576:  6488:  6400: 6312:  60: 
 6577:  6489:  6401: 6313:  61: ### **⬆️ Uphill Phase: Climbing & Exploration**
 6578:  6490:  6402: 6314:  62: Once you reach the bottom, it’s time to **make your way back up**. The mountain doesn’t regenerate, so you’ll be retracing paths and discovering new shortcuts.
 6579:  6491:  6403: 6315:  63: 
 6580:  6492:  6404: 6316:  64: #### **Basic Movement & Stamina:**
 6581:  6493:  6405: 6317:  65: - **Left / Right Arrow Keys (← →)** – Move horizontally across the mountain.
 6582:  6494:  6406: 6318:  66: - **Up Arrow (↑)** – Hike uphill, consuming stamina.
 6583:  6495:  6407: 6319:  67: - **Down Arrow (↓)** – Rest momentarily to recover stamina.
 6584:  6496:  6408: 6320:  68: 
 6585:  6497:  6409: 6321:  69: #### **Navigation & Assistance:**
 6586:  6498:  6410: 6322:  70: - If you've **unlocked ski lifts or snowmobiles**, you can use them for a quicker return.
 6587:  6499:  6411: 6323:  71: - **Shortcut Awareness** upgrades help you find hidden paths to make the climb easier.
 6588:  6500:  6412: 6324:  72: - **Food Stalls & Rest Areas** restore stamina—plan your route accordingly!
 6589:  6501:  6413: 6325:  73: 
 6590:  6502:  6414: 6326:  74: #### **Wildlife Photography Mini-Game 📸**
 6591:  6503:  6415: 6327:  75: - While hiking, **animals appear every few seconds**.
 6592:  6504:  6416: 6328:  76: - Aim the camera using **Arrow Keys**, and take a shot with **Spacebar**.
 6593:  6505:  6417: 6329:  77: - Align your camera with the **altitude line** for a perfect photo.
 6594:  6506:  6418: 6330:  78: - **Moving animals give higher rewards** but are harder to capture.
 6595:  6507:  6419: 6331:  79: 
 6596:  6508:  6420: 6332:  80: ---
 6597:  6509:  6421: 6333:  81: 
 6598:  6510:  6422: 6334:  82: **Next Steps:**  
 6599:  6511:  6423: 6335:  83: - **If you want to make money:** Optimize your tricks and time trials.  
 6600:  6512:  6424: 6336:  84: - **If you want to upgrade:** Invest in stamina, sled durability, and trick enhancements.  
 6601:  6513:  6425: 6337:  85: - **If you want to explore:** Look for wildlife, hidden shortcuts, and fan hotspots!  
 6602:  6514:  6426: 6338:  86: 
 6603:  6515:  6427: 6339:  87: ---
 6604:  6516:  6428: 6340:  88: 
 6605:  6517:  6429: 6341:  89: ## 🌎 **Procedural World & Persistence**
 6606:  6518:  6430: 6342:  90: - The mountain remains consistent during a playthrough.  
 6607:  6519:  6431: 6343:  91: - **New terrain is only generated when starting a new game.**  
 6608:  6520:  6432: 6344:  92: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
 6609:  6521:  6433: 6345:  93: - **Changes per run:**
 6610:  6522:  6434: 6346:  94:   - Tourists & fans shift positions.  
 6611:  6523:  6435: 6347:  95:   - Weather may change dynamically.  
 6612:  6524:  6436: 6348:  96:   - Wildlife encounters vary.
 6613:  6525:  6437: 6349:  97: 
 6614:  6526:  6438: 6350:  98: ---
 6615:  6527:  6439: 6351:  99: 
 6616:  6528:  6440: 6352: 100: ## 🎮 **Gameplay Loops**
 6617:  6529:  6441: 6353: 101: 
 6618:  6530:  6442: 6354: 102: ### 1️⃣ **Sledding Phase (Downhill) ⬇️**
 6619:  6531:  6443: 6355: 103: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
 6620:  6532:  6444: 6356: 104: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
 6621:  6533:  6445: 6357: 105: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
 6622:  6534:  6446: 6358: 106: - **Obstacles:**
 6623:  6535:  6447: 6359: 107:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
 6624:  6536:  6448: 6360: 108:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
 6625:  6537:  6449: 6361: 109:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
 6626:  6538:  6450: 6362: 110: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
 6627:  6539:  6451: 6363: 111: - **Time Trials:**  
 6628:  6540:  6452: 6364: 112:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
 6629:  6541:  6453: 6365: 113:   - **Your time between activators determines your bonus.**  
 6630:  6542:  6454: 6366: 114:   - **Faster times = more money!**  
 6631:  6543:  6455: 6367: 115:   - Not all runs are timed; only those where you activate a trial.  
 6632:  6544:  6456: 6368: 116: 
 6633:  6545:  6457: 6369: 117: ---
 6634:  6546:  6458: 6370: 118: 
 6635:  6547:  6459: 6371: 119: ### 2️⃣ **Climbing Phase (Uphill) ⬆️**
 6636:  6548:  6460: 6372: 120: 🚶 **Top-down adventure traversal with stamina management and exploration.**  
 6637:  6549:  6461: 6373: 121: - **Goal:** Return to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
 6638:  6550:  6462: 6374: 122: - **Terrain:** The same generated world as the downhill run (no regenerating between runs).  
 6639:  6551:  6463: 6375: 123: - **Stamina System:**  
 6640:  6552:  6464: 6376: 124:   - Stamina drains when hiking.  
 6641:  6553:  6465: 6377: 125:   - Replenished by **food stands, resting points, or upgrades**.  
 6642:  6554:  6466: 6378: 126: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
 6643:  6555:  6467: 6379: 127:   - **Random animals appear every 5–10 seconds (TWEAK variable).**  
 6644:  6556:  6468: 6380: 128:   - Animals either **stay still (1–20 seconds) or move (making them harder to photograph).**  
 6645:  6557:  6469: 6381: 129:   - **Use the Arrow Keys to aim the camera cone** around your character.  
 6646:  6558:  6470: 6382: 130:   - **Align the altitude line** with the animal’s altitude for a perfect shot.  
 6647:  6559:  6471: 6383: 131:   - **Photos earn money, with multipliers for:**  
 6648:  6560:  6472: 6384: 132:     - Accuracy (center of POV cone).  
 6649:  6561:  6473: 6385: 133:     - Altitude match precision.  
 6650:  6562:  6474: 6386: 134:     - Moving vs. stationary targets (moving = 3x value).  
 6651:  6563:  6475: 6387: 135: 
 6652:  6564:  6476: 6388: 136: ---
 6653:  6565:  6477: 6389: 137: 
 6654:  6566:  6478: 6390: 138: ### 3️⃣ **Management Phase (House & Upgrades) 🏠**
 6655:  6567:  6479: 6391: 139: 🏡 **Upgrade your gear, mountain, and social media presence.**  
 6656:  6568:  6480: 6392: 140: - **Spend earned money on:**
 6657:  6569:  6481: 6393: 141:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
 6658:  6570:  6482: 6394: 142:   - **Sled Upgrades:** Speed, handling, trick potential.  
 6659:  6571:  6483: 6395: 143:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
 6660:  6572:  6484: 6396: 144: - **New Game Start:**  
 6661:  6573:  6485: 6397: 145:   - Mountain **ONLY regenerates when starting a completely new game.**  
 6662:  6574:  6486: 6398: 146:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
 6663:  6575:  6487: 6399: 147:   - **Current seed is displayed at home.**  
 6664:  6576:  6488: 6400: 148: 
 6665:  6577:  6489: 6401: 149: ---
 6666:  6578:  6490: 6402: 150: 
 6667:  6579:  6491: 6403: 151: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
 6668:  6580:  6492: 6404: 152: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
 6669:  6581:  6493: 6405: 153: 
 6670:  6582:  6494: 6406: 154: 1. **☁️🪂 Parachute (Up, Down)**  
 6671:  6583:  6495: 6407: 155:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
 6672:  6584:  6496: 6408: 156:    **Pixel Art Representation:**  
 6673:  6585:  6497: 6409: 157:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
 6674:  6586:  6498: 6410: 158: 
 6675:  6587:  6499: 6411: 159: 2. **🛑🎿 Air Brake (Up, Up)**  
 6676:  6588:  6500: 6412: 160:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
 6677:  6589:  6501: 6413: 161:    **Pixel Art Representation:**  
 6678:  6590:  6502: 6414: 162:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
 6679:  6591:  6503: 6415: 163: 
 6680:  6592:  6504: 6416: 164: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
 6681:  6593:  6505: 6417: 165:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
 6682:  6594:  6506: 6418: 166:    **Pixel Art Representation:**  
 6683:  6595:  6507: 6419: 167:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
 6684:  6596:  6508: 6420: 168: 
 6685:  6597:  6509: 6421: 169: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
 6686:  6598:  6510: 6422: 170:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
 6687:  6599:  6511: 6423: 171:    **Pixel Art Representation:**  
 6688:  6600:  6512: 6424: 172:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
 6689:  6601:  6513: 6425: 173: 
 6690:  6602:  6514: 6426: 174: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
 6691:  6603:  6515: 6427: 175:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
 6692:  6604:  6516: 6428: 176:    **Pixel Art Representation:**  
 6693:  6605:  6517: 6429: 177:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
 6694:  6606:  6518: 6430: 178: 
 6695:  6607:  6519: 6431: 179: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
 6696:  6608:  6520: 6432: 180:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
 6697:  6609:  6521: 6433: 181:    **Pixel Art Representation:**  
 6698:  6610:  6522: 6434: 182:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
 6699:  6611:  6523: 6435: 183: 
 6700:  6612:  6524: 6436: 184: 7. **🦸‍♂️✨ Superman (Down, Down)**  
 6701:  6613:  6525: 6437: 185:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
 6702:  6614:  6526: 6438: 186:    **Pixel Art Representation:**  
 6703:  6615:  6527: 6439: 187:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
 6704:  6616:  6528: 6440: 188: 
 6705:  6617:  6529: 6441: 189: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
 6706:  6618:  6530: 6442: 190:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
 6707:  6619:  6531: 6443: 191:    **Pixel Art Representation:**  
 6708:  6620:  6532: 6444: 192:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
 6709:  6621:  6533: 6445: 193: 
 6710:  6622:  6534: 6446: 194: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
 6711:  6623:  6535: 6447: 195:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
 6712:  6624:  6536: 6448: 196:    **Pixel Art Representation:**  
 6713:  6625:  6537: 6449: 197:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
 6714:  6626:  6538: 6450: 198: 
 6715:  6627:  6539: 6451: 199: 10. **👻🔥 Ghost Rider (Left, Right)**  
 6716:  6628:  6540: 6452: 200:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
 6717:  6629:  6541: 6453: 201:     **Pixel Art Representation:**  
 6718:  6630:  6542: 6454: 202:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
 6719:  6631:  6543: 6455: 203: 
 6720:  6632:  6544: 6456: 204: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
 6721:  6633:  6545: 6457: 205:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
 6722:  6634:  6546: 6458: 206:     **Pixel Art Representation:**  
 6723:  6635:  6547: 6459: 207:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
 6724:  6636:  6548: 6460: 208: 
 6725:  6637:  6549: 6461: 209: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
 6726:  6638:  6550: 6462: 210:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
 6727:  6639:  6551: 6463: 211:     **Pixel Art Representation:**  
 6728:  6640:  6552: 6464: 212:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
 6729:  6641:  6553: 6465: 213: 
 6730:  6642:  6554: 6466: 214: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
 6731:  6643:  6555: 6467: 215:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
 6732:  6644:  6556: 6468: 216:     **Pixel Art Representation:**  
 6733:  6645:  6557: 6469: 217:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
 6734:  6646:  6558: 6470: 218: 
 6735:  6647:  6559: 6471: 219: 14. **✨⬆️ Falling Star (Down, Up)**  
 6736:  6648:  6560: 6472: 220:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
 6737:  6649:  6561: 6473: 221:     **Pixel Art Representation:**  
 6738:  6650:  6562: 6474: 222:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
 6739:  6651:  6563: 6475: 223: 
 6740:  6652:  6564: 6476: 224: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
 6741:  6653:  6565: 6477: 225:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
 6742:  6654:  6566: 6478: 226:     **Pixel Art Representation:**  
 6743:  6655:  6567: 6479: 227:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
 6744:  6656:  6568: 6480: 228: 
 6745:  6657:  6569: 6481: 229: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
 6746:  6658:  6570: 6482: 230:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
 6747:  6659:  6571: 6483: 231:     **Pixel Art Representation:**  
 6748:  6660:  6572: 6484: 232:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
 6749:  6661:  6573: 6485: 233: 
 6750:  6662:  6574: 6486: 234: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
 6751:  6663:  6575: 6487: 235: 
 6752:  6664:  6576: 6488: 236: ---
 6753:  6665:  6577: 6489: 237: 
 6754:  6666:  6578: 6490: 238: ## 🔧 **Upgrade System**
 6755:  6667:  6579: 6491: 239: 
 6756:  6668:  6580: 6492: 240: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
 6757:  6669:  6581: 6493: 241: | Upgrade                    | Effect                                             |
 6758:  6670:  6582: 6494: 242: |----------------------------|----------------------------------------------------|
 6759:  6671:  6583: 6495: 243: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
 6760:  6672:  6584: 6496: 244: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
 6761:  6673:  6585: 6497: 245: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
 6762:  6674:  6586: 6498: 246: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
 6763:  6675:  6587: 6499: 247: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
 6764:  6676:  6588: 6500: 248: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
 6765:  6677:  6589: 6501: 249: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
 6766:  6678:  6590: 6502: 250: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
 6767:  6679:  6591: 6503: 251: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
 6768:  6680:  6592: 6504: 252: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
 6769:  6681:  6593: 6505: 253: 
 6770:  6682:  6594: 6506: 254: ---
 6771:  6683:  6595: 6507: 255: 
 6772:  6684:  6596: 6508: 256: ### 🏔️ Mountain Upgrades (Resort Expansion)
 6773:  6685:  6597: 6509: 257: | Upgrade                        | Effect                                                         |
 6774:  6686:  6598: 6510: 258: |--------------------------------|----------------------------------------------------------------|
 6775:  6687:  6599: 6511: 259: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
 6776:  6688:  6600: 6512: 260: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
 6777:  6689:  6601: 6513: 261: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
 6778:  6690:  6602: 6514: 262: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
 6779:  6691:  6603: 6515: 263: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
 6780:  6692:  6604: 6516: 264: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
 6781:  6693:  6605: 6517: 265: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
 6782:  6694:  6606: 6518: 266: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
 6783:  6695:  6607: 6519: 267: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
 6784:  6696:  6608: 6520: 268: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
 6785:  6697:  6609: 6521: 269: 
 6786:  6698:  6610: 6522: 270: ---
 6787:  6699:  6611: 6523: 271: 
 6788:  6700:  6612: 6524: 272: ## ⚖️ **Game Balance & Tweakable Variables**
 6789:  6701:  6613: 6525: 273: All these are stored in the **TWEAK object** for easy adjustments:
 6790:  6702:  6614: 6526: 274: - Wildlife spawn times (min/max).
 6791:  6703:  6615: 6527: 275: - Wildlife **sit duration** (min/max).
 6792:  6704:  6616: 6528: 276: - Moving animal multiplier.
 6793:  6705:  6617: 6529: 277: - Camera **POV cone size**.
 6794:  6706:  6618: 6530: 278: - **Time trial activator frequency** & bonuses.
 6795:  6707:  6619: 6531: 279: - **Stamina drain rates**.
 6796:  6708:  6620: 6532: 280: - **Mountain regeneration rules**.
 6797:  6709:  6621: 6533: 281: - **Trick scoring multipliers**.
 6798:  6710:  6622: 6534: 282: - **Photograph accuracy bonuses**. 
 6799:  6711:  6623: 6535: 283: 
 6800:  6712:  6624: 6536: 284: **Progression Goals:**  
 6801:  6713:  6625: 6537: 285: - **Prototype:** Repay the cost of the mountain.  
 6802:  6714:  6626: 6538: 286: - **Full Game:**  
 6803:  6715:  6627: 6539: 287:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
 6804:  6716:  6628: 6540: 288:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
 6805:  6717:  6629: 6541: 289:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
 6806:  6718:  6630: 6542: 290:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
 6807:  6719:  6631: 6543: 291: 
 6808:  6720:  6632: 6544: 292: ---
 6809:  6721:  6633: 6545: 293: 
 6810:  6722:  6634: 6546: 294: ## 🏔️ **Mountain Themes & Progression**
 6811:  6723:  6635: 6547: 295: 
 6812:  6724:  6636: 6548: 296: ### Lava Mountain 🌋
 6813:  6725:  6637: 6549: 297: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
 6814:  6726:  6638: 6550: 298: - **Mechanics:**  
 6815:  6727:  6639: 6551: 299:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
 6816:  6728:  6640: 6552: 300:   - **Ash Clouds:** Temporarily block visibility.
 6817:  6729:  6641: 6553: 301: - **Power-Up:** **Heat Shielding Sled Coating**  
 6818:  6730:  6642: 6554: 302:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
 6819:  6731:  6643: 6555: 303: 
 6820:  6732:  6644: 6556: 304: ---
 6821:  6733:  6645: 6557: 305: 
 6822:  6734:  6646: 6558: 306: ### Space Mountain 🌌
 6823:  6735:  6647: 6559: 307: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
 6824:  6736:  6648: 6560: 308: - **Mechanics:**  
 6825:  6737:  6649: 6561: 309:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
 6826:  6738:  6650: 6562: 310:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
 6827:  6739:  6651: 6563: 311: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
 6828:  6740:  6652: 6564: 312:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
 6829:  6741:  6653: 6565: 313: 
 6830:  6742:  6654: 6566: 314: ---
 6831:  6743:  6655: 6567: 315: 
 6832:  6744:  6656: 6568: 316: ### Underwater Mountain 🌊
 6833:  6745:  6657: 6569: 317: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
 6834:  6746:  6658: 6570: 318: - **Mechanics:**  
 6835:  6747:  6659: 6571: 319:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
 6836:  6748:  6660: 6572: 320: - **Power-Up:** **Aqua-Lung Mittens**  
 6837:  6749:  6661: 6573: 321:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
 6838:  6750:  6662: 6574: 322: 
 6839:  6751:  6663: 6575: 323: ---
 6840:  6752:  6664: 6576: 324: 
 6841:  6753:  6665: 6577: 325: ### Garbage Dump Glacier 🗑️❄️
 6842:  6754:  6666: 6578: 326: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
 6843:  6755:  6667: 6579: 327: - **Mechanics:**  
 6844:  6756:  6668: 6580: 328:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
 6845:  6757:  6669: 6581: 329: - **Power-Up:** **Slick Wax Spray**  
 6846:  6758:  6670: 6582: 330:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
 6847:  6759:  6671: 6583: 331: 
 6848:  6760:  6672: 6584: 332: ---
 6849:  6761:  6673: 6585: 333: 
 6850:  6762:  6674: 6586: 334: ### Micro Mountain 🐜🌱
 6851:  6763:  6675: 6587: 335: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
 6852:  6764:  6676: 6588: 336: - **Mechanics:**  
 6853:  6765:  6677: 6589: 337:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
 6854:  6766:  6678: 6590: 338: - **Power-Up:** **Antigrav Wax**  
 6855:  6767:  6679: 6591: 339:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
 6856:  6768:  6680: 6592: 340: 
 6857:  6769:  6681: 6593: 341: ---
 6858:  6770:  6682: 6594: 342: 
 6859:  6771:  6683: 6595: 343: ### Candy Cane Canyon 🍭
 6860:  6772:  6684: 6596: 344: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
 6861:  6773:  6685: 6597: 345: - **Mechanics:**  
 6862:  6774:  6686: 6598: 346:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
 6863:  6775:  6687: 6599: 347: - **Power-Up:** **Sweet-Tooth Coating**  
 6864:  6776:  6688: 6600: 348:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
 6865:  6777:  6689: 6601: 349: 
 6866:  6778:  6690: 6602: 350: ---
 6867:  6779:  6691: 6603: 351: 
 6868:  6780:  6692: 6604: 352: ### Crystal Cave Cavern 🔮
 6869:  6781:  6693: 6605: 353: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
 6870:  6782:  6694: 6606: 354: - **Mechanics:**  
 6871:  6783:  6695: 6607: 355:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
 6872:  6784:  6696: 6608: 356: - **Power-Up:** **Crystal Clear Goggles**  
 6873:  6785:  6697: 6609: 357:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
 6874:  6786:  6698: 6610: 358: 
 6875:  6787:  6699: 6611: 359: ---
 6876:  6788:  6700: 6612: 360: 
 6877:  6789:  6701: 6613: 361: ### Haunted Graveyard Hill 👻
 6878:  6790:  6702: 6614: 362: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
 6879:  6791:  6703: 6615: 363: - **Mechanics:**  
 6880:  6792:  6704: 6616: 364:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
 6881:  6793:  6705: 6617: 365: - **Power-Up:** **Spirit Lantern**  
 6882:  6794:  6706: 6618: 366:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
 6883:  6795:  6707: 6619: 367: 
 6884:  6796:  6708: 6620: 368: ---
 6885:  6797:  6709: 6621: 369: 
 6886:  6798:  6710: 6622: 370: ### Sky Jellyfish Mountain ☁️🪼
 6887:  6799:  6711: 6623: 371: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
 6888:  6800:  6712: 6624: 372: - **Mechanics:**  
 6889:  6801:  6713: 6625: 373:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
 6890:  6802:  6714: 6626: 374: - **Power-Up:** **Stabilizer Sled Rails**  
 6891:  6803:  6715: 6627: 375:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
 6892:  6804:  6716: 6628: 376: 
 6893:  6805:  6717: 6629: 377: ---
 6894:  6806:  6718: 6630: 378: 
 6895:  6807:  6719: 6631: 379: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
 6896:  6808:  6720: 6632: 380: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
 6897:  6809:  6721: 6633: 381: - **Mechanics:**  
 6898:  6810:  6722: 6634: 382:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
 6899:  6811:  6723: 6635: 383: - **Power-Up:** **Clockwork Treads**  
 6900:  6812:  6724: 6636: 384:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
 6901:  6813:  6725: 6637: 385: 
 6902:  6814:  6726: 6638: 386: ---
 6903:  6815:  6727: 6639: 387: 
 6904:  6816:  6728: 6640: 388: ### Pyramid Peak 🐫🏜️
 6905:  6817:  6729: 6641: 389: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
 6906:  6818:  6730: 6642: 390: - **Mechanics:**  
 6907:  6819:  6731: 6643: 391:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
 6908:  6820:  6732: 6644: 392: - **Power-Up:** **Sandrunner Skis**  
 6909:  6821:  6733: 6645: 393:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
 6910:  6822:  6734: 6646: 394: 
 6911:  6823:  6735: 6647: 395: ---
 6912:  6824:  6736: 6648: 396: 
 6913:  6825:  6737: 6649: 397: ### Digital Mountain (Cyber Slopes) 💻🔮
 6914:  6826:  6738: 6650: 398: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
 6915:  6827:  6739: 6651: 399: - **Mechanics:**  
 6916:  6828:  6740: 6652: 400:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
 6917:  6829:  6741: 6653: 401: - **Power-Up:** **Data Shielding**  
 6918:  6830:  6742: 6654: 402:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
 6919:  6831:  6743: 6655: 403: 
 6920:  6832:  6744: 6656: 404: ---
 6921:  6833:  6745: 6657: 405: 
 6922:  6834:  6746: 6658: 406: ## 🎮 **Mini-Games in SledHEAD**
 6923:  6835:  6747: 6659: 407: 
 6924:  6836:  6748: 6660: 408: ### 1. **Animal Photography** 📸🐾
 6925:  6837:  6749: 6661: 409: - **Objective:**  
 6926:  6838:  6750: 6662: 410:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
 6927:  6839:  6751: 6663: 411: - **Mechanics:**  
 6928:  6840:  6752: 6664: 412:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
 6929:  6841:  6753: 6665: 413:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
 6930:  6842:  6754: 6666: 414:   - **Scoring Bonuses:**  
 6931:  6843:  6755: 6667: 415:     - **Altitude Match Multiplier**  
 6932:  6844:  6756: 6668: 416:     - **POV Centering Bonus**  
 6933:  6845:  6757: 6669: 417:     - **Speed Capture Bonus**  
 6934:  6846:  6758: 6670: 418: - **Upgrades:**  
 6935:  6847:  6759: 6671: 419:   - **Optimal Optics:** Increases the camera’s POV cone.  
 6936:  6848:  6760: 6672: 420:   - **Steady Hands:** Reduces camera sway.  
 6937:  6849:  6761: 6673: 421:   - **Animal Baiting:** Increases rare animal appearance.
 6938:  6850:  6762: 6674: 422: - **Special Events:**  
 6939:  6851:  6763: 6675: 423:   - **Rare Animal Sightings** and **Storm Photography**.
 6940:  6852:  6764: 6676: 424: - **Risk/Challenge:**  
 6941:  6853:  6765: 6677: 425:   - **Repeat Photo Penalty** and aggressive animal disruptions.
 6942:  6854:  6766: 6678: 426: 
 6943:  6855:  6767: 6679: 427: ---
 6944:  6856:  6768: 6680: 428: 
 6945:  6857:  6769: 6681: 429: ### 2. **Fishing** 🎣🐟  
 6946:  6858:  6770: 6682: 430: - **Objective:**  
 6947:  6859:  6771: 6683: 431:   Catch fish using various techniques and bait types.
 6948:  6860:  6772: 6684: 432: - **Mechanics:**  
 6949:  6861:  6773: 6685: 433:   - Dynamic water simulation with varied fish behaviors.  
 6950:  6862:  6774: 6686: 434:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
 6951:  6863:  6775: 6687: 435:   - Legendary fish yield major rewards.
 6952:  6864:  6776: 6688: 436: - **Upgrades:**  
 6953:  6865:  6777: 6689: 437:   - Stronger fishing lines, advanced lures, and sonar detection.
 6954:  6866:  6778: 6690: 438: - **Special Events:**  
 6955:  6867:  6779: 6691: 439:   - Fishing tournaments and rare migration patterns.
 6956:  6868:  6780: 6692: 440: - **Risk/Challenge:**  
 6957:  6869:  6781: 6693: 441:   - Line snapping and predator interference.
 6958:  6870:  6782: 6694: 442: 
 6959:  6871:  6783: 6695: 443: ---
 6960:  6872:  6784: 6696: 444: 
 6961:  6873:  6785: 6697: 445: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
 6962:  6874:  6786: 6698: 446: - **Objective:**  
 6963:  6875:  6787: 6699: 447:   Unlock doors, safes, and hidden compartments.
 6964:  6876:  6788: 6700: 448: - **Mechanics:**  
 6965:  6877:  6789: 6701: 449:   - Use tools like **rakes, hooks, and tension wrenches**.  
 6966:  6878:  6790: 6702: 450:   - Navigate traps such as alarms and rusted internals.
 6967:  6879:  6791: 6703: 451: - **Upgrades:**  
 6968:  6880:  6792: 6704: 452:   - High-quality picks, electronic bypass tools, and vibration sensors.
 6969:  6881:  6793: 6705: 453: - **Special Events:**  
 6970:  6882:  6794: 6706: 454:   - Timed heists and races with rival scavengers.
 6971:  6883:  6795: 6707: 455: - **Risk/Challenge:**  
 6972:  6884:  6796: 6708: 456:   - Unstable buildings and hazards that may alert authorities.
 6973:  6885:  6797: 6709: 457: 
 6974:  6886:  6798: 6710: 458: ---
 6975:  6887:  6799: 6711: 459: 
 6976:  6888:  6800: 6712: 460: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
 6977:  6889:  6801: 6713: 461: - **Objective:**  
 6978:  6890:  6802: 6714: 462:   Find buried treasure using maps, clues, and metal detectors.
 6979:  6891:  6803: 6715: 463: - **Mechanics:**  
 6980:  6892:  6804: 6716: 464:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
 6981:  6893:  6805: 6717: 465:   - Digging requires stamina management and upgraded tools.
 6982:  6894:  6806: 6718: 466: - **Upgrades:**  
 6983:  6895:  6807: 6719: 467:   - Advanced metal detectors, excavation tools, and digging drones.
 6984:  6896:  6808: 6720: 468: - **Special Events:**  
 6985:  6897:  6809: 6721: 469:   - NPC treasure races and secret cache discoveries.
 6986:  6898:  6810: 6722: 470: - **Risk/Challenge:**  
 6987:  6899:  6811: 6723: 471:   - Booby traps, hostile environments, and law enforcement risks.
 6988:  6900:  6812: 6724: 472: 
 6989:  6901:  6813: 6725: 473: ---
 6990:  6902:  6814: 6726: 474: 
 6991:  6903:  6815: 6727: 475: ### 5. **Kite Flying** 🪁🌬️  
 6992:  6904:  6816: 6728: 476: - **Objective:**  
 6993:  6905:  6817: 6729: 477:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
 6994:  6906:  6818: 6730: 478: - **Mechanics:**  
 6995:  6907:  6819: 6731: 479:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
 6996:  6908:  6820: 6732: 480:   - **Downhill:** Kites extend air time and grant special bonuses.
 6997:  6909:  6821: 6733: 481: - **Upgrades:**  
 6998:  6910:  6822: 6734: 482:   - **Glide Boost, Speed Stream, and Aero Control.**
 6999:  6911:  6823: 6735: 483: - **Special Events:**  
 7000:  6912:  6824: 6736: 484:   - **Storm Riding** with higher boosts but riskier winds.
 7001:  6913:  6825: 6737: 485: - **Risk/Challenge:**  
 7002:  6914:  6826: 6738: 486:   - Strong gusts may destabilize your kite.
 7003:  6915:  6827: 6739: 487: 
 7004:  6916:  6828: 6740: 488: ---
 7005:  6917:  6829: 6741: 489: 
 7006:  6918:  6830: 6742: 490: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
 7007:  6919:  6831: 6743: 491: - **Objective:**  
 7008:  6920:  6832: 6744: 492:   Search for valuable minerals, gems, and gold.
 7009:  6921:  6833: 6745: 493: - **Mechanics:**  
 7010:  6922:  6834: 6746: 494:   - Explore rivers, caves, and rock formations.  
 7011:  6923:  6835: 6747: 495:   - **Panning:** Swirl water to separate gold.  
 7012:  6924:  6836: 6748: 496:   - **Pickaxe Mining:** Break rocks for hidden gems.
 7013:  6925:  6837: 6749: 497: - **Upgrades:**  
 7014:  6926:  6838: 6750: 498:   - High-tech panning kits, seismic scanners, precision drills.
 7015:  6927:  6839: 6751: 499: - **Special Events:**  
 7016:  6928:  6840: 6752: 500:   - Gold rush hotspots, rare mineral finds, and cave-ins.
 7017:  6929:  6841: 6753: 501: - **Risk/Challenge:**  
 7018:  6930:  6842: 6754: 502:   - Unstable ground and rival prospectors.
 7019:  6931:  6843: 6755: 503: 
 7020:  6932:  6844: 6756: 504: ---
 7021:  6933:  6845: 6757: 505: 
 7022:  6934:  6846: 6758: 506: ### 7. **Cryptid Fossil Digging** 🦴🔍  
 7023:  6935:  6847: 6759: 507: - **Objective:**  
 7024:  6936:  6848: 6760: 508:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
 7025:  6937:  6849: 6761: 509: - **Mechanics:**  
 7026:  6938:  6850: 6762: 510:   - Use brushes, chisels, and excavation tools to reveal fossils.  
 7027:  6939:  6851: 6763: 511:   - Transport fossils to the museum at the base of the first mountain.
 7028:  6940:  6852: 6764: 512: - **Upgrades:**  
 7029:  6941:  6853: 6765: 513:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
 7030:  6942:  6854: 6766: 514: - **Special Events:**  
 7031:  6943:  6855: 6767: 515:   - Competing paleontologists and hidden dig sites.
 7032:  6944:  6856: 6768: 516: - **Risk/Challenge:**  
 7033:  6945:  6857: 6769: 517:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
 7034:  6946:  6858: 6770: 518: 
 7035:  6947:  6859: 6771: 519: ---
 7036:  6948:  6860: 6772: 520: 
 7037:  6949:  6861: 6773: 521: ### 8. **Sled Tricking** 🛷✨  
 7038:  6950:  6862: 6774: 522: - **Objective:**  
 7039:  6951:  6863: 6775: 523:   Chain together aerial sled tricks to earn cash and boost fan engagement.
 7040:  6952:  6864: 6776: 524: - **Mechanics:**  
 7041:  6953:  6865: 6777: 525:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
 7042:  6954:  6866: 6778: 526:   - Chain tricks for higher multipliers.
 7043:  6955:  6867: 6779: 527: - **Upgrades:**  
 7044:  6956:  6868: 6780: 528:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
 7045:  6957:  6869: 6781: 529: - **Special Events:**  
 7046:  6958:  6870: 6782: 530:   - Trick challenges and fan-requested stunt competitions.
 7047:  6959:  6871: 6783: 531: - **Risk/Challenge:**  
 7048:  6960:  6872: 6784: 532:   - Mistimed tricks can cause crashes and loss of earnings.
 7049:  6961:  6873: 6785: 533: 
 7050:  6962:  6874: 6786: 534: ---
 7051:  6963:  6875: 6787: 535: 
 7052:  6964:  6876: 6788: 536: ### 9. **Time Trial Racing** 🏁🛷  
 7053:  6965:  6877: 6789: 537: - **Objective:**  
 7054:  6966:  6878: 6790: 538:   Trigger time trial races by hitting gates while sledding for money rewards.
 7055:  6967:  6879: 6791: 539: - **Mechanics:**  
 7056:  6968:  6880: 6792: 540:   - Crossing a time trial gate starts a timer.  
 7057:  6969:  6881: 6793: 541:   - The faster and further you go, the more money you earn.
 7058:  6970:  6882: 6794: 542: - **Why It Fits:**  
 7059:  6971:  6883: 6795: 543:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
 7060:  6972:  6884: 6796: 544: 
 7061:  6973:  6885: 6797: 545: ---
 7062:  6974:  6886: 6798: 546: 
 7063:  6975:  6887: 6799: 547: ### 10. **RC Motor Sled** ❄️🏎️  
 7064:  6976:  6888: 6800: 548: - **Objective:**  
 7065:  6977:  6889: 6801: 549:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
 7066:  6978:  6890: 6802: 550: - **Mechanics:**  
 7067:  6979:  6891: 6803: 551:   - Maneuver nimble RC sleds across frozen tundra.  
 7068:  6980:  6892: 6804: 552:   - Nitro boosts and mid-air tricks enhance performance.  
 7069:  6981:  6893: 6805: 553:   - Customization options include different sled bodies, engines, and handling upgrades.
 7070:  6982:  6894: 6806: 554: - **Special Events:**  
 7071:  6983:  6895: 6807: 555:   - Avalanche races, night rides, and hazard runs.
 7072:  6984:  6896: 6808: 556: - **Risk/Challenge:**  
 7073:  6985:  6897: 6809: 557:   - Limited battery life, high winds, and signal loss in deep snow.
 7074:  6986:  6898: 6810: 558: 
 7075:  6987:  6899: 6811: 559: ## 🏔️ **NPCs & Mountain Town Ecosystem**
 7076:  6988:  6900: 6812: 560: SledHEAD’s world is filled with **unique characters** who contribute to your journey as a **trick-riding, fan-growing, upgrade-building, sled-stunting** legend. Some run the town, some enhance your sledding skills, and others add depth to the **roguelike adventure**.
 7077:  6989:  6901: 6813: 561: 
 7078:  6990:  6902: 6814: 562: ---
 7079:  6991:  6903: 6815: 563: 
 7080:  6992:  6904: 6816: 564: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
 7081:  6993:  6905: 6817: 565: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
 7082:  6994:  6906: 6818: 566: 
 7083:  6995:  6907: 6819: 567: #### 🏂 **The Sled Tech (Sled Repairs & Mods)**
 7084:  6996:  6908: 6820: 568: - **Purpose:** Repairs damage, sells sled mods.
 7085:  6997:  6909: 6821: 569: - **Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
 7086:  6998:  6910: 6822: 570: - **Best Quote:** “What’d ya do, run into a moose? I can fix it… for a price.”
 7087:  6999:  6911: 6823: 571: 
 7088:  7000:  6912: 6824: 572: #### 🍔 **The Food Vendor (Buffs & Endurance Recovery)**
 7089:  7001:  6913: 6825: 573: - **Purpose:** Sells food that restores stamina and gives **temporary buffs** for sledding.
 7090:  7002:  6914: 6826: 574: - **Best Quote:** “Hot cocoa makes you go faster, I swear. Try it.”
 7091:  7003:  6915: 6827: 575: 
 7092:  7004:  6916: 6828: 576: #### 🎥 **The Stream Manager (Audience Growth & Sponsorships)**
 7093:  7005:  6917: 6829: 577: - **Purpose:** Manages your in-game audience; unlocks **sponsorship deals**.
 7094:  7006:  6918: 6830: 578: - **Best Quote:** “If you don’t clip the trick, did you even land it?”
 7095:  7007:  6919: 6831: 579: 
 7096:  7008:  6920: 6832: 580: #### 🏁 **The Race Commissioner (Tournaments & Time Trials)**
 7097:  7009:  6921: 6833: 581: - **Purpose:** Hosts **time trials, speedrun events, and competitive circuits**.
 7098:  7010:  6922: 6834: 582: - **Best Quote:** “Half a second off the record? C’mon, I thought you were good.”
 7099:  7011:  6923: 6835: 583: 
 7100:  7012:  6924: 6836: 584: #### 🚠 **The Lift Operator (Ski Lift & Shortcut Unlocks)**
 7101:  7013:  6925: 6837: 585: - **Purpose:** Lets you **unlock ski lifts** for quicker uphill trips.
 7102:  7014:  6926: 6838: 586: - **Upgrades Unlocked:** **Gondola expansions, VIP lift passes.**
 7103:  7015:  6927: 6839: 587: - **Best Quote:** “Sure, you could walk… or you could bribe me.”
 7104:  7016:  6928: 6840: 588: 
 7105:  7017:  6929: 6841: 589: ---
 7106:  7018:  6930: 6842: 590: 
 7107:  7019:  6931: 6843: 591: ### 💨 **Trick & Racing-Oriented NPCs (For Stunts, Style, & Money)**
 7108:  7020:  6932: 6844: 592: These folks help you **push your limits**, pull off **sick tricks**, and **maximize profits**.
 7109:  7021:  6933: 6845: 593: 
 7110:  7022:  6934: 6846: 594: #### 🎿 **The Trick Trainer (Advanced Trick Lessons)**
 7111:  7023:  6935: 6847: 595: - **Purpose:** Unlocks **trick combos & advanced air control.**
 7112:  7024:  6936: 6848: 596: - **Best Quote:** “No guts, no glory. You wanna spin faster? Listen up.”
 7113:  7025:  6937: 6849: 597: 
 7114:  7026:  6938: 6850: 598: #### 📸 **The Hype Photographer (Proof-Based Challenges & Bonus Money)**
 7115:  7027:  6939: 6851: 599: - **Purpose:** **Trick verification & photography mini-games**.
 7116:  7028:  6940: 6852: 600: - **Upgrades Unlocked:** **Slow-mo replays, sponsorship boosts for sick shots.**
 7117:  7029:  6941: 6853: 601: - **Best Quote:** “A trick’s only worth money if people see it.”
 7118:  7030:  6942: 6854: 602: 
 7119:  7031:  6943: 6855: 603: #### 💰 **The Black Market Gear Dealer (Risky Upgrades & Illegal Mods)**
 7120:  7032:  6944: 6856: 604: - **Purpose:** Sells **risky sled tech** (illegal nitro boosts, magnetized rails for grinds).
 7121:  7033:  6945: 6857: 605: - **Upgrades Unlocked:** **Unstable overclocked sled parts**.
 7122:  7034:  6946: 6858: 606: - **Best Quote:** “No refunds. Don’t ask what’s in it.”
 7123:  7035:  6947: 6859: 607: 
 7124:  7036:  6948: 6860: 608: #### 🤡 **The Stunt Organizer (Jackass-Style Events & Side Hustles)**
 7125:  7037:  6949: 6861: 609: - **Purpose:** Hosts **insane trick challenges** with **huge risk & reward**.
 7126:  7038:  6950: 6862: 610: - **Best Quote:** “Land a quadruple flip, and I’ll give you something real nice.”
 7127:  7039:  6951: 6863: 611: 
 7128:  7040:  6952: 6864: 612: ---
 7129:  7041:  6953: 6865: 613: 
 7130:  7042:  6954: 6866: 614: ### 🌎 **Worldbuilding NPCs (Exploration, Hidden Routes, & Fan Engagement)**
 7131:  7043:  6955: 6867: 615: These folks **expand the world** and **give reasons to explore**.
 7132:  7044:  6956: 6868: 616: 
 7133:  7045:  6957: 6869: 617: #### ⛷️ **The Retired Pro (Hidden Sledding Routes & Legend Quests)**
 7134:  7046:  6958: 6870: 618: - **Purpose:** Tells **lore, hidden trails, and backstory of previous champions.**
 7135:  7047:  6959: 6871: 619: - **Upgrades Unlocked:** **Secret mountain shortcuts & sled blueprints.**
 7136:  7048:  6960: 6872: 620: - **Best Quote:** “Before you, there was someone else. And he disappeared.”
 7137:  7049:  6961: 6873: 621: 
 7138:  7050:  6962: 6874: 622: #### 🦊 **The Wildlife Researcher (Animal Photography & Rare Fan Unlocks)**
 7139:  7051:  6963: 6875: 623: - **Purpose:** Ties into **wildlife photography mini-games**.
 7140:  7052:  6964: 6876: 624: - **Upgrades Unlocked:** **Animal-based sled skins & rare sponsor deals.**
 7141:  7053:  6965: 6877: 625: - **Best Quote:** “Snow leopards? They’re watching you, too.”
 7142:  7054:  6966: 6878: 626: 
 7143:  7055:  6967: 6879: 627: #### 📡 **The Event Broadcaster (Commentary & Competitive Meta)**
 7144:  7056:  6968: 6880: 628: - **Purpose:** Gives **updates on leaderboards, rival NPCs, and changing conditions**.
 7145:  7057:  6969: 6881: 629: - **Upgrades Unlocked:** **"Breaking News" reports on your achievements.**
 7146:  7058:  6970: 6882: 630: - **Best Quote:** “The fans are watching, buddy. Make it count.”
 7147:  7059:  6971: 6883: 631: 
 7148:  7060:  6972: 6884: 632: ---
 7149:  7061:  6973: 6885: 633: 
 7150:  7062:  6974: 6886: 634: ### 🛤️ **The Travel-Ready NPCs (Appear Across Multiple Mountains)**
 7151:  7063:  6975: 6887: 635: They **don’t just stay in one place**—you’ll run into them as you unlock new peaks.
 7152:  7064:  6976: 6888: 636: 
 7153:  7065:  6977: 6889: 637: #### 🎭 **The Rival (Dynamic Trick & Time Trial Duels)**
 7154:  7066:  6978: 6890: 638: - **Purpose:** Appears on any unlocked mountain to **challenge your records**.
 7155:  7067:  6979: 6891: 639: - **Best Quote:** “Your best time? That’s cute.”
 7156:  7068:  6980: 6892: 640: 
 7157:  7069:  6981: 6893: 641: #### 🛠️ **The Tinkerer (Experimental Sled Mods)**
 7158:  7070:  6982: 6894: 642: - **Purpose:** Sells **unstable, high-risk sled modifications**.
 7159:  7071:  6983: 6895: 643: - **Upgrades Unlocked:** **Prototype sled tech.**
 7160:  7072:  6984: 6896: 644: - **Best Quote:** “This is 50% science and 50% dumb luck.”
 7161:  7073:  6985: 6897: 645: 
 7162:  7074:  6986: 6898: 646: #### 🎩 **The Mysterious Merchant (Random Legendary Gear)**
 7163:  7075:  6987: 6899: 647: - **Purpose:** Appears randomly, selling **rare sleds & gear**.
 7164:  7076:  6988: 6900: 648: - **Best Quote:** “You don’t know what you need… until you see it.”
 7165:  7077:  6989: 6901: 649: 
 7166:  7078:  6990: 6902: 650: ---
 7167:  7079:  6991: 6903: 651: 
 7168:  7080:  6992: 6904: 652: ### 🎭 **The Wild Cards (Weird & Legendary NPCs)**
 7169:  7081:  6993: 6905: 653: These folks are **just strange**, but they add **flavor, mystery, and unpredictability**.
 7170:  7082:  6994: 6906: 654: 
 7171:  7083:  6995: 6907: 655: #### 👻 **The Ghost of the Mountain (Phantom Races & Haunted Challenges)**
 7172:  7084:  6996: 6908: 656: - **Purpose:** Unlocks **ghost time trials & haunted trick courses**.
 7173:  7085:  6997: 6909: 657: - **Best Quote:** “You ride my path, you race my shadow.”
 7174:  7086:  6998: 6910: 658: 
 7175:  7087:  6999: 6911: 659: #### 🧙‍♂️ **The Winter Shaman (Weather Manipulation & Magic Sleds)**
 7176:  7088:  7000: 6912: 660: - **Purpose:** **Controls mountain weather** for harder/easier runs.
 7177:  7089:  7001: 6913: 661: - **Best Quote:** “Blizzards make legends.”
 7178:  7090:  7002: 6914: 662: 
 7179:  7091:  7003: 6915: 663: #### 🐻 **The Bear Whisperer (Bear Sled Racing Mini-Game)**
 7180:  7092:  7004: 6916: 664: - **Purpose:** Lets you **race against trained bears** for money.
 7181:  7093:  7005: 6917: 665: - **Best Quote:** “You sled. They sled. Only one wins.”
 7182:  7094:  7006: 6918: 666: 
 7183:  7095:  7007: 6919: 667: #### 🥶 **The Ice Sculptor (Sled Cosmetics & Customization)**
 7184:  7096:  7008: 6920: 668: - **Purpose:** Crafts **one-of-a-kind sled designs**.
 7185:  7097:  7009: 6921: 669: - **Best Quote:** “Your ride should be a masterpiece.”
 7186:  7098:  7010: 6922: 670: 
 7187:  7099:  7011: 6923: 671: #### 🔮 **The Time Traveler (Future & Past Sled Tech)**
 7188:  7100:  7012: 6924: 672: - **Purpose:** Unlocks **anachronistic sled models** (steampunk, cyberpunk, caveman logs).
 7189:  7101:  7013: 6925: 673: - **Best Quote:** “The future’s fast. The past is brutal.”
 7190:  7102:  7014: 6926: 674: 
 7191:  7103:  7015: 6927: 675: ---
 7192:  7104:  7016: 6928: 676: 
 7193:  7105:  7017: 6929: 677: ## **🏔️ Final Thoughts**
 7194:  7106:  7018: 6930: 678: This crew **perfectly balances**:
 7195:  7107:  7019: 6931: 679: ✅ **Core game economy & upgrades**  
 7196:  7108:  7020: 6932: 680: ✅ **High-speed trick-focused gameplay**  
 7197:  7109:  7021: 6933: 681: ✅ **Exploration & hidden content**  
 7198:  7110:  7022: 6934: 682: ✅ **Hilarious but valuable side NPCs**  
 7199:  7111:  7023: 6935: 683: 
 7200:  7112:  7024: 6936: 684: These **NPCs make the town feel alive, push competitive play, and add world depth**. Get ready to **build, race, trick, and explore** with this **cast of unforgettable characters**.
 7201:  7113:  7025: 6937: `````
 7202:  7114:  7026: 6938: 
 7203:  7115:  7027: 6939: ## File: docs/CONTROLS.md
 7204:  7116:  7028: 6940: `````markdown
 7205:  7117:  7029: 6941:   1: # SledHEAD Game Controls
 7206:  7118:  7030: 6942:   2: 
 7207:  7119:  7031: 6943:   3: ## 🎯 Game Overview
 7208:  7120:  7032: 6944:   4: 
 7209:  7121:  7033: 6945:   5: SledHEAD is an **arcade-style sledding game** where you play as an **aspiring sledding champion & content creator** who has purchased an entire procedurally generated mountain. Your goal is to master the mountain through optimized sled runs, perform spectacular aerial tricks, photograph elusive wildlife, and earn money to upgrade your equipment and pay off your mountain loan.
 7210:  7122:  7034: 6946:   6: 
 7211:  7123:  7035: 6947:   7: The game consists of three distinct phases:
 7212:  7124:  7036: 6948:   8: 
 7213:  7125:  7037: 6949:   9: 1. **⬆️ Uphill/Climbing Phase** - Navigate uphill to find the perfect starting position, manage your stamina, and photograph wildlife
 7214:  7126:  7038: 6950:  10: 2. **⬇️ Downhill/Sledding Phase** - Race down the mountain, performing tricks and avoiding obstacles
 7215:  7127:  7039: 6951:  11: 3. **🏠 Management Phase** - Spend your earnings on upgrades for your equipment and mountain infrastructure
 7216:  7128:  7040: 6952:  12: 
 7217:  7129:  7041: 6953:  13: ---
 7218:  7130:  7042: 6954:  14: 
 7219:  7131:  7043: 6955:  15: ## 🎮 Core Controls
 7220:  7132:  7044: 6956:  16: 
 7221:  7133:  7045: 6957:  17: ### ⬆️ Uphill/Climbing Phase Controls
 7222:  7134:  7046: 6958:  18: 
 7223:  7135:  7047: 6959:  19: | Input | Action |
 7224:  7136:  7048: 6960:  20: |-------|--------|
 7225:  7137:  7049: 6961:  21: | **W/A/S/D** | Move the player up/left/down/right across the mountain |
 7226:  7138:  7050: 6962:  22: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line for photography |
 7227:  7139:  7051: 6963:  23: | **Spacebar** | Take a photograph when an animal is in view & the altitude line is rapidly flashing|
 7228:  7140:  7052: 6964:  24: | **E** | [Debug] Manually spawn an animal for testing |
 7229:  7141:  7053: 6965:  25: 
 7230:  7142:  7054: 6966:  26: During the uphill phase, you'll:
 7231:  7143:  7055: 6967:  27: - Navigate the mountain terrain to find optimal starting points
 7232:  7144:  7056: 6968:  28: - Manage your stamina (which depletes while climbing)
 7233:  7145:  7057: 6969:  29: - Photograph wildlife to earn additional money
 7234:  7146:  7058: 6970:  30: - Look for shortcuts and strategic positions for your downhill run
 7235:  7147:  7059: 6971:  31: 
 7236:  7148:  7060: 6972:  32: ### ⬇️ Downhill/Sledding Phase Controls
 7237:  7149:  7061: 6973:  33: 
 7238:  7150:  7062: 6974:  34: | Input | Action |
 7239:  7151:  7063: 6975:  35: |-------|--------|
 7240:  7152:  7064: 6976:  36: | **Arrow Keys ←→** | Steer your sled left or right |
 7241:  7153:  7065: 6977:  37: | **Spacebar** | Initiate jumps |
 7242:  7154:  7066: 6978:  38: | **Arrow Keys** (during jumps) | Perform tricks (specific combinations detailed below) |
 7243:  7155:  7067: 6979:  39: 
 7244:  7156:  7068: 6980:  40: During downhill sledding, you'll:
 7245:  7157:  7069: 6981:  41: - Build momentum and navigate the fastest route down
 7246:  7158:  7070: 6982:  42: - Avoid obstacles like rocks, trees, and tourists
 7247:  7159:  7071: 6983:  43: - Find and hit jumps to perform tricks
 7248:  7160:  7072: 6984:  44: - Chain tricks together for bonus rewards
 7249:  7161:  7073: 6985:  45: 
 7250:  7162:  7074: 6986:  46: ### 🏠 Management (House & Upgrades) Controls
 7251:  7163:  7075: 6987:  47: 
 7252:  7164:  7076: 6988:  48: Navigate menus using mouse/keyboard to:
 7253:  7165:  7077: 6989:  49: - Purchase equipment upgrades
 7254:  7166:  7078: 6990:  50: - Expand mountain infrastructure 
 7255:  7167:  7079: 6991:  51: - Track your earnings and loan payments
 7256:  7168:  7080: 6992:  52: - Check your current mountain seed (for sharing great mountains!)
 7257:  7169:  7081: 6993:  53: 
 7258:  7170:  7082: 6994:  54: ---
 7259:  7171:  7083: 6995:  55: 
 7260:  7172:  7084: 6996:  56: ## ✨ Trick System
 7261:  7173:  7085: 6997:  57: 
 7262:  7174:  7086: 6998:  58: Perform these trick combinations during jumps to earn additional cash:
 7263:  7175:  7087: 6999:  59: 
 7264:  7176:  7088: 7000:  60: | Trick Name | Input Combination | Description |
 7265:  7177:  7089: 7001:  61: |------------|-------------------|-------------|
 7266:  7178:  7090: 7002:  62: | **🚁⬅️ Helicopter Spin Left** | Left, Left | Spin horizontally like a helicopter twirling left |
 7267:  7179:  7091: 7003:  63: | **🚁➡️ Helicopter Spin Right** | Right, Right | Spin horizontally like a helicopter twirling right |
 7268:  7180:  7092: 7004:  64: | **🪂 Parachute** | Up, Down | Hold sled overhead to slow descent and extend air time |
 7269:  7181:  7093: 7005:  65: | **🛑 Air Brake** | Up, Up | Use sled as air brake to slow lateral speed |
 7270:  7182:  7094: 7006:  66: 
 7271:  7183:  7095: 7007:  67: **Trick Tips:**
 7272:  7184:  7096: 7008:  68: - Successfully landing tricks earns money
 7273:  7185:  7097: 7009:  69: - Chain tricks for bonus multipliers
 7274:  7186:  7098: 7010:  70: - Be careful - attempting tricks without enough air time can result in crashes!
 7275:  7187:  7099: 7011:  71: - Re-hitting jumps can extend combo chains
 7276:  7188:  7100: 7012:  72: 
 7277:  7189:  7101: 7013:  73: ---
 7278:  7190:  7102: 7014:  74: 
 7279:  7191:  7103: 7015:  75: ## 📸 Photography System Controls
 7280:  7192:  7104: 7016:  76: 
 7281:  7193:  7105: 7017:  77: | Control | Action |
 7282:  7194:  7106: 7018:  78: |---------|--------|
 7283:  7195:  7107: 7019:  79: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line |
 7284:  7196:  7108: 7020:  80: | **Spacebar** | Take photo |
 7285:  7197:  7109: 7021:  81: 
 7286:  7198:  7110: 7022:  82: **Photography Tips:**
 7287:  7199:  7111: 7023:  83: - Match the altitude line with the animal for maximum reward
 7288:  7200:  7112: 7024:  84: - Animals that are moving yield higher rewards
 7289:  7201:  7113: 7025:  85: - Each repeated photo of the same animal gives diminishing returns
 7290:  7202:  7114: 7026:  86: - Upgrade your camera equipment to improve your photography income
 7291:  7203:  7115: 7027:  87: 
 7292:  7204:  7116: 7028:  88: ---
 7293:  7205:  7117: 7029:  89: 
 7294:  7206:  7118: 7030:  90: ## ⚙️ Advanced Mechanics
 7295:  7207:  7119: 7031:  91: 
 7296:  7208:  7120: 7032:  92: ### Stamina Management
 7297:  7209:  7121: 7033:  93: - Stamina depletes during uphill climbing
 7298:  7210:  7122: 7034:  94: - Return to the house to end your day and restore stamina
 7299:  7211:  7123: 7035:  95: - Each day you will be charged 0.5% of your loan
 7300:  7212:  7124: 7036:  96: - If you run out of stamina, you are immediately returned to the house, and charged 100*(houseReEntry*0.1)
 7301:  7213:  7125: 7037:  97: - Upgrade your equipment to reduce stamina consumption
 7302:  7214:  7126: 7038:  98: 
 7303:  7215:  7127: 7039:  99: ### Collision Handling
 7304:  7216:  7128: 7040: 100: - Collisions with obstacles slow you down and may cause crashes
 7305:  7217:  7129: 7041: 101: - Upgrade sled durability to withstand more collisions
 7306:  7218:  7130: 7042: 102: - Each crash reduces your potential earnings
 7307:  7219:  7131: 7043: 103: 
 7308:  7220:  7132: 7044: 104: ### Upgrade System
 7309:  7221:  7133: 7045: 105: Spend your earnings on:
 7310:  7222:  7134: 7046: 106: - **Rocket Surgery**: Increases speed and jump dynamics
 7311:  7223:  7135: 7047: 107: - **Optimal Optics**: Improves camera angle and accuracy
 7312:  7224:  7136: 7048: 108: - **Sled Durability**: Increases collision tolerance
 7313:  7225:  7137: 7049: 109: - **Fancier Footwear**: Improves uphill movement speed
 7314:  7226:  7138: 7050: 110: 
 7315:  7227:  7139: 7051: 111: ### Win Condition
 7316:  7228:  7140: 7052: 112: - Pay off your mountain loan to trigger the victory state
 7317:  7229:  7141: 7053: 113: - Challenge yourself to complete this with fewer runs!
 7318:  7230:  7142: 7054: `````
 7319:  7231:  7143: 7055: 
 7320:  7232:  7144: 7056: ## File: docs/README.md
 7321:  7233:  7145: 7057: `````markdown
 7322:  7234:  7146: 7058:   1: # **SledHEAD**  
 7323:  7235:  7147: 7059:   2: **Genre:** Trick & Time Trial Racer | Adventure  
 7324:  7236:  7148: 7060:   3: **Platform:** Web-based (PC)  
 7325:  7237:  7149: 7061:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
 7326:  7238:  7150: 7062:   5: 
 7327:  7239:  7151: 7063:   6: > 🎮 **[Game Controls Guide](CONTROLS.md)** - Detailed explanation of all game controls and mechanics
 7328:  7240:  7152: 7064:   7: 
 7329:  7241:  7153: 7065:   8: ---
 7330:  7242:  7154: 7066:   9: 
 7331:  7243:  7155: 7067:  10: ## Table of Contents  
 7332:  7244:  7156: 7068:  11: 1. [Core Concept](#core-concept)  
 7333:  7245:  7157: 7069:  12: 2. [Gameplay Loops](#gameplay-loops)  
 7334:  7246:  7158: 7070:  13:    - [Sledding Phase (Downhill)](#sledding-phase-downhill)  
 7335:  7247:  7159: 7071:  14:    - [Climbing Phase (Uphill)](#climbing-phase-uphill)  
 7336:  7248:  7160: 7072:  15:    - [Management Phase (House & Upgrades)](#management-phase-house--upgrades)  
 7337:  7249:  7161: 7073:  16: 3. [Trick System](#trick-system)  
 7338:  7250:  7162: 7074:  17: 4. [Upgrade System](#upgrade-system)  
 7339:  7251:  7163: 7075:  18: 5. [Photo System](#photo-system)  
 7340:  7252:  7164: 7076:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)  
 7341:  7253:  7165: 7077:  20: 
 7342:  7254:  7166: 7078:  21: ---
 7343:  7255:  7167: 7079:  22: 
 7344:  7256:  7168: 7080:  23: ## 🎯 **Core Concept**  
 7345:  7257:  7169: 7081:  24: You are an **aspiring sledding champion & content creator**, challenging yourself to master an enormous mountain. Your goal is to optimize sled runs, perform aerial tricks, and earn money by completing daring stunts and photographing wildlife.
 7346:  7258:  7170: 7082:  25: 
 7347:  7259:  7171: 7083:  26: ---
 7348:  7260:  7172: 7084:  27: 
 7349:  7261:  7173: 7085:  28: ## 🎮 **Gameplay Loops**  
 7350:  7262:  7174: 7086:  29: 
 7351:  7263:  7175: 7087:  30: ### ⬇️ **Sledding Phase (Downhill)**  
 7352:  7264:  7176: 7088:  31: - **Speed & Gravity:** Race down the mountain, using gravity and momentum to your advantage.  
 7353:  7265:  7177: 7089:  32: - **Perform Tricks:** Execute tricks mid-air to earn extra cash.  
 7354:  7266:  7178: 7090:  33: - **Avoid Obstacles:** Rocks and other hazards can slow you down and increase collision counts.  
 7355:  7267:  7179: 7091:  34: 
 7356:  7268:  7180: 7092:  35: ### ⬆️ **Climbing Phase (Uphill)**  
 7357:  7269:  7181: 7093:  36: - **Manual Return:** Use simple directional controls to climb back up the mountain.  
 7358:  7270:  7182: 7094:  37: - **Camera Controls:** Rotate your camera and adjust the altitude line to prepare for wildlife photography.  
 7359:  7271:  7183: 7095:  38: 
 7360:  7272:  7184: 7096:  39: ### 🏠 **Management Phase (House & Upgrades)**  
 7361:  7273:  7185: 7097:  40: - **Upgrade Equipment:** Use your earnings to purchase upgrades that improve your sledding, camera, and movement capabilities.  
 7362:  7274:  7186: 7098:  41: - **Pay Off Loan:** Reduce your initial loan with the money you earn. Once it's fully repaid, you win!
 7363:  7275:  7187: 7099:  42: 
 7364:  7276:  7188: 7100:  43: ---
 7365:  7277:  7189: 7101:  44: 
 7366:  7278:  7190: 7102:  45: ## ✨ **Trick System**  
 7367:  7279:  7191: 7103:  46: - Perform tricks during jumps to earn additional cash.  
 7368:  7280:  7192: 7104:  47: - Tricks include:  
 7369:  7281:  7193: 7105:  48:   - **Left Helicopter** (Rotate left mid-air)  
 7370:  7282:  7194: 7106:  49:   - **Right Helicopter** (Rotate right mid-air)  
 7371:  7283:  7195: 7107:  50:   - **Air Brake** (Apply aerial braking)  
 7372:  7284:  7196: 7108:  51:   - **Parachute** (Deploy for controlled descent)  
 7373:  7285:  7197: 7109:  52: - Tricks can be chained for bonus rewards, and re-hit jumps can extend combo chains.  
 7374:  7286:  7198: 7110:  53: 
 7375:  7287:  7199: 7111:  54: ---
 7376:  7288:  7200: 7112:  55: 
 7377:  7289:  7201: 7113:  56: ## 🔧 **Upgrade System**  
 7378:  7290:  7202: 7114:  57: Upgrades enhance gameplay and include:
 7379:  7291:  7203: 7115:  58: 
 7380:  7292:  7204: 7116:  59: ### 🛷 **Personal Upgrades:**  
 7381:  7293:  7205: 7117:  60: - **Rocket Surgery:** Increases speed and jump dynamics.  
 7382:  7294:  7206: 7118:  61: - **Optimal Optics:** Improves camera angle and accuracy for better wildlife photography.  
 7383:  7295:  7207: 7119:  62: - **Sled Durability:** Increases the number of collisions you can survive.  
 7384:  7296:  7208: 7120:  63: - **Fancier Footwear:** Improves uphill movement speed.  
 7385:  7297:  7209: 7121:  64: 
 7386:  7298:  7210: 7122:  65: ### 🏔️ **Mountain Upgrades:**  
 7387:  7299:  7211: 7123:  66: - **Ski Lifts:** (Planned but not yet implemented)  
 7388:  7300:  7212: 7124:  67: - **Snowmobile Rentals:** (Planned but not yet implemented)  
 7389:  7301:  7213: 7125:  68: - **Groomed Trails:** (Planned but not yet implemented)  
 7390:  7302:  7214: 7126:  69: 
 7391:  7303:  7215: 7127:  70: ---
 7392:  7304:  7216: 7128:  71: 
 7393:  7305:  7217: 7129:  72: ## 📸 **Photo System**  
 7394:  7306:  7218: 7130:  73: - **Wildlife Spawning:** Bears and birds spawn during the uphill phase.  
 7395:  7307:  7219: 7131:  74: - **Camera Use:** Adjust the camera angle and altitude line to capture the perfect shot.  
 7396:  7308:  7220: 7132:  75: - **Scoring Factors:**  
 7397:  7309:  7221: 7133:  76:   - **Altitude Matching:** Better alignment with animal altitude increases reward.  
 7398:  7310:  7222: 7134:  77:   - **Centering:** Well-centered shots provide bonus payouts.  
 7399:  7311:  7223: 7135:  78:   - **Movement Bonus:** Photographing moving animals yields more cash.  
 7400:  7312:  7224: 7136:  79:   - **Repeat Penalty:** Avoid photographing the same animal multiple times for reduced penalties.  
 7401:  7313:  7225: 7137:  80: 
 7402:  7314:  7226: 7138:  81: ---
 7403:  7315:  7227: 7139:  82: 
 7404:  7316:  7228: 7140:  83: ## ⚙️ **Game Balance & Tweakable Variables**  
 7405:  7317:  7229: 7141:  84: Key variables that control game mechanics and can be adjusted include:  
 7406:  7318:  7230: 7142:  85: - **Jump Mechanics:** Height, duration, and zoom bonuses.  
 7407:  7319:  7231: 7143:  86: - **Animal Behavior:** Spawn times, movement speed, and flee mechanics.  
 7408:  7320:  7232: 7144:  87: - **Upgrade Costs & Effects:** Each upgrade scales in cost and effectiveness.  
 7409:  7321:  7233: 7145:  88: - **Collision Handling:** How collisions are managed and penalized.  
 7410:  7322:  7234: 7146:  89: 
 7411:  7323:  7235: 7147:  90: ---
 7412:  7324:  7236: 7148:  91: 
 7413:  7325:  7237: 7149:  92: ## 🎮 **Controls**  
 7414:  7326:  7238: 7150:  93: - **W/A/S/D:** Move the player during the uphill phase.  
 7415:  7327:  7239: 7151:  94: - **Arrow Keys:** Adjust the camera angle and altitude line.  
 7416:  7328:  7240: 7152:  95: - **Spacebar:**  
 7417:  7329:  7241: 7153:  96:   - **Downhill Phase:** Initiates jumps.  
 7418:  7330:  7242: 7154:  97:   - **Uphill Phase:** Takes a photo.  
 7419:  7331:  7243: 7155:  98: - **E:** Manually spawn an animal (for testing purposes).  
 7420:  7332:  7244: 7156:  99: 
 7421:  7333:  7245: 7157: 100: ---
 7422:  7334:  7246: 7158: 101: 
 7423:  7335:  7247: 7159: 102: ## ✅ **Win Condition**  
 7424:  7336:  7248: 7160: 103: - Pay off the initial loan to trigger the victory state.
 7425:  7337:  7249: 7161: `````
 7426:  7338:  7250: 7162: 
 7427:  7339:  7251: 7163: ## File: js/mobs/bear.js
 7428:  7340:  7252: 7164: `````javascript
 7429:  7341:  7253: 7165:  1: /* bear.js - Bear Animal Module
 7430:  7342:  7254: 7166:  2: // This module defines the bear characteristics for the wildlife simulation.
 7431:  7343:  7255: 7167:  3: // It registers itself with wildlife.js by calling registerAnimalType().
 7432:  7344:  7256: 7168:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 7433:  7345:  7257: 7169:  5: */
 7434:  7346:  7258: 7170:  6: (function() {
 7435:  7347:  7259: 7171:  7:     var bearData = {
 7436:  7348:  7260: 7172:  8:         type: "bear",
 7437:  7349:  7261: 7173:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.bearSpawnProbability) || 0.5,
 7438:  7350:  7262: 7174: 10:         width: 40,
 7439:  7351:  7263: 7175: 11:         height: 60,
 7440:  7352:  7264: 7176: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.bearDetectionRadius) || 50,
 7441:  7353:  7265: 7177: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.bearSpeed) || 8,
 7442:  7354:  7266: 7178: 14:         basePhotoBonus: 10, // Bears yield a higher photo bonus
 7443:  7355:  7267: 7179: 15:         color: "#8B4513",
 7444:  7356:  7268: 7180: 16:         spawningBiomes: [
 7445:  7357:  7269: 7181: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
 7446:  7358:  7270: 7182: 18:         ],
 7447:  7359:  7271: 7183: 19:         customUpdate: null,
 7448:  7360:  7272: 7184: 20:         customDraw: function(animal, screenY, ctx) {
 7449:  7361:  7273: 7185: 21:             // Draw the bear's body
 7450:  7362:  7274: 7186: 22:             ctx.fillStyle = "#8B4513";
 7451:  7363:  7275: 7187: 23:             ctx.fillRect(
 7452:  7364:  7276: 7188: 24:                 animal.x - animal.width / 2,
 7453:  7365:  7277: 7189: 25:                 screenY - animal.height / 2,
 7454:  7366:  7278: 7190: 26:                 animal.width,
 7455:  7367:  7279: 7191: 27:                 animal.height
 7456:  7368:  7280: 7192: 28:             );
 7457:  7369:  7281: 7193: 29:             // Draw bear ears as simple rectangles
 7458:  7370:  7282: 7194: 30:             ctx.fillStyle = "#000000";
 7459:  7371:  7283: 7195: 31:             ctx.fillRect(
 7460:  7372:  7284: 7196: 32:                 animal.x - animal.width / 3,
 7461:  7373:  7285: 7197: 33:                 screenY - animal.height / 2 - 10,
 7462:  7374:  7286: 7198: 34:                 10,
 7463:  7375:  7287: 7199: 35:                 10
 7464:  7376:  7288: 7200: 36:             );
 7465:  7377:  7289: 7201: 37:             ctx.fillRect(
 7466:  7378:  7290: 7202: 38:                 animal.x + animal.width / 3 - 10,
 7467:  7379:  7291: 7203: 39:                 screenY - animal.height / 2 - 10,
 7468:  7380:  7292: 7204: 40:                 10,
 7469:  7381:  7293: 7205: 41:                 10
 7470:  7382:  7294: 7206: 42:             );
 7471:  7383:  7295: 7207: 43:             // Altitude indicator
 7472:  7384:  7296: 7208: 44:             let t = 1 - (animal.altitude / 100);
 7473:  7385:  7297: 7209: 45:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 7474:  7386:  7298: 7210: 46:             ctx.fillStyle = altitudeColor;
 7475:  7387:  7299: 7211: 47:             ctx.fillRect(
 7476:  7388:  7300: 7212: 48:                 animal.x + animal.width / 2 + 5,
 7477:  7389:  7301: 7213: 49:                 screenY - 5,
 7478:  7390:  7302: 7214: 50:                 10,
 7479:  7391:  7303: 7215: 51:                 10
 7480:  7392:  7304: 7216: 52:             );
 7481:  7393:  7305: 7217: 53:         }
 7482:  7394:  7306: 7218: 54:     };
 7483:  7395:  7307: 7219: 55:     if (typeof registerAnimalType === 'function') {
 7484:  7396:  7308: 7220: 56:         registerAnimalType(bearData);
 7485:  7397:  7309: 7221: 57:     } else {
 7486:  7398:  7310: 7222: 58:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
 7487:  7399:  7311: 7223: 59:     }
 7488:  7400:  7312: 7224: 60: })();
 7489:  7401:  7313: 7225: `````
 7490:  7402:  7314: 7226: 
 7491:  7403:  7315: 7227: ## File: js/mobs/bird.js
 7492:  7404:  7316: 7228: `````javascript
 7493:  7405:  7317: 7229:  1: /* bird.js - Bird Animal Module
 7494:  7406:  7318: 7230:  2: // This module defines the bird characteristics for the wildlife simulation.
 7495:  7407:  7319: 7231:  3: // It registers itself with wildlife.js by calling registerAnimalType().
 7496:  7408:  7320: 7232:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 7497:  7409:  7321: 7233:  5: */
 7498:  7410:  7322: 7234:  6: (function() {
 7499:  7411:  7323: 7235:  7:     var birdData = {
 7500:  7412:  7324: 7236:  8:         type: "bird",
 7501:  7413:  7325: 7237:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.birdSpawnProbability) || 0.5,
 7502:  7414:  7326: 7238: 10:         width: 20,
 7503:  7415:  7327: 7239: 11:         height: 20,
 7504:  7416:  7328: 7240: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.birdDetectionRadius) || 50,
 7505:  7417:  7329: 7241: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.birdSpeed) || 12,
 7506:  7418:  7330: 7242: 14:         basePhotoBonus: 5, // Birds yield a lower photo bonus
 7507:  7419:  7331: 7243: 15:         color: "#1E90FF",
 7508:  7420:  7332: 7244: 16:         spawningBiomes: [
 7509:  7421:  7333: 7245: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
 7510:  7422:  7334: 7246: 18:         ],
 7511:  7423:  7335: 7247: 19:         customUpdate: null,
 7512:  7424:  7336: 7248: 20:         customDraw: function(animal, screenY, ctx) {
 7513:  7425:  7337: 7249: 21:             // Draw the bird's body
 7514:  7426:  7338: 7250: 22:             ctx.fillStyle = "#1E90FF";
 7515:  7427:  7339: 7251: 23:             ctx.fillRect(
 7516:  7428:  7340: 7252: 24:                 animal.x - animal.width / 2,
 7517:  7429:  7341: 7253: 25:                 screenY - animal.height / 2,
 7518:  7430:  7342: 7254: 26:                 animal.width,
 7519:  7431:  7343: 7255: 27:                 animal.height
 7520:  7432:  7344: 7256: 28:             );
 7521:  7433:  7345: 7257: 29:             // Draw bird wings with a simple flapping effect
 7522:  7434:  7346: 7258: 30:             ctx.fillStyle = "#000000";
 7523:  7435:  7347: 7259: 31:             if (Math.floor(Date.now() / 200) % 2 === 0) {
 7524:  7436:  7348: 7260: 32:                 ctx.beginPath();
 7525:  7437:  7349: 7261: 33:                 ctx.moveTo(animal.x, screenY);
 7526:  7438:  7350: 7262: 34:                 ctx.lineTo(animal.x - 20, screenY - 10);
 7527:  7439:  7351: 7263: 35:                 ctx.lineTo(animal.x + 20, screenY - 10);
 7528:  7440:  7352: 7264: 36:                 ctx.closePath();
 7529:  7441:  7353: 7265: 37:                 ctx.fill();
 7530:  7442:  7354: 7266: 38:             } else {
 7531:  7443:  7355: 7267: 39:                 ctx.beginPath();
 7532:  7444:  7356: 7268: 40:                 ctx.moveTo(animal.x, screenY);
 7533:  7445:  7357: 7269: 41:                 ctx.lineTo(animal.x - 20, screenY + 5);
 7534:  7446:  7358: 7270: 42:                 ctx.lineTo(animal.x + 20, screenY + 5);
 7535:  7447:  7359: 7271: 43:                 ctx.closePath();
 7536:  7448:  7360: 7272: 44:                 ctx.fill();
 7537:  7449:  7361: 7273: 45:             }
 7538:  7450:  7362: 7274: 46:             // Altitude indicator
 7539:  7451:  7363: 7275: 47:             let t = 1 - (animal.altitude / 100);
 7540:  7452:  7364: 7276: 48:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 7541:  7453:  7365: 7277: 49:             ctx.fillStyle = altitudeColor;
 7542:  7454:  7366: 7278: 50:             ctx.fillRect(
 7543:  7455:  7367: 7279: 51:                 animal.x + animal.width / 2 + 5,
 7544:  7456:  7368: 7280: 52:                 screenY - 5,
 7545:  7457:  7369: 7281: 53:                 10,
 7546:  7458:  7370: 7282: 54:                 10
 7547:  7459:  7371: 7283: 55:             );
 7548:  7460:  7372: 7284: 56:         }
 7549:  7461:  7373: 7285: 57:     };
 7550:  7462:  7374: 7286: 58:     if (typeof registerAnimalType === 'function') {
 7551:  7463:  7375: 7287: 59:         registerAnimalType(birdData);
 7552:  7464:  7376: 7288: 60:     } else {
 7553:  7465:  7377: 7289: 61:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
 7554:  7466:  7378: 7290: 62:     }
 7555:  7467:  7379: 7291: 63: })();
 7556:  7468:  7380: 7292: `````
 7557:  7469:  7381: 7293: 
 7558:  7470:  7382: 7294: ## File: js/input.js
 7559:  7471:  7383: 7295: `````javascript
 7560:  7472:  7384: 7296:  1: /* input.js - Keyboard Input Handling */
 7561:  7473:  7385: 7297:  2: // Global keyboard input tracking
 7562:  7474:  7386: 7298:  3: var keysDown = {};
 7563:  7475:  7387: 7299:  4: // Global cursor position tracking
 7564:  7476:  7388: 7300:  5: var cursorPosition = {
 7565:  7477:  7389: 7301:  6:   absoluteX: 0,
 7566:  7478:  7390: 7302:  7:   absoluteY: 0,
 7567:  7479:  7391: 7303:  8:   viewportX: 0,
 7568:  7480:  7392: 7304:  9:   viewportY: 0,
 7569:  7481:  7393: 7305: 10:   lastUpdateTime: 0
 7570:  7482:  7394: 7306: 11: };
 7571:  7483:  7395: 7307: 12: // Set up event listeners for keyboard input
 7572:  7484:  7396: 7308: 13: window.addEventListener("keydown", function(e) {
 7573:  7485:  7397: 7309: 14:   keysDown[e.key] = true;
 7574:  7486:  7398: 7310: 15: });
 7575:  7487:  7399: 7311: 16: window.addEventListener("keyup", function(e) {
 7576:  7488:  7400: 7312: 17:   keysDown[e.key] = false;
 7577:  7489:  7401: 7313: 18: });
 7578:  7490:  7402: 7314: 19: // Set up event listener for mouse movement
 7579:  7491:  7403: 7315: 20: window.addEventListener("mousemove", function(e) {
 7580:  7492:  7404: 7316: 21:   // Store both absolute and viewport coordinates
 7581:  7493:  7405: 7317: 22:   cursorPosition.absoluteX = e.pageX;
 7582:  7494:  7406: 7318: 23:   cursorPosition.absoluteY = e.pageY;
 7583:  7495:  7407: 7319: 24:   cursorPosition.viewportX = e.clientX;
 7584:  7496:  7408: 7320: 25:   cursorPosition.viewportY = e.clientY;
 7585:  7497:  7409: 7321: 26: });
 7586:  7498:  7410: 7322: 27: // Update the cursor position display
 7587:  7499:  7411: 7323: 28: function updateCursorPositionDisplay() {
 7588:  7500:  7412: 7324: 29:   const cursorPositionElement = document.getElementById("cursor-position");
 7589:  7501:  7413: 7325: 30:   if (cursorPositionElement) {
 7590:  7502:  7414: 7326: 31:     cursorPositionElement.textContent = `Abs-xy: (${cursorPosition.absoluteX}, ${cursorPosition.absoluteY}) | View: (${cursorPosition.viewportX}, ${cursorPosition.viewportY})`;
 7591:  7503:  7415: 7327: 32:   }
 7592:  7504:  7416: 7328: 33: }
 7593:  7505:  7417: 7329: 34: // Set up interval to update cursor position display once per second
 7594:  7506:  7418: 7330: 35: setInterval(updateCursorPositionDisplay, 1000);
 7595:  7507:  7419: 7331: 36: // Helper function to check if a key is currently pressed
 7596:  7508:  7420: 7332: 37: function isKeyDown(key) {
 7597:  7509:  7421: 7333: 38:   return keysDown[key] === true;
 7598:  7510:  7422: 7334: 39: }
 7599:  7511:  7423: 7335: `````
 7600:  7512:  7424: 7336: 
 7601:  7513:  7425: 7337: ## File: js/tricks.js
 7602:  7514:  7426: 7338: `````javascript
 7603:  7515:  7427: 7339:  1: /* tricks.js - Trick System & Logic */
 7604:  7516:  7428: 7340:  2: import { register } from './registry.js';
 7605:  7517:  7429: 7341:  3: function startTrick(trickName) {
 7606:  7518:  7430: 7342:  4:   if (player.currentTrick) return;
 7607:  7519:  7431: 7343:  5:   player.currentTrick = trickName;
 7608:  7520:  7432: 7344:  6:   player.trickTimer = 0;
 7609:  7521:  7433: 7345:  7:   player.trickRotation = 0;
 7610:  7522:  7434: 7346:  8:   player.trickOffset = 0;
 7611:  7523:  7435: 7347:  9:   let now = Date.now();
 7612:  7524:  7436: 7348: 10:   let cooldownEnd = player.trickCooldowns[trickName] || 0;
 7613:  7525:  7437: 7349: 11:   let timeLeft = Math.max(0, cooldownEnd - now);
 7614:  7526:  7438: 7350: 12:   player.currentTrickValueMultiplier = timeLeft > 0 ? Math.max(0.1, 1 - (timeLeft / TWEAK._trickCooldown)) : 1;
 7615:  7527:  7439: 7351: 13:   player.trickCooldowns[trickName] = now + TWEAK._trickCooldown;
 7616:  7528:  7440: 7352: 14:   console.log(`Starting ${trickName} (Value: ${(player.currentTrickValueMultiplier * 100).toFixed(0)}%)`);
 7617:  7529:  7441: 7353: 15: }
 7618:  7530:  7442: 7354: 16: register("startTrick", startTrick);
 7619:  7531:  7443: 7355: 17: function checkTrickInputs() {
 7620:  7532:  7444: 7356: 18:   if (!player.currentTrick && player.isJumping) {
 7621:  7533:  7445: 7357: 19:     if (keysDown["ArrowLeft"]) startTrick("leftHelicopter");
 7622:  7534:  7446: 7358: 20:     else if (keysDown["ArrowRight"]) startTrick("rightHelicopter");
 7623:  7535:  7447: 7359: 21:     else if (keysDown["ArrowUp"]) startTrick("airBrake");
 7624:  7536:  7448: 7360: 22:     else if (keysDown["ArrowDown"]) startTrick("parachute");
 7625:  7537:  7449: 7361: 23:   }
 7626:  7538:  7450: 7362: 24: }
 7627:  7539:  7451: 7363: 25: register("checkTrickInputs", checkTrickInputs);
 7628:  7540:  7452: 7364: 26: function processTrick(deltaTime) {
 7629:  7541:  7453: 7365: 27:   if (player.currentTrick) {
 7630:  7542:  7454: 7366: 28:     player.trickTimer += deltaTime;
 7631:  7543:  7455: 7367: 29:     let trickProgress = player.trickTimer / (TWEAK._trickBaseDuration * TWEAK._trickTimeMultiplier + TWEAK._trickTimeAdder);
 7632:  7544:  7456: 7368: 30:     switch (player.currentTrick) {
 7633:  7545:  7457: 7369: 31:       case "leftHelicopter":
 7634:  7546:  7458: 7370: 32:         player.trickRotation -= TWEAK._trickRotationSpeed * (deltaTime / 1000);
 7635:  7547:  7459: 7371: 33:         break;
 7636:  7548:  7460: 7372: 34:       case "rightHelicopter":
 7637:  7549:  7461: 7373: 35:         player.trickRotation += TWEAK._trickRotationSpeed * (deltaTime / 1000);
 7638:  7550:  7462: 7374: 36:         break;
 7639:  7551:  7463: 7375: 37:       case "airBrake":
 7640:  7552:  7464: 7376: 38:       case "parachute":
 7641:  7553:  7465: 7377: 39:         player.trickOffset = TWEAK._trickOffsetDistance * Math.sin(Math.PI * trickProgress);
 7642:  7554:  7466: 7378: 40:         break;
 7643:  7555:  7467: 7379: 41:     }
 7644:  7556:  7468: 7380: 42:     if (trickProgress >= 1) {
 7645:  7557:  7469: 7381: 43:       completeTrick();
 7646:  7558:  7470: 7382: 44:     }
 7647:  7559:  7471: 7383: 45:   }
 7648:  7560:  7472: 7384: 46: }
 7649:  7561:  7473: 7385: 47: register("processTrick", processTrick);
 7650:  7562:  7474: 7386: 48: function completeTrick() {
 7651:  7563:  7475: 7387: 49:   let trickMoney = TWEAK._trickMoneyBase;
 7652:  7564:  7476: 7388: 50:   let chainBonus = 1;
 7653:  7565:  7477: 7389: 51:   if (player.lastTrick && player.lastTrick !== player.currentTrick) {
 7654:  7566:  7478: 7390: 52:     player.trickChainCount++;
 7655:  7567:  7479: 7391: 53:     chainBonus = Math.pow(TWEAK._trickChainMultiplier, player.trickChainCount);
 7656:  7568:  7480: 7392: 54:     trickMoney *= chainBonus;
 7657:  7569:  7481: 7393: 55:   } else {
 7658:  7570:  7482: 7394: 56:     player.trickChainCount = 0;
 7659:  7571:  7483: 7395: 57:   }
 7660:  7572:  7484: 7396: 58:   trickMoney *= player.currentTrickValueMultiplier;
 7661:  7573:  7485: 7397: 59:   let finalMoney = Math.floor(trickMoney);
 7662:  7574:  7486: 7398: 60:   player.money += finalMoney;
 7663:  7575:  7487: 7399: 61:   showMoneyGain(finalMoney, `(${player.currentTrick})`);
 7664:  7576:  7488: 7400: 62:   addFloatingText(`+$${finalMoney} ${player.currentTrick}`, player.x, player.absY);
 7665:  7577:  7489: 7401: 63:   console.log(`Completed ${player.currentTrick}! +$${finalMoney}`);
 7666:  7578:  7490: 7402: 64:   player.lastTrick = player.currentTrick;
 7667:  7579:  7491: 7403: 65:   player.currentTrick = null;
 7668:  7580:  7492: 7404: 66:   player.trickTimer = 0;
 7669:  7581:  7493: 7405: 67:   player.trickRotation = 0;
 7670:  7582:  7494: 7406: 68:   player.trickOffset = 0;
 7671:  7583:  7495: 7407: 69:   playTrickCompleteSound();
 7672:  7584:  7496: 7408: 70: }
 7673:  7585:  7497: 7409: 71: register("completeTrick", completeTrick);
 7674:  7586:  7498: 7410: 72: function resetTrickState() {
 7675:  7587:  7499: 7411: 73:   player.currentTrick = null;
 7676:  7588:  7500: 7412: 74:   player.trickTimer = 0;
 7677:  7589:  7501: 7413: 75:   player.trickRotation = 0;
 7678:  7590:  7502: 7414: 76:   player.trickOffset = 0;
 7679:  7591:  7503: 7415: 77:   player.lastTrick = null;
 7680:  7592:  7504: 7416: 78:   player.trickChainCount = 0;
 7681:  7593:  7505: 7417: 79: }
 7682:  7594:  7506: 7418: 80: register("resetTrickState", resetTrickState);
 7683:  7595:  7507: 7419: 81: function playTrickCompleteSound() {
 7684:  7596:  7508: 7420: 82:   playTone(600, "sine", 0.1, 0.2);
 7685:  7597:  7509: 7421: 83: }
 7686:  7598:  7510: 7422: 84: register("playTrickCompleteSound", playTrickCompleteSound);
 7687:  7599:  7511: 7423: 85: // Expose checkTrickInputs globally so that other modules (like downhill.js) can call it.
 7688:  7600:  7512: 7424: 86: window.checkTrickInputs = checkTrickInputs;
 7689:  7601:  7513: 7425: 87: export {
 7690:  7602:  7514: 7426: 88:   startTrick,
 7691:  7603:  7515: 7427: 89:   checkTrickInputs,
 7692:  7604:  7516: 7428: 90:   processTrick,
 7693:  7605:  7517: 7429: 91:   completeTrick,
 7694:  7606:  7518: 7430: 92:   resetTrickState,
 7695:  7607:  7519: 7431: 93:   playTrickCompleteSound,
 7696:  7608:  7520: 7432: 94: };
 7697:  7609:  7521: 7433: `````
 7698:  7610:  7522: 7434: 
 7699:  7611:  7523: 7435: ## File: js/settings.js
 7700:  7612:  7524: 7436: `````javascript
 7701:  7613:  7525: 7437:   1: // settings.js - various TWEAK settings and their
 7702:  7614:  7526: 7438:   2: // knob-turnings go here
 7703:  7615:  7527: 7439:   3: /* Global Configuration & Shared Globals */
 7704:  7616:  7528: 7440:   4: // Define our current mountain biome and layer defaults.
 7705:  7617:  7529: 7441:   5: var currentBiome = "starterMountain";  // We're on the Starter Mountain by default.
 7706:  7618:  7530: 7442:   6: var currentMountainLayer = 1;          // Default layer (if you're using numeric layers)
 7707:  7619:  7531: 7443:   7: var currentLayerPercent = 25;          // Or if you're using percentages (0-100)
 7708:  7620:  7532: 7444:   8: var TWEAK = {
 7709:  7621:  7533: 7445:   9:     tweakNob: 1,
 7710:  7622:  7534: 7446:  10:     // Animal spawning and movement
 7711:  7623:  7535: 7447:  11:     minSpawnTime: 5000, // Minimum delay between spawns (5 sec)
 7712:  7624:  7536: 7448:  12:     maxSpawnTime: 10000, // Maximum delay between spawns (10 sec)
 7713:  7625:  7537: 7449:  13:     minIdleTime: 3000, // Minimum time an animal sits still (1 sec)
 7714:  7626:  7538: 7450:  14:     maxIdleTime: 8000, // Maximum time an animal sits still (20 sec)
 7715:  7627:  7539: 7451:  15:     minMoveSpeed: 5, // Slowest movement speed for animals
 7716:  7628:  7540: 7452:  16:     maxMoveSpeed: 11.2, // Fastest movement speed for animals
 7717:  7629:  7541: 7453:  17:     fleeAngle: 45, // This may be obsolete - confirm before removing
 7718:  7630:  7542: 7454:  18:     photoCooldown: 1000, // Must wait 1 second between photos
 7719:  7631:  7543: 7455:  19:     repeatPhotoPenalty: 0.5, // 50% less money if the same animal is photographed again
 7720:  7632:  7544: 7456:  20:     minAnimalSpawnDistance: 400,
 7721:  7633:  7545: 7457:  21:     maxAnimalSpawnDistance: 500,
 7722:  7634:  7546: 7458:  22:     bearSpawnProbability: 0.3, // 30% chance of a bear
 7723:  7635:  7547: 7459:  23:     bearSpeed: 6, // Bears move a bit slower
 7724:  7636:  7548: 7460:  24:     birdSpeed: 9, // Birds move faster
 7725:  7637:  7549: 7461:  25:     bearDetectionRadius: 150, // Bears detect player from farther away
 7726:  7638:  7550: 7462:  26:     birdDetectionRadius: 50, // Birds have smaller detection radius
 7727:  7639:  7551: 7463:  27:     maxAnimalPhotoDistance: 600, // Maximum distance for taking photos
 7728:  7640:  7552: 7464:  28:     // Jumping stuff
 7729:  7641:  7553: 7465:  29:     jumpType: "immediate",               // "immediate" or "charge" - DO NOT REMOVE
 7730:  7642:  7554: 7466:  30:     jumpCollisionMultiplier: 3,
 7731:  7643:  7555: 7467:  31:     jumpBaseAscent: 1000,                 // Base ascent time (ms)
 7732:  7644:  7556: 7468:  32:     jumpMaxHoldTime: 1000,               // Maximum charge duration (1 sec)
 7733:  7645:  7557: 7469:  33:     jumpPeakScale: 2,                    // Base peak visual jump scale
 7734:  7646:  7558: 7470:  34:     jumpHeightPerRocketSurgery: 0.05,    // Each level adds 5% to jump height
 7735:  7647:  7559: 7471:  35:     jumpTimePerRocketSurgery: 0.05,      // Each level adds 5% to jump duration
 7736:  7648:  7560: 7472:  36:     jumpZoomPerHeightIncrease: 0.5,      // For every 100% height increase, add 50% more zoom
 7737:  7649:  7561: 7473:  37:     // Re-Hit Jump System
 7738:  7650:  7562: 7474:  38:     reHitWindowStart: 0.70,              // When re-hit window opens (70% through jump)
 7739:  7651:  7563: 7475:  39:     reHitIndicatorScale: 2.5,            // Size multiplier for indicator circle
 7740:  7652:  7564: 7476:  40:     reHitIndicatorColor: "rgba(255, 0, 255, 0.4)",  // Bright magenta with more opacity
 7741:  7653:  7565: 7477:  41:     reHitIndicatorOutlineColor: "#FF00FF", // Solid magenta outline
 7742:  7654:  7566: 7478:  42:     reHitBonusDuration: 1.2,             // Duration multiplier for re-hit jumps
 7743:  7655:  7567: 7479:  43:     // Trick Physics Adjustments
 7744:  7656:  7568: 7480:  44:     parachuteGravityFactor: 0.8,         // Gravity reduction during parachute
 7745:  7657:  7569: 7481:  45:     airBrakeFrictionMultiplier: 0.85,    // Speed reduction during air brake
 7746:  7658:  7570: 7482:  46:     // Camera and aiming
 7747:  7659:  7571: 7483:  47:     basePOVAngle: 30,
 7748:  7660:  7572: 7484:  48:     optimalOpticsPOVIncrease: 5,
 7749:  7661:  7573: 7485:  49:     altitudeFlashMinSpeed: 200,
 7750:  7662:  7574: 7486:  50:     altitudeFlashMaxSpeed: 10,
 7751:  7663:  7575: 7487:  51:     altitudeGradientStart: "blue",
 7752:  7664:  7576: 7488:  52:     altitudeGradientEnd: "red",
 7753:  7665:  7577: 7489:  53:     // Photo scoring
 7754:  7666:  7578: 7490:  54:     basePhotoValue: 50, // Base money earned from a photo
 7755:  7667:  7579: 7491:  55:     altitudeMatchMultiplier: 2,
 7756:  7668:  7580: 7492:  56:     centerPOVMultiplier: 1.5,
 7757:  7669:  7581: 7493:  57:     fleeingAnimalMultiplier: 3,
 7758:  7670:  7582: 7494:  58:     // Animal multipliers
 7759:  7671:  7583: 7495:  59:     bearMultiplier: 1.5,
 7760:  7672:  7584: 7496:  60:     birdMultiplier: 1,
 7761:  7673:  7585: 7497:  61:     // House entry costs
 7762:  7674:  7586: 7498:  62:     houseEntryLoanDeduction: 0.005, // 0.5% loan deduction when entering house
 7763:  7675:  7587: 7499:  63:     // Underlying base values
 7764:  7676:  7588: 7500:  64:     _sledMass: 1.0,
 7765:  7677:  7589: 7501:  65:     _baseGravity: 0.1,
 7766:  7678:  7590: 7502:  66:     _baseHorizontalAccel: 0.25,
 7767:  7679:  7591: 7503:  67:     _baseFriction: 0.95,
 7768:  7680:  7592: 7504:  68:     _baseMaxXVel: 3,
 7769:  7681:  7593: 7505:  69:     _rocketSurgeryFactorPerLevel: 0.1,
 7770:  7682:  7594: 7506:  70:     _optimalOpticsAccelFactorPerLevel: 0.02,
 7771:  7683:  7595: 7507:  71:     _optimalOpticsFrictionFactorPerLevel: 0.005,
 7772:  7684:  7596: 7508:  72:     _fancierFootwearUpSpeedPerLevel: 0.3,
 7773:  7685:  7597: 7509:  73:     _baseUpSpeed: 2,
 7774:  7686:  7598: 7510:  74:     _baseCollisionsAllowed: 3,
 7775:  7687:  7599: 7511:  75:     _starterCash: 200, // Jacked up for testing
 7776:  7688:  7600: 7512:  76:     _bounceImpulse: 3,  // New bounce impulse value
 7777:  7689:  7601: 7513:  77:     // Trick system configuration
 7778:  7690:  7602: 7514:  78:     _trickCooldown: 5000,          // Base cooldown per trick (5 sec)
 7779:  7691:  7603: 7515:  79:     _trickTimeMultiplier: 1.0,     // Global trick duration multiplier
 7780:  7692:  7604: 7516:  80:     _trickTimeAdder: 0,            // Global trick duration additive time
 7781:  7693:  7605: 7517:  81:     _trickBaseDuration: 250,       // Base duration for tricks (ms)
 7782:  7694:  7606: 7518:  82:     _trickRotationSpeed: 720,     // Degrees per second for helicopter tricks (3 full spins)
 7783:  7695:  7607: 7519:  83:     _trickOffsetDistance: 40,      // Pixels to offset sled for air brake/parachute
 7784:  7696:  7608: 7520:  84:     _trickMoneyBase: 50,           // Base money earned per trick
 7785:  7697:  7609: 7521:  85:     _trickChainMultiplier: 1.5,    // Multiplier for chaining different tricks
 7786:  7698:  7610: 7522:  86:     // Getters to apply tweakNob multiplier
 7787:  7699:  7611: 7523:  87:     get sledMass() { return this._sledMass * this.tweakNob; },
 7788:  7700:  7612: 7524:  88:     set sledMass(val) { this._sledMass = val; },
 7789:  7701:  7613: 7525:  89:     get baseGravity() { return this._baseGravity * this.tweakNob; },
 7790:  7702:  7614: 7526:  90:     set baseGravity(val) { this._baseGravity = val; },
 7791:  7703:  7615: 7527:  91:     get baseHorizontalAccel() { return this._baseHorizontalAccel; },
 7792:  7704:  7616: 7528:  92:     set baseHorizontalAccel(val) { this._baseHorizontalAccel = val; },
 7793:  7705:  7617: 7529:  93:     get baseFriction() { return this._baseFriction; }, // * this.tweakNob
 7794:  7706:  7618: 7530:  94:     set baseFriction(val) { this._baseFriction = val; },
 7795:  7707:  7619: 7531:  95:     get baseMaxXVel() { return this._baseMaxXVel * this.tweakNob; },
 7796:  7708:  7620: 7532:  96:     set baseMaxXVel(val) { this._baseMaxXVel = val; },
 7797:  7709:  7621: 7533:  97:     get rocketSurgeryFactorPerLevel() { return this._rocketSurgeryFactorPerLevel * this.tweakNob; },
 7798:  7710:  7622: 7534:  98:     set rocketSurgeryFactorPerLevel(val) { this._rocketSurgeryFactorPerLevel = val; },
 7799:  7711:  7623: 7535:  99:     get optimalOpticsAccelFactorPerLevel() { return this._optimalOpticsAccelFactorPerLevel * this.tweakNob; },
 7800:  7712:  7624: 7536: 100:     set optimalOpticsAccelFactorPerLevel(val) { this._optimalOpticsAccelFactorPerLevel = val; },
 7801:  7713:  7625: 7537: 101:     get optimalOpticsFrictionFactorPerLevel() { return this._optimalOpticsFrictionFactorPerLevel * this.tweakNob; },
 7802:  7714:  7626: 7538: 102:     set optimalOpticsFrictionFactorPerLevel(val) { this._optimalOpticsFrictionFactorPerLevel = val; },
 7803:  7715:  7627: 7539: 103:     get fancierFootwearUpSpeedPerLevel() { return this._fancierFootwearUpSpeedPerLevel * this.tweakNob; },
 7804:  7716:  7628: 7540: 104:     set fancierFootwearUpSpeedPerLevel(val) { this._fancierFootwearUpSpeedPerLevel = val; },
 7805:  7717:  7629: 7541: 105:     get baseUpSpeed() { return this._baseUpSpeed * this.tweakNob; },
 7806:  7718:  7630: 7542: 106:     set baseUpSpeed(val) { this._baseUpSpeed = val; },
 7807:  7719:  7631: 7543: 107:     get baseCollisionsAllowed() { return this._baseCollisionsAllowed * this.tweakNob; },
 7808:  7720:  7632: 7544: 108:     set baseCollisionsAllowed(val) { this._baseCollisionsAllowed = val; },
 7809:  7721:  7633: 7545: 109:     get starterCash() { return this._starterCash * this.tweakNob; },
 7810:  7722:  7634: 7546: 110:     set starterCash(val) { this._starterCash = val; },
 7811:  7723:  7635: 7547: 111:     // New dynamic bounceImpulse getter/setter
 7812:  7724:  7636: 7548: 112:     get bounceImpulse() { return this._bounceImpulse * this.tweakNob; },
 7813:  7725:  7637: 7549: 113:     set bounceImpulse(val) { this._bounceImpulse = val; }
 7814:  7726:  7638: 7550: 114: };
 7815:  7727:  7639: 7551: 115: // New: function to compute max collisions
 7816:  7728:  7640: 7552: 116: TWEAK.getMaxCollisions = function() {
 7817:  7729:  7641: 7553: 117:     // Ensure playerUpgrades exists before accessing it
 7818:  7730:  7642: 7554: 118:     return TWEAK.baseCollisionsAllowed + (typeof playerUpgrades !== "undefined" && playerUpgrades.sledDurability ? playerUpgrades.sledDurability : 0);
 7819:  7731:  7643: 7555: 119: };
 7820:  7732:  7644: 7556: `````
 7821:  7733:  7645: 7557: 
 7822:  7734:  7646: 7558: ## File: !READ_FIRST-FILE_SUMMARY.txt
 7823:  7735:  7647: 7559: `````
 7824:  7736:  7648: 7560:  1: ## JavaScript Files:
 7825:  7737:  7649: 7561:  2: 
 7826:  7738:  7650: 7562:  3: - **js/entities.js**: Manages collision detection, camera overlay rendering, and animal spawning/behavior mechanics, including drawing animal entities and handling animal fleeing behavior.
 7827:  7739:  7651: 7563:  4: - **js/game.js**: Controls the core game loop and state transitions, including initializing gameplay, managing UI elements, and handling game start and loan payment logic.
 7828:  7740:  7652: 7564:  5: - **js/input.js**: Handles global keyboard input tracking, including setting up event listeners for keydown and keyup events, and provides helper functions for checking key states.
 7829:  7741:  7653: 7565:  6: - **js/mechanics.js**: Manages core gameplay mechanics such as loan repayment, jump and trick systems, collision detection, and movement handling for downhill and uphill phases.
 7830:  7742:  7654: 7566:  7: - **js/player.js**: Defines the player object with all state variables, including position, velocity, camera angles, trick tracking, and jump state properties.
 7831:  7743:  7655: 7567:  8: - **js/render.js**: Contains the rendering logic for drawing the player, terrain, floating texts, camera overlays, and animals. Manages visual effects like trick animations and the Re-Hit indicator.
 7832:  7744:  7656: 7568:  9: - **js/upgrades.js**: Manages player and mountain upgrades, including upgrade costs, UI display logic, and purchase mechanics.
 7833:  7745:  7657: 7569: 10: - **js/utils.js**: Provides utility functions and configurations, including game tweak parameters, audio functions, collision detection, mathematical helpers, and color interpolation utilities.
 7834:  7746:  7658: 7570: 11: - **js/wildlifephotos.js**: Contains logic for the wildlife photography mini-game, including animal spawning, photo scoring, and managing animal behaviors like fleeing.
 7835:  7747:  7659: 7571: 12: - **js/world.js**: Manages the generation of terrain and the awarding of money based on the player's distance traveled.
 7836:  7748:  7660: 7572: 13: 
 7837:  7749:  7661: 7573: 14: ## Project Files:
 7838:  7750:  7662: 7574: 15: 
 7839:  7751:  7663: 7575: 16: - **index.html**: Main HTML file linking JavaScript and CSS files, defines the game UI structure.
 7840:  7752:  7664: 7576: 17: - **styles.css**: Contains the game's styling, including layout and visual styles for UI elements.
 7841:  7753:  7665: 7577: 18: - **1.0_README.md**: Likely an initial readme or changelog document for version 1.0.
 7842:  7754:  7666: 7578: 19: - **README.md**: Primary documentation file for the project, describing setup and usage instructions.
 7843:  7755:  7667: 7579: 20: - **ROADMAP.md**: Outlines planned features and future development directions.
 7844:  7756:  7668: 7580: 21: - **LICENSE.md**: Contains the licensing terms for the project.
 7845:  7757:  7669: 7581: 22: - **.gitignore**: Specifies which files and directories should be ignored by version control.
 7846:  7758:  7670: 7582: 23: - **todo.txt**: Simple text file listing tasks and development priorities.
 7847:  7759:  7671: 7583: 24: - **!READ_FIRST-FILE_SUMMARY.txt**: Possibly an initial overview or summary of the project.
 7848:  7760:  7672: 7584: `````
 7849:  7761:  7673: 7585: 
 7850:  7762:  7674: 7586: ## File: docs/ROADMAP.md
 7851:  7763:  7675: 7587: `````markdown
 7852:  7764:  7676: 7588:   1: # 📍 **SledHEAD Comprehensive Development Roadmap**
 7853:  7765:  7677: 7589:   2: 
 7854:  7766:  7678: 7590:   3: This document outlines the detailed path from the current implementation to the complete "1.0" version of **SledHEAD**, including the critical gameplay shift to an **Up-Then-Down** stamina-based mechanic.
 7855:  7767:  7679: 7591:   4: 
 7856:  7768:  7680: 7592:   5: ---
 7857:  7769:  7681: 7593:   6: 
 7858:  7770:  7682: 7594:   7: ## 🎯 **Core Concept**
 7859:  7771:  7683: 7595:   8: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
 7860:  7772:  7684: 7596:   9: 
 7861:  7773:  7685: 7597:  10: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
 7862:  7774:  7686: 7598:  11: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
 7863:  7775:  7687: 7599:  12: 
 7864:  7776:  7688: 7600:  13: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
 7865:  7777:  7689: 7601:  14: 
 7866:  7778:  7690: 7602:  15: ## 🎯 **Gameplay Loop Overview**
 7867:  7779:  7691: 7603:  16: - Players start at the mountain's base, managing stamina as they climb upward.
 7868:  7780:  7692: 7604:  17: - Strategic decision-making to sled down for rewards before stamina depletion.
 7869:  7781:  7693: 7605:  18: - Higher altitudes host rare wildlife, higher rewards, and greater risks.
 7870:  7782:  7694: 7606:  19: 
 7871:  7783:  7695: 7607:  20: ---
 7872:  7784:  7696: 7608:  21: 
 7873:  7785:  7697: 7609:  22: ## 🌄 **Segmented Cylinder Wrapping (Layered Mountain Structure)**  
 7874:  7786:  7698: 7610:  23: **Handling Horizontal Wrapping at Different Elevations**
 7875:  7787:  7699: 7611:  24: 
 7876:  7788:  7700: 7612:  25: To create the effect of a **finite mountain with wraparound sides**, SledHEAD uses a **layered cylindrical system** instead of a continuous cone. The mountain is divided into **stacked segments**, each with its own **fixed circumference** that gets **smaller as you go higher**. This allows for a **consistent wraparound mechanic** while keeping movement predictable.
 7877:  7789:  7701: 7613:  26: 
 7878:  7790:  7702: 7614:  27: ### 🏔️ **How It Works:**
 7879:  7791:  7703: 7615:  28: - Each **layer** is a separate horizontal zone, like a **floating ring** around the mountain.  
 7880:  7792:  7704: 7616:  29: - If a player **crosses the left or right boundary** of a layer, they seamlessly wrap around to the other side.  
 7881:  7793:  7705: 7617:  30: - **Lower layers are wider**, giving more horizontal space.  
 7882:  7794:  7706: 7618:  31: - **Upper layers are narrower**, meaning wraparound happens sooner.  
 7883:  7795:  7707: 7619:  32: 
 7884:  7796:  7708: 7620:  33: ### ⬆️⬇️ **Moving Between Layers**
 7885:  7797:  7709: 7621:  34: When transitioning **between vertical segments**:
 7886:  7798:  7710: 7622:  35: 1. If the player **moves downward** past the bottom boundary of a layer:
 7887:  7799:  7711: 7623:  36:    - They **teleport to the top boundary** of the layer below.  
 7888:  7800:  7712: 7624:  37:    - Their **horizontal position scales** based on the new circumference to maintain a proportional location.  
 7889:  7801:  7713: 7625:  38:    
 7890:  7802:  7714: 7626:  39:    ```pseudocode
 7891:  7803:  7715: 7627:  40:    scale_factor = new_layer.circumference / old_layer.circumference
 7892:  7804:  7716: 7628:  41:    x_new = x_old * scale_factor
 7893:  7805:  7717: 7629:  42: 
 7894:  7806:  7718: 7630:  43: 2. If the player **moves upward** past the top boundary of a layer:
 7895:  7807:  7719: 7631:  44:    - They **appear at the bottom** of the next layer up with **their horizontal position **scaled.
 7896:  7808:  7720: 7632:  45: 
 7897:  7809:  7721: 7633:  46: ### 🏁 **Gameplay Implications**
 7898:  7810:  7722: 7634:  47:    - Predictable & Manageable: Keeps wraparound and movement feeling natural while allowing for different gameplay per layer.
 7899:  7811:  7723: 7635:  48: 
 7900:  7812:  7724: 7636:  49: ### **Layer-Specific Challenges**:
 7901:  7813:  7725: 7637:  50:    - Broader paths at lower levels = more open sledding.
 7902:  7814:  7726: 7638:  51:    - Tighter paths at higher levels = more technical, precision-based gameplay.
 7903:  7815:  7727: 7639:  52:    - Performance-Friendly: Each layer is an isolated map segment, simplifying collision checks and procedural generation.
 7904:  7816:  7728: 7640:  53: 
 7905:  7817:  7729: 7641:  54: ---
 7906:  7818:  7730: 7642:  55: 
 7907:  7819:  7731: 7643:  56: ## 🌄 **Light/Dark Gradient Altitude System**
 7908:  7820:  7732: 7644:  57: 
 7909:  7821:  7733: 7645:  58: - Introduce a dynamic visual gradient where snow and terrain visually shift, with the snow at higher altitudes lighter due to being cleaner, and the snow downhill from you appears darker (due to the dirt and debres that flows down hill). 🚀
 7910:  7822:  7734: 7646:  59: - The gradient will provide a dynamic natural visual guide for players to intuitively gauge altitude and plan their climbs and descents. 🎯
 7911:  7823:  7735: 7647:  60: 
 7912:  7824:  7736: 7648:  61: ---
 7913:  7825:  7737: 7649:  62: 
 7914:  7826:  7738: 7650:  63: ## 🌎 **Procedural World & Persistence**
 7915:  7827:  7739: 7651:  64: 
 7916:  7828:  7740: 7652:  65: - The mountain remains consistent during a playthrough.  
 7917:  7829:  7741: 7653:  66: - **New terrain is only generated when starting a new game.**  
 7918:  7830:  7742: 7654:  67: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
 7919:  7831:  7743: 7655:  68: - **Changes per run:**
 7920:  7832:  7744: 7656:  69:   - Tourists & fans shift positions.  
 7921:  7833:  7745: 7657:  70:   - Weather may change dynamically.  
 7922:  7834:  7746: 7658:  71:   - Wildlife encounters vary.
 7923:  7835:  7747: 7659:  72: 
 7924:  7836:  7748: 7660:  73: ---
 7925:  7837:  7749: 7661:  74: 
 7926:  7838:  7750: 7662:  75: ## 🎢 Gameplay Loops
 7927:  7839:  7751: 7663:  76: **Progression Goals:**  
 7928:  7840:  7752: 7664:  77: - **Prototype:** Repay the cost of the mountain.  
 7929:  7841:  7753: 7665:  78: - **Full Game:**  
 7930:  7842:  7754: 7666:  79:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
 7931:  7843:  7755: 7667:  80:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
 7932:  7844:  7756: 7668:  81:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
 7933:  7845:  7757: 7669:  82:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
 7934:  7846:  7758: 7670:  83: ### **⬆️1️⃣ Uphill Phase: Climbing & Exploration**
 7935:  7847:  7759: 7671:  84: #### 🚶 **Top-down adventure traversal with stamina management and exploration.**  
 7936:  7848:  7760: 7672:  85: - **Goal:** Ascend to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
 7937:  7849:  7761: 7673:  86: - **Stamina System:**  
 7938:  7850:  7762: 7674:  87:   - Stamina drains when moving.  
 7939:  7851:  7763: 7675:  88:   - Replenished by **food stands, resting points, or upgrades**.  
 7940:  7852:  7764: 7676:  89: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
 7941:  7853:  7765: 7677:  90:   - **Random animals appear every few seconds (TWEAK variable).**  
 7942:  7854:  7766: 7678:  91:   - Animals either **stay still and will run if you get too close.** Eventually they will **wander off**.  
 7943:  7855:  7767: 7679:  92:   - **Use the Left & Right Arrow Keys to aim the camera cone** around your character.  
 7944:  7856:  7768: 7680:  93:   - **Align the altitude line (using the Up & Down Arrow Keys)** with the animal’s altitude for a perfect shot.  
 7945:  7857:  7769: 7681:  94:   - **Photos earn money, with multipliers for:**  
 7946:  7858:  7770: 7682:  95:     - Accuracy (center of POV cone).  
 7947:  7859:  7771: 7683:  96:     - Altitude match precision.  
 7948:  7860:  7772: 7684:  97:     - Moving vs. stationary targets (moving = 3x value).
 7949:  7861:  7773: 7685:  98:     - Animal Rarity (more exotic animals the further up the mountain you are).
 7950:  7862:  7774: 7686:  99: 
 7951:  7863:  7775: 7687: 100: ### **⬇️2️⃣ Sledding Phase (Downhill)**
 7952:  7864:  7776: 7688: 101: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
 7953:  7865:  7777: 7689: 102: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
 7954:  7866:  7778: 7690: 103: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
 7955:  7867:  7779: 7691: 104: - **Obstacles:**
 7956:  7868:  7780: 7692: 105:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
 7957:  7869:  7781: 7693: 106:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
 7958:  7870:  7782: 7694: 107:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
 7959:  7871:  7783: 7695: 108: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
 7960:  7872:  7784: 7696: 109: - **Time Trials:**  
 7961:  7873:  7785: 7697: 110:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
 7962:  7874:  7786: 7698: 111:   - **Your time between activators determines your bonus.**  
 7963:  7875:  7787: 7699: 112:   - **Faster times = more money!**  
 7964:  7876:  7788: 7700: 113:   - Not all runs are timed; only those where you activate a trial.
 7965:  7877:  7789: 7701: 114: 
 7966:  7878:  7790: 7702: 115: ### 🏠3️⃣ **Management Phase (House & Upgrades)**
 7967:  7879:  7791: 7703: 116: 🏡 **Upgrade your gear, mountain, and social media presence.**  
 7968:  7880:  7792: 7704: 117: - **Spend earned money on:**
 7969:  7881:  7793: 7705: 118:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
 7970:  7882:  7794: 7706: 119:   - **Sled Upgrades:** Speed, handling, trick potential.  
 7971:  7883:  7795: 7707: 120:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
 7972:  7884:  7796: 7708: 121: - **New Game Start:**  
 7973:  7885:  7797: 7709: 122:   - Mountain **ONLY regenerates when starting a completely new game.**  
 7974:  7886:  7798: 7710: 123:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
 7975:  7887:  7799: 7711: 124:   - **Current seed is displayed at home.** 
 7976:  7888:  7800: 7712: 125: 
 7977:  7889:  7801: 7713: 126: ---
 7978:  7890:  7802: 7714: 127: 
 7979:  7891:  7803: 7715: 128: ## 🏡 **Tutorial Level: Childhood Memories on Grandpa’s Hill**  
 7980:  7892:  7804: 7716: 129: **Learning the Basics in a Cozy, Story-Driven Introduction**
 7981:  7893:  7805: 7717: 130: 
 7982:  7894:  7806: 7718: 131: Before tackling the **massive procedural mountains** of SledHEAD, players start with a heartwarming **tutorial level**, set in a **quiet rural winter landscape**. This **flashback sequence** lets players experience sledding as a **young child**, learning the fundamental mechanics under the guidance of their **grandfather**.
 7983:  7895:  7807: 7719: 132: 
 7984:  7896:  7808: 7720: 133: ### 📜 **Narrative Setup**
 7985:  7897:  7809: 7721: 134: The game opens on a **small, snow-covered hill** just outside a **cozy cabin**, where the protagonist—**a child version of themselves**—is spending time with their **grandfather** on a crisp winter afternoon. Grandpa is **wrapped up in a warm coat, standing at the base of the hill after sledding down himself**, watching proudly as the player **takes their maiden toboggan run, learning to sled**. The sky glows with the **soft oranges and purples of a winter sunset**, setting a nostalgic and peaceful mood.
 7986:  7898:  7810: 7722: 135: 
 7987:  7899:  7811: 7723: 136: Before long, Grandpa gives a gentle laugh:  
 7988:  7900:  7812: 7724: 137: > **"Ahh, y'know, I used to be the best sledder on this hill... but these ol' legs don’t have the stamina they used to! You go on, get a few more runs in—I’ll watch and cheer ya on from here! And remember - the snow's always whiter above you, and dirtier below!"**  
 7989:  7901:  7813: 7725: 138: 
 7990:  7902:  7814: 7726: 139: With that, the tutorial **fully hands control to the player**, reinforcing the **stamina system** and setting up a meaningful reason to **manage energy wisely**.
 7991:  7903:  7815: 7727: 140: 
 7992:  7904:  7816: 7728: 141: ---
 7993:  7905:  7817: 7729: 142: 
 7994:  7906:  7818: 7730: 143: ## 🎮 **Tutorial Mechanics Introduced**
 7995:  7907:  7819: 7731: 144: The tutorial unfolds organically through **simple, playful challenges**, without heavy UI elements. Players **learn by doing**, with Grandpa offering **gentle, supportive guidance**.
 7996:  7908:  7820: 7732: 145: 
 7997:  7909:  7821: 7733: 146: ### **⬆️ Walking Uphill (Basic Movement & Stamina)**
 7998:  7910:  7822: 7734: 147: - Players move **uphill by walking**, learning that **whiter snow = uphill, darker snow = downhill**.  
 7999:  7911:  7823: 7735: 148: - Moving uphill **drains stamina** gradually.  
 8000:  7912:  7824: 7736: 149: - Grandpa occasionally calls out:
 8001:  7913:  7825: 7737: 150:   > **"You’re strong, kid! But ya gotta pace yourself—harder climbs mean ya gotta rest up after!"**
 8002:  7914:  7826: 7738: 151: 
 8003:  7915:  7827: 7739: 152: ### **🛷 Sledding Downhill (Turning & Speed Control)**
 8004:  7916:  7828: 7740: 153: - Players start **at the top of the small hill** and practice their **first sled run**.  
 8005:  7917:  7829: 7741: 154: - **Turning left/right** is introduced, along with simple speed adjustments.  
 8006:  7918:  7830: 7742: 155: - Grandpa **cheers when the player makes a smooth turn**:
 8007:  7919:  7831: 7743: 156:   > **"Look at that! You’re a natural! Sleddin’s all about balance—lean just right and the hill will do the rest!"**
 8008:  7920:  7832: 7744: 157: 
 8009:  7921:  7833: 7745: 158: ### **🔄 Climbing & Repeating Runs**
 8010:  7922:  7834: 7746: 159: - After a few runs, Grandpa suggests:
 8011:  7923:  7835: 7747: 160:   > **"Why don’t ya take a few more runs? See if ya can get all the way to the bottom without wipin’ out!"**  
 8012:  7924:  7836: 7748: 161: - The player is **free to keep practicing**, reinforcing that **sledding is about trial and improvement**.  
 8013:  7925:  7837: 7749: 162: - The game subtly **introduces self-motivated play**, rewarding experimentation.
 8014:  7926:  7838: 7750: 163: 
 8015:  7927:  7839: 7751: 164: ### **🏁 Tutorial Completion**
 8016:  7928:  7840: 7752: 165: - Once the player **feels confident**, a final sled run **transitions seamlessly into the present day**, cutting to the **modern protagonist** standing atop their massive new mountain.
 8017:  7929:  7841: 7753: 166: - **Grandpa’s words echo**, setting the tone for the adventure ahead:
 8018:  7930:  7842: 7754: 167:   > **"One day, you’ll take on bigger mountains than this… but no matter how high you go, never forget the joy of the ride."**  
 8019:  7931:  7843: 7755: 168: - The camera pulls back, revealing the **full mountain**, and gameplay transitions into the **core SledHEAD experience**.
 8020:  7932:  7844: 7756: 169: 
 8021:  7933:  7845: 7757: 170: ---
 8022:  7934:  7846: 7758: 171: 
 8023:  7935:  7847: 7759: 172: ## ✨ **Why This Works**
 8024:  7936:  7848: 7760: 173: - **Emotionally Engaging** – Connects the player to their childhood roots and motivation.  
 8025:  7937:  7849: 7761: 174: - **Smooth Learning Curve** – Teaches fundamental mechanics **without forced tutorials**.  
 8026:  7938:  7850: 7762: 175: - **Worldbuilding & Nostalgia** – Grandpa’s wisdom adds charm and meaning to the stamina system.  
 8027:  7939:  7851: 7763: 176: - **Seamless Transition to Main Game** – Keeps momentum going without feeling like a "tutorial level."  
 8028:  7940:  7852: 7764: 177: 
 8029:  7941:  7853: 7765: 178: This opening ensures that **players feel connected to their journey**—from childhood sledding to **becoming a sledding legend**. 🎿🔥  
 8030:  7942:  7854: 7766: 179: 
 8031:  7943:  7855: 7767: 180: ---
 8032:  7944:  7856: 7768: 181: 
 8033:  7945:  7857: 7769: 182: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
 8034:  7946:  7858: 7770: 183: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
 8035:  7947:  7859: 7771: 184: 
 8036:  7948:  7860: 7772: 185: 1. **☁️🪂 Parachute (Up, Down)**  
 8037:  7949:  7861: 7773: 186:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
 8038:  7950:  7862: 7774: 187:    **Pixel Art Representation:**  
 8039:  7951:  7863: 7775: 188:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
 8040:  7952:  7864: 7776: 189: 
 8041:  7953:  7865: 7777: 190: 2. **🛑🎿 Air Brake (Up, Up)**  
 8042:  7954:  7866: 7778: 191:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
 8043:  7955:  7867: 7779: 192:    **Pixel Art Representation:**  
 8044:  7956:  7868: 7780: 193:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
 8045:  7957:  7869: 7781: 194: 
 8046:  7958:  7870: 7782: 195: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
 8047:  7959:  7871: 7783: 196:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
 8048:  7960:  7872: 7784: 197:    **Pixel Art Representation:**  
 8049:  7961:  7873: 7785: 198:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
 8050:  7962:  7874: 7786: 199: 
 8051:  7963:  7875: 7787: 200: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
 8052:  7964:  7876: 7788: 201:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
 8053:  7965:  7877: 7789: 202:    **Pixel Art Representation:**  
 8054:  7966:  7878: 7790: 203:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
 8055:  7967:  7879: 7791: 204: 
 8056:  7968:  7880: 7792: 205: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
 8057:  7969:  7881: 7793: 206:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
 8058:  7970:  7882: 7794: 207:    **Pixel Art Representation:**  
 8059:  7971:  7883: 7795: 208:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
 8060:  7972:  7884: 7796: 209: 
 8061:  7973:  7885: 7797: 210: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
 8062:  7974:  7886: 7798: 211:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
 8063:  7975:  7887: 7799: 212:    **Pixel Art Representation:**  
 8064:  7976:  7888: 7800: 213:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
 8065:  7977:  7889: 7801: 214: 
 8066:  7978:  7890: 7802: 215: 7. **🦸‍♂️✨ Superman (Down, Down)**  
 8067:  7979:  7891: 7803: 216:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
 8068:  7980:  7892: 7804: 217:    **Pixel Art Representation:**  
 8069:  7981:  7893: 7805: 218:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
 8070:  7982:  7894: 7806: 219: 
 8071:  7983:  7895: 7807: 220: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
 8072:  7984:  7896: 7808: 221:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
 8073:  7985:  7897: 7809: 222:    **Pixel Art Representation:**  
 8074:  7986:  7898: 7810: 223:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
 8075:  7987:  7899: 7811: 224: 
 8076:  7988:  7900: 7812: 225: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
 8077:  7989:  7901: 7813: 226:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
 8078:  7990:  7902: 7814: 227:    **Pixel Art Representation:**  
 8079:  7991:  7903: 7815: 228:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
 8080:  7992:  7904: 7816: 229: 
 8081:  7993:  7905: 7817: 230: 10. **👻🔥 Ghost Rider (Left, Right)**  
 8082:  7994:  7906: 7818: 231:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
 8083:  7995:  7907: 7819: 232:     **Pixel Art Representation:**  
 8084:  7996:  7908: 7820: 233:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
 8085:  7997:  7909: 7821: 234: 
 8086:  7998:  7910: 7822: 235: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
 8087:  7999:  7911: 7823: 236:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
 8088:  8000:  7912: 7824: 237:     **Pixel Art Representation:**  
 8089:  8001:  7913: 7825: 238:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
 8090:  8002:  7914: 7826: 239: 
 8091:  8003:  7915: 7827: 240: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
 8092:  8004:  7916: 7828: 241:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
 8093:  8005:  7917: 7829: 242:     **Pixel Art Representation:**  
 8094:  8006:  7918: 7830: 243:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
 8095:  8007:  7919: 7831: 244: 
 8096:  8008:  7920: 7832: 245: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
 8097:  8009:  7921: 7833: 246:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
 8098:  8010:  7922: 7834: 247:     **Pixel Art Representation:**  
 8099:  8011:  7923: 7835: 248:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
 8100:  8012:  7924: 7836: 249: 
 8101:  8013:  7925: 7837: 250: 14. **✨⬆️ Falling Star (Down, Up)**  
 8102:  8014:  7926: 7838: 251:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
 8103:  8015:  7927: 7839: 252:     **Pixel Art Representation:**  
 8104:  8016:  7928: 7840: 253:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
 8105:  8017:  7929: 7841: 254: 
 8106:  8018:  7930: 7842: 255: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
 8107:  8019:  7931: 7843: 256:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
 8108:  8020:  7932: 7844: 257:     **Pixel Art Representation:**  
 8109:  8021:  7933: 7845: 258:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
 8110:  8022:  7934: 7846: 259: 
 8111:  8023:  7935: 7847: 260: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
 8112:  8024:  7936: 7848: 261:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
 8113:  8025:  7937: 7849: 262:     **Pixel Art Representation:**  
 8114:  8026:  7938: 7850: 263:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
 8115:  8027:  7939: 7851: 264: 
 8116:  8028:  7940: 7852: 265: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
 8117:  8029:  7941: 7853: 266: 
 8118:  8030:  7942: 7854: 267: ### **Hazards & Interactions:**
 8119:  8031:  7943: 7855: 268: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
 8120:  8032:  7944: 7856: 269: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
 8121:  8033:  7945: 7857: 270: - **Ice Patches:** Reduce control and make turns trickier.
 8122:  8034:  7946: 7858: 271: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
 8123:  8035:  7947: 7859: 272: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
 8124:  8036:  7948: 7860: 273: 
 8125:  8037:  7949: 7861: 274: ---
 8126:  8038:  7950: 7862: 275: 
 8127:  8039:  7951: 7863: 276: ## 🔧 **Upgrade System**
 8128:  8040:  7952: 7864: 277: 
 8129:  8041:  7953: 7865: 278: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
 8130:  8042:  7954: 7866: 279: | Upgrade                    | Effect                                             |
 8131:  8043:  7955: 7867: 280: |----------------------------|----------------------------------------------------|
 8132:  8044:  7956: 7868: 281: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
 8133:  8045:  7957: 7869: 282: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
 8134:  8046:  7958: 7870: 283: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
 8135:  8047:  7959: 7871: 284: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
 8136:  8048:  7960: 7872: 285: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
 8137:  8049:  7961: 7873: 286: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
 8138:  8050:  7962: 7874: 287: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
 8139:  8051:  7963: 7875: 288: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
 8140:  8052:  7964: 7876: 289: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
 8141:  8053:  7965: 7877: 290: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
 8142:  8054:  7966: 7878: 291: 
 8143:  8055:  7967: 7879: 292: ### 🏔️ Mountain Upgrades (Resort Expansion)
 8144:  8056:  7968: 7880: 293: | Upgrade                        | Effect                                                         |
 8145:  8057:  7969: 7881: 294: |--------------------------------|----------------------------------------------------------------|
 8146:  8058:  7970: 7882: 295: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
 8147:  8059:  7971: 7883: 296: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
 8148:  8060:  7972: 7884: 297: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
 8149:  8061:  7973: 7885: 298: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
 8150:  8062:  7974: 7886: 299: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
 8151:  8063:  7975: 7887: 300: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
 8152:  8064:  7976: 7888: 301: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
 8153:  8065:  7977: 7889: 302: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
 8154:  8066:  7978: 7890: 303: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
 8155:  8067:  7979: 7891: 304: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
 8156:  8068:  7980: 7892: 305: 
 8157:  8069:  7981: 7893: 306: ---
 8158:  8070:  7982: 7894: 307: 
 8159:  8071:  7983: 7895: 308: ## 🎮 **Mini-Games in SledHEAD**
 8160:  8072:  7984: 7896: 309: 
 8161:  8073:  7985: 7897: 310: ### 1. **Animal Photography** 📸🐾
 8162:  8074:  7986: 7898: 311: - **Objective:**  
 8163:  8075:  7987: 7899: 312:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
 8164:  8076:  7988: 7900: 313: - **Mechanics:**  
 8165:  8077:  7989: 7901: 314:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
 8166:  8078:  7990: 7902: 315:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
 8167:  8079:  7991: 7903: 316:   - **Scoring Bonuses:**  
 8168:  8080:  7992: 7904: 317:     - **Altitude Match Multiplier**  
 8169:  8081:  7993: 7905: 318:     - **POV Centering Bonus**  
 8170:  8082:  7994: 7906: 319:     - **Speed Capture Bonus**  
 8171:  8083:  7995: 7907: 320: - **Upgrades:**  
 8172:  8084:  7996: 7908: 321:   - **Optimal Optics:** Increases the camera’s POV cone.  
 8173:  8085:  7997: 7909: 322:   - **Steady Hands:** Reduces camera sway.  
 8174:  8086:  7998: 7910: 323:   - **Animal Baiting:** Increases rare animal appearance.
 8175:  8087:  7999: 7911: 324: - **Special Events:**  
 8176:  8088:  8000: 7912: 325:   - **Rare Animal Sightings** and **Storm Photography**.
 8177:  8089:  8001: 7913: 326: - **Risk/Challenge:**  
 8178:  8090:  8002: 7914: 327:   - **Repeat Photo Penalty** and aggressive animal disruptions.
 8179:  8091:  8003: 7915: 328: 
 8180:  8092:  8004: 7916: 329: ---
 8181:  8093:  8005: 7917: 330: 
 8182:  8094:  8006: 7918: 331: ### 2. **Fishing** 🎣🐟  
 8183:  8095:  8007: 7919: 332: - **Objective:**  
 8184:  8096:  8008: 7920: 333:   Catch fish using various techniques and bait types.
 8185:  8097:  8009: 7921: 334: - **Mechanics:**  
 8186:  8098:  8010: 7922: 335:   - Dynamic water simulation with varied fish behaviors.  
 8187:  8099:  8011: 7923: 336:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
 8188:  8100:  8012: 7924: 337:   - Legendary fish yield major rewards.
 8189:  8101:  8013: 7925: 338: - **Upgrades:**  
 8190:  8102:  8014: 7926: 339:   - Stronger fishing lines, advanced lures, and sonar detection.
 8191:  8103:  8015: 7927: 340: - **Special Events:**  
 8192:  8104:  8016: 7928: 341:   - Fishing tournaments and rare migration patterns.
 8193:  8105:  8017: 7929: 342: - **Risk/Challenge:**  
 8194:  8106:  8018: 7930: 343:   - Line snapping and predator interference.
 8195:  8107:  8019: 7931: 344: 
 8196:  8108:  8020: 7932: 345: ---
 8197:  8109:  8021: 7933: 346: 
 8198:  8110:  8022: 7934: 347: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
 8199:  8111:  8023: 7935: 348: - **Objective:**  
 8200:  8112:  8024: 7936: 349:   Unlock doors, safes, and hidden compartments.
 8201:  8113:  8025: 7937: 350: - **Mechanics:**  
 8202:  8114:  8026: 7938: 351:   - Use tools like **rakes, hooks, and tension wrenches**.  
 8203:  8115:  8027: 7939: 352:   - Navigate traps such as alarms and rusted internals.
 8204:  8116:  8028: 7940: 353: - **Upgrades:**  
 8205:  8117:  8029: 7941: 354:   - High-quality picks, electronic bypass tools, and vibration sensors.
 8206:  8118:  8030: 7942: 355: - **Special Events:**  
 8207:  8119:  8031: 7943: 356:   - Timed heists and races with rival scavengers.
 8208:  8120:  8032: 7944: 357: - **Risk/Challenge:**  
 8209:  8121:  8033: 7945: 358:   - Unstable buildings and hazards that may alert authorities.
 8210:  8122:  8034: 7946: 359: 
 8211:  8123:  8035: 7947: 360: ---
 8212:  8124:  8036: 7948: 361: 
 8213:  8125:  8037: 7949: 362: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
 8214:  8126:  8038: 7950: 363: - **Objective:**  
 8215:  8127:  8039: 7951: 364:   Find buried treasure using maps, clues, and metal detectors.
 8216:  8128:  8040: 7952: 365: - **Mechanics:**  
 8217:  8129:  8041: 7953: 366:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
 8218:  8130:  8042: 7954: 367:   - Digging requires stamina management and upgraded tools.
 8219:  8131:  8043: 7955: 368: - **Upgrades:**  
 8220:  8132:  8044: 7956: 369:   - Advanced metal detectors, excavation tools, and digging drones.
 8221:  8133:  8045: 7957: 370: - **Special Events:**  
 8222:  8134:  8046: 7958: 371:   - NPC treasure races and secret cache discoveries.
 8223:  8135:  8047: 7959: 372: - **Risk/Challenge:**  
 8224:  8136:  8048: 7960: 373:   - Booby traps, hostile environments, and law enforcement risks.
 8225:  8137:  8049: 7961: 374: 
 8226:  8138:  8050: 7962: 375: ---
 8227:  8139:  8051: 7963: 376: 
 8228:  8140:  8052: 7964: 377: ### 5. **Kite Flying** 🪁🌬️  
 8229:  8141:  8053: 7965: 378: - **Objective:**  
 8230:  8142:  8054: 7966: 379:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
 8231:  8143:  8055: 7967: 380: - **Mechanics:**  
 8232:  8144:  8056: 7968: 381:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
 8233:  8145:  8057: 7969: 382:   - **Downhill:** Kites extend air time and grant special bonuses.
 8234:  8146:  8058: 7970: 383: - **Upgrades:**  
 8235:  8147:  8059: 7971: 384:   - **Glide Boost, Speed Stream, and Aero Control.**
 8236:  8148:  8060: 7972: 385: - **Special Events:**  
 8237:  8149:  8061: 7973: 386:   - **Storm Riding** with higher boosts but riskier winds.
 8238:  8150:  8062: 7974: 387: - **Risk/Challenge:**  
 8239:  8151:  8063: 7975: 388:   - Strong gusts may destabilize your kite.
 8240:  8152:  8064: 7976: 389: 
 8241:  8153:  8065: 7977: 390: ---
 8242:  8154:  8066: 7978: 391: 
 8243:  8155:  8067: 7979: 392: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
 8244:  8156:  8068: 7980: 393: - **Objective:**  
 8245:  8157:  8069: 7981: 394:   Search for valuable minerals, gems, and gold.
 8246:  8158:  8070: 7982: 395: - **Mechanics:**  
 8247:  8159:  8071: 7983: 396:   - Explore rivers, caves, and rock formations.  
 8248:  8160:  8072: 7984: 397:   - **Panning:** Swirl water to separate gold.  
 8249:  8161:  8073: 7985: 398:   - **Pickaxe Mining:** Break rocks for hidden gems.
 8250:  8162:  8074: 7986: 399: - **Upgrades:**  
 8251:  8163:  8075: 7987: 400:   - High-tech panning kits, seismic scanners, precision drills.
 8252:  8164:  8076: 7988: 401: - **Special Events:**  
 8253:  8165:  8077: 7989: 402:   - Gold rush hotspots, rare mineral finds, and cave-ins.
 8254:  8166:  8078: 7990: 403: - **Risk/Challenge:**  
 8255:  8167:  8079: 7991: 404:   - Unstable ground and rival prospectors.
 8256:  8168:  8080: 7992: 405: 
 8257:  8169:  8081: 7993: 406: ---
 8258:  8170:  8082: 7994: 407: 
 8259:  8171:  8083: 7995: 408: ### 7. **Cryptid Fossil Digging** 🦴🔍  
 8260:  8172:  8084: 7996: 409: - **Objective:**  
 8261:  8173:  8085: 7997: 410:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
 8262:  8174:  8086: 7998: 411: - **Mechanics:**  
 8263:  8175:  8087: 7999: 412:   - Use brushes, chisels, and excavation tools to reveal fossils.  
 8264:  8176:  8088: 8000: 413:   - Transport fossils to the museum at the base of the first mountain.
 8265:  8177:  8089: 8001: 414: - **Upgrades:**  
 8266:  8178:  8090: 8002: 415:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
 8267:  8179:  8091: 8003: 416: - **Special Events:**  
 8268:  8180:  8092: 8004: 417:   - Competing paleontologists and hidden dig sites.
 8269:  8181:  8093: 8005: 418: - **Risk/Challenge:**  
 8270:  8182:  8094: 8006: 419:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
 8271:  8183:  8095: 8007: 420: 
 8272:  8184:  8096: 8008: 421: ---
 8273:  8185:  8097: 8009: 422: 
 8274:  8186:  8098: 8010: 423: ### 8. **Sled Tricking** 🛷✨  
 8275:  8187:  8099: 8011: 424: - **Objective:**  
 8276:  8188:  8100: 8012: 425:   Chain together aerial sled tricks to earn cash and boost fan engagement.
 8277:  8189:  8101: 8013: 426: - **Mechanics:**  
 8278:  8190:  8102: 8014: 427:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
 8279:  8191:  8103: 8015: 428:   - Chain tricks for higher multipliers.
 8280:  8192:  8104: 8016: 429: - **Upgrades:**  
 8281:  8193:  8105: 8017: 430:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
 8282:  8194:  8106: 8018: 431: - **Special Events:**  
 8283:  8195:  8107: 8019: 432:   - Trick challenges and fan-requested stunt competitions.
 8284:  8196:  8108: 8020: 433: - **Risk/Challenge:**  
 8285:  8197:  8109: 8021: 434:   - Mistimed tricks can cause crashes and loss of earnings.
 8286:  8198:  8110: 8022: 435: 
 8287:  8199:  8111: 8023: 436: ---
 8288:  8200:  8112: 8024: 437: 
 8289:  8201:  8113: 8025: 438: ### 9. **Time Trial Racing** 🏁🛷  
 8290:  8202:  8114: 8026: 439: - **Objective:**  
 8291:  8203:  8115: 8027: 440:   Trigger time trial races by hitting gates while sledding for money rewards.
 8292:  8204:  8116: 8028: 441: - **Mechanics:**  
 8293:  8205:  8117: 8029: 442:   - Crossing a time trial gate starts a timer.  
 8294:  8206:  8118: 8030: 443:   - The faster and further you go, the more money you earn.
 8295:  8207:  8119: 8031: 444: - **Why It Fits:**  
 8296:  8208:  8120: 8032: 445:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
 8297:  8209:  8121: 8033: 446: 
 8298:  8210:  8122: 8034: 447: ---
 8299:  8211:  8123: 8035: 448: 
 8300:  8212:  8124: 8036: 449: ### 10. **RC Motor Sled** ❄️🏎️  
 8301:  8213:  8125: 8037: 450: - **Objective:**  
 8302:  8214:  8126: 8038: 451:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
 8303:  8215:  8127: 8039: 452: - **Mechanics:**  
 8304:  8216:  8128: 8040: 453:   - Maneuver nimble RC sleds across frozen tundra.  
 8305:  8217:  8129: 8041: 454:   - Nitro boosts and mid-air tricks enhance performance.  
 8306:  8218:  8130: 8042: 455:   - Customization options include different sled bodies, engines, and handling upgrades.
 8307:  8219:  8131: 8043: 456: - **Special Events:**  
 8308:  8220:  8132: 8044: 457:   - Avalanche races, night rides, and hazard runs.
 8309:  8221:  8133: 8045: 458: - **Risk/Challenge:**  
 8310:  8222:  8134: 8046: 459:   - Limited battery life, high winds, and signal loss in deep snow.
 8311:  8223:  8135: 8047: 460: 
 8312:  8224:  8136: 8048: 461: ---
 8313:  8225:  8137: 8049: 462: 
 8314:  8226:  8138: 8050: 463: ### 11. **Sap Sugaring** 🍁🔥  
 8315:  8227:  8139: 8051: 464: - **Objective:**  
 8316:  8228:  8140: 8052: 465:   Tap into nature’s sweetest resource—maple syrup! Harvest sap from trees to create energy-restoring treats and valuable trade goods.  
 8317:  8229:  8141: 8053: 466: - **Mechanics:**  
 8318:  8230:  8142: 8054: 467:   - Start by tapping maple trees on the starter mountain.  
 8319:  8231:  8143: 8055: 468:   - Explore new regions to discover exotic trees like the **Cinderwillow** on Volcano Mountain, producing rare and powerful saps.  
 8320:  8232:  8144: 8056: 469:   - Upgrade your tapping tools and storage tanks to increase yield and quality.  
 8321:  8233:  8145: 8057: 470: - **Upgrades:**  
 8322:  8234:  8146: 8058: 471:   - **Precision Taps:** Extract sap faster with reduced waste.  
 8323:  8235:  8147: 8059: 472:   - **Insulated Buckets:** Prevent spoilage and maximize collection.  
 8324:  8236:  8148: 8060: 473:   - **Sap Refinery:** Process sap into premium syrup with added benefits.  
 8325:  8237:  8149: 8061: 474: 
 8326:  8238:  8150: 8062: 475: ---
 8327:  8239:  8151: 8063: 476: 
 8328:  8240:  8152: 8064: 477: ### 12. **Beekeeping** 🐝🍯  
 8329:  8241:  8153: 8065: 478: - **Objective:**  
 8330:  8242:  8154: 8066: 479:   Raise and breed bees to produce high-quality honey and wax, each offering unique benefits for sledding, income, and buffs.  
 8331:  8243:  8155: 8067: 480: - **Mechanics:**  
 8332:  8244:  8156: 8068: 481:   - Manage beehives and optimize honey production.  
 8333:  8245:  8157: 8069: 482:   - Crossbreed bees to develop specialized traits.  
 8334:  8246:  8158: 8070: 483:   - Explore forests to find and capture new queen bees.  
 8335:  8247:  8159: 8071: 484:   - Maintain hive conditions to ensure steady honey and wax yields.  
 8336:  8248:  8160: 8072: 485: - **Upgrades:**  
 8337:  8249:  8161: 8073: 486:   - **Deluxe Hives:** Improve bee happiness and productivity.  
 8338:  8250:  8162: 8074: 487:   - **Queen Breeding Chambers:** Unlock advanced genetic traits for custom honey effects.  
 8339:  8251:  8163: 8075: 488:   - **Protective Suits & Smokers:** Handle bees safely and reduce swarm risks.  
 8340:  8252:  8164: 8076: 489: - **Special Events:**  
 8341:  8253:  8165: 8077: 490:   - **Swarm Rescues:** Save lost colonies for rare genetic lines.  
 8342:  8254:  8166: 8078: 491:   - **Beekeeper Pete’s Challenges:** Complete tricky hive management tasks for rewards.  
 8343:  8255:  8167: 8079: 492: 
 8344:  8256:  8168: 8080: 493: ---
 8345:  8257:  8169: 8081: 494: 
 8346:  8258:  8170: 8082: 495: ## 🌆 **NPCs & Mountain Ecosystem**
 8347:  8259:  8171: 8083: 496: A thriving **mountain resort** needs a mix of **essential services, skilled specialists, and quirky legends**. These NPCs **enhance gameplay, create dynamic events, and unlock hidden mechanics**.
 8348:  8260:  8172: 8084: 497: 
 8349:  8261:  8173: 8085: 498: ---
 8350:  8262:  8174: 8086: 499: 
 8351:  8263:  8175: 8087: 500: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
 8352:  8264:  8176: 8088: 501: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
 8353:  8265:  8177: 8089: 502: 
 8354:  8266:  8178: 8090: 503: #### 🏂 **Sled Tech Steve**
 8355:  8267:  8179: 8091: 504: - **Purpose:** Repairs damage, sells sled mods.
 8356:  8268:  8180: 8092: 505: - **Example Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
 8357:  8269:  8181: 8093: 506: - **Best Quote:** *"What’d ya do, run into a bear during a race? I can fix it… for a price."*
 8358:  8270:  8182: 8094: 507: 
 8359:  8271:  8183: 8095: 508: #### 🍔 **Food Vendor**
 8360:  8272:  8184: 8096: 509: - **Purpose:** Sells food that provides **stamina buffs & temporary performance boosts**.
 8361:  8273:  8185: 8097: 510: - **Example Menu:** **Hot cocoa (warmth boost), Protein bars (stamina regen), Energy drinks (speed burst).**
 8362:  8274:  8186: 8098: 511: - **Best Quote:** *"You can't land tricks on an empty stomach!"*
 8363:  8275:  8187: 8099: 512: 
 8364:  8276:  8188: 8100: 513: #### 🎈 **Lift Operator Jay** *(kite enthusiast)*
 8365:  8277:  8189: 8101: 514: - **Purpose:** Manages lifts, introduces **kite mechanics** for gliding shortcuts.
 8366:  8278:  8190: 8102: 515: - **Example Unlocks:** **Kite rentals, lift season passes, wind path hints.**
 8367:  8279:  8191: 8103: 516: - **Best Quote:** *"Ever thought about catching air... without your sled?"*
 8368:  8280:  8192: 8104: 517: 
 8369:  8281:  8193: 8105: 518: #### 🏨 **The Hotel Hostess**
 8370:  8282:  8194: 8106: 519: - **Purpose:** Offers accommodations & **passive income based on popularity**.
 8371:  8283:  8195: 8107: 520: - **Example Unlocks:** **Penthouse suites, reputation perks, tourism boosts.**
 8372:  8284:  8196: 8108: 521: - **Best Quote:** *"The more people love this place, the more we all win."*
 8373:  8285:  8197: 8109: 522: 
 8374:  8286:  8198: 8110: 523: #### 🏪 **Convenience Store Owner Tilly**
 8375:  8287:  8199: 8111: 524: - **Purpose:** Sells consumables, **prospecting gear**, and utility tools.
 8376:  8288:  8200: 8112: 525: - **Example Stock:** **Batteries, flares, bait, shovels.**
 8377:  8289:  8201: 8113: 526: - **Best Quote:** *"You never know when you’ll need an extra pack of hand warmers."*
 8378:  8290:  8202: 8114: 527: 
 8379:  8291:  8203: 8115: 528: #### 🏔️ **Resort Manager Montana Snow**
 8380:  8292:  8204: 8116: 529: - **Purpose:** Oversees **mountain upgrades & expansion.**
 8381:  8293:  8205: 8117: 530: - **Example Unlocks:** **New trails, safety patrols, winter festivals.**
 8382:  8294:  8206: 8118: 531: - **Best Quote:** *"A bigger, better mountain keeps ‘em coming back!"*
 8383:  8295:  8207: 8119: 532: 
 8384:  8296:  8208: 8120: 533: ---
 8385:  8297:  8209: 8121: 534: 
 8386:  8298:  8210: 8122: 535: ### 🏆 **Trick & Racing-Oriented NPCs**
 8387:  8299:  8211: 8123: 536: These **drive skill progression**—unlocking **better tricks, harder competitions, and high-stakes challenges**.
 8388:  8300:  8212: 8124: 537: 
 8389:  8301:  8213: 8125: 538: #### 📸 **Hype Photographer Darlene**
 8390:  8302:  8214: 8126: 539: - **Purpose:** **Photo verification & bonus earnings** for sick tricks.
 8391:  8303:  8215: 8127: 540: - **Example Unlocks:** **Sponsor deals, cinematic trick replays.**
 8392:  8304:  8216: 8128: 541: - **Best Quote:** *"If it ain't on camera, did it even happen?"*
 8393:  8305:  8217: 8129: 542: 
 8394:  8306:  8218: 8130: 543: #### 🏅 **Stunt Organizer Whistler**
 8395:  8307:  8219: 8131: 544: - **Purpose:** Hosts **extreme challenge events**—big air, freestyle sessions.
 8396:  8308:  8220: 8132: 545: - **Example Unlocks:** **Timed trick courses, skydiving sled events.**
 8397:  8309:  8221: 8133: 546: - **Best Quote:** *"I wanna see something so crazy I forget my own name!"*
 8398:  8310:  8222: 8134: 547: 
 8399:  8311:  8223: 8135: 548: #### 🏁 **Race Commissioner Cannon**
 8400:  8312:  8224: 8136: 549: - **Purpose:** Runs **competitions & time trials**.
 8401:  8313:  8225: 8137: 550: - **Example Unlocks:** **Speed sleds, racing circuits, timed event boards.**
 8402:  8314:  8226: 8138: 551: - **Best Quote:** *"Fastest run gets the trophy—simple as that."*
 8403:  8315:  8227: 8139: 552: 
 8404:  8316:  8228: 8140: 553: #### 🏂 **Retired Pro Burton**
 8405:  8317:  8229: 8141: 554: - **Purpose:** **Teaches advanced tricks & unlocks sledboarding**.
 8406:  8318:  8230: 8142: 555: - **Example Unlocks:** **Sled-to-board transitions, trick combos.**
 8407:  8319:  8231: 8143: 556: - **Best Quote:** *"Back in my day, we landed tricks with style. I can show ya how."*
 8408:  8320:  8232: 8144: 557: 
 8409:  8321:  8233: 8145: 558: ---
 8410:  8322:  8234: 8146: 559: 
 8411:  8323:  8235: 8147: 560: ### 🏔️ **World-Building & Exploration NPCs**
 8412:  8324:  8236: 8148: 561: These **add depth, side quests, and hidden mechanics** to the world.
 8413:  8325:  8237: 8149: 562: 
 8414:  8326:  8238: 8150: 563: #### 🐾 **Wildlife Researcher**
 8415:  8327:  8239: 8151: 564: - **Purpose:** Tracks **rare animal spawns, photographic missions, fishing spots.**
 8416:  8328:  8240: 8152: 565: - **Example Unlocks:** **Bear sightings, falcon partner, eco-tourism quests.**
 8417:  8329:  8241: 8153: 566: - **Best Quote:** *"You ever seen a snow leopard up close? Neither have I… yet."*
 8418:  8330:  8242: 8154: 567: 
 8419:  8331:  8243: 8155: 568: #### 🚑 **Sled Patrol Captain**
 8420:  8332:  8244: 8156: 569: - **Purpose:** Leads **rescue missions & avalanche drills.**
 8421:  8333:  8245: 8157: 570: - **Example Unlocks:** **Emergency sled deployment, survival training.**
 8422:  8334:  8246: 8158: 571: - **Best Quote:** *"We save people, we don’t just watch ‘em wipe out."*
 8423:  8335:  8247: 8159: 572: 
 8424:  8336:  8248: 8160: 573: ---
 8425:  8337:  8249: 8161: 574: 
 8426:  8338:  8250: 8162: 575: ### 🎭 **Traveling & Recurring NPCs**
 8427:  8339:  8251: 8163: 576: They **come and go**, bringing **special challenges, rare gear, and unpredictable encounters**.
 8428:  8340:  8252: 8164: 577: 
 8429:  8341:  8253: 8165: 578: #### 🔥 **Rival**
 8430:  8342:  8254: 8166: 579: - **Purpose:** **Dynamic trick/time trial duels.**
 8431:  8343:  8255: 8167: 580: - **Example Unlocks:** **Personalized callouts, grudge matches, rare sled decals.**
 8432:  8344:  8256: 8168: 581: - **Best Quote:** *"You think you’re better than me? Prove it."*
 8433:  8345:  8257: 8169: 582: 
 8434:  8346:  8258: 8170: 583: #### 🎩 **Mysterious Merchant**
 8435:  8347:  8259: 8171: 584: - **Purpose:** **Sells rare & high-risk tech**—limited stock, always random.
 8436:  8348:  8260: 8172: 585: - **Example Stock:** **Prototype sled engines, cloaking wax, ghost sled.**
 8437:  8349:  8261: 8173: 586: - **Best Quote:** *"I sell only to those who dare."*
 8438:  8350:  8262: 8174: 587: 
 8439:  8351:  8263: 8175: 588: #### 🔧 **Tinkerer**
 8440:  8352:  8264: 8176: 589: - **Purpose:** **Experimental tech**—RC sleds, lock-picking, custom builds.
 8441:  8353:  8265: 8177: 590: - **Example Unlocks:** **Remote sleds, grappling hooks, hacking upgrades.**
 8442:  8354:  8266: 8178: 591: - **Best Quote:** *"You didn’t hear this from me, but I might’ve… *enhanced* a sled or two."*
 8443:  8355:  8267: 8179: 592: 
 8444:  8356:  8268: 8180: 593: ---
 8445:  8357:  8269: 8181: 594: 
 8446:  8358:  8270: 8182: 595: ### ❄️ **Legendary NPCs**
 8447:  8359:  8271: 8183: 596: These are **mythic figures**, unlocking **wild game mechanics, hidden areas, and secret challenges**.
 8448:  8360:  8272: 8184: 597: 
 8449:  8361:  8273: 8185: 598: #### 🌨️ **Winter Shaman Bromley**
 8450:  8362:  8274: 8186: 599: - **Purpose:** **Controls weather effects**—snowstorms, icy terrain, wind boosts.
 8451:  8363:  8275: 8187: 600: - **Example Unlocks:** **Weather manipulation quests, legendary snowboards.**
 8452:  8364:  8276: 8188: 601: - **Best Quote:** *"The mountain speaks… and I listen."*
 8453:  8365:  8277: 8189: 602: 
 8454:  8366:  8278: 8190: 603: #### 🐻 **Bear Whisperer Carrie**
 8455:  8367:  8279: 8191: 604: - **Purpose:** Unlocks **bear-racing.**
 8456:  8368:  8280: 8192: 605: - **Example Unlocks:** **Bear races, such as Time Trials and Elimination.**
 8457:  8369:  8281: 8193: 606: - **Best Quote:** *"Bears don’t bite... if you know how to ask nicely."*
 8458:  8370:  8282: 8194: 607: 
 8459:  8371:  8283: 8195: 608: #### 🐝 **Beekeeper Pete**
 8460:  8372:  8284: 8196: 609: - **Purpose:** Sells **beekeeping upgrades**.
 8461:  8373:  8285: 8197: 610: - **Example Unlocks:** **Speed honey, frost-resistant sled wax.**
 8462:  8374:  8286: 8198: 611: - **Best Quote:** *"Snow bees? Oh yeah, they’re real… and fast."*
 8463:  8375:  8287: 8199: 612: 
 8464:  8376:  8288: 8200: 613: #### ⏳ **The Time Traveler**
 8465:  8377:  8289: 8201: 614: - **Purpose:** Unlocks **cryptid fossil digging & timeline anomalies.**
 8466:  8378:  8290: 8202: 615: - **Example Unlocks:** **Ancient sleds, legendary trails, prehistoric snowboard challenges.**
 8467:  8379:  8291: 8203: 616: - **Best Quote:** *"The past isn’t gone—it’s just buried under the snow."*
 8468:  8380:  8292: 8204: 617: 
 8469:  8381:  8293: 8205: 618: ---
 8470:  8382:  8294: 8206: 619: 
 8471:  8383:  8295: 8207: 620: ## 🎮 Enhanced Controls & UI Improvements
 8472:  8384:  8296: 8208: 621: - Fully customizable control remapping
 8473:  8385:  8297: 8209: 622: - Comprehensive tutorial and onboarding systems
 8474:  8386:  8298: 8210: 623: - Improved HUD clarity (stamina, trick scoring, wildlife photography)
 8475:  8387:  8299: 8211: 624: 
 8476:  8388:  8300: 8212: 625: ---
 8477:  8389:  8301: 8213: 626: 
 8478:  8390:  8302: 8214: 627: ## 🏔️ **Mountain Themes & Progression**
 8479:  8391:  8303: 8215: 628: 
 8480:  8392:  8304: 8216: 629: ### Lava Mountain 🌋
 8481:  8393:  8305: 8217: 630: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
 8482:  8394:  8306: 8218: 631: - **Mechanics:**  
 8483:  8395:  8307: 8219: 632:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
 8484:  8396:  8308: 8220: 633:   - **Ash Clouds:** Temporarily block visibility.
 8485:  8397:  8309: 8221: 634: - **Power-Up:** **Heat Shielding Sled Coating**  
 8486:  8398:  8310: 8222: 635:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
 8487:  8399:  8311: 8223: 636: 
 8488:  8400:  8312: 8224: 637: ---
 8489:  8401:  8313: 8225: 638: 
 8490:  8402:  8314: 8226: 639: ### Space Mountain 🌌
 8491:  8403:  8315: 8227: 640: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
 8492:  8404:  8316: 8228: 641: - **Mechanics:**  
 8493:  8405:  8317: 8229: 642:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
 8494:  8406:  8318: 8230: 643:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
 8495:  8407:  8319: 8231: 644: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
 8496:  8408:  8320: 8232: 645:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
 8497:  8409:  8321: 8233: 646: 
 8498:  8410:  8322: 8234: 647: ---
 8499:  8411:  8323: 8235: 648: 
 8500:  8412:  8324: 8236: 649: ### Underwater Mountain 🌊
 8501:  8413:  8325: 8237: 650: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
 8502:  8414:  8326: 8238: 651: - **Mechanics:**  
 8503:  8415:  8327: 8239: 652:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
 8504:  8416:  8328: 8240: 653: - **Power-Up:** **Aqua-Lung Mittens**  
 8505:  8417:  8329: 8241: 654:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
 8506:  8418:  8330: 8242: 655: 
 8507:  8419:  8331: 8243: 656: ---
 8508:  8420:  8332: 8244: 657: 
 8509:  8421:  8333: 8245: 658: ### Garbage Dump Glacier 🗑️❄️
 8510:  8422:  8334: 8246: 659: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
 8511:  8423:  8335: 8247: 660: - **Mechanics:**  
 8512:  8424:  8336: 8248: 661:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
 8513:  8425:  8337: 8249: 662: - **Power-Up:** **Slick Wax Spray**  
 8514:  8426:  8338: 8250: 663:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
 8515:  8427:  8339: 8251: 664: 
 8516:  8428:  8340: 8252: 665: ---
 8517:  8429:  8341: 8253: 666: 
 8518:  8430:  8342: 8254: 667: ### Micro Mountain 🐜🌱
 8519:  8431:  8343: 8255: 668: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
 8520:  8432:  8344: 8256: 669: - **Mechanics:**  
 8521:  8433:  8345: 8257: 670:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
 8522:  8434:  8346: 8258: 671: - **Power-Up:** **Antigrav Wax**  
 8523:  8435:  8347: 8259: 672:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
 8524:  8436:  8348: 8260: 673: 
 8525:  8437:  8349: 8261: 674: ---
 8526:  8438:  8350: 8262: 675: 
 8527:  8439:  8351: 8263: 676: ### Candy Cane Canyon 🍭
 8528:  8440:  8352: 8264: 677: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
 8529:  8441:  8353: 8265: 678: - **Mechanics:**  
 8530:  8442:  8354: 8266: 679:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
 8531:  8443:  8355: 8267: 680: - **Power-Up:** **Sweet-Tooth Coating**  
 8532:  8444:  8356: 8268: 681:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
 8533:  8445:  8357: 8269: 682: 
 8534:  8446:  8358: 8270: 683: ---
 8535:  8447:  8359: 8271: 684: 
 8536:  8448:  8360: 8272: 685: ### Crystal Cave Cavern 🔮
 8537:  8449:  8361: 8273: 686: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
 8538:  8450:  8362: 8274: 687: - **Mechanics:**  
 8539:  8451:  8363: 8275: 688:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
 8540:  8452:  8364: 8276: 689: - **Power-Up:** **Crystal Clear Goggles**  
 8541:  8453:  8365: 8277: 690:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
 8542:  8454:  8366: 8278: 691: 
 8543:  8455:  8367: 8279: 692: ---
 8544:  8456:  8368: 8280: 693: 
 8545:  8457:  8369: 8281: 694: ### Haunted Graveyard Hill 👻
 8546:  8458:  8370: 8282: 695: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
 8547:  8459:  8371: 8283: 696: - **Mechanics:**  
 8548:  8460:  8372: 8284: 697:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
 8549:  8461:  8373: 8285: 698: - **Power-Up:** **Spirit Lantern**  
 8550:  8462:  8374: 8286: 699:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
 8551:  8463:  8375: 8287: 700: 
 8552:  8464:  8376: 8288: 701: ---
 8553:  8465:  8377: 8289: 702: 
 8554:  8466:  8378: 8290: 703: ### Sky Jellyfish Mountain ☁️🪼
 8555:  8467:  8379: 8291: 704: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
 8556:  8468:  8380: 8292: 705: - **Mechanics:**  
 8557:  8469:  8381: 8293: 706:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
 8558:  8470:  8382: 8294: 707: - **Power-Up:** **Stabilizer Sled Rails**  
 8559:  8471:  8383: 8295: 708:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
 8560:  8472:  8384: 8296: 709: 
 8561:  8473:  8385: 8297: 710: ---
 8562:  8474:  8386: 8298: 711: 
 8563:  8475:  8387: 8299: 712: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
 8564:  8476:  8388: 8300: 713: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
 8565:  8477:  8389: 8301: 714: - **Mechanics:**  
 8566:  8478:  8390: 8302: 715:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
 8567:  8479:  8391: 8303: 716: - **Power-Up:** **Clockwork Treads**  
 8568:  8480:  8392: 8304: 717:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
 8569:  8481:  8393: 8305: 718: 
 8570:  8482:  8394: 8306: 719: ---
 8571:  8483:  8395: 8307: 720: 
 8572:  8484:  8396: 8308: 721: ### Pyramid Peak 🐫🏜️
 8573:  8485:  8397: 8309: 722: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
 8574:  8486:  8398: 8310: 723: - **Mechanics:**  
 8575:  8487:  8399: 8311: 724:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
 8576:  8488:  8400: 8312: 725: - **Power-Up:** **Sandrunner Skis**  
 8577:  8489:  8401: 8313: 726:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
 8578:  8490:  8402: 8314: 727: 
 8579:  8491:  8403: 8315: 728: ---
 8580:  8492:  8404: 8316: 729: 
 8581:  8493:  8405: 8317: 730: ### Digital Mountain (Cyber Slopes) 💻🔮
 8582:  8494:  8406: 8318: 731: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
 8583:  8495:  8407: 8319: 732: - **Mechanics:**  
 8584:  8496:  8408: 8320: 733:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
 8585:  8497:  8409: 8321: 734: - **Power-Up:** **Data Shielding**  
 8586:  8498:  8410: 8322: 735:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
 8587:  8499:  8411: 8323: 736: 
 8588:  8500:  8412: 8324: 737: ---
 8589:  8501:  8413: 8325: 738: 
 8590:  8502:  8414: 8326: 739: 🔄 Infinite Upgrades with Soft Caps
 8591:  8503:  8415: 8327: 740: ===================================
 8592:  8504:  8416: 8328: 741: 
 8593:  8505:  8417: 8329: 742: **Expanding Progression Without Breaking Balance**
 8594:  8506:  8418: 8330: 743: 
 8595:  8507:  8419: 8331: 744: Currently, upgrades in **SledHEAD** have **hard caps**, limiting how many times they can be purchased. While this provides structure, it **restricts long-term progression** and prevents **emergent playstyles** from evolving over multiple runs. To keep **each run fresh and engaging**, we're shifting to an **infinite upgrade system** with **diminishing returns** beyond a **soft cap** for
 8596:  8508:  8420: 8332: 745: **Personal Upgrades**. **Mountain Upgrades** will
 8597:  8509:  8421: 8333: 746: need to be rebought for each new mountain purchased, and
 8598:  8510:  8422: 8334: 747: may or may not be infinite as appropriate to the upgrade.
 8599:  8511:  8423: 8335: 748: 
 8600:  8512:  8424: 8336: 749: 🎯 Proposed Solution
 8601:  8513:  8425: 8337: 750: --------------------
 8602:  8514:  8426: 8338: 751: 
 8603:  8515:  8427: 8339: 752: -   **All upgrades become infinitely upgradable.**
 8604:  8516:  8428: 8340: 753: -   Each upgrade **retains its effectiveness early on** but **scales down gradually** beyond a set level.
 8605:  8517:  8429: 8341: 754: -   **Soft caps vary** depending on the upgrade type:
 8606:  8518:  8430: 8342: 755:     -   **Speed upgrades** could start diminishing at **Level 10**.
 8607:  8519:  8431: 8343: 756:     -   **Trick bonuses** could scale freely until **Level 20** before slowing down.
 8608:  8520:  8432: 8344: 757: -   **Mathematical balancing** ensures that upgrades remain **meaningful** but **don't become overpowered**.
 8609:  8521:  8433: 8345: 758: 
 8610:  8522:  8434: 8346: 759: 📊 Scaling Formula: Exponential & Logarithmic Decay
 8611:  8523:  8435: 8347: 760: ---------------------------------------------------
 8612:  8524:  8436: 8348: 761: 
 8613:  8525:  8437: 8349: 762: Instead of **linear scaling** (e.g., "+1 Speed per level"), we use **diminishing returns** to keep upgrades valuable without breaking balance.
 8614:  8526:  8438: 8350: 763: 
 8615:  8527:  8439: 8351: 764: ### ✏ Formula Example:
 8616:  8528:  8440: 8352: 765: 
 8617:  8529:  8441: 8353: 766: newValue = baseValue + (scalingFactor * sqrt(level))
 8618:  8530:  8442: 8354: 767: 
 8619:  8531:  8443: 8355: 768: -   **Early levels feel impactful**, allowing noticeable improvements.
 8620:  8532:  8444: 8356: 769: -   **Later levels slow down naturally**, preventing infinite stacking from making players overpowered.
 8621:  8533:  8445: 8357: 770: -   Works across **various upgrade types**, from **speed boosts to trick multipliers**.
 8622:  8534:  8446: 8358: 771: 
 8623:  8535:  8447: 8359: 772: 🔎 **Alternative Approach: Logarithmic Scaling**\
 8624:  8536:  8448: 8360: 773: For upgrades that should scale *aggressively early on* but taper off smoothly:
 8625:  8537:  8449: 8361: 774: 
 8626:  8538:  8450: 8362: 775: newValue = baseValue * (1 + (scalingFactor * log(level + 1)))
 8627:  8539:  8451: 8363: 776: 
 8628:  8540:  8452: 8364: 777: -   Great for upgrades like **boost charge rates or sled handling**, where a **big early impact** makes sense but **total mastery should be gradual**.
 8629:  8541:  8453: 8365: 778: 
 8630:  8542:  8454: 8366: 779: ✅ Benefits of Infinite Upgrades with Soft Caps
 8631:  8543:  8455: 8367: 780: ----------------------------------------------
 8632:  8544:  8456: 8368: 781: 
 8633:  8545:  8457: 8369: 782: ✔ **Keeps long-term progression engaging** -- No artificial "max level" bottleneck.\
 8634:  8546:  8458: 8370: 783: ✔ **Encourages specialized strategies** -- Players can **focus on speed, tricks, or economy-based builds**.\
 8635:  8547:  8459: 8371: 784: ✔ **Prevents upgrade obsolescence** -- Players **always have something meaningful to invest in**.\
 8636:  8548:  8460: 8372: 785: ✔ **Maintains challenge balance** -- Runs become **progressively stronger**, but not infinitely easy.
 8637:  8549:  8461: 8373: 786: 
 8638:  8550:  8462: 8374: 787: 📌 Tasks & Implementation Plan
 8639:  8551:  8463: 8375: 788: ------------------------------
 8640:  8552:  8464: 8376: 789: 
 8641:  8553:  8465: 8377: 790: -   [ ]  **Remove hard upgrade caps** for all current upgrades.
 8642:  8554:  8466: 8378: 791: -   [ ]  **Implement soft cap mechanics** using **square root or logarithmic scaling**.
 8643:  8555:  8467: 8379: 792: -   [ ]  **Fine-tune soft cap levels** for different upgrade categories (e.g., Speed vs. Trick Boosts).
 8644:  8556:  8468: 8380: 793: -   [ ]  **Balance test progression** to ensure **long-term upgrades stay meaningful but not overpowered**.
 8645:  8557:  8469: 8381: 794: 
 8646:  8558:  8470: 8382: 795: This system ensures **players always have room to grow**, while keeping **SledHEAD's challenge intact**. 🚀🔥
 8647:  8559:  8471: 8383: 796: 
 8648:  8560:  8472: 8384: 797: ---
 8649:  8561:  8473: 8385: 798: 
 8650:  8562:  8474: 8386: 799: ## 🏆 Endgame & Prestige Content
 8651:  8563:  8475: 8387: 800: - Prestige system for continued replayability
 8652:  8564:  8476: 8388: 801: - Elite sled runs with intensified challenges
 8653:  8565:  8477: 8389: 802: - Legendary animal photo hunts for ultimate rewards
 8654:  8566:  8478: 8390: 803: 
 8655:  8567:  8479: 8391: 804: ---
 8656:  8568:  8480: 8392: 805: 
 8657:  8569:  8481: 8393: 806: ## 📅 Development Milestones & Timeline
 8658:  8570:  8482: 8394: 807: ### Short-Term:
 8659:  8571:  8483: 8395: 808: - Implement stamina system, basic uphill-downhill gameplay
 8660:  8572:  8484: 8396: 809: - Expand wildlife photography with rare animals at altitude
 8661:  8573:  8485: 8397: 810: - Basic personal and mountain upgrades functionality
 8662:  8574:  8486: 8398: 811: 
 8663:  8575:  8487: 8399: 812: ### Mid-Term:
 8664:  8576:  8488: 8400: 813: - Integrate the light/dark gradient altitude system to enhance visual depth and player navigation
 8665:  8577:  8489: 8401: 814: - Introduce NPCs and interactive infrastructure
 8666:  8578:  8490: 8402: 815: - Initial mini-games integration
 8667:  8579:  8491: 8403: 816: 
 8668:  8580:  8492: 8404: 817: ### Long-Term:
 8669:  8581:  8493: 8405: 818: - Add mountain biomes and unique thematic mechanics
 8670:  8582:  8494: 8406: 819: - Fully expand trick system
 8671:  8583:  8495: 8407: 820: - Complete mini-games and endgame challenges
 8672:  8584:  8496: 8408: 821: - Polish UI/UX and refine progression systems
 8673:  8585:  8497: 8409: 822: 
 8674:  8586:  8498: 8410: 823: ---
 8675:  8587:  8499: 8411: 824: 
 8676:  8588:  8500: 8412: 825: This comprehensive roadmap encapsulates all planned features and mechanics, clearly outlines the development trajectory, and integrates your newly defined gameplay mechanic. Use this as your foundational documentation moving forward to guide development clearly and effectively.
 8677:  8589:  8501: 8413: `````
 8678:  8590:  8502: 8414: 
 8679:  8591:  8503: 8415: ## File: js/stamina.js
 8680:  8592:  8504: 8416: `````javascript
 8681:  8593:  8505: 8417:   1: // Global counter for stamina depletion re-entries
 8682:  8594:  8506: 8418:   2: let reentryCount = 0;
 8683:  8595:  8507: 8419:   3: // In stamina.js
 8684:  8596:  8508: 8420:   4: class Stamina {
 8685:  8597:  8509: 8421:   5:     constructor() {
 8686:  8598:  8510: 8422:   6:       this.maxStamina = 100;
 8687:  8599:  8511: 8423:   7:       this.currentStamina = this.maxStamina;
 8688:  8600:  8512: 8424:   8:       this.staminaDrainWalking = 0.1;  // Drains steadily when walking uphill
 8689:  8601:  8513: 8425:   9:       this.staminaDrainJumping = 2.0;    // Drains once on jump launch
 8690:  8602:  8514: 8426:  10:       this.staminaDrainSledding = 0.01;  // Drains very slowly when sledding
 8691:  8603:  8515: 8427:  11:       this.isVisible = false;
 8692:  8604:  8516: 8428:  12:       this.jumpTriggered = false;        // Initialize jump flag
 8693:  8605:  8517: 8429:  13:       this.previousState = null;         // Track previous game state
 8694:  8606:  8518: 8430:  14:       this.lastLogTime = 0;              // Timestamp for throttling log messages
 8695:  8607:  8519: 8431:  15:       this.canvas = document.createElement("canvas");
 8696:  8608:  8520: 8432:  16:       this.ctx = this.canvas.getContext("2d");
 8697:  8609:  8521: 8433:  17:       this.canvas.width = 200;
 8698:  8610:  8522: 8434:  18:       this.canvas.height = 20;
 8699:  8611:  8523: 8435:  19:       this.canvas.style.position = "fixed";
 8700:  8612:  8524: 8436:  20:       this.canvas.style.top = "40px";
 8701:  8613:  8525: 8437:  21:       this.canvas.style.left = "40px";
 8702:  8614:  8526: 8438:  22:       this.canvas.style.zIndex = "1000";
 8703:  8615:  8527: 8439:  23:       document.body.appendChild(this.canvas);
 8704:  8616:  8528: 8440:  24:     }
 8705:  8617:  8529: 8441:  25:     // New method to drain stamina on jump initiation
 8706:  8618:  8530: 8442:  26:     drainJump() {
 8707:  8619:  8531: 8443:  27:       if (!this.jumpTriggered) {
 8708:  8620:  8532: 8444:  28:         this.currentStamina -= this.staminaDrainJumping;
 8709:  8621:  8533: 8445:  29:         this.jumpTriggered = true;
 8710:  8622:  8534: 8446:  30:         this.throttledLog("Jump drain: stamina reduced by " + this.staminaDrainJumping + " New stamina: " + this.currentStamina);
 8711:  8623:  8535: 8447:  31:       }
 8712:  8624:  8536: 8448:  32:     }
 8713:  8625:  8537: 8449:  33:     // Reset jump flag (to be called on landing)
 8714:  8626:  8538: 8450:  34:     resetJumpTrigger() {
 8715:  8627:  8539: 8451:  35:       this.jumpTriggered = false;
 8716:  8628:  8540: 8452:  36:       this.throttledLog("Jump trigger reset");
 8717:  8629:  8541: 8453:  37:     }
 8718:  8630:  8542: 8454:  38:     // Throttled logging function to limit messages to once per second
 8719:  8631:  8543: 8455:  39:     throttledLog(message) {
 8720:  8632:  8544: 8456:  40:       const currentTime = Date.now();
 8721:  8633:  8545: 8457:  41:       if (currentTime - this.lastLogTime >= 1000) { // Only log once per second
 8722:  8634:  8546: 8458:  42:         console.log(message);
 8723:  8635:  8547: 8459:  43:         this.lastLogTime = currentTime;
 8724:  8636:  8548: 8460:  44:       }
 8725:  8637:  8549: 8461:  45:     }
 8726:  8638:  8550: 8462:  46:     handleStaminaDepletion() {
 8727:  8639:  8551: 8463:  47:         this.throttledLog("Stamina depleted - returning to house");
 8728:  8640:  8552: 8464:  48:         // Move player to house
 8729:  8641:  8553: 8465:  49:         changeState(window.GameState.HOUSE);
 8730:  8642:  8554: 8466:  50:         // Refill stamina
 8731:  8643:  8555: 8467:  51:         this.currentStamina = this.maxStamina;
 8732:  8644:  8556: 8468:  52:         this.throttledLog("Stamina refilled to maximum");
 8733:  8645:  8557: 8469:  53:         // Despawn all animals
 8734:  8646:  8558: 8470:  54:         despawnAllAnimals();
 8735:  8647:  8559: 8471:  55:         this.throttledLog("All animals despawned");
 8736:  8648:  8560: 8472:  56:         // Calculate and charge re-entry fee
 8737:  8649:  8561: 8473:  57:         const fee = 100 * (reentryCount + 1);
 8738:  8650:  8562: 8474:  58:         player.money = Math.max(0, player.money - fee);
 8739:  8651:  8563: 8475:  59:         this.throttledLog(`Charged re-entry fee: $${fee}`);
 8740:  8652:  8564: 8476:  60:         // Increment re-entry counter
 8741:  8653:  8565: 8477:  61:         reentryCount++;
 8742:  8654:  8566: 8478:  62:         this.throttledLog(`Re-entry count increased to: ${reentryCount}`);
 8743:  8655:  8567: 8479:  63:     }
 8744:  8656:  8568: 8480:  64:     update() {
 8745:  8657:  8569: 8481:  65:       // Check for entering house state (state transition)
 8746:  8658:  8570: 8482:  66:       const enteringHouse = this.previousState !== window.GameState.HOUSE && window.currentState === window.GameState.HOUSE;
 8747:  8659:  8571: 8483:  67:       // Only show stamina bar if the player is NOT at home
 8748:  8660:  8572: 8484:  68:       this.isVisible = (window.currentState !== window.GameState.HOUSE);
 8749:  8661:  8573: 8485:  69:       if (!this.isVisible) {
 8750:  8662:  8574: 8486:  70:         if (enteringHouse) {
 8751:  8663:  8575: 8487:  71:           this.currentStamina = this.maxStamina; // Reset stamina only when entering the house
 8752:  8664:  8576: 8488:  72:           this.throttledLog("At home - resetting stamina");
 8753:  8665:  8577: 8489:  73:         }
 8754:  8666:  8578: 8490:  74:         this.canvas.style.display = "none";
 8755:  8667:  8579: 8491:  75:         this.previousState = window.currentState; // Update previous state
 8756:  8668:  8580: 8492:  76:         return;
 8757:  8669:  8581: 8493:  77:       }
 8758:  8670:  8582: 8494:  78:       this.canvas.style.display = "block";
 8759:  8671:  8583: 8495:  79:       // Drain stamina when moving uphill
 8760:  8672:  8584: 8496:  80:       if (window.currentState === window.GameState.UPHILL) {
 8761:  8673:  8585: 8497:  81:         if (keysDown["w"] || keysDown["a"] || keysDown["s"] || keysDown["d"]) {
 8762:  8674:  8586: 8498:  82:           this.currentStamina -= this.staminaDrainWalking;
 8763:  8675:  8587: 8499:  83:           this.throttledLog("UPHILL movement: draining stamina by " + this.staminaDrainWalking + " Current stamina: " + this.currentStamina);
 8764:  8676:  8588: 8500:  84:         }
 8765:  8677:  8589: 8501:  85:       }
 8766:  8678:  8590: 8502:  86:       // (No jump drain logic here now—it's moved to mechanics.js)
 8767:  8679:  8591: 8503:  87:       // Drain stamina very slowly when sledding
 8768:  8680:  8592: 8504:  88:       if (player.isSliding) {
 8769:  8681:  8593: 8505:  89:         this.currentStamina -= this.staminaDrainSledding;
 8770:  8682:  8594: 8506:  90:         this.throttledLog("Sledding: draining stamina by " + this.staminaDrainSledding + " Current stamina: " + this.currentStamina);
 8771:  8683:  8595: 8507:  91:       }
 8772:  8684:  8596: 8508:  92:       // Check for stamina depletion
 8773:  8685:  8597: 8509:  93:       if (this.currentStamina <= 0 && window.currentState !== window.GameState.HOUSE) {
 8774:  8686:  8598: 8510:  94:         this.handleStaminaDepletion();
 8775:  8687:  8599: 8511:  95:       }
 8776:  8688:  8600: 8512:  96:       // Clamp stamina value between 0 and max
 8777:  8689:  8601: 8513:  97:       this.currentStamina = Math.max(0, Math.min(this.currentStamina, this.maxStamina));
 8778:  8690:  8602: 8514:  98:       // Render the stamina bar
 8779:  8691:  8603: 8515:  99:       this.render();
 8780:  8692:  8604: 8516: 100:       // Update previous state
 8781:  8693:  8605: 8517: 101:       this.previousState = window.currentState;
 8782:  8694:  8606: 8518: 102:     }
 8783:  8695:  8607: 8519: 103:     render() {
 8784:  8696:  8608: 8520: 104:       this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
 8785:  8697:  8609: 8521: 105:       // Determine stamina bar color based on stamina percentage
 8786:  8698:  8610: 8522: 106:       let staminaRatio = this.currentStamina / this.maxStamina;
 8787:  8699:  8611: 8523: 107:       let color = "#00FF00"; // Green (full stamina)
 8788:  8700:  8612: 8524: 108:       if (staminaRatio < 0.5) color = "#FFA500"; // Orange (moderate stamina)
 8789:  8701:  8613: 8525: 109:       if (staminaRatio < 0.2) color = "#FF0000"; // Red (critical stamina)
 8790:  8702:  8614: 8526: 110:       // Draw the bar background
 8791:  8703:  8615: 8527: 111:       this.ctx.fillStyle = "#333";
 8792:  8704:  8616: 8528: 112:       this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
 8793:  8705:  8617: 8529: 113:       // Draw the stamina portion
 8794:  8706:  8618: 8530: 114:       this.ctx.fillStyle = color;
 8795:  8707:  8619: 8531: 115:       this.ctx.fillRect(0, 0, this.canvas.width * staminaRatio, this.canvas.height);
 8796:  8708:  8620: 8532: 116:     }
 8797:  8709:  8621: 8533: 117:   }
 8798:  8710:  8622: 8534: 118:   // Initialize stamina system
 8799:  8711:  8623: 8535: 119:   const stamina = new Stamina();
 8800:  8712:  8624: 8536: 120:   // Hook into the game's update loop
 8801:  8713:  8625: 8537: 121:   function updateStamina() {
 8802:  8714:  8626: 8538: 122:     stamina.update();
 8803:  8715:  8627: 8539: 123:     requestAnimationFrame(updateStamina);
 8804:  8716:  8628: 8540: 124:   }
 8805:  8717:  8629: 8541: 125:   updateStamina();
 8806:  8718:  8630: 8542: 126: // Make stamina available globally
 8807:  8719:  8631: 8543: 127: window.stamina = stamina;
 8808:  8720:  8632: 8544: `````
 8809:  8721:  8633: 8545: 
 8810:  8722:  8634: 8546: ## File: js/wildlife.js
 8811:  8723:  8635: 8547: `````javascript
 8812:  8724:  8636: 8548:   1: /* wildlife.js - Wildlife Simulation (Refactored with Spawning Biomes and Fallback)
 8813:  8725:  8637: 8549:   2: // This file handles the overall wildlife simulation logic using a registration system.
 8814:  8726:  8638: 8550:   3: // Each animal module (e.g., bear.js, bird.js, mountainlion.js) registers itself by calling registerAnimalType().
 8815:  8727:  8639: 8551:   4: // Animals have a "spawningBiomes" property that defines in which biomes and mountain layers they spawn.
 8816:  8728:  8640: 8552:   5: // If currentBiome is not defined or unrecognized, the system assumes every mountain is valid.
 8817:  8729:  8641: 8553:   6: */
 8818:  8730:  8642: 8554:   7: // Global registry for animal types
 8819:  8731:  8643: 8555:   8: var animalRegistry = [];
 8820:  8732:  8644: 8556:   9: // Function for animal modules to register themselves
 8821:  8733:  8645: 8557:  10: function registerAnimalType(animalData) {
 8822:  8734:  8646: 8558:  11:     animalRegistry.push(animalData);
 8823:  8735:  8647: 8559:  12:     console.log("Registered animal type: " + animalData.type);
 8824:  8736:  8648: 8560:  13: }
 8825:  8737:  8649: 8561:  14: // Global variables for the animal system
 8826:  8738:  8650: 8562:  15: var activeAnimal = null;
 8827:  8739:  8651: 8563:  16: var animalStateCheckInterval = null;
 8828:  8740:  8652: 8564:  17: // ------------------- Animal (Critter) Update Logic -------------------
 8829:  8741:  8653: 8565:  18: function updateAnimal() {
 8830:  8742:  8654: 8566:  19:   if (!activeAnimal) return;
 8831:  8743:  8655: 8567:  20:   // Call custom update if provided
 8832:  8744:  8656: 8568:  21:   if (activeAnimal.customUpdate && typeof activeAnimal.customUpdate === 'function') {
 8833:  8745:  8657: 8569:  22:       activeAnimal.customUpdate(activeAnimal);
 8834:  8746:  8658: 8570:  23:   }
 8835:  8747:  8659: 8571:  24:   checkPlayerProximity();
 8836:  8748:  8660: 8572:  25:   if (activeAnimal.state === "fleeing") {
 8837:  8749:  8661: 8573:  26:     if (!activeAnimal.fleeingLogOnce) {
 8838:  8750:  8662: 8574:  27:       console.log(`Animal fleeing - Type: ${activeAnimal.type}, Angle: ${activeAnimal.fleeAngleActual.toFixed(2)}°, Speed: ${activeAnimal.speed}`);
 8839:  8751:  8663: 8575:  28:       activeAnimal.fleeingLogOnce = true;
 8840:  8752:  8664: 8576:  29:     }
 8841:  8753:  8665: 8577:  30:     let rad = activeAnimal.fleeAngleActual * Math.PI / 180;
 8842:  8754:  8666: 8578:  31:     activeAnimal.x += Math.cos(rad) * activeAnimal.speed * 0.5;
 8843:  8755:  8667: 8579:  32:     activeAnimal.y += Math.sin(rad) * activeAnimal.speed * 0.5;
 8844:  8756:  8668: 8580:  33:     let dx = activeAnimal.x - player.x;
 8845:  8757:  8669: 8581:  34:     let dy = activeAnimal.y - player.absY;
 8846:  8758:  8670: 8582:  35:     let distance = Math.sqrt(dx * dx + dy * dy);
 8847:  8759:  8671: 8583:  36:     if (distance > 1000 && !activeAnimal.despawnScheduled) {
 8848:  8760:  8672: 8584:  37:       activeAnimal.despawnScheduled = true;
 8849:  8761:  8673: 8585:  38:       console.log(`Animal is more than 1000 away. Scheduling despawn in 500ms.`);
 8850:  8762:  8674: 8586:  39:       setTimeout(() => {
 8851:  8763:  8675: 8587:  40:         if (activeAnimal) {
 8852:  8764:  8676: 8588:  41:           console.log(`Animal despawned after 500ms out of range`);
 8853:  8765:  8677: 8589:  42:           activeAnimal = null;
 8854:  8766:  8678: 8590:  43:           spawnAnimal();
 8855:  8767:  8679: 8591:  44:         }
 8856:  8768:  8680: 8592:  45:       }, 5000);
 8857:  8769:  8681: 8593:  46:     }
 8858:  8770:  8682: 8594:  47:   } else if (activeAnimal.state === "sitting") {
 8859:  8771:  8683: 8595:  48:     if (Math.random() < 0.0001) {
 8860:  8772:  8684: 8596:  49:       console.log(`Animal (${activeAnimal.type}) spontaneously changing state from sitting to fleeing`);
 8861:  8773:  8685: 8597:  50:       activeAnimal.state = "fleeing";
 8862:  8774:  8686: 8598:  51:       activeAnimal.fleeingLogOnce = false;
 8863:  8775:  8687: 8599:  52:     }
 8864:  8776:  8688: 8600:  53:   }
 8865:  8777:  8689: 8601:  54: }
 8866:  8778:  8690: 8602:  55: function checkPlayerProximity() {
 8867:  8779:  8691: 8603:  56:   if (!activeAnimal || activeAnimal.state === "fleeing") return;
 8868:  8780:  8692: 8604:  57:   let dx = activeAnimal.x - player.x;
 8869:  8781:  8693: 8605:  58:   let dy = activeAnimal.y - player.absY;
 8870:  8782:  8694: 8606:  59:   let distanceSquared = dx * dx + dy * dy;
 8871:  8783:  8695: 8607:  60:   if (distanceSquared < activeAnimal.detectionRadius * activeAnimal.detectionRadius) {
 8872:  8784:  8696: 8608:  61:     console.log(`Player too close to animal (${Math.sqrt(distanceSquared).toFixed(1)} < ${activeAnimal.detectionRadius}) - animal fleeing`);
 8873:  8785:  8697: 8609:  62:     activeAnimal.state = "fleeing";
 8874:  8786:  8698: 8610:  63:     activeAnimal.fleeingLogOnce = false;
 8875:  8787:  8699: 8611:  64:     activeAnimal.fleeAngleActual = Math.atan2(dy, dx) * (180 / Math.PI);
 8876:  8788:  8700: 8612:  65:     activeAnimal.fleeAngleActual += (Math.random() - 0.5) * 30;
 8877:  8789:  8701: 8613:  66:   }
 8878:  8790:  8702: 8614:  67: }
 8879:  8791:  8703: 8615:  68: // Spawn a new animal using the registered types, with biome filtering and fallback.
 8880:  8792:  8704: 8616:  69: function spawnAnimal() {
 8881:  8793:  8705: 8617:  70:   if (currentState !== GameState.UPHILL || activeAnimal !== null) return;
 8882:  8794:  8706: 8618:  71:   // Define recognized mountain biomes.
 8883:  8795:  8707: 8619:  72:   var recognizedBiomes = ["starterMountain", "spaceMountain", "volcanoMountain"];
 8884:  8796:  8708: 8620:  73:   let availableAnimals;
 8885:  8797:  8709: 8621:  74:   // If currentBiome is not defined or unrecognized, allow all animals.
 8886:  8798:  8710: 8622:  75:   if (!currentBiome || recognizedBiomes.indexOf(currentBiome) === -1) {
 8887:  8799:  8711: 8623:  76:       availableAnimals = animalRegistry;
 8888:  8800:  8712: 8624:  77:   } else {
 8889:  8801:  8713: 8625:  78:       availableAnimals = animalRegistry.filter(animal => {
 8890:  8802:  8714: 8626:  79:           // If spawningBiomes is not specified, default to spawning only on the Starter Mountain.
 8891:  8803:  8715: 8627:  80:           if (!animal.spawningBiomes || animal.spawningBiomes.length === 0) {
 8892:  8804:  8716: 8628:  81:               return currentBiome === "starterMountain";
 8893:  8805:  8717: 8629:  82:           }
 8894:  8806:  8718: 8630:  83:           return animal.spawningBiomes.some(rule => {
 8895:  8807:  8719: 8631:  84:               if (rule.biome !== currentBiome) return false;
 8896:  8808:  8720: 8632:  85:               if (rule.layers && Array.isArray(rule.layers)) {
 8897:  8809:  8721: 8633:  86:                   return rule.layers.includes(currentMountainLayer);
 8898:  8810:  8722: 8634:  87:               }
 8899:  8811:  8723: 8635:  88:               if (rule.layerRange && typeof rule.layerRange.min === 'number' && typeof rule.layerRange.max === 'number') {
 8900:  8812:  8724: 8636:  89:                   return currentLayerPercent >= rule.layerRange.min && currentLayerPercent <= rule.layerRange.max;
 8901:  8813:  8725: 8637:  90:               }
 8902:  8814:  8726: 8638:  91:               return true;
 8903:  8815:  8727: 8639:  92:           });
 8904:  8816:  8728: 8640:  93:       });
 8905:  8817:  8729: 8641:  94:   }
 8906:  8818:  8730: 8642:  95:   if (availableAnimals.length === 0) {
 8907:  8819:  8731: 8643:  96:       console.error("No animal types available for current biome and layer!");
 8908:  8820:  8732: 8644:  97:       return;
 8909:  8821:  8733: 8645:  98:   }
 8910:  8822:  8734: 8646:  99:   let spawnX = (window.innerWidth * 0.1) + (Math.random() * window.innerWidth * 0.9);
 8911:  8823:  8735: 8647: 100:   let spawnY = player.absY - (window.innerHeight / 2);
 8912:  8824:  8736: 8648: 101:   let altitude = Math.floor(Math.random() * 100);
 8913:  8825:  8737: 8649: 102:   let initialState = "sitting";
 8914:  8826:  8738: 8650: 103:   let baseAngle = spawnX > window.innerWidth / 2 ?
 8915:  8827:  8739: 8651: 104:                   Math.random() * (170 - 135) + 135 :
 8916:  8828:  8740: 8652: 105:                   Math.random() * (55 - 20) + 20;
 8917:  8829:  8741: 8653: 106:   let angleOffset = Math.random() * 15;
 8918:  8830:  8742: 8654: 107:   let fleeAngleActual = baseAngle + (Math.random() < 0.5 ? -angleOffset : angleOffset);
 8919:  8831:  8743: 8655: 108:   let totalWeight = availableAnimals.reduce((sum, animal) => sum + animal.spawnProbability, 0);
 8920:  8832:  8744: 8656: 109:   let r = Math.random() * totalWeight;
 8921:  8833:  8745: 8657: 110:   let chosenAnimalType = null;
 8922:  8834:  8746: 8658: 111:   for (let animal of availableAnimals) {
 8923:  8835:  8747: 8659: 112:     r -= animal.spawnProbability;
 8924:  8836:  8748: 8660: 113:     if (r <= 0) {
 8925:  8837:  8749: 8661: 114:       chosenAnimalType = animal;
 8926:  8838:  8750: 8662: 115:       break;
 8927:  8839:  8751: 8663: 116:     }
 8928:  8840:  8752: 8664: 117:   }
 8929:  8841:  8753: 8665: 118:   if (!chosenAnimalType) chosenAnimalType = availableAnimals[0];
 8930:  8842:  8754: 8666: 119:   activeAnimal = {
 8931:  8843:  8755: 8667: 120:     type: chosenAnimalType.type,
 8932:  8844:  8756: 8668: 121:     x: spawnX,
 8933:  8845:  8757: 8669: 122:     y: spawnY,
 8934:  8846:  8758: 8670: 123:     width: chosenAnimalType.width,
 8935:  8847:  8759: 8671: 124:     height: chosenAnimalType.height,
 8936:  8848:  8760: 8672: 125:     state: initialState,
 8937:  8849:  8761: 8673: 126:     speed: chosenAnimalType.speed,
 8938:  8850:  8762: 8674: 127:     altitude: altitude,
 8939:  8851:  8763: 8675: 128:     hasBeenPhotographed: false,
 8940:  8852:  8764: 8676: 129:     detectionRadius: chosenAnimalType.detectionRadius,
 8941:  8853:  8765: 8677: 130:     fleeAngleActual: fleeAngleActual,
 8942:  8854:  8766: 8678: 131:     fleeingLogOnce: false,
 8943:  8855:  8767: 8679: 132:     lastStateChange: Date.now(),
 8944:  8856:  8768: 8680: 133:     stateChangeCount: 0,
 8945:  8857:  8769: 8681: 134:     basePhotoBonus: chosenAnimalType.basePhotoBonus || 0,
 8946:  8858:  8770: 8682: 135:     customUpdate: chosenAnimalType.customUpdate || null,
 8947:  8859:  8771: 8683: 136:     customDraw: chosenAnimalType.customDraw || null,
 8948:  8860:  8772: 8684: 137:   };
 8949:  8861:  8773: 8685: 138:   console.log(`Spawned ${activeAnimal.type} at (${spawnX.toFixed(1)}, ${spawnY.toFixed(1)}), altitude: ${altitude}, state: ${initialState}, speed: ${activeAnimal.speed}, detectionRadius: ${activeAnimal.detectionRadius}`);
 8950:  8862:  8774: 8686: 139:   if (!animalStateCheckInterval) {
 8951:  8863:  8775: 8687: 140:     animalStateCheckInterval = setInterval(logAnimalState, 3000);
 8952:  8864:  8776: 8688: 141:   }
 8953:  8865:  8777: 8689: 142: }
 8954:  8866:  8778: 8690: 143: function despawnAllAnimals() {
 8955:  8867:  8779: 8691: 144:     activeAnimal = null;
 8956:  8868:  8780: 8692: 145:     console.log('All animals despawned');
 8957:  8869:  8781: 8693: 146: }
 8958:  8870:  8782: 8694: 147: function logAnimalState() {
 8959:  8871:  8783: 8695: 148:   if (!activeAnimal) {
 8960:  8872:  8784: 8696: 149:     console.log("No active animal right now");
 8961:  8873:  8785: 8697: 150:     clearInterval(animalStateCheckInterval);
 8962:  8874:  8786: 8698: 151:     animalStateCheckInterval = null;
 8963:  8875:  8787: 8699: 152:     return;
 8964:  8876:  8788: 8700: 153:   }
 8965:  8877:  8789: 8701: 154:   let playerDist = Math.sqrt(
 8966:  8878:  8790: 8702: 155:     Math.pow(activeAnimal.x - player.x, 2) + 
 8967:  8879:  8791: 8703: 156:     Math.pow(activeAnimal.y - player.absY, 2)
 8968:  8880:  8792: 8704: 157:   );
 8969:  8881:  8793: 8705: 158:   console.log(`Animal status: ${activeAnimal.type}, state: ${activeAnimal.state}, position: (${activeAnimal.x.toFixed(1)}, ${activeAnimal.y.toFixed(1)}), distance to player: ${playerDist.toFixed(1)}`);
 8970:  8882:  8794: 8706: 159: }
 8971:  8883:  8795: 8707: 160: function drawAnimal() {
 8972:  8884:  8796: 8708: 161:   if (!activeAnimal || currentState !== GameState.UPHILL) return;
 8973:  8885:  8797: 8709: 162:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 8974:  8886:  8798: 8710: 163:   let animalScreenY = activeAnimal.y - cameraOffset;
 8975:  8887:  8799: 8711: 164:   if (activeAnimal.customDraw && typeof activeAnimal.customDraw === 'function') {
 8976:  8888:  8800: 8712: 165:       activeAnimal.customDraw(activeAnimal, animalScreenY, ctx);
 8977:  8889:  8801: 8713: 166:   } else {
 8978:  8890:  8802: 8714: 167:       ctx.fillStyle = activeAnimal.color || "#888888";
 8979:  8891:  8803: 8715: 168:       ctx.fillRect(
 8980:  8892:  8804: 8716: 169:         activeAnimal.x - activeAnimal.width / 2,
 8981:  8893:  8805: 8717: 170:         animalScreenY - activeAnimal.height / 2,
 8982:  8894:  8806: 8718: 171:         activeAnimal.width,
 8983:  8895:  8807: 8719: 172:         activeAnimal.height
 8984:  8896:  8808: 8720: 173:       );
 8985:  8897:  8809: 8721: 174:   }
 8986:  8898:  8810: 8722: 175: }
 8987:  8899:  8811: 8723: 176: window.registerAnimalType = registerAnimalType;
 8988:  8900:  8812: 8724: 177: window.updateAnimal = updateAnimal;
 8989:  8901:  8813: 8725: 178: window.spawnAnimal = spawnAnimal;
 8990:  8902:  8814: 8726: 179: window.despawnAllAnimals = despawnAllAnimals;
 8991:  8903:  8815: 8727: 180: window.drawAnimal = drawAnimal;
 8992:  8904:  8816: 8728: `````
 8993:  8905:  8817: 8729: 
 8994:  8906:  8818: 8730: ## File: todo.txt
 8995:  8907:  8819: 8731: `````
 8996:  8908:  8820: 8732:  1: Feat: Swap from down-to-up to up-to-down.
 8997:  8909:  8821: 8733:  2: 
 8998:  8910:  8822: 8734:  3: Docs: Find some NPC to cover prospecting, treasure hunting, and rescue missions
 8999:  8911:  8823: 8735:  4: 
 9000:  8912:  8824: 8736:  5: Refactor: Refactor mechanics.js & utils.js
 9001:  8913:  8825: 8737:  6: 
 9002:  8914:  8826: 8738:  7: Refactor: Switch tricks from press to hold (so you choose if you do a 180 or a 1080)
 9003:  8915:  8827: 8739:  8: (more advanced tricks can still be some sort of combo press)
 9004:  8916:  8828: 8740:  9: 
 9005:  8917:  8829: 8741: 10: Feat: Nerf jumping, buff ramps, attend leg day affects jump height
 9006:  8918:  8830: 8742: `````
 9007:  8919:  8831: 8743: 
 9008:  8920:  8832: 8744: ## File: js/downhill.js
 9009:  8921:  8833: 8745: `````javascript
 9010:  8922:  8834: 8746:   1: /* downhill.js - Downhill Mechanics & Physics */
 9011:  8923:  8835: 8747:   2: import {
 9012:  8924:  8836: 8748:   3:   processTrick,
 9013:  8925:  8837: 8749:   4:   checkTrickInputs,
 9014:  8926:  8838: 8750:   5:   resetTrickState
 9015:  8927:  8839: 8751:   6: } from './tricks.js';
 9016:  8928:  8840: 8752:   7: // Update all downhill-specific physics and mechanics
 9017:  8929:  8841: 8753:   8: function updateDownhill(deltaTime) {
 9018:  8930:  8842: 8754:   9:   let rocketFactor = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.rocketSurgeryFactorPerLevel);
 9019:  8931:  8843: 8755:  10:   let gravity = TWEAK.baseGravity * rocketFactor;
 9020:  8932:  8844: 8756:  11:   let maxXVel = TWEAK.baseMaxXVel * (rocketFactor - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel));
 9021:  8933:  8845: 8757:  12:   maxXVel = Math.max(0, maxXVel);
 9022:  8934:  8846: 8758:  13:   let opticsFactor = 1 + (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsAccelFactorPerLevel);
 9023:  8935:  8847: 8759:  14:   let horizontalAccel = TWEAK.baseHorizontalAccel * opticsFactor;
 9024:  8936:  8848: 8760:  15:   let friction = TWEAK.baseFriction - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel);
 9025:  8937:  8849: 8761:  16:   if (friction < 0.8) friction = 0.8;
 9026:  8938:  8850: 8762:  17:   // Horizontal movement handling with bounds checking
 9027:  8939:  8851: 8763:  18:   if (window.keysDown["a"]) { player.xVel -= horizontalAccel; }
 9028:  8940:  8852: 8764:  19:   if (window.keysDown["d"]) { player.xVel += horizontalAccel; }
 9029:  8941:  8853: 8765:  20:   player.xVel *= friction;
 9030:  8942:  8854: 8766:  21:   player.xVel = clamp(player.xVel, -maxXVel, maxXVel);
 9031:  8943:  8855: 8767:  22:   let newX = player.x + player.xVel;
 9032:  8944:  8856: 8768:  23:   // Prevent going off screen horizontally
 9033:  8945:  8857: 8769:  24:   player.x = clamp(newX, player.width/2, window.canvas.width - player.width/2);
 9034:  8946:  8858: 8770:  25:   // --- Jump Input Handling ---
 9035:  8947:  8859: 8771:  26:   // Immediate Mode:
 9036:  8948:  8860: 8772:  27:   if (TWEAK.jumpType === "immediate") {
 9037:  8949:  8861: 8773:  28:     if (window.keysDown[" "] && !player.isJumping && player.canJump) {
 9038:  8950:  8862: 8774:  29:       player.isJumping = true;
 9039:  8951:  8863: 8775:  30:       player.canJump = false;
 9040:  8952:  8864: 8776:  31:       player.isCharging = false;
 9041:  8953:  8865: 8777:  32:       let heightBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpHeightPerRocketSurgery);
 9042:  8954:  8866: 8778:  33:       let timeBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpTimePerRocketSurgery);
 9043:  8955:  8867: 8779:  34:       let heightIncrease = heightBonus - 1;
 9044:  8956:  8868: 8780:  35:       let extraZoom = heightIncrease * TWEAK.jumpZoomPerHeightIncrease;
 9045:  8957:  8869: 8781:  36:       player.jumpHeightFactor = heightBonus;
 9046:  8958:  8870: 8782:  37:       player.jumpDuration = TWEAK.jumpBaseAscent * timeBonus;
 9047:  8959:  8871: 8783:  38:       player.jumpZoomBonus = extraZoom;
 9048:  8960:  8872: 8784:  39:       player.jumpTimer = 0;
 9049:  8961:  8873: 8785:  40:       player.hasReachedJumpPeak = false;
 9050:  8962:  8874: 8786:  41:       if (window.playerUpgrades.rocketSurgery > 0) {
 9051:  8963:  8875: 8787:  42:         console.log(`Jump boosted by Rocket Surgery ${window.playerUpgrades.rocketSurgery}: Height x${heightBonus.toFixed(2)}, Time x${timeBonus.toFixed(2)}, Zoom +${(extraZoom*100).toFixed(0)}%`);
 9052:  8964:  8876: 8788:  43:       }
 9053:  8965:  8877: 8789:  44:       onPlayerJumpStart();
 9054:  8966:  8878: 8790:  45:     }
 9055:  8967:  8879: 8791:  46:   }
 9056:  8968:  8880: 8792:  47:   // Charge Mode:
 9057:  8969:  8881: 8793:  48:   else if (TWEAK.jumpType === "charge") {
 9058:  8970:  8882: 8794:  49:     if (window.keysDown[" "] && !player.isJumping && !player.isCharging && player.canJump) {
 9059:  8971:  8883: 8795:  50:       player.isCharging = true;
 9060:  8972:  8884: 8796:  51:       player.canJump = false;
 9061:  8973:  8885: 8797:  52:       player.jumpChargeTime = 0;
 9062:  8974:  8886: 8798:  53:     }
 9063:  8975:  8887: 8799:  54:     if (player.isCharging) {
 9064:  8976:  8888: 8800:  55:       player.jumpChargeTime += deltaTime;
 9065:  8977:  8889: 8801:  56:       if (!window.keysDown[" "]) {
 9066:  8978:  8890: 8802:  57:         let chargeRatio = Math.min(1, player.jumpChargeTime / TWEAK.jumpMaxHoldTime);
 9067:  8979:  8891: 8803:  58:         player.isCharging = false;
 9068:  8980:  8892: 8804:  59:         player.isJumping = true;
 9069:  8981:  8893: 8805:  60:         player.jumpHeightFactor = chargeRatio;
 9070:  8982:  8894: 8806:  61:         player.jumpDuration = 500 + 500 * chargeRatio;
 9071:  8983:  8895: 8807:  62:         player.jumpTimer = 0;
 9072:  8984:  8896: 8808:  63:         player.hasReachedJumpPeak = false;
 9073:  8985:  8897: 8809:  64:         onPlayerJumpStart();
 9074:  8986:  8898: 8810:  65:       } else if (player.jumpChargeTime >= TWEAK.jumpMaxHoldTime) {
 9075:  8987:  8899: 8811:  66:         player.isCharging = false;
 9076:  8988:  8900: 8812:  67:         player.isJumping = true;
 9077:  8989:  8901: 8813:  68:         player.jumpHeightFactor = 1;
 9078:  8990:  8902: 8814:  69:         player.jumpDuration = 1000;
 9079:  8991:  8903: 8815:  70:         player.jumpTimer = 0;
 9080:  8992:  8904: 8816:  71:         player.hasReachedJumpPeak = false;
 9081:  8993:  8905: 8817:  72:         onPlayerJumpStart();
 9082:  8994:  8906: 8818:  73:       }
 9083:  8995:  8907: 8819:  74:     }
 9084:  8996:  8908: 8820:  75:   }
 9085:  8997:  8909: 8821:  76:   // Jump Animation & Trick Handling:
 9086:  8998:  8910: 8822:  77:   if (player.isJumping) {
 9087:  8999:  8911: 8823:  78:     player.jumpTimer += deltaTime;
 9088:  9000:  8912: 8824:  79:     let progress = player.jumpTimer / player.jumpDuration;
 9089:  9001:  8913: 8825:  80:     // Re-hit window handling:
 9090:  9002:  8914: 8826:  81:     if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
 9091:  9003:  8915: 8827:  82:       if (window.keysDown[" "] && !player.reHitActivated && !player.isCharging) {
 9092:  9004:  8916: 8828:  83:         console.log("Re-hit jump activated!");
 9093:  9005:  8917: 8829:  84:         player.reHitActivated = true;
 9094:  9006:  8918: 8830:  85:         player.jumpTimer = 0;
 9095:  9007:  8919: 8831:  86:         player.jumpDuration *= TWEAK.reHitBonusDuration;
 9096:  9008:  8920: 8832:  87:         player.jumpHeightFactor = 1;
 9097:  9009:  8921: 8833:  88:         playTone(600, "sine", 0.1, 0.3);
 9098:  9010:  8922: 8834:  89:         return;
 9099:  9011:  8923: 8835:  90:       }
 9100:  9012:  8924: 8836:  91:     }
 9101:  9013:  8925: 8837:  92:     if (player.isJumping && jumpOsc) {
 9102:  9014:  8926: 8838:  93:       let f_start = 300, f_peak = 800, f_end = 300, freq;
 9103:  9015:  8927: 8839:  94:       if (progress < 0.5) {
 9104:  9016:  8928: 8840:  95:         let t = progress / 0.5;
 9105:  9017:  8929: 8841:  96:         freq = f_start + (f_peak - f_start) * (t * t);
 9106:  9018:  8930: 8842:  97:       } else {
 9107:  9019:  8931: 8843:  98:         let t = (progress - 0.5) / 0.5;
 9108:  9020:  8932: 8844:  99:         freq = f_peak - (f_peak - f_end) * (t * t);
 9109:  9021:  8933: 8845: 100:       }
 9110:  9022:  8934: 8846: 101:       jumpOsc.frequency.setValueAtTime(freq, audioCtx.currentTime);
 9111:  9023:  8935: 8847: 102:     }
 9112:  9024:  8936: 8848: 103:     // Check for trick inputs and process any active tricks
 9113:  9025:  8937: 8849: 104:     checkTrickInputs();
 9114:  9026:  8938: 8850: 105:     processTrick(deltaTime);
 9115:  9027:  8939: 8851: 106:     if (!player.hasReachedJumpPeak && progress >= 0.5) {
 9116:  9028:  8940: 8852: 107:       player.hasReachedJumpPeak = true;
 9117:  9029:  8941: 8853: 108:       onPlayerJumpPeak();
 9118:  9030:  8942: 8854: 109:     }
 9119:  9031:  8943: 8855: 110:     if (progress >= 1) {
 9120:  9032:  8944: 8856: 111:       // End jump: reset jump/trick state and restore scale
 9121:  9033:  8945: 8857: 112:       player.isJumping = false;
 9122:  9034:  8946: 8858: 113:       player.jumpTimer = 0;
 9123:  9035:  8947: 8859: 114:       player.hasReachedJumpPeak = false;
 9124:  9036:  8948: 8860: 115:       resetTrickState();
 9125:  9037:  8949: 8861: 116:       player.width = player.baseWidth;
 9126:  9038:  8950: 8862: 117:       player.height = player.baseHeight;
 9127:  9039:  8951: 8863: 118:       onPlayerLand();
 9128:  9040:  8952: 8864: 119:       // Check for landing collisions
 9129:  9041:  8953: 8865: 120:       for (let i = 0; i < terrain.length; i++) {
 9130:  9042:  8954: 8866: 121:         let obstacle = terrain[i];
 9131:  9043:  8955: 8867: 122:         if (checkCollision(
 9132:  9044:  8956: 8868: 123:             player.x - player.width / 2, player.absY - player.height / 2,
 9133:  9045:  8957: 8869: 124:             player.width, player.height,
 9134:  9046:  8958: 8870: 125:             obstacle.x, obstacle.y,
 9135:  9047:  8959: 8871: 126:             obstacle.width, obstacle.height
 9136:  9048:  8960: 8872: 127:         )) {
 9137:  9049:  8961: 8873: 128:           console.log("Collision on landing.");
 9138:  9050:  8962: 8874: 129:           player.velocityY = -TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
 9139:  9051:  8963: 8875: 130:           player.absY -= TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
 9140:  9052:  8964: 8876: 131:           player.collisions++;
 9141:  9053:  8965: 8877: 132:           terrain.splice(i, 1);
 9142:  9054:  8966: 8878: 133:           if (player.collisions >= TWEAK.getMaxCollisions()) {
 9143:  9055:  8967: 8879: 134:             console.log("Max collisions reached.");
 9144:  9056:  8968: 8880: 135:             player.sledDamaged = 1; // Mark sled as damaged
 9145:  9057:  8969: 8881: 136:             console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
 9146:  9058:  8970: 8882: 137:             playCrashSound();
 9147:  9059:  8971: 8883: 138:             changeState(GameState.UPHILL);
 9148:  9060:  8972: 8884: 139:             return;
 9149:  9061:  8973: 8885: 140:           } else {
 9150:  9062:  8974: 8886: 141:             playRockHitSound();
 9151:  9063:  8975: 8887: 142:           }
 9152:  9064:  8976: 8888: 143:           break;
 9153:  9065:  8977: 8889: 144:         }
 9154:  9066:  8978: 8890: 145:       }
 9155:  9067:  8979: 8891: 146:     } else {
 9156:  9068:  8980: 8892: 147:       // Scale player sprite for jump arc effect
 9157:  9069:  8981: 8893: 148:       let baseScale = TWEAK.jumpPeakScale + player.jumpZoomBonus;
 9158:  9070:  8982: 8894: 149:       let scale = 1 + (baseScale - 1) * Math.sin(Math.PI * progress) * player.jumpHeightFactor;
 9159:  9071:  8983: 8895: 150:       player.width = player.baseWidth * scale;
 9160:  9072:  8984: 8896: 151:       player.height = player.baseHeight * scale;
 9161:  9073:  8985: 8897: 152:     }
 9162:  9074:  8986: 8898: 153:   }
 9163:  9075:  8987: 8899: 154:   // Allow jump restart when space is released
 9164:  9076:  8988: 8900: 155:   if (!window.keysDown[" "]) {
 9165:  9077:  8989: 8901: 156:     player.canJump = true;
 9166:  9078:  8990: 8902: 157:   }
 9167:  9079:  8991: 8903: 158:   // Normal downhill physics & collision handling (skip during jump)
 9168:  9080:  8992: 8904: 159:   let prevAbsY = player.absY;
 9169:  9081:  8993: 8905: 160:   if (!player.isJumping) {
 9170:  9082:  8994: 8906: 161:     for (let i = 0; i < terrain.length; i++) {
 9171:  9083:  8995: 8907: 162:       let obstacle = terrain[i];
 9172:  9084:  8996: 8908: 163:       if (checkCollision(
 9173:  9085:  8997: 8909: 164:           player.x - player.width / 2, player.absY - player.height / 2,
 9174:  9086:  8998: 8910: 165:           player.width, player.height,
 9175:  9087:  8999: 8911: 166:           obstacle.x, obstacle.y,
 9176:  9088:  9000: 8912: 167:           obstacle.width, obstacle.height
 9177:  9089:  9001: 8913: 168:       )) {
 9178:  9090:  9002: 8914: 169:         console.log("Collision on downhill.");
 9179:  9091:  9003: 8915: 170:         player.velocityY = -TWEAK.bounceImpulse;
 9180:  9092:  9004: 8916: 171:         player.absY = prevAbsY - TWEAK.bounceImpulse;
 9181:  9093:  9005: 8917: 172:         player.collisions++;
 9182:  9094:  9006: 8918: 173:         terrain.splice(i, 1);
 9183:  9095:  9007: 8919: 174:         if (player.collisions >= TWEAK.getMaxCollisions()) {
 9184:  9096:  9008: 8920: 175:           console.log("Max collisions reached. Ending run.");
 9185:  9097:  9009: 8921: 176:           player.sledDamaged = 1; // Mark sled as damaged
 9186:  9098:  9010: 8922: 177:           console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
 9187:  9099:  9011: 8923: 178:           awardMoney();
 9188:  9100:  9012: 8924: 179:           playCrashSound();
 9189:  9101:  9013: 8925: 180:           changeState(GameState.UPHILL);
 9190:  9102:  9014: 8926: 181:           return;
 9191:  9103:  9015: 8927: 182:         } else {
 9192:  9104:  9016: 8928: 183:           playRockHitSound();
 9193:  9105:  9017: 8929: 184:         }
 9194:  9106:  9018: 8930: 185:       }
 9195:  9107:  9019: 8931: 186:     }
 9196:  9108:  9020: 8932: 187:   }
 9197:  9109:  9021: 8933: 188:   player.velocityY += player.isJumping ? TWEAK.baseGravity : gravity;
 9198:  9110:  9022: 8934: 189:   player.absY += player.velocityY;
 9199:  9111:  9023: 8935: 190:   updateLiveMoney();
 9200:  9112:  9024: 8936: 191:   // Check for transition to UPHILL mode near bottom
 9201:  9113:  9025: 8937: 192:   if (player.absY >= mountainHeight - (player.height * 4)) {
 9202:  9114:  9026: 8938: 193:     player.absY = mountainHeight - (player.height * 4);
 9203:  9115:  9027: 8939: 194:     player.velocityY = 0;
 9204:  9116:  9028: 8940: 195:     console.log("Reached transition point. Switching to uphill mode.");
 9205:  9117:  9029: 8941: 196:     // Fix for jumping transition - handle jump state before changing modes
 9206:  9118:  9030: 8942: 197:     if (player.isJumping) {
 9207:  9119:  9031: 8943: 198:       // Smoothly reset jump zoom and finalize landing
 9208:  9120:  9032: 8944: 199:       lerpJumpZoomToZero(() => {
 9209:  9121:  9033: 8945: 200:         onPlayerJumpLand(); // handles trick cleanup, sound, etc.
 9210:  9122:  9034: 8946: 201:       });
 9211:  9123:  9035: 8947: 202:     }
 9212:  9124:  9036: 8948: 203:     changeState(GameState.UPHILL);
 9213:  9125:  9037: 8949: 204:     return;
 9214:  9126:  9038: 8950: 205:   }
 9215:  9127:  9039: 8951: 206:   // Check for actual bottom
 9216:  9128:  9040: 8952: 207:   if (player.absY >= mountainHeight) {
 9217:  9129:  9041: 8953: 208:     player.absY = mountainHeight;
 9218:  9130:  9042: 8954: 209:     console.log("Reached bottom. Returning to house.");
 9219:  9131:  9043: 8955: 210:     awardMoney();
 9220:  9132:  9044: 8956: 211:     changeState(GameState.HOUSE);
 9221:  9133:  9045: 8957: 212:   }
 9222:  9134:  9046: 8958: 213: }
 9223:  9135:  9047: 8959: 214: // Helper function for smooth jump transition
 9224:  9136:  9048: 8960: 215: function lerpJumpZoomToZero(callback) {
 9225:  9137:  9049: 8961: 216:   const startZoom = player.jumpZoomBonus;
 9226:  9138:  9050: 8962: 217:   const duration = 250; // ms
 9227:  9139:  9051: 8963: 218:   const startTime = performance.now();
 9228:  9140:  9052: 8964: 219:   function animate(time) {
 9229:  9141:  9053: 8965: 220:     const elapsed = time - startTime;
 9230:  9142:  9054: 8966: 221:     const t = Math.min(1, elapsed / duration);
 9231:  9143:  9055: 8967: 222:     player.jumpZoomBonus = startZoom * (1 - t);
 9232:  9144:  9056: 8968: 223:     if (t < 1) {
 9233:  9145:  9057: 8969: 224:       requestAnimationFrame(animate);
 9234:  9146:  9058: 8970: 225:     } else {
 9235:  9147:  9059: 8971: 226:       player.jumpZoomBonus = 0;
 9236:  9148:  9060: 8972: 227:       player.isJumping = false;
 9237:  9149:  9061: 8973: 228:       player.jumpTimer = 0;
 9238:  9150:  9062: 8974: 229:       player.hasReachedJumpPeak = false;
 9239:  9151:  9063: 8975: 230:       resetTrickState();
 9240:  9152:  9064: 8976: 231:       player.width = player.baseWidth;
 9241:  9153:  9065: 8977: 232:       player.height = player.baseHeight;
 9242:  9154:  9066: 8978: 233:       if (callback) callback();
 9243:  9155:  9067: 8979: 234:     }
 9244:  9156:  9068: 8980: 235:   }
 9245:  9157:  9069: 8981: 236:   requestAnimationFrame(animate);
 9246:  9158:  9070: 8982: 237: }
 9247:  9159:  9071: 8983: 238: // Export necessary functions
 9248:  9160:  9072: 8984: 239: export { updateDownhill, lerpJumpZoomToZero };
 9249:  9161:  9073: 8985: `````
 9250:  9162:  9074: 8986: 
 9251:  9163:  9075: 8987: ## File: js/player.js
 9252:  9164:  9076: 8988: `````javascript
 9253:  9165:  9077: 8989:  1: /* player.js */
 9254:  9166:  9078: 8990:  2: let player = {
 9255:  9167:  9079: 8991:  3:   x: window.canvas.width / 2,  // Use global canvas reference
 9256:  9168:  9080: 8992:  4:   absY: 0,
 9257:  9169:  9081: 8993:  5:   width: 20,
 9258:  9170:  9082: 8994:  6:   height: 20,
 9259:  9171:  9083: 8995:  7:   velocityY: 0,
 9260:  9172:  9084: 8996:  8:   xVel: 0,
 9261:  9173:  9085: 8997:  9:   collisions: 0,
 9262:  9174:  9086: 8998: 10:   bestTime: Infinity,
 9263:  9175:  9087: 8999: 11:   money: 200, // Default initial value instead of directly accessing TWEAK.starterCash
 9264:  9176:  9088: 9000: 12:   sledDamaged: 0,  // Track if sled is damaged: 0 = not damaged, >0 = damaged
 9265:  9177:  9089: 9001: 13:   // Camera aim properties
 9266:  9178:  9090: 9002: 14:   cameraAngle: 270,  // Camera rotation in degrees
 9267:  9179:  9091: 9003: 15:   altitudeLine: 50,  // Starts at 50% of the view range
 9268:  9180:  9092: 9004: 16:   // Trick system properties
 9269:  9181:  9093: 9005: 17:   currentTrick: null,        // Currently active trick
 9270:  9182:  9094: 9006: 18:   trickTimer: 0,            // Time elapsed in current trick
 9271:  9183:  9095: 9007: 19:   trickRotation: 0,         // Current rotation angle for helicopter tricks
 9272:  9184:  9096: 9008: 20:   trickOffset: 0,           // Current offset for air brake/parachute
 9273:  9185:  9097: 9009: 21:   lastTrick: null,          // Last completed trick for chain tracking
 9274:  9186:  9098: 9010: 22:   trickChainCount: 0,       // Number of different tricks chained
 9275:  9187:  9099: 9011: 23:   trickCooldowns: {         // Individual cooldown timers for each trick
 9276:  9188:  9100: 9012: 24:     leftHelicopter: 0,
 9277:  9189:  9101: 9013: 25:     rightHelicopter: 0,
 9278:  9190:  9102: 9014: 26:     airBrake: 0,
 9279:  9191:  9103: 9015: 27:     parachute: 0
 9280:  9192:  9104: 9016: 28:   },
 9281:  9193:  9105: 9017: 29:   // *** NEW: Jump State Properties ***
 9282:  9194:  9106: 9018: 30:   isJumping: false,          // Are we in a jump?
 9283:  9195:  9107: 9019: 31:   isCharging: false,         // For "charge" mode to accumulate jump time
 9284:  9196:  9108: 9020: 32:   canJump: true,             // Ensures jump is triggered only once per key press
 9285:  9197:  9109: 9021: 33:   reHitActivated: false,     // Prevents multiple re-hits during one key press
 9286:  9198:  9110: 9022: 34:   jumpTimer: 0,              // Elapsed time since jump started (ms)
 9287:  9199:  9111: 9023: 35:   jumpDuration: 0,           // Total duration of the jump (ascent + descent)
 9288:  9200:  9112: 9024: 36:   jumpChargeTime: 0,         // Accumulated hold time for charge mode
 9289:  9201:  9113: 9025: 37:   hasReachedJumpPeak: false, // Flag to trigger the peak hook only once per jump
 9290:  9202:  9114: 9026: 38:   jumpHeightFactor: 0,       // Height multiplier from Rocket Surgery (1.0 = normal)
 9291:  9203:  9115: 9027: 39:   jumpZoomBonus: 0,         // Extra zoom from increased jump height
 9292:  9204:  9116: 9028: 40:   baseWidth: 20,             // Original sprite width (for scaling)
 9293:  9205:  9117: 9029: 41:   baseHeight: 20             // Original sprite height (for scaling)
 9294:  9206:  9118: 9030: 42: };
 9295:  9207:  9119: 9031: 43: // Initialize player money from TWEAK settings once they're available
 9296:  9208:  9120: 9032: 44: function initializePlayerMoney() {
 9297:  9209:  9121: 9033: 45:   if (window.TWEAK && typeof window.TWEAK.starterCash !== 'undefined') {
 9298:  9210:  9122: 9034: 46:     player.money = window.TWEAK.starterCash;
 9299:  9211:  9123: 9035: 47:     console.log("Player money initialized to:", player.money);
 9300:  9212:  9124: 9036: 48:   }
 9301:  9213:  9125: 9037: 49: }
 9302:  9214:  9126: 9038: 50: // Call this function after TWEAK is initialized (e.g., from game.js)
 9303:  9215:  9127: 9039: 51: window.initializePlayerMoney = initializePlayerMoney;
 9304:  9216:  9128: 9040: `````
 9305:  9217:  9129: 9041: 
 9306:  9218:  9130: 9042: ## File: .gitignore
 9307:  9219:  9131: 9043: `````
 9308:  9220:  9132: 9044: 1: repomix-output.txt
 9309:  9221:  9133: 9045: 2: repomix-output.txt.xml
 9310:  9222:  9134: 9046: 3: .repomix/bundles.json
 9311:  9223:  9135: 9047: 4: OLD Codebase.xml
 9312:  9224:  9136: 9048: 5: repomix-output.txt.md
 9313:  9225:  9137: 9049: 6: complete-condensed-codebase-for-reference.md
 9314:  9226:  9138: 9050: `````
 9315:  9227:  9139: 9051: 
 9316:  9228:  9140: 9052: ## File: js/entities.js
 9317:  9229:  9141: 9053: `````javascript
 9318:  9230:  9142: 9054:   1: /* entities.js - Pruned version to avoid overlap with wildlifephotos.js */
 9319:  9231:  9143: 9055:   2: // Resolves collisions between the player and obstacles.
 9320:  9232:  9144: 9056:   3: function resolveCollision(player, obstacle) {
 9321:  9233:  9145: 9057:   4:   let playerCenterX = player.x;
 9322:  9234:  9146: 9058:   5:   let playerCenterY = player.absY;
 9323:  9235:  9147: 9059:   6:   let obstacleCenterX = obstacle.x + obstacle.width / 2;
 9324:  9236:  9148: 9060:   7:   let obstacleCenterY = obstacle.y + obstacle.height / 2;
 9325:  9237:  9149: 9061:   8:   let halfWidthPlayer = player.width / 2;
 9326:  9238:  9150: 9062:   9:   let halfWidthObstacle = obstacle.width / 2;
 9327:  9239:  9151: 9063:  10:   let halfHeightPlayer = player.height / 2;
 9328:  9240:  9152: 9064:  11:   let halfHeightObstacle = obstacle.height / 2;
 9329:  9241:  9153: 9065:  12:   let dx = playerCenterX - obstacleCenterX;
 9330:  9242:  9154: 9066:  13:   let dy = playerCenterY - obstacleCenterY;
 9331:  9243:  9155: 9067:  14:   let overlapX = halfWidthPlayer + halfWidthObstacle - Math.abs(dx);
 9332:  9244:  9156: 9068:  15:   let overlapY = halfHeightPlayer + halfHeightObstacle - Math.abs(dy);
 9333:  9245:  9157: 9069:  16:   if (overlapX < 0 || overlapY < 0) return;
 9334:  9246:  9158: 9070:  17:   if (overlapX < overlapY) {
 9335:  9247:  9159: 9071:  18:     if (dx > 0) {
 9336:  9248:  9160: 9072:  19:       player.x += overlapX * 0.3;
 9337:  9249:  9161: 9073:  20:     } else {
 9338:  9250:  9162: 9074:  21:       player.x -= overlapX * 0.3;
 9339:  9251:  9163: 9075:  22:     }
 9340:  9252:  9164: 9076:  23:   } else {
 9341:  9253:  9165: 9077:  24:     if (dy > 0) {
 9342:  9254:  9166: 9078:  25:       player.absY += overlapY * 0.3;
 9343:  9255:  9167: 9079:  26:     } else {
 9344:  9256:  9168: 9080:  27:       player.absY -= overlapY * 0.3;
 9345:  9257:  9169: 9081:  28:     }
 9346:  9258:  9170: 9082:  29:   }
 9347:  9259:  9171: 9083:  30: }
 9348:  9260:  9172: 9084:  31: // Draws the camera overlay with the POV cone and a steady altitude line.
 9349:  9261:  9173: 9085:  32: function drawCameraOverlay() {
 9350:  9262:  9174: 9086:  33:   // Only display the overlay when in UPHILL mode.
 9351:  9263:  9175: 9087:  34:   if (currentState !== GameState.UPHILL) return;
 9352:  9264:  9176: 9088:  35:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 9353:  9265:  9177: 9089:  36:   let centerX = player.x;
 9354:  9266:  9178: 9090:  37:   let centerY = player.absY - cameraOffset;
 9355:  9267:  9179: 9091:  38:   let coneLength = 300; // Length of the camera cone
 9356:  9268:  9180: 9092:  39:   // Draw the camera POV Cone.
 9357:  9269:  9181: 9093:  40:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
 9358:  9270:  9182: 9094:  41:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
 9359:  9271:  9183: 9095:  42:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
 9360:  9272:  9184: 9096:  43:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
 9361:  9273:  9185: 9097:  44:   ctx.beginPath();
 9362:  9274:  9186: 9098:  45:   ctx.moveTo(centerX, centerY);
 9363:  9275:  9187: 9099:  46:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
 9364:  9276:  9188: 9100:  47:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
 9365:  9277:  9189: 9101:  48:   ctx.closePath();
 9366:  9278:  9190: 9102:  49:   ctx.fill();
 9367:  9279:  9191: 9103:  50:   // Draw the altitude line.
 9368:  9280:  9192: 9104:  51:   // Map altitudeLine [0,100] to an offset along the camera's central axis:
 9369:  9281:  9193: 9105:  52:   // 0 aligns with the player sprite’s bottom, 100 with its top.
 9370:  9282:  9194: 9106:  53:   let offsetTop = ((coneLength / 2) + player.height);
 9371:  9283:  9195: 9107:  54:   let offsetBottom = player.height / 2;
 9372:  9284:  9196: 9108:  55:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
 9373:  9285:  9197: 9109:  56:   let rad = player.cameraAngle * Math.PI / 180;
 9374:  9286:  9198: 9110:  57:   let lineCenterX = centerX + offset * Math.cos(rad);
 9375:  9287:  9199: 9111:  58:   let lineCenterY = centerY + offset * Math.sin(rad);
 9376:  9288:  9200: 9112:  59:   // Draw altitude line perpendicular to camera direction.
 9377:  9289:  9201: 9113:  60:   let lineLength = 100;
 9378:  9290:  9202: 9114:  61:   let perpX = -Math.sin(rad);
 9379:  9291:  9203: 9115:  62:   let perpY = Math.cos(rad);
 9380:  9292:  9204: 9116:  63:   let x1 = lineCenterX - (lineLength / 2) * perpX;
 9381:  9293:  9205: 9117:  64:   let y1 = lineCenterY - (lineLength / 2) * perpY;
 9382:  9294:  9206: 9118:  65:   let x2 = lineCenterX + (lineLength / 2) * perpX;
 9383:  9295:  9207: 9119:  66:   let y2 = lineCenterY + (lineLength / 2) * perpY;
 9384:  9296:  9208: 9120:  67:   // Steady color gradient from red (bottom) to blue (top)
 9385:  9297:  9209: 9121:  68:   let t = 1 - (player.altitudeLine / 100);
 9386:  9298:  9210: 9122:  69:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 9387:  9299:  9211: 9123:  70:   ctx.strokeStyle = altitudeColor;
 9388:  9300:  9212: 9124:  71:   ctx.lineWidth = 3;
 9389:  9301:  9213: 9125:  72:   // Draw the altitude line without any flashing.
 9390:  9302:  9214: 9126:  73:   ctx.beginPath();
 9391:  9303:  9215: 9127:  74:   ctx.moveTo(x1, y1);
 9392:  9304:  9216: 9128:  75:   ctx.lineTo(x2, y2);
 9393:  9305:  9217: 9129:  76:   ctx.stroke();
 9394:  9306:  9218: 9130:  77: }
 9395:  9307:  9219: 9131:  78: // Draws the game entities such as the background, terrain, player, and sled.
 9396:  9308:  9220: 9132:  79: function drawEntities() {
 9397:  9309:  9221: 9133:  80:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 9398:  9310:  9222: 9134:  81:   ctx.clearRect(0, 0, canvas.width, canvas.height);
 9399:  9311:  9223: 9135:  82:   // Draw background.
 9400:  9312:  9224: 9136:  83:   ctx.fillStyle = currentState === GameState.DOWNHILL ? "#ADD8E6" : "#98FB98";
 9401:  9313:  9225: 9137:  84:   ctx.fillRect(0, 0, canvas.width, canvas.height);
 9402:  9314:  9226: 9138:  85:   // Draw terrain obstacles.
 9403:  9315:  9227: 9139:  86:   terrain.forEach(obstacle => {
 9404:  9316:  9228: 9140:  87:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
 9405:  9317:  9229: 9141:  88:       ctx.fillStyle = "#808080"; // Obstacles are drawn in grey.
 9406:  9318:  9230: 9142:  89:       ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
 9407:  9319:  9231: 9143:  90:     }
 9408:  9320:  9232: 9144:  91:   });
 9409:  9321:  9233: 9145:  92:   let playerDrawY = player.absY - cameraOffset;
 9410:  9322:  9234: 9146:  93:   ctx.save(); // Save the current context state
 9411:  9323:  9235: 9147:  94:   // Apply trick-specific transformations.
 9412:  9324:  9236: 9148:  95:   if (player.currentTrick) {
 9413:  9325:  9237: 9149:  96:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
 9414:  9326:  9238: 9150:  97:       // Rotate around the player's center for helicopter tricks.
 9415:  9327:  9239: 9151:  98:       ctx.translate(player.x, playerDrawY);
 9416:  9328:  9240: 9152:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
 9417:  9329:  9241: 9153: 100:       ctx.translate(-player.x, -playerDrawY);
 9418:  9330:  9242: 9154: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 9419:  9331:  9243: 9155: 102:       // Offset for air brake/parachute tricks.
 9420:  9332:  9244: 9156: 103:       if (player.currentTrick === "airBrake") {
 9421:  9333:  9245: 9157: 104:         playerDrawY += player.trickOffset;  // Move sled behind the player.
 9422:  9334:  9246: 9158: 105:       } else {
 9423:  9335:  9247: 9159: 106:         playerDrawY -= player.trickOffset;  // Move player above the sled for parachute.
 9424:  9336:  9248: 9160: 107:       }
 9425:  9337:  9249: 9161: 108:     }
 9426:  9338:  9250: 9162: 109:   }
 9427:  9339:  9251: 9163: 110:   // Draw the sled (as a red square).
 9428:  9340:  9252: 9164: 111:   ctx.fillStyle = "#FF0000";
 9429:  9341:  9253: 9165: 112:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
 9430:  9342:  9254: 9166: 113:   // Draw the player (as a yellow circle) when applicable.
 9431:  9343:  9255: 9167: 114:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 9432:  9344:  9256: 9168: 115:     ctx.fillStyle = "#FFFF00";
 9433:  9345:  9257: 9169: 116:     ctx.beginPath();
 9434:  9346:  9258: 9170: 117:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
 9435:  9347:  9259: 9171: 118:     ctx.fill();
 9436:  9348:  9260: 9172: 119:   }
 9437:  9349:  9261: 9173: 120:   ctx.restore(); // Restore the context state
 9438:  9350:  9262: 9174: 121:   // Draw the camera overlay.
 9439:  9351:  9263: 9175: 122:   drawCameraOverlay();
 9440:  9352:  9264: 9176: 123: }
 9441:  9353:  9265: 9177: `````
 9442:  9354:  9266: 9178: 
 9443:  9355:  9267: 9179: ## File: js/render.js
 9444:  9356:  9268: 9180: `````javascript
 9445:  9357:  9269: 9181:   1: /* render.js - Rendering Logic */
 9446:  9358:  9270: 9182:   2: // Floating Text System (unchanged)
 9447:  9359:  9271: 9183:   3: class FloatingText {
 9448:  9360:  9272: 9184:   4:   constructor(text, x, y) {
 9449:  9361:  9273: 9185:   5:     this.text = text;
 9450:  9362:  9274: 9186:   6:     this.x = x;
 9451:  9363:  9275: 9187:   7:     this.initialY = y;
 9452:  9364:  9276: 9188:   8:     this.age = 0;
 9453:  9365:  9277: 9189:   9:     this.lifetime = 1000;
 9454:  9366:  9278: 9190:  10:     this.visualOffsetY = -30;
 9455:  9367:  9279: 9191:  11:   }
 9456:  9368:  9280: 9192:  12:   update(deltaTime) {
 9457:  9369:  9281: 9193:  13:     this.age += deltaTime;
 9458:  9370:  9282: 9194:  14:     this.visualOffsetY -= deltaTime * 0.25;
 9459:  9371:  9283: 9195:  15:     return this.age < this.lifetime;
 9460:  9372:  9284: 9196:  16:   }
 9461:  9373:  9285: 9197:  17:   draw(ctx, cameraY) {
 9462:  9374:  9286: 9198:  18:     const alpha = 1 - (this.age / this.lifetime);
 9463:  9375:  9287: 9199:  19:     ctx.fillStyle = `rgba(0, 0, 0, ${alpha})`;
 9464:  9376:  9288: 9200:  20:     ctx.font = "bold 24px Arial";
 9465:  9377:  9289: 9201:  21:     ctx.textAlign = "center";
 9466:  9378:  9290: 9202:  22:     const screenY = player.absY - cameraY + this.visualOffsetY;
 9467:  9379:  9291: 9203:  23:     ctx.fillText(this.text, this.x, screenY);
 9468:  9380:  9292: 9204:  24:   }
 9469:  9381:  9293: 9205:  25: }
 9470:  9382:  9294: 9206:  26: function addFloatingText(text, x, y) {
 9471:  9383:  9295: 9207:  27:   window.floatingTexts.push(new FloatingText(text, x, y - 30));
 9472:  9384:  9296: 9208:  28: }
 9473:  9385:  9297: 9209:  29: // No changes to money display logic
 9474:  9386:  9298: 9210:  30: function updateLiveMoney() {
 9475:  9387:  9299: 9211:  31:   let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
 9476:  9388:  9300: 9212:  32:   distanceTraveled = Math.max(1, distanceTraveled);
 9477:  9389:  9301: 9213:  33:   let moneyEarned = Math.floor(distanceTraveled / 100);
 9478:  9390:  9302: 9214:  34:   moneyEarned = Math.max(1, moneyEarned);
 9479:  9391:  9303: 9215:  35:   let moneyText = document.getElementById("moneyText");
 9480:  9392:  9304: 9216:  36:   if (moneyText) {
 9481:  9393:  9305: 9217:  37:     moneyText.textContent = `Money: $${player.money} (+$${moneyEarned})`;
 9482:  9394:  9306: 9218:  38:   }
 9483:  9395:  9307: 9219:  39: }
 9484:  9396:  9308: 9220:  40: function showMoneyGain(amount, source = "") {
 9485:  9397:  9309: 9221:  41:   let moneyText = document.getElementById("moneyText");
 9486:  9398:  9310: 9222:  42:   if (moneyText) {
 9487:  9399:  9311: 9223:  43:     if (source) {
 9488:  9400:  9312: 9224:  44:       moneyText.textContent = `Money: $${player.money} (+$${amount} ${source})`;
 9489:  9401:  9313: 9225:  45:     } else {
 9490:  9402:  9314: 9226:  46:       moneyText.textContent = `Money: $${player.money} (+$${amount})`;
 9491:  9403:  9315: 9227:  47:     }
 9492:  9404:  9316: 9228:  48:     moneyText.classList.add("money-increase");
 9493:  9405:  9317: 9229:  49:     setTimeout(() => {
 9494:  9406:  9318: 9230:  50:       moneyText.classList.remove("money-increase");
 9495:  9407:  9319: 9231:  51:     }, 100);
 9496:  9408:  9320: 9232:  52:   }
 9497:  9409:  9321: 9233:  53: }
 9498:  9410:  9322: 9234:  54: function updateMoneyDisplay() {
 9499:  9411:  9323: 9235:  55:   let moneyText = document.getElementById("moneyText");
 9500:  9412:  9324: 9236:  56:   if (moneyText) {
 9501:  9413:  9325: 9237:  57:     moneyText.textContent = `Money: $${player.money}`;
 9502:  9414:  9326: 9238:  58:   }
 9503:  9415:  9327: 9239:  59: }
 9504:  9416:  9328: 9240:  60: // MAIN RENDER
 9505:  9417:  9329: 9241:  61: function render() {
 9506:  9418:  9330: 9242:  62:   console.log("render START");
 9507:  9419:  9331: 9243:  63:   // Clear the canvas each frame
 9508:  9420:  9332: 9244:  64:   ctx.clearRect(0, 0, canvas.width, canvas.height);
 9509:  9421:  9333: 9245:  65:   // Background color depends on state
 9510:  9422:  9334: 9246:  66:   ctx.fillStyle = (window.currentState === window.GameState.DOWNHILL) ? "#ADD8E6" : "#98FB98";
 9511:  9423:  9335: 9247:  67:   ctx.fillRect(0, 0, canvas.width, canvas.height);
 9512:  9424:  9336: 9248:  68:   drawEntities();
 9513:  9425:  9337: 9249:  69:   ctx.save();
 9514:  9426:  9338: 9250:  70:   window.floatingTexts.forEach(text => text.draw(ctx, player.absY - canvas.height / 2));
 9515:  9427:  9339: 9251:  71:   ctx.restore();
 9516:  9428:  9340: 9252:  72:   drawReHitIndicator();
 9517:  9429:  9341: 9253:  73:   console.log("render END");
 9518:  9430:  9342: 9254:  74: }
 9519:  9431:  9343: 9255:  75: function drawEntities() {
 9520:  9432:  9344: 9256:  76:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 9521:  9433:  9345: 9257:  77:   // Terrain
 9522:  9434:  9346: 9258:  78:   terrain.forEach(obstacle => {
 9523:  9435:  9347: 9259:  79:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
 9524:  9436:  9348: 9260:  80:       if (obstacle.type === 'tree') {
 9525:  9437:  9349: 9261:  81:         drawTree(ctx, {
 9526:  9438:  9350: 9262:  82:           x: obstacle.x,
 9527:  9439:  9351: 9263:  83:           y: obstacle.y - cameraOffset,
 9528:  9440:  9352: 9264:  84:           width: obstacle.width,
 9529:  9441:  9353: 9265:  85:           height: obstacle.height
 9530:  9442:  9354: 9266:  86:         });
 9531:  9443:  9355: 9267:  87:       } else {
 9532:  9444:  9356: 9268:  88:         ctx.fillStyle = "#808080";
 9533:  9445:  9357: 9269:  89:         ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
 9534:  9446:  9358: 9270:  90:       }
 9535:  9447:  9359: 9271:  91:     }
 9536:  9448:  9360: 9272:  92:   });
 9537:  9449:  9361: 9273:  93:   // Player
 9538:  9450:  9362: 9274:  94:   let playerDrawY = player.absY - cameraOffset;
 9539:  9451:  9363: 9275:  95:   ctx.save();
 9540:  9452:  9364: 9276:  96:   if (player.currentTrick) {
 9541:  9453:  9365: 9277:  97:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
 9542:  9454:  9366: 9278:  98:       ctx.translate(player.x, playerDrawY);
 9543:  9455:  9367: 9279:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
 9544:  9456:  9368: 9280: 100:       ctx.translate(-player.x, -playerDrawY);
 9545:  9457:  9369: 9281: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 9546:  9458:  9370: 9282: 102:       playerDrawY += (player.currentTrick === "airBrake") ? player.trickOffset : -player.trickOffset;
 9547:  9459:  9371: 9283: 103:     }
 9548:  9460:  9372: 9284: 104:   }
 9549:  9461:  9373: 9285: 105:   ctx.fillStyle = "#FF0000";
 9550:  9462:  9374: 9286: 106:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
 9551:  9463:  9375: 9287: 107:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
 9552:  9464:  9376: 9288: 108:     ctx.fillStyle = "#FFFF00";
 9553:  9465:  9377: 9289: 109:     ctx.beginPath();
 9554:  9466:  9378: 9290: 110:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
 9555:  9467:  9379: 9291: 111:     ctx.fill();
 9556:  9468:  9380: 9292: 112:   }
 9557:  9469:  9381: 9293: 113:   ctx.restore();
 9558:  9470:  9382: 9294: 114:   drawCameraOverlay();
 9559:  9471:  9383: 9295: 115:   drawAnimal();
 9560:  9472:  9384: 9296: 116: }
 9561:  9473:  9385: 9297: 117: function drawCameraOverlay() {
 9562:  9474:  9386: 9298: 118:   if (window.currentState !== window.GameState.UPHILL) return;
 9563:  9475:  9387: 9299: 119:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 9564:  9476:  9388: 9300: 120:   let centerX = player.x;
 9565:  9477:  9389: 9301: 121:   let centerY = player.absY - cameraOffset;
 9566:  9478:  9390: 9302: 122:   let coneLength = 300;
 9567:  9479:  9391: 9303: 123:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
 9568:  9480:  9392: 9304: 124:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
 9569:  9481:  9393: 9305: 125:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
 9570:  9482:  9394: 9306: 126:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
 9571:  9483:  9395: 9307: 127:   ctx.beginPath();
 9572:  9484:  9396: 9308: 128:   ctx.moveTo(centerX, centerY);
 9573:  9485:  9397: 9309: 129:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
 9574:  9486:  9398: 9310: 130:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
 9575:  9487:  9399: 9311: 131:   ctx.closePath();
 9576:  9488:  9400: 9312: 132:   ctx.fill();
 9577:  9489:  9401: 9313: 133:   let offsetTop = (coneLength / 2) + player.height;
 9578:  9490:  9402: 9314: 134:   let offsetBottom = player.height / 2;
 9579:  9491:  9403: 9315: 135:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
 9580:  9492:  9404: 9316: 136:   let rad = player.cameraAngle * Math.PI / 180;
 9581:  9493:  9405: 9317: 137:   let lineCenterX = centerX + offset * Math.cos(rad);
 9582:  9494:  9406: 9318: 138:   let lineCenterY = centerY + offset * Math.sin(rad);
 9583:  9495:  9407: 9319: 139:   let lineLength = 100;
 9584:  9496:  9408: 9320: 140:   let perpX = -Math.sin(rad);
 9585:  9497:  9409: 9321: 141:   let perpY = Math.cos(rad);
 9586:  9498:  9410: 9322: 142:   let x1 = lineCenterX - (lineLength / 2) * perpX;
 9587:  9499:  9411: 9323: 143:   let y1 = lineCenterY - (lineLength / 2) * perpY;
 9588:  9500:  9412: 9324: 144:   let x2 = lineCenterX + (lineLength / 2) * perpX;
 9589:  9501:  9413: 9325: 145:   let y2 = lineCenterY + (lineLength / 2) * perpY;
 9590:  9502:  9414: 9326: 146:   let t = 1 - (player.altitudeLine / 100);
 9591:  9503:  9415: 9327: 147:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 9592:  9504:  9416: 9328: 148:   ctx.strokeStyle = altitudeColor;
 9593:  9505:  9417: 9329: 149:   ctx.lineWidth = 3;
 9594:  9506:  9418: 9330: 150:   if (activeAnimal && isAnimalInsideCone(activeAnimal)) {
 9595:  9507:  9419: 9331: 151:     let flashSpeed = mapRange(Math.abs(player.altitudeLine - activeAnimal.altitude), 0, 100, TWEAK.altitudeFlashMaxSpeed, TWEAK.altitudeFlashMinSpeed);
 9596:  9508:  9420: 9332: 152:     if (Math.floor(Date.now() / flashSpeed) % 2 === 0) {
 9597:  9509:  9421: 9333: 153:       ctx.beginPath();
 9598:  9510:  9422: 9334: 154:       ctx.moveTo(x1, y1);
 9599:  9511:  9423: 9335: 155:       ctx.lineTo(x2, y2);
 9600:  9512:  9424: 9336: 156:       ctx.stroke();
 9601:  9513:  9425: 9337: 157:     }
 9602:  9514:  9426: 9338: 158:   } else {
 9603:  9515:  9427: 9339: 159:     ctx.beginPath();
 9604:  9516:  9428: 9340: 160:     ctx.moveTo(x1, y1);
 9605:  9517:  9429: 9341: 161:     ctx.lineTo(x2, y2);
 9606:  9518:  9430: 9342: 162:     ctx.stroke();
 9607:  9519:  9431: 9343: 163:   }
 9608:  9520:  9432: 9344: 164: }
 9609:  9521:  9433: 9345: 165: function drawReHitIndicator() {
 9610:  9522:  9434: 9346: 166:   if (!player.isJumping) return;
 9611:  9523:  9435: 9347: 167:   const progress = player.jumpTimer / player.jumpDuration;
 9612:  9524:  9436: 9348: 168:   if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
 9613:  9525:  9437: 9349: 169:     ctx.save();
 9614:  9526:  9438: 9350: 170:     ctx.beginPath();
 9615:  9527:  9439: 9351: 171:     const radius = (player.baseWidth * TWEAK.reHitIndicatorScale) / 2;
 9616:  9528:  9440: 9352: 172:     const cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 9617:  9529:  9441: 9353: 173:     const screenY = canvas.height / 2 + (player.absY - cameraOffset - canvas.height / 2);
 9618:  9530:  9442: 9354: 174:     ctx.shadowColor = TWEAK.reHitIndicatorOutlineColor;
 9619:  9531:  9443: 9355: 175:     ctx.shadowBlur = 20;
 9620:  9532:  9444: 9356: 176:     ctx.lineWidth = 3;
 9621:  9533:  9445: 9357: 177:     const pulseScale = 1 + Math.sin(Date.now() / 100) * 0.1;
 9622:  9534:  9446: 9358: 178:     ctx.arc(player.x, screenY, radius * pulseScale, 0, Math.PI * 2);
 9623:  9535:  9447: 9359: 179:     ctx.fillStyle = TWEAK.reHitIndicatorColor;
 9624:  9536:  9448: 9360: 180:     ctx.fill();
 9625:  9537:  9449: 9361: 181:     ctx.strokeStyle = TWEAK.reHitIndicatorOutlineColor;
 9626:  9538:  9450: 9362: 182:     ctx.stroke();
 9627:  9539:  9451: 9363: 183:     ctx.closePath();
 9628:  9540:  9452: 9364: 184:     ctx.restore();
 9629:  9541:  9453: 9365: 185:   }
 9630:  9542:  9454: 9366: 186: }
 9631:  9543:  9455: 9367: `````
 9632:  9544:  9456: 9368: 
 9633:  9545:  9457: 9369: ## File: js/world.js
 9634:  9546:  9458: 9370: `````javascript
 9635:  9547:  9459: 9371:  1: /* world.js */
 9636:  9548:  9460: 9372:  2: const mountainHeight = 200000; // Mountain is now 100x bigger!
 9637:  9549:  9461: 9373:  3: let terrain = [];
 9638:  9550:  9462: 9374:  4: const obstacleCount = 1500; // Reduced rock count to make room for trees
 9639:  9551:  9463: 9375:  5: const treeClusterCount = 3000; // Number of tree clusters to generate
 9640:  9552:  9464: 9376:  6: let earlyFinish = false;
 9641:  9553:  9465: 9377:  7: const heightMultiplierBase = 1; // Base value for height multiplier - can be adjusted later
 9642:  9554:  9466: 9378:  8: const distanceMultiplierBase = 1; // Base value for distance multiplier - can be adjusted later
 9643:  9555:  9467: 9379:  9: const speedMultiplierBase = 1; // Base value for speed multiplier - can be adjusted later
 9644:  9556:  9468: 9380: 10: function generateTerrain() {
 9645:  9557:  9469: 9381: 11:   terrain = [];
 9646:  9558:  9470: 9382: 12:   // Generate rock obstacles
 9647:  9559:  9471: 9383: 13:   for (let i = 0; i < obstacleCount; i++) {
 9648:  9560:  9472: 9384: 14:     let obstacle = {
 9649:  9561:  9473: 9385: 15:       x: Math.random() * (canvas.width - 70) + 10,
 9650:  9562:  9474: 9386: 16:       y: Math.random() * mountainHeight,
 9651:  9563:  9475: 9387: 17:       width: 30 + Math.random() * 40,
 9652:  9564:  9476: 9388: 18:       height: 10 + Math.random() * 20,
 9653:  9565:  9477: 9389: 19:       type: 'rock' // Explicitly mark as rock
 9654:  9566:  9478: 9390: 20:     };
 9655:  9567:  9479: 9391: 21:     terrain.push(obstacle);
 9656:  9568:  9480: 9392: 22:   }
 9657:  9569:  9481: 9393: 23:   // Generate tree clusters
 9658:  9570:  9482: 9394: 24:   const terrainBounds = { 
 9659:  9571:  9483: 9395: 25:     xMin: 0, 
 9660:  9572:  9484: 9396: 26:     xMax: canvas.width, 
 9661:  9573:  9485: 9397: 27:     yMin: 0, 
 9662:  9574:  9486: 9398: 28:     yMax: mountainHeight 
 9663:  9575:  9487: 9399: 29:   };
 9664:  9576:  9488: 9400: 30:   // Assume player size reference (can be adjusted based on actual player dimensions)
 9665:  9577:  9489: 9401: 31:   const playerSize = 30; // Estimate based on what's visible in the game
 9666:  9578:  9490: 9402: 32:   const treeObstacles = generateTreeClumps({ 
 9667:  9579:  9491: 9403: 33:     count: treeClusterCount, 
 9668:  9580:  9492: 9404: 34:     terrainBounds, 
 9669:  9581:  9493: 9405: 35:     playerSize 
 9670:  9582:  9494: 9406: 36:   });
 9671:  9583:  9495: 9407: 37:   // Add trees to terrain array
 9672:  9584:  9496: 9408: 38:   terrain.push(...treeObstacles);
 9673:  9585:  9497: 9409: 39:   // Sort all obstacles by Y position for rendering order
 9674:  9586:  9498: 9410: 40:   terrain.sort((a, b) => a.y - b.y);
 9675:  9587:  9499: 9411: 41: }
 9676:  9588:  9500: 9412: 42: function awardMoney() {
 9677:  9589:  9501: 9413: 43:     // Calculate real distance traveled based on starting and ending Y positions
 9678:  9590:  9502: 9414: 44:     // Note: In this game's coordinate system, higher Y values mean lower on the mountain
 9679:  9591:  9503: 9415: 45:     // So the distance traveled downhill is player.absY - playerStartAbsY
 9680:  9592:  9504: 9416: 46:     let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
 9681:  9593:  9505: 9417: 47:     // Ensure at least 1 unit
 9682:  9594:  9506: 9418: 48:     distanceTraveled = Math.max(1, distanceTraveled);
 9683:  9595:  9507: 9419: 49:     // Calculate the height multiplier based on starting position
 9684:  9596:  9508: 9420: 50:     // Higher up the mountain (lower playerStartAbsY value) gives better multiplier
 9685:  9597:  9509: 9421: 51:     // This will make a run from the top worth 3x more than from the bottom
 9686:  9598:  9510: 9422: 52:     const startHeightRatio = 1 - (playerStartAbsY / mountainHeight); // 0 at bottom, 1 at top
 9687:  9599:  9511: 9423: 53:     const startHeightMultiplier = 1 + (startHeightRatio * 2 * heightMultiplierBase); // Range: 1-3x
 9688:  9600:  9512: 9424: 54:     // Calculate the distance multiplier based on how much of the mountain was traversed
 9689:  9601:  9513: 9425: 55:     // This makes longer runs more valuable (e.g., a full mountain run worth 3x more than 10 runs of 10% each)
 9690:  9602:  9514: 9426: 56:     const distanceRatio = distanceTraveled / mountainHeight; // What fraction of the mountain was traversed
 9691:  9603:  9515: 9427: 57:     const distanceMultiplier = 1 + (Math.min(1, distanceRatio * 10) * 2 * distanceMultiplierBase); // Range: 1-3x
 9692:  9604:  9516: 9428: 58:     // The formula ensures a full mountain run (10% of mountain = 1.2x, 20% = 1.4x, ... 100% = 3x)
 9693:  9605:  9517: 9429: 59:     // Calculate speed multiplier based on the time taken to complete the run
 9694:  9606:  9518: 9430: 60:     let speedMultiplier = 1;
 9695:  9607:  9519: 9431: 61:     if (downhillStartTime !== null) {
 9696:  9608:  9520: 9432: 62:         const runDuration = (performance.now() - downhillStartTime) / 1000; // Convert to seconds
 9697:  9609:  9521: 9433: 63:         // Calculate expected time based on distance
 9698:  9610:  9522: 9434: 64:         // Assuming an "average" speed would be covering the entire mountain in the below number of seconds
 9699:  9611:  9523: 9435: 65:         const expectedTime = (distanceTraveled / mountainHeight) * 500;
 9700:  9612:  9524: 9436: 66:         // Calculate speed ratio: lower than 1 means faster than expected
 9701:  9613:  9525: 9437: 67:         // We want lower times to give higher multipliers
 9702:  9614:  9526: 9438: 68:         const speedRatio = Math.max(0.1, Math.min(2, runDuration / Math.max(1, expectedTime)));
 9703:  9615:  9527: 9439: 69:         // Invert the ratio: 1/speedRatio, so faster runs (lower speedRatio) get higher multipliers
 9704:  9616:  9528: 9440: 70:         // Adjust the curve to get 1x for average speed, up to 3x for twice as fast
 9705:  9617:  9529: 9441: 71:         speedMultiplier = 1 + (Math.max(0, (1 - speedRatio)) * 3 * speedMultiplierBase); // Range: 1-3x
 9706:  9618:  9530: 9442: 72:         console.log(`Run duration: ${runDuration.toFixed(2)}s, Expected: ${expectedTime.toFixed(2)}s, Speed ratio: ${speedRatio.toFixed(2)}, Multiplier: ${speedMultiplier.toFixed(2)}x`);
 9707:  9619:  9531: 9443: 73:     }
 9708:  9620:  9532: 9444: 74:     // Apply all multipliers to the money calculation
 9709:  9621:  9533: 9445: 75:     let moneyEarned = Math.floor((distanceTraveled / 100) * startHeightMultiplier * distanceMultiplier * speedMultiplier);
 9710:  9622:  9534: 9446: 76:     moneyEarned = Math.max(0, moneyEarned); // Guarantee no negative values
 9711:  9623:  9535: 9447: 77:     console.log(`Awarding money: $${moneyEarned} (Distance: ${distanceTraveled}, Height multiplier: ${startHeightMultiplier.toFixed(2)}, Distance multiplier: ${distanceMultiplier.toFixed(2)}, Speed multiplier: ${speedMultiplier.toFixed(2)})`);
 9712:  9624:  9536: 9448: 78:     player.money += moneyEarned;
 9713:  9625:  9537: 9449: 79:     updateMoneyDisplay();
 9714:  9626:  9538: 9450: 80: }
 9715:  9627:  9539: 9451: `````
 9716:  9628:  9540: 9452: 
 9717:  9629:  9541: 9453: ## File: js/mechanics.js
 9718:  9630:  9542: 9454: `````javascript
 9719:  9631:  9543: 9455:  1: /* mechanics.js - Gameplay Mechanics & Interactions */
 9720:  9632:  9544: 9456:  2: // Update all gameplay state and physics – including jump/trick handling and collision updates.
 9721:  9633:  9545: 9457:  3: function updateMechanics(deltaTime) {
 9722:  9634:  9546: 9458:  4:     deltaTime *= 1;
 9723:  9635:  9547: 9459:  5:     console.log(`updateMechanics: Checking state = ${window.currentState}`);
 9724:  9636:  9548: 9460:  6:     if (window.currentState === window.GameState.DOWNHILL) {
 9725:  9637:  9549: 9461:  7:       // Call the refactored downhill function from downhill.js
 9726:  9638:  9550: 9462:  8:       updateDownhill(deltaTime);
 9727:  9639:  9551: 9463:  9:     } else if (window.currentState === window.GameState.UPHILL) {
 9728:  9640:  9552: 9464: 10:       // Call the refactored uphill function from uphill.js
 9729:  9641:  9553: 9465: 11:       updateUphill(deltaTime);
 9730:  9642:  9554: 9466: 12:     }
 9731:  9643:  9555: 9467: 13:   }
 9732:  9644:  9556: 9468: 14:   // Note: Jump-related functions moved to jumpsled.js
 9733:  9645:  9557: 9469: 15: function lerpPlayerToGround(duration, onComplete) {
 9734:  9646:  9558: 9470: 16:   const startY = player.absY;
 9735:  9647:  9559: 9471: 17:   const endY = mountainHeight - (player.height * 3); // Safe landing height
 9736:  9648:  9560: 9472: 18:   const startTime = performance.now();
 9737:  9649:  9561: 9473: 19:   function animate() {
 9738:  9650:  9562: 9474: 20:     const now = performance.now();
 9739:  9651:  9563: 9475: 21:     const t = Math.min(1, (now - startTime) / duration);
 9740:  9652:  9564: 9476: 22:     // Use smooth easing
 9741:  9653:  9565: 9477: 23:     const easedT = t * t * (3 - 2 * t);
 9742:  9654:  9566: 9478: 24:     player.absY = startY + (endY - startY) * easedT;
 9743:  9655:  9567: 9479: 25:     if (t < 1) {
 9744:  9656:  9568: 9480: 26:       requestAnimationFrame(animate);
 9745:  9657:  9569: 9481: 27:     } else {
 9746:  9658:  9570: 9482: 28:       player.absY = endY;
 9747:  9659:  9571: 9483: 29:       if (onComplete) onComplete();
 9748:  9660:  9572: 9484: 30:     }
 9749:  9661:  9573: 9485: 31:   }
 9750:  9662:  9574: 9486: 32:   animate();
 9751:  9663:  9575: 9487: 33: }
 9752:  9664:  9576: 9488: `````
 9753:  9665:  9577: 9489: 
 9754:  9666:  9578: 9490: ## File: js/utils.js
 9755:  9667:  9579: 9491: `````javascript
 9756:  9668:  9580: 9492:   1: /* utils.js */
 9757:  9669:  9581: 9493:   2: // Global Configuration & Shared Globals moved to settings.js
 9758:  9670:  9582: 9494:   3: window.GameState = {
 9759:  9671:  9583: 9495:   4:     HOUSE: 'house',
 9760:  9672:  9584: 9496:   5:     DOWNHILL: 'downhill',
 9761:  9673:  9585: 9497:   6:     UPHILL: 'uphill'
 9762:  9674:  9586: 9498:   7: };
 9763:  9675:  9587: 9499:   8: // Instead of getting the canvas element (which no longer exists),
 9764:  9676:  9588: 9500:   9: // we define a dummy canvas object for width/height references.
 9765:  9677:  9589: 9501:  10: var canvas = { width: 800, height: 450 };
 9766:  9678:  9590: 9502:  11: // We'll expose canvas globally for other scripts to access
 9767:  9679:  9591: 9503:  12: window.canvas = canvas;
 9768:  9680:  9592: 9504:  13: // We'll set ctx in game.js once the Phaser Canvas Texture is created.
 9769:  9681:  9593: 9505:  14: var ctx = null;
 9770:  9682:  9594: 9506:  15: /* NEW: Global keysDown object and event listeners */
 9771:  9683:  9595: 9507:  16: var keysDown = {};
 9772:  9684:  9596: 9508:  17: var spacePressed = false;
 9773:  9685:  9597: 9509:  18: window.addEventListener("keydown", function (e) {
 9774:  9686:  9598: 9510:  19:     // Prevent default behavior for arrow keys, space, and tab to ensure correct capture
 9775:  9687:  9599: 9511:  20:     if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", " ", "Tab"].includes(e.key)) {
 9776:  9688:  9600: 9512:  21:         e.preventDefault();
 9777:  9689:  9601: 9513:  22:     }
 9778:  9690:  9602: 9514:  23:     keysDown[e.key] = true;
 9779:  9691:  9603: 9515:  24:     // Track space in HOUSE state
 9780:  9692:  9604: 9516:  25:     if (e.key === " " && currentState === GameState.HOUSE) {
 9781:  9693:  9605: 9517:  26:         spacePressed = true;
 9782:  9694:  9606: 9518:  27:     }
 9783:  9695:  9607: 9519:  28:     // Take a photo in UPHILL state when space is pressed
 9784:  9696:  9608: 9520:  29:     if (e.key === " " && currentState === GameState.UPHILL) {
 9785:  9697:  9609: 9521:  30:         takePhoto();
 9786:  9698:  9610: 9522:  31:     }
 9787:  9699:  9611: 9523:  32:     // Press "E" to manually spawn an animal in UPHILL mode (DEBUG)
 9788:  9700:  9612: 9524:  33:     if (e.key.toLowerCase() === 'e' && currentState === GameState.UPHILL) {
 9789:  9701:  9613: 9525:  34:         spawnAnimal();
 9790:  9702:  9614: 9526:  35:     }
 9791:  9703:  9615: 9527:  36:     // Handle Tab key to toggle between UPHILL and DOWNHILL
 9792:  9704:  9616: 9528:  37:     if (e.key === "Tab" && currentState !== GameState.HOUSE) {
 9793:  9705:  9617: 9529:  38:         if (currentState === GameState.UPHILL && player.sledDamaged === 1) {
 9794:  9706:  9618: 9530:  39:             console.log("Cannot switch to DOWNHILL mode - Sled is damaged and needs repair");
 9795:  9707:  9619: 9531:  40:             showSledDamageNotice();
 9796:  9708:  9620: 9532:  41:             return;
 9797:  9709:  9621: 9533:  42:         }
 9798:  9710:  9622: 9534:  43:         const newState = currentState === GameState.UPHILL ? GameState.DOWNHILL : GameState.UPHILL;
 9799:  9711:  9623: 9535:  44:         changeState(newState);
 9800:  9712:  9624: 9536:  45:     }
 9801:  9713:  9625: 9537:  46: });
 9802:  9714:  9626: 9538:  47: window.addEventListener("keyup", function (e) {
 9803:  9715:  9627: 9539:  48:     delete keysDown[e.key];
 9804:  9716:  9628: 9540:  49:     if (e.key === " " && currentState === GameState.HOUSE) {
 9805:  9717:  9629: 9541:  50:         spacePressed = false;
 9806:  9718:  9630: 9542:  51:         console.log("Space released, starting sled run.");
 9807:  9719:  9631: 9543:  52:         unlockAudioContext();
 9808:  9720:  9632: 9544:  53:         playStartGameSound();
 9809:  9721:  9633: 9545:  54:         changeState(GameState.DOWNHILL);
 9810:  9722:  9634: 9546:  55:     }
 9811:  9723:  9635: 9547:  56: });
 9812:  9724:  9636: 9548:  57: /* Utility functions */
 9813:  9725:  9637: 9549:  58: function formatUpgradeName(name) {
 9814:  9726:  9638: 9550:  59:     let formattedName = name.replace(/([A-Z])/g, ' $1').trim();
 9815:  9727:  9639: 9551:  60:     return formattedName.charAt(0).toUpperCase() + formattedName.slice(1);
 9816:  9728:  9640: 9552:  61: }
 9817:  9729:  9641: 9553:  62: function capitalizeFirstLetter(string) {
 9818:  9730:  9642: 9554:  63:     return string.charAt(0).toUpperCase() + string.slice(1);
 9819:  9731:  9643: 9555:  64: }
 9820:  9732:  9644: 9556:  65: function checkCollision(ax, ay, aw, ah, bx, by, bw, bh) {
 9821:  9733:  9645: 9557:  66:     return ax < bx + bw && ax + aw > bx && ay < by + bh && ay + ah > by;
 9822:  9734:  9646: 9558:  67: }
 9823:  9735:  9647: 9559:  68: function clamp(val, min, max) {
 9824:  9736:  9648: 9560:  69:     return Math.max(min, Math.min(max, val));
 9825:  9737:  9649: 9561:  70: }
 9826:  9738:  9650: 9562:  71: function getCameraOffset(playerAbsY, canvasHeight, mountainHeight) {
 9827:  9739:  9651: 9563:  72:     let offset = playerAbsY - canvasHeight / 2;
 9828:  9740:  9652: 9564:  73:     return clamp(offset, 0, mountainHeight - canvasHeight);
 9829:  9741:  9653: 9565:  74: }
 9830:  9742:  9654: 9566:  75: // Make utility functions available globally for both normal scripts and modules
 9831:  9743:  9655: 9567:  76: window.formatUpgradeName = formatUpgradeName;
 9832:  9744:  9656: 9568:  77: window.capitalizeFirstLetter = capitalizeFirstLetter;
 9833:  9745:  9657: 9569:  78: window.checkCollision = checkCollision;
 9834:  9746:  9658: 9570:  79: window.clamp = clamp;
 9835:  9747:  9659: 9571:  80: window.getCameraOffset = getCameraOffset;
 9836:  9748:  9660: 9572:  81: /* Ensure Web Audio API is unlocked */
 9837:  9749:  9661: 9573:  82: let audioCtx;
 9838:  9750:  9662: 9574:  83: function unlockAudioContext() {
 9839:  9751:  9663: 9575:  84:     if (!audioCtx) {
 9840:  9752:  9664: 9576:  85:         audioCtx = new (window.AudioContext || window.webkitAudioContext)();
 9841:  9753:  9665: 9577:  86:     }
 9842:  9754:  9666: 9578:  87: }
 9843:  9755:  9667: 9579:  88: /* Audio Utility Functions */
 9844:  9756:  9668: 9580:  89: function playTone(frequency = 440, type = "sine", duration = 0.5, volume = 0.3) {
 9845:  9757:  9669: 9581:  90:     unlockAudioContext(); // Ensure audio context is unlocked
 9846:  9758:  9670: 9582:  91:     const oscillator = audioCtx.createOscillator();
 9847:  9759:  9671: 9583:  92:     const gainNode = audioCtx.createGain();
 9848:  9760:  9672: 9584:  93:     oscillator.type = type;
 9849:  9761:  9673: 9585:  94:     oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);
 9850:  9762:  9674: 9586:  95:     gainNode.gain.setValueAtTime(volume, audioCtx.currentTime);
 9851:  9763:  9675: 9587:  96:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);
 9852:  9764:  9676: 9588:  97:     oscillator.connect(gainNode);
 9853:  9765:  9677: 9589:  98:     gainNode.connect(audioCtx.destination);
 9854:  9766:  9678: 9590:  99:     oscillator.start();
 9855:  9767:  9679: 9591: 100:     oscillator.stop(audioCtx.currentTime + duration);
 9856:  9768:  9680: 9592: 101: }
 9857:  9769:  9681: 9593: 102: /* Sound Effects */
 9858:  9770:  9682: 9594: 103: function playStartGameSound() {
 9859:  9771:  9683: 9595: 104:     playTone(440, "triangle", 0.5);
 9860:  9772:  9684: 9596: 105: }
 9861:  9773:  9685: 9597: 106: function playCrashSound() {
 9862:  9774:  9686: 9598: 107:     unlockAudioContext();
 9863:  9775:  9687: 9599: 108:     const oscillator = audioCtx.createOscillator();
 9864:  9776:  9688: 9600: 109:     const gainNode = audioCtx.createGain();
 9865:  9777:  9689: 9601: 110:     oscillator.type = "sawtooth";
 9866:  9778:  9690: 9602: 111:     oscillator.frequency.setValueAtTime(800, audioCtx.currentTime);
 9867:  9779:  9691: 9603: 112:     oscillator.frequency.exponentialRampToValueAtTime(100, audioCtx.currentTime + 0.5);
 9868:  9780:  9692: 9604: 113:     gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
 9869:  9781:  9693: 9605: 114:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.5);
 9870:  9782:  9694: 9606: 115:     oscillator.connect(gainNode);
 9871:  9783:  9695: 9607: 116:     gainNode.connect(audioCtx.destination);
 9872:  9784:  9696: 9608: 117:     oscillator.start();
 9873:  9785:  9697: 9609: 118:     oscillator.stop(audioCtx.currentTime + 0.5);
 9874:  9786:  9698: 9610: 119: }
 9875:  9787:  9699: 9611: 120: function playRockHitSound() {
 9876:  9788:  9700: 9612: 121:     playTone(200, "square", 0.2);
 9877:  9789:  9701: 9613: 122: }
 9878:  9790:  9702: 9614: 123: function playMoneyGainSound() {
 9879:  9791:  9703: 9615: 124:     playTone(1000, "sine", 0.15, 0.2);
 9880:  9792:  9704: 9616: 125: }
 9881:  9793:  9705: 9617: 126: function mapRange(value, inMin, inMax, outMin, outMax) {
 9882:  9794:  9706: 9618: 127:     return outMin + ((value - inMin) * (outMax - outMin)) / (inMax - inMin);
 9883:  9795:  9707: 9619: 128: }
 9884:  9796:  9708: 9620: 129: // Helper functions for color conversion and interpolation
 9885:  9797:  9709: 9621: 130: function hexToRgb(hex) {
 9886:  9798:  9710: 9622: 131:     hex = hex.replace(/^#/, '');
 9887:  9799:  9711: 9623: 132:     if (hex.length === 3) {
 9888:  9800:  9712: 9624: 133:       hex = hex.split('').map(c => c + c).join('');
 9889:  9801:  9713: 9625: 134:     }
 9890:  9802:  9714: 9626: 135:     let bigint = parseInt(hex, 16);
 9891:  9803:  9715: 9627: 136:     let r = (bigint >> 16) & 255;
 9892:  9804:  9716: 9628: 137:     let g = (bigint >> 8) & 255;
 9893:  9805:  9717: 9629: 138:     let b = (bigint & 255) & 255;
 9894:  9806:  9718: 9630: 139:     return { r, g, b };
 9895:  9807:  9719: 9631: 140: }
 9896:  9808:  9720: 9632: 141: function rgbToHex(r, g, b) {
 9897:  9809:  9721: 9633: 142:     return "#" + ((1 << 24) + (r << 16) + (g << 8) + b)
 9898:  9810:  9722: 9634: 143:       .toString(16)
 9899:  9811:  9723: 9635: 144:       .slice(1)
 9900:  9812:  9724: 9636: 145:       .toUpperCase();
 9901:  9813:  9725: 9637: 146: }
 9902:  9814:  9726: 9638: 147: function lerpColor(color1, color2, t) {
 9903:  9815:  9727: 9639: 148:     let c1 = hexToRgb(color1);
 9904:  9816:  9728: 9640: 149:     let c2 = hexToRgb(color2);
 9905:  9817:  9729: 9641: 150:     let r = Math.round(c1.r + (c2.r - c1.r) * t);
 9906:  9818:  9730: 9642: 151:     let g = Math.round(c1.g + (c2.g - c1.g) * t);
 9907:  9819:  9731: 9643: 152:     let b = Math.round(c1.b + (c2.b - c1.b) * t);
 9908:  9820:  9732: 9644: 153:     return rgbToHex(r, g, b);
 9909:  9821:  9733: 9645: 154: }
 9910:  9822:  9734: 9646: 155: // Notification helpers
 9911:  9823:  9735: 9647: 156: function showSledDamageNotice() {
 9912:  9824:  9736: 9648: 157:   showErrorNotification('Sled Damaged! Please Repair');
 9913:  9825:  9737: 9649: 158: }
 9914:  9826:  9738: 9650: 159: function showSledRepairedNotice() {
 9915:  9827:  9739: 9651: 160:   showSuccessNotification('Sled Repaired!');
 9916:  9828:  9740: 9652: 161: }
 9917:  9829:  9741: 9653: 162: // Add additional utility functions to window object
 9918:  9830:  9742: 9654: 163: window.mapRange = mapRange;
 9919:  9831:  9743: 9655: 164: window.hexToRgb = hexToRgb;
 9920:  9832:  9744: 9656: 165: window.rgbToHex = rgbToHex;
 9921:  9833:  9745: 9657: 166: window.lerpColor = lerpColor;
 9922:  9834:  9746: 9658: 167: window.showSledDamageNotice = showSledDamageNotice;
 9923:  9835:  9747: 9659: 168: window.showSledRepairedNotice = showSledRepairedNotice;
 9924:  9836:  9748: 9660: 169: window.playTone = playTone;
 9925:  9837:  9749: 9661: 170: window.playStartGameSound = playStartGameSound;
 9926:  9838:  9750: 9662: 171: window.playCrashSound = playCrashSound;
 9927:  9839:  9751: 9663: 172: window.playRockHitSound = playRockHitSound;
 9928:  9840:  9752: 9664: 173: window.playMoneyGainSound = playMoneyGainSound;
 9929:  9841:  9753: 9665: 174: window.unlockAudioContext = unlockAudioContext;
 9930:  9842:  9754: 9666: 175: // Note: export statement has been removed and all functions are now attached to window
 9931:  9843:  9755: 9667: `````
 9932:  9844:  9756: 9668: 
 9933:  9845:  9757: 9669: ## File: index.html
 9934:  9846:  9758: 9670: `````html
 9935:  9847:  9759: 9671:  1: <!DOCTYPE html>
 9936:  9848:  9760: 9672:  2: <html lang="en">
 9937:  9849:  9761: 9673:  3: <head>
 9938:  9850:  9762: 9674:  4:   <meta charset="UTF-8" />
 9939:  9851:  9763: 9675:  5:   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 9940:  9852:  9764: 9676:  6:   <title>SledHEAD</title>
 9941:  9853:  9765: 9677:  7:   <link rel="stylesheet" href="styles.css">
 9942:  9854:  9766: 9678:  8:   <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
 9943:  9855:  9767: 9679:  9: </head>
 9944:  9856:  9768: 9680: 10: <body>
 9945:  9857:  9769: 9681: 11:   <!-- UI Elements -->
 9946:  9858:  9770: 9682: 12:   <div id="cursor-position"
 9947:  9859:  9771: 9683: 13:        style="position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white;
 9948:  9860:  9772: 9684: 14:               padding: 5px; border-radius: 3px; font-family: monospace; z-index: 1000;">
 9949:  9861:  9773: 9685: 15:     Abs: (0, 0) | View: (0, 0)
 9950:  9862:  9774: 9686: 16:   </div>
 9951:  9863:  9775: 9687: 17:   <div id="victoryBanner"
 9952:  9864:  9776: 9688: 18:        style="display: none; position: fixed; top: 50%; left: 50%;
 9953:  9865:  9777: 9689: 19:               transform: translate(-50%, -50%); background: gold; padding: 20px;
 9954:  9866:  9778: 9690: 20:               border-radius: 10px; text-align: center; font-size: 24px; font-weight: bold; z-index: 1000;">
 9955:  9867:  9779: 9691: 21:     🎉 VICTORY! 🎉<br>
 9956:  9868:  9780: 9692: 22:     You've paid off your loan!
 9957:  9869:  9781: 9693: 23:   </div>
 9958:  9870:  9782: 9694: 24:   <h1>SledHEAD</h1>
 9959:  9871:  9783: 9695: 25:   <div id="moneyDisplay">
 9960:  9872:  9784: 9696: 26:     <p id="moneyText">Money: $200</p>
 9961:  9873:  9785: 9697: 27:   </div>
 9962:  9874:  9786: 9698: 28:   <div id="game-screen"></div>
 9963:  9875:  9787: 9699: 29:   <!-- Upgrades -->
 9964:  9876:  9788: 9700: 30:   <div id="upgrade-menu">
 9965:  9877:  9789: 9701: 31:     <div class="game-controls">
 9966:  9878:  9790: 9702: 32:       <button id="startGame">Start Sled Run</button>
 9967:  9879:  9791: 9703: 33:       <button id="payLoan">Pay Loan ($100,000)</button>
 9968:  9880:  9792: 9704: 34:     </div>
 9969:  9881:  9793: 9705: 35:     <div id="dynamic-upgrade-columns" class="upgrade-menu-columns">
 9970:  9882:  9794: 9706: 36:       <!-- Populated dynamically -->
 9971:  9883:  9795: 9707: 37:     </div>
 9972:  9884:  9796: 9708: 38:     <p id="bestTimeText">Best Time: N/A</p>
 9973:  9885:  9797: 9709: 39:   </div>
 9974:  9886:  9798: 9710: 40:   <!-- JS Includes -->
 9975:  9887:  9799: 9711: 41:   <script src="js/settings.js"></script>
 9976:  9888:  9800: 9712: 42:   <script src="js/notify.js"></script>
 9977:  9889:  9801: 9713: 43:   <script src="js/utils.js"></script>
 9978:  9890:  9802: 9714: 44:   <script src="js/input.js"></script>
 9979:  9891:  9803: 9715: 45:   <script src="js/world.js"></script>
 9980:  9892:  9804: 9716: 46:   <script src="js/player.js"></script>
 9981:  9893:  9805: 9717: 47:   <script src="js/entities.js"></script>
 9982:  9894:  9806: 9718: 48:   <script src="js/wildlife.js"></script>
 9983:  9895:  9807: 9719: 49:   <script src="js/mobs/bear.js"></script>
 9984:  9896:  9808: 9720: 50:   <script src="js/mobs/mountainlion.js"></script>
 9985:  9897:  9809: 9721: 51:   <script src="js/mobs/bird.js"></script>
 9986:  9898:  9810: 9722: 52:   <script src="js/trees.js"></script>
 9987:  9899:  9811: 9723: 53:   <script src="js/camera.js"></script>
 9988:  9900:  9812: 9724: 54:   <script src="js/jumpsled.js"></script>
 9989:  9901:  9813: 9725: 55:   <script src="js/mechanics.js"></script>
 9990:  9902:  9814: 9726: 56:   <script src="js/render.js"></script>
 9991:  9903:  9815: 9727: 57:   <script src="js/stamina.js"></script>
 9992:  9904:  9816: 9728: 58:   <script src="js/loan.js"></script>
 9993:  9905:  9817: 9729: 59:   <script src="js/uphill.js"></script>
 9994:  9906:  9818: 9730: 60:   <!-- Modules -->
 9995:  9907:  9819: 9731: 61:   <script type="module" src="js/registry.js"></script>
 9996:  9908:  9820: 9732: 62:   <script type="module" src="js/tricks.js"></script>
 9997:  9909:  9821: 9733: 63:   <script type="module" src="js/downhill.js"></script>
 9998:  9910:  9822: 9734: 64:   <script type="module" src="js/upgradeData.js"></script>
 9999:  9911:  9823: 9735: 65:   <script type="module" src="js/upgradeLogic.js"></script>
10000:  9912:  9824: 9736: 66:   <script type="module" src="js/upgrades.js"></script>
10001:  9913:  9825: 9737: 67:   <script type="module" src="js/game.js"></script>
10002:  9914:  9826: 9738: 68: </body>
10003:  9915:  9827: 9739: 69: </html>
10004:  9916:  9828: 9740: `````
10005:  9917:  9829: 9741: 
10006:  9918:  9830: 9742: ## File: js/game.js
10007:  9919:  9831: 9743: `````javascript
10008:  9920:  9832: 9744:   1: /* game.js - Core Loop & State Management (Phaserized) */
10009:  9921:  9833: 9745:   2: // Import necessary functions and variables
10010:  9922:  9834: 9746:   3: import { playerUpgrades, mountainUpgrades, initUpgradeButton, purchaseUpgrade, updateMoneyDisplay } from './upgradeLogic.js';
10011:  9923:  9835: 9747:   4: // Keep your globals
10012:  9924:  9836: 9748:   5: var downhillStartTime = null;
10013:  9925:  9837: 9749:   6: var lastTime = 0;
10014:  9926:  9838: 9750:   7: var currentState = window.GameState.HOUSE;  // Reference from global window.GameState
10015:  9927:  9839: 9751:   8: var jumpOsc = null;
10016:  9928:  9840: 9752:   9: var jumpGain = null;
10017:  9929:  9841: 9753:  10: var loanAmount = 100000;
10018:  9930:  9842: 9754:  11: window.floatingTexts = [];  // Make floatingTexts accessible globally
10019:  9931:  9843: 9755:  12: var isFirstHouseEntry = true;
10020:  9932:  9844: 9756:  13: var houseReEntry = 0;
10021:  9933:  9845: 9757:  14: var playerStartAbsY = 0;
10022:  9934:  9846: 9758:  15: // We'll access the global canvas object
10023:  9935:  9847: 9759:  16: // var ctx is defined later after context creation
10024:  9936:  9848: 9760:  17: // Create a Phaser Scene to run your game logic
10025:  9937:  9849: 9761:  18: class MainScene extends Phaser.Scene {
10026:  9938:  9850: 9762:  19:   constructor() {
10027:  9939:  9851: 9763:  20:     super("MainScene");
10028:  9940:  9852: 9764:  21:   }
10029:  9941:  9853: 9765:  22:   preload() {
10030:  9942:  9854: 9766:  23:     // If you had assets, you'd load them here
10031:  9943:  9855: 9767:  24:   }
10032:  9944:  9856: 9768:  25:   create() {
10033:  9945:  9857: 9769:  26:     // Create a Canvas Texture of the same size as your old canvas
10034:  9946:  9858: 9770:  27:     this.rt = this.textures.createCanvas("myCanvas", window.canvas.width, window.canvas.height);
10035:  9947:  9859: 9771:  28:     // Get the canvas context with willReadFrequently option
10036:  9948:  9860: 9772:  29:     ctx = this.rt.context;
10037:  9949:  9861: 9773:  30:     // Set willReadFrequently for better performance with getImageData calls
10038:  9950:  9862: 9774:  31:     ctx.canvas.getContext = () => ctx.canvas.getContext('2d', { willReadFrequently: true });
10039:  9951:  9863: 9775:  32:     // Add it to the scene as an Image so Phaser will display it
10040:  9952:  9864: 9776:  33:     this.image = this.add.image(0, 0, "myCanvas").setOrigin(0, 0);
10041:  9953:  9865: 9777:  34:     // Initialize player money now that TWEAK is available
10042:  9954:  9866: 9778:  35:     if (typeof window.initializePlayerMoney === 'function') {
10043:  9955:  9867: 9779:  36:       window.initializePlayerMoney();
10044:  9956:  9868: 9780:  37:     }
10045:  9957:  9869: 9781:  38:     // Hook up your DOM event listeners for buttons
10046:  9958:  9870: 9782:  39:     document.getElementById("startGame").addEventListener("click", () => {
10047:  9959:  9871: 9783:  40:       console.log("Start run clicked.");
10048:  9960:  9872: 9784:  41:       unlockAudioContext();
10049:  9961:  9873: 9785:  42:       playStartGameSound();
10050:  9962:  9874: 9786:  43:       changeState(window.GameState.DOWNHILL);
10051:  9963:  9875: 9787:  44:     });
10052:  9964:  9876: 9788:  45:     document.getElementById("payLoan").addEventListener("click", () => {
10053:  9965:  9877: 9789:  46:       console.log("Paying loan...");
10054:  9966:  9878: 9790:  47:       payLoan();
10055:  9967:  9879: 9791:  48:     });
10056:  9968:  9880: 9792:  49:     // Initialize upgrade buttons
10057:  9969:  9881: 9793:  50:     Object.keys(playerUpgrades).forEach(upg => {
10058:  9970:  9882: 9794:  51:       initUpgradeButton(upg, playerUpgrades[upg]);
10059:  9971:  9883: 9795:  52:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
10060:  9972:  9884: 9796:  53:       document.getElementById(btnId).addEventListener("click", () => {
10061:  9973:  9885: 9797:  54:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
10062:  9974:  9886: 9798:  55:         purchaseUpgrade(playerUpgrades, upg);
10063:  9975:  9887: 9799:  56:       });
10064:  9976:  9888: 9800:  57:     });
10065:  9977:  9889: 9801:  58:     Object.keys(mountainUpgrades).forEach(upg => {
10066:  9978:  9890: 9802:  59:       initUpgradeButton(upg, mountainUpgrades[upg]);
10067:  9979:  9891: 9803:  60:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
10068:  9980:  9892: 9804:  61:       document.getElementById(btnId).addEventListener("click", () => {
10069:  9981:  9893: 9805:  62:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
10070:  9982:  9894: 9806:  63:         purchaseUpgrade(mountainUpgrades, upg);
10071:  9983:  9895: 9807:  64:       });
10072:  9984:  9896: 9808:  65:     });
10073:  9985:  9897: 9809:  66:     // Set up the world
10074:  9986:  9898: 9810:  67:     generateTerrain();
10075:  9987:  9899: 9811:  68:     updateLoanButton();
10076:  9988:  9900: 9812:  69:     changeState(window.GameState.HOUSE);
10077:  9989:  9901: 9813:  70:   }
10078:  9990:  9902: 9814:  71:   update(time, delta) {
10079:  9991:  9903: 9815:  72:     console.log("MainScene update START");
10080:  9992:  9904: 9816:  73:     // Update game mechanics (delta in ms)
10081:  9993:  9905: 9817:  74:     updateMechanics(delta);
10082:  9994:  9906: 9818:  75:     // Update floating texts
10083:  9995:  9907: 9819:  76:     window.floatingTexts = window.floatingTexts.filter(text => text.update(delta));
10084:  9996:  9908: 9820:  77:     // Call the render function (draws onto ctx)
10085:  9997:  9909: 9821:  78:     render();
10086:  9998:  9910: 9822:  79:     // Refresh the Canvas Texture so Phaser displays the new drawing
10087:  9999:  9911: 9823:  80:     this.rt.refresh();
10088: 10000:  9912: 9824:  81:     console.log("MainScene update END");
10089: 10001:  9913: 9825:  82:   }
10090: 10002:  9914: 9826:  83: }
10091: 10003:  9915: 9827:  84: // Original changeState function (unchanged in logic)
10092: 10004:  9916: 9828:  85: function changeState(newState) {
10093: 10005:  9917: 9829:  86:   // Guard clause to prevent redundant state changes
10094: 10006:  9918: 9830:  87:   if (newState === window.currentState) {
10095: 10007:  9919: 9831:  88:     console.log(`State change ignored: already in state ${newState}`);
10096: 10008:  9920: 9832:  89:     return;
10097: 10009:  9921: 9833:  90:   }
10098: 10010:  9922: 9834:  91:   const prevState = currentState;
10099: 10011:  9923: 9835:  92:   if (player.isJumping && newState !== window.GameState.HOUSE) {
10100: 10012:  9924: 9836:  93:     if (player.currentTrick) {
10101: 10013:  9925: 9837:  94:       resetTrickState();
10102: 10014:  9926: 9838:  95:       playCrashSound();
10103: 10015:  9927: 9839:  96:       console.log("State change interrupted trick - counted as crash");
10104: 10016:  9928: 9840:  97:     }
10105: 10017:  9929: 9841:  98:     lerpPlayerToGround(250, () => {
10106: 10018:  9930: 9842:  99:       player.isJumping = false;
10107: 10019:  9931: 9843: 100:       onPlayerLand();
10108: 10020:  9932: 9844: 101:       completeStateChange(newState, prevState);
10109: 10021:  9933: 9845: 102:     });
10110: 10022:  9934: 9846: 103:     return;
10111: 10023:  9935: 9847: 104:   }
10112: 10024:  9936: 9848: 105:   completeStateChange(newState, prevState);
10113: 10025:  9937: 9849: 106: }
10114: 10026:  9938: 9850: 107: function completeStateChange(newState, prevState) {
10115: 10027:  9939: 9851: 108:   currentState = newState;
10116: 10028:  9940: 9852: 109:   if (currentState === window.GameState.HOUSE) {
10117: 10029:  9941: 9853: 110:     document.getElementById("upgrade-menu").style.display = "block";
10118: 10030:  9942: 9854: 111:     document.getElementById("game-screen").style.display = "none";
10119: 10031:  9943: 9855: 112:     const bestTimeText = document.getElementById("bestTimeText");
10120: 10032:  9944: 9856: 113:     bestTimeText.textContent = player.bestTime === Infinity ? "Best Time: N/A"
10121: 10033:  9945: 9857: 114:                                                            : `Best Time: ${player.bestTime.toFixed(2)}s`;
10122: 10034:  9946: 9858: 115:     if (player.sledDamaged > 0) {
10123: 10035:  9947: 9859: 116:       player.sledDamaged = 0;
10124: 10036:  9948: 9860: 117:       console.log("Sled has been repaired at the house!");
10125: 10037:  9949: 9861: 118:       showSledRepairedNotice();
10126: 10038:  9950: 9862: 119:     }
10127: 10039:  9951: 9863: 120:     if (!isFirstHouseEntry && (prevState === window.GameState.DOWNHILL || prevState === window.GameState.UPHILL)) {
10128: 10040:  9952: 9864: 121:       if (typeof despawnAllAnimals === 'function') {
10129: 10041:  9953: 9865: 122:         despawnAllAnimals();
10130: 10042:  9954: 9866: 123:       }
10131: 10043:  9955: 9867: 124:       if (loanAmount > 0) {
10132: 10044:  9956: 9868: 125:         const deduction = Math.ceil(loanAmount * TWEAK.houseEntryLoanDeduction);
10133: 10045:  9957: 9869: 126:         loanAmount += deduction;
10134: 10046:  9958: 9870: 127:         updateLoanButton();
10135: 10047:  9959: 9871: 128:         houseReEntry++;
10136: 10048:  9960: 9872: 129:         console.log(`House entry fee: -$${deduction} (${TWEAK.houseEntryLoanDeduction * 100}% of $${loanAmount} loan)`);
10137: 10049:  9961: 9873: 130:         console.log("House re-entry count:", houseReEntry);
10138: 10050:  9962: 9874: 131:       }
10139: 10051:  9963: 9875: 132:     }
10140: 10052:  9964: 9876: 133:     if (isFirstHouseEntry) {
10141: 10053:  9965: 9877: 134:       isFirstHouseEntry = false;
10142: 10054:  9966: 9878: 135:     }
10143: 10055:  9967: 9879: 136:     updateMoneyDisplay();
10144: 10056:  9968: 9880: 137:   }
10145: 10057:  9969: 9881: 138:   else if (currentState === window.GameState.DOWNHILL) {
10146: 10058:  9970: 9882: 139:     document.getElementById("upgrade-menu").style.display = "none";
10147: 10059:  9971: 9883: 140:     document.getElementById("game-screen").style.display = "block";
10148: 10060:  9972: 9884: 141:     if (prevState === window.GameState.HOUSE) {
10149: 10061:  9973: 9885: 142:       earlyFinish = false;
10150: 10062:  9974: 9886: 143:       player.collisions = 0;
10151: 10063:  9975: 9887: 144:       player.x = window.canvas.width / 2;
10152: 10064:  9976: 9888: 145:       player.absY = mountainHeight - (player.height * 3);
10153: 10065:  9977: 9889: 146:       player.velocityY = 0;
10154: 10066:  9978: 9890: 147:       player.xVel = 0;
10155: 10067:  9979: 9891: 148:       downhillStartTime = performance.now();
10156: 10068:  9980: 9892: 149:       playerStartAbsY = player.absY;
10157: 10069:  9981: 9893: 150:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
10158: 10070:  9982: 9894: 151:     }
10159: 10071:  9983: 9895: 152:     else if (prevState === window.GameState.UPHILL) {
10160: 10072:  9984: 9896: 153:       player.velocityY = 0;
10161: 10073:  9985: 9897: 154:       player.xVel = 0;
10162: 10074:  9986: 9898: 155:       downhillStartTime = performance.now();
10163: 10075:  9987: 9899: 156:       playerStartAbsY = player.absY;
10164: 10076:  9988: 9900: 157:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
10165: 10077:  9989: 9901: 158:     }
10166: 10078:  9990: 9902: 159:   }
10167: 10079:  9991: 9903: 160:   else if (currentState === window.GameState.UPHILL) {
10168: 10080:  9992: 9904: 161:     document.getElementById("upgrade-menu").style.display = "none";
10169: 10081:  9993: 9905: 162:     document.getElementById("game-screen").style.display = "block";
10170: 10082:  9994: 9906: 163:     if (prevState === window.GameState.DOWNHILL) {
10171: 10083:  9995: 9907: 164:       awardMoney();
10172: 10084:  9996: 9908: 165:     }
10173: 10085:  9997: 9909: 166:     player.xVel = 0;
10174: 10086:  9998: 9910: 167:   }
10175: 10087:  9999: 9911: 168:   console.log(`Game state changed: ${prevState} -> ${currentState}`);
10176: 10088: 10000: 9912: 169: }
10177: 10089: 10001: 9913: 170: // Create and launch the Phaser game with scale options for responsiveness
10178: 10090: 10002: 9914: 171: var config = {
10179: 10091: 10003: 9915: 172:   type: Phaser.AUTO,
10180: 10092: 10004: 9916: 173:   parent: "game-screen",
10181: 10093: 10005: 9917: 174:   width: window.canvas.width,  // Reference from global window.canvas
10182: 10094: 10006: 9918: 175:   height: window.canvas.height, // Reference from global window.canvas
10183: 10095: 10007: 9919: 176:   scene: MainScene,
10184: 10096: 10008: 9920: 177:   backgroundColor: "#000000",
10185: 10097: 10009: 9921: 178:   scale: {
10186: 10098: 10010: 9922: 179:     mode: Phaser.Scale.FIT,
10187: 10099: 10011: 9923: 180:     autoCenter: Phaser.Scale.CENTER_BOTH
10188: 10100: 10012: 9924: 181:   }
10189: 10101: 10013: 9925: 182: };
10190: 10102: 10014: 9926: 183: var phaserGame = new Phaser.Game(config);
10191: 10103: 10015: 9927: 184: // Make functions available globally
10192: 10104: 10016: 9928: 185: window.changeState = changeState;
10193: 10105: 10017: 9929: 186: window.currentState = currentState;
10194: 10106: 10018: 9930: `````
10195: 10107: 10019: ``````
10196: 10108: 10020: 
10197: 10109: 10021: ## File: docs/CONTRIBUTING.md
10198: 10110: 10022: ``````markdown
10199: 10111: 10023:   1: How to Contribute to SledHEAD
10200: 10112: 10024:   2: =============================
10201: 10113: 10025:   3: 
10202: 10114: 10026:   4: Thank you for considering contributing to SledHEAD! Community involvement is crucial for making the game the best it can be. Whether you're fixing bugs, adding features, or improving documentation, your efforts are appreciated.
10203: 10115: 10027:   5: 
10204: 10116: 10028:   6: * * * * *
10205: 10117: 10029:   7: 
10206: 10118: 10030:   8: Key Resources
10207: 10119: 10031:   9: -------------
10208: 10120: 10032:  10: 
10209: 10121: 10033:  11: -   SledHEAD README -- Learn about the game's core concepts and current features.
10210: 10122: 10034:  12: 
10211: 10123: 10035:  13: -   SledHEAD License -- Understand the licensing terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets).
10212: 10124: 10036:  14: 
10213: 10125: 10037:  15: -   Issues & Roadmap -- Check the GitHub Issues section for current tasks and future goals.
10214: 10126: 10038:  16: 
10215: 10127: 10039:  17: -   Discussions -- Engage with the community, ask questions, and brainstorm ideas.
10216: 10128: 10040:  18: 
10217: 10129: 10041:  19: * * * * *
10218: 10130: 10042:  20: 
10219: 10131: 10043:  21: Getting Started
10220: 10132: 10044:  22: ---------------
10221: 10133: 10045:  23: 
10222: 10134: 10046:  24: 1.  Fork the Repository\
10223: 10135: 10047:  25:     Create your own fork of the repository and clone it locally.
10224: 10136: 10048:  26: 
10225: 10137: 10049:  27: 1.  Install Dependencies\
10226: 10138: 10050:  28:     SledHEAD is a web-based game built with JavaScript and Phaser.js. You'll just need a local HTTP server to test changes (like Python's http.server or Node's http-server).
10227: 10139: 10051:  29: 
10228: 10140: 10052:  30: 1.  Create a Branch\
10229: 10141: 10053:  31:     Work in a feature-specific branch:
10230: 10142: 10054:  32: 
10231: 10143: 10055:  33: git  checkout  -b  feature/your-feature-name
10232: 10144: 10056:  34: 
10233: 10145: 10057:  35: * * * * *
10234: 10146: 10058:  36: 
10235: 10147: 10059:  37: Testing Your Contributions
10236: 10148: 10060:  38: --------------------------
10237: 10149: 10061:  39: 
10238: 10150: 10062:  40: -   Manually playtest any gameplay changes and check for bugs.
10239: 10151: 10063:  41: -   Ensure that UI elements render correctly and gameplay mechanics (like tricks, upgrades, and photography) behave as expected.
10240: 10152: 10064:  42: -   Keep console errors to a minimum. Use `console.log` for temporary debugging but clean up before submitting.
10241: 10153: 10065:  43: 
10242: 10154: 10066:  44: * * * * *
10243: 10155: 10067:  45: 
10244: 10156: 10068:  46: Submitting Changes
10245: 10157: 10069:  47: ------------------
10246: 10158: 10070:  48: 
10247: 10159: 10071:  49: 1.  **Code Style**
10248: 10160: 10072:  50: 
10249: 10161: 10073:  51:     -   Use **two spaces for indentation, not tabs**.
10250: 10162: 10074:  52:     -   Write clean, readable code with comments where necessary.
10251: 10163: 10075:  53:     -   Follow existing naming conventions (camelCase for variables, PascalCase for classes).
10252: 10164: 10076:  54:     -   Avoid deeply nested logic---break it into functions for clarity.
10253: 10165: 10077:  55: 2.  **Commit Messages**\
10254: 10166: 10078:  56:     Write clear commit messages. For example:
10255: 10167: 10079:  57: 
10256: 10168: 10080:  58:     bash
10257: 10169: 10081:  59: 
10258: 10170: 10082:  60:     CopyEdit
10259: 10171: 10083:  61: 
10260: 10172: 10084:  62:     `git commit -m "Fix: Correct collision detection on uphill phase
10261: 10173: 10085:  63: 
10262: 10174: 10086:  64:     The collision detection logic for obstacles during the uphill phase
10263: 10175: 10087:  65:     now accurately accounts for terrain height variations."`
10264: 10176: 10088:  66: 
10265: 10177: 10089:  67: 3.  **Pull Request (PR)**
10266: 10178: 10090:  68: 
10267: 10179: 10091:  69:     -   Open a PR against the `main` branch.
10268: 10180: 10092:  70:     -   Include a clear description of what you've done and why.
10269: 10181: 10093:  71:     -   If your change fixes a bug or closes an issue, reference it in the PR description (e.g., `Closes #42`).
10270: 10182: 10094:  72:     -   Include screenshots or screen recordings if the change is visual.
10271: 10183: 10095:  73:     -   Be prepared for feedback---collaboration is key!
10272: 10184: 10096:  74: 
10273: 10185: 10097:  75: * * * * *
10274: 10186: 10098:  76: 
10275: 10187: 10099:  77: Coding Conventions
10276: 10188: 10100:  78: ------------------
10277: 10189: 10101:  79: 
10278: 10190: 10102:  80: -   **Consistency is key!** When in doubt, follow the style of existing code.
10279: 10191: 10103:  81: -   Use **strict equality** (`===` and `!==`).
10280: 10192: 10104:  82: -   Prefer `const` and `let` over `var`.
10281: 10193: 10105:  83: -   Document functions with comments explaining inputs, outputs, and purpose.
10282: 10194: 10106:  84: -   Keep functions focused and concise---single responsibility.
10283: 10195: 10107:  85: -   Handle errors gracefully and avoid silent failures.
10284: 10196: 10108:  86: -   Clean up `console.log` or temporary debug code before submitting.
10285: 10197: 10109:  87: 
10286: 10198: 10110:  88: * * * * *
10287: 10199: 10111:  89: 
10288: 10200: 10112:  90: Licensing of Contributions
10289: 10201: 10113:  91: --------------------------
10290: 10202: 10114:  92: 
10291: 10203: 10115:  93: -   **All contributions become licensed under AGPL 3.0 (for code) and CC BY-NC-SA 4.0 (for assets)**, consistent with the project's dual-license model.
10292: 10204: 10116:  94: -   By submitting a PR, you agree that your contributions may be included in SledHEAD and will be publicly available under these licenses.
10293: 10205: 10117:  95: 
10294: 10206: 10118:  96: * * * * *
10295: 10207: 10119:  97: 
10296: 10208: 10120:  98: Contributor License Agreement (CLA)
10297: 10209: 10121:  99: --------------------------
10298: 10210: 10122: 100: 
10299: 10211: 10123: 101: By contributing to **SledHEAD**, you agree to the Contributor License Agreement (CLA), granting the project owner the rights to use, modify, and commercialize your contributions. You retain ownership, but your work must be licensed under the project's current terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets) and can be re-licensed for commercial purposes.
10300: 10212: 10124: 102: 
10301: 10213: 10125: 103: By submitting a pull request, you confirm that you have the right to contribute and agree to these terms. 
10302: 10214: 10126: 104: 
10303: 10215: 10127: 105: See https://github.com/truevox/SledHEAD/docs/CONTRIBUTOR_LICENSE_AGREEMENT.md for more details.
10304: 10216: 10128: 106: 
10305: 10217: 10129: 107: 
10306: 10218: 10130: 108: * * * * *
10307: 10219: 10131: 109: 
10308: 10220: 10132: 110: Reporting Bugs & Requesting Features
10309: 10221: 10133: 111: ------------------------------------
10310: 10222: 10134: 112: 
10311: 10223: 10135: 113: -   Open a **GitHub Issue** describing the problem or request.
10312: 10224: 10136: 114: -   Be clear and detailed---steps to reproduce bugs, expected behavior, and screenshots help!
10313: 10225: 10137: 115: -   Mark issues with appropriate labels (like `bug`, `enhancement`, or `question`).
10314: 10226: 10138: 116: 
10315: 10227: 10139: 117: * * * * *
10316: 10228: 10140: 118: 
10317: 10229: 10141: 119: Need Help?
10318: 10230: 10142: 120: ----------
10319: 10231: 10143: 121: 
10320: 10232: 10144: 122: -   Join discussions on the GitHub repo.
10321: 10233: 10145: 123: -   Open an issue for technical support or feature questions.
10322: 10234: 10146: 124: -   Feedback, ideas, and constructive criticism are welcome!
10323: 10235: 10147: 125: 
10324: 10236: 10148: 126: * * * * *
10325: 10237: 10149: 127: 
10326: 10238: 10150: 128: Thank you for helping SledHEAD grow!
10327: 10239: 10151: ``````
10328: 10240: 10152: 
10329: 10241: 10153: ## File: docs/CONTRIBUTOR_LICENSE_AGREEMENT.md
10330: 10242: 10154: ``````markdown
10331: 10243: 10155:  1: # SledHEAD Contributor License Agreement (CLA)
10332: 10244: 10156:  2: 
10333: 10245: 10157:  3: Thank you for your interest in contributing to SledHEAD.
10334: 10246: 10158:  4: 
10335: 10247: 10159:  5: By submitting a contribution, you agree to the following terms:
10336: 10248: 10160:  6: 
10337: 10249: 10161:  7: 1. **License Grant**  
10338: 10250: 10162:  8:    You hereby grant Marvin Bentley II ("Project Owner") an **irrevocable, perpetual, worldwide, royalty-free license** to use, reproduce, modify, adapt, publish, translate, sublicense, distribute, and create derivative works of your contribution, in any medium, for any purpose, including commercial purposes.
10339: 10251: 10163:  9: 
10340: 10252: 10164: 10: 2. **Ownership**  
10341: 10253: 10165: 11:    You retain ownership of your contribution. However, you agree that your contribution is licensed under the project's current open-source licenses (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets), and you grant the Project Owner the right to relicense your contribution for commercial, proprietary, or any other purposes as the Project Owner requres.
10342: 10254: 10166: 12: 
10343: 10255: 10167: 13: 3. **Warranties**  
10344: 10256: 10168: 14:    - You confirm that you are legally entitled to submit the contribution and that it does not violate any third-party rights.  
10345: 10257: 10169: 15:    - You confirm that the contribution is your original work, or you have obtained the necessary rights for its use.
10346: 10258: 10170: 16: 
10347: 10259: 10171: 17: 4. **Contribution Scope**  
10348: 10260: 10172: 18:    This agreement applies to any future contributions you make to SledHEAD unless you explicitly state otherwise.
10349: 10261: 10173: 19: 
10350: 10262: 10174: 20: 5. **No Obligation to Use**  
10351: 10263: 10175: 21:    The Project Owner is under no obligation to use, merge, or distribute your contributions.
10352: 10264: 10176: 22: 
10353: 10265: 10177: 23: ---
10354: 10266: 10178: 24: 
10355: 10267: 10179: 25: By submitting a contribution, you indicate that you have read, understood, and agree to the terms of this Contributor License Agreement.
10356: 10268: 10180: 26: 
10357: 10269: 10181: 27: ---
10358: 10270: 10182: 28: 
10359: 10271: 10183: 29: *Signed electronically via your submission of a Pull Request.*
10360: 10272: 10184: ``````
10361: 10273: 10185: 
10362: 10274: 10186: ## File: docs/LICENSE.md
10363: 10275: 10187: ``````markdown
10364: 10276: 10188:   1: # SledHEAD Dual License Agreement
10365: 10277: 10189:   2: Version 1.2 – March 2025
10366: 10278: 10190:   3: 
10367: 10279: 10191:   4: This License Agreement applies to SledHEAD (the "Game"), including its source code and assets, created by the original author Marvin Bentley II ("Licensor"). By copying, modifying, distributing, or otherwise using the Game or any of its components, you (the "Licensee") agree to the following terms:
10368: 10280: 10192:   5: 
10369: 10281: 10193:   6: ## 1. Definitions
10370: 10282: 10194:   7: 
10371: 10283: 10195:   8: * "Source Code": The software code of the Game, including all scripts, programs, and software files intended to produce the Game’s functionality.
10372: 10284: 10196:   9: * "Assets": All non-code content in the Game, including but not limited to artwork, images, textures, models, sprites, music, sound effects, voice, dialogue, level designs, animations, and any other audiovisual or creative works included with the Game.
10373: 10285: 10197:  10: * "Mod" or "Modification": Any derivative work that is based on or uses any portion of the Game’s Source Code or Assets, including add-ons, plugins, expansions, or fan-made content that extends or alters the Game.
10374: 10286: 10198:  11: * "Commercial Use": Use of the Game or its components that is intended for or directed toward commercial advantage or monetary compensation. (For clarity: selling the Game or Mods, charging money for access to the Game or Mods, or monetizing the Game’s Assets as standalone products are considered Commercial Use. However, monetization of gameplay videos/streams is addressed separately in Section 4.)
10375: 10287: 10199:  12: * "You" (or "Licensee"): Any individual or legal entity exercising the rights granted by this License (for example, a player, developer, or modder who uses the Game or its content).
10376: 10288: 10200:  13: * "Licensor": The original author and copyright holder of SledHEAD.
10377: 10289: 10201:  14: 
10378: 10290: 10202:  15: ## 2. Open Source License for Source Code
10379: 10291: 10203:  16: 
10380: 10292: 10204:  17: The Source Code of SledHEAD is licensed to you under the terms of the GNU Affero General Public License, version 3 (AGPLv3), or (at your option) any later version of the AGPL published by the Free Software Foundation. This means:
10381: 10293: 10205:  18: 
10382: 10294: 10206:  19: * You may use, study, copy, modify, and distribute the Source Code freely, provided you comply with the AGPLv3 terms. In particular, if you distribute your modified version of the Source Code or if you make it available for use over a network (e.g. running a modified game server for others to play), you must make your Source Code modifications publicly available under the same license (AGPLv3).
10383: 10295: 10207:  20: * The full text of the AGPLv3 is provided along with this agreement (usually in a file named AGPL-3.0.txt or similar). By accepting this License, you agree to abide by the conditions of AGPLv3 for the Game’s Source Code.
10384: 10296: 10208:  21: * No Additional Restrictions on Source Code: Except as expressly stated in this Agreement, you may not impose any further restrictions on the exercise of the rights granted or affirmed under the AGPLv3 for the Source Code. (In other words, the Source Code remains free and open under AGPLv3 terms whenever it is distributed or deployed, unless a separate Commercial License is obtained as described in Section 6.)
10385: 10297: 10209:  22: 
10386: 10298: 10210:  23: ## 3. Creative Commons License for Assets
10387: 10299: 10211:  24: 
10388: 10300: 10212:  25: All Assets of SledHEAD (non-code content) are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). Under this license:
10389: 10301: 10213:  26: 
10390: 10302: 10214:  27: * You are free to:
10391: 10303: 10215:  28:   * Share – copy and redistribute the Assets in any medium or format.
10392: 10304: 10216:  29:   * Adapt – remix, transform, and build upon the Assets for any non-commercial purpose.
10393: 10305: 10217:  30: * Attribution – You must give appropriate credit to the original author (see Section 5), provide a link to the CC BY-NC-SA 4.0 license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the Licensor endorses you or your use.
10394: 10306: 10218:  31: * NonCommercial – You may not use the Assets for commercial purposes. (Using the Assets or any derivative of them to generate revenue or for any commercial advantage is prohibited unless you have obtained a separate Commercial License as per Section 6.)
10395: 10307: 10219:  32: * ShareAlike – If you remix, transform, or build upon the Assets, you must distribute your contributions under the same license (CC BY-NC-SA 4.0) or a license that is more permissive. “More permissive” means any license that grants equal or greater rights to the public than CC BY-NC-SA (for example, you may choose to release your own original derivative Assets under CC BY-SA or CC BY, which would allow commercial use or omit the ShareAlike requirement, but you cannot apply a more restrictive license or make the assets wholly proprietary).
10396: 10308: 10220:  33: * The full text of the CC BY-NC-SA 4.0 license is provided with this agreement (or accessible via the Creative Commons website). By using the Game’s Assets, you agree to the terms of CC BY-NC-SA 4.0.
10397: 10309: 10221:  34: * No Commercial Exploitation of Assets: For clarity, you cannot sell, license, or otherwise commercially exploit the Game’s Assets (original or modified) on their own or as part of a product, except under a separate Commercial License (Section 6). For example, you cannot charge money for a soundtrack that includes the Game’s music, or include the Game’s art in a paid product, without permission.
10398: 10310: 10222:  35: 
10399: 10311: 10223:  36: ## 4. Permission for Videos, Streaming, and Screenshots
10400: 10312: 10224:  37: 
10401: 10313: 10225:  38: The Licensor explicitly grants permission to all users to capture, use, and share audiovisual content from the Game (including gameplay videos, streams, screenshots, and similar content), even if monetized, without needing any additional license or permission, as long as such use does not misrepresent the origin of the Game. This means:
10402: 10314: 10226:  39: 
10403: 10315: 10227:  40: * You may stream or record gameplay on platforms like Twitch, YouTube, etc., and you may monetize these videos/streams (for example, through ads, sponsorships, or donations). This use is allowed and considered non-commercial with respect to the Game’s Assets because it is promotional/fan content by the community. The NonCommercial restriction in Section 3 is waived for this specific type of content creation.
10404: 10316: 10228:  41: * You do not need to ask the Licensor for permission to create let’s play videos, reviews, or live streams of SledHEAD. This is encouraged as part of community engagement. Attribution (such as naming the Game) in the video/stream description or verbally is appreciated but not strictly required beyond what the platform norms are, since the content itself usually makes it clear it’s SledHEAD. (However, you still must not claim to be the creator of the Game.)
10405: 10317: 10229:  42: * This permission for videos/streams does not grant you the right to extract the Assets and use them separately in other commercial products (Section 3’s NonCommercial rule still applies to the Assets themselves). It only covers the use of recorded or displayed in-game content as part of video/stream content. For example, using a game’s music as background of an unrelated commercial video would not be covered by this clause, but showing the game’s music as it plays during gameplay footage is fine.
10406: 10318: 10230:  43: 
10407: 10319: 10231:  44: ## 5. Attribution Requirement
10408: 10320: 10232:  45: 
10409: 10321: 10233:  46: You must give appropriate credit to the original author (Licensor) when you distribute or publicly use the Game (or any substantial portion of it, including Mods). This is a condition of the CC BY-NC-SA license for Assets and is hereby made a condition of this overall license. The attribution should be placed in a manner appropriate to the medium:
10410: 10322: 10234:  47: 
10411: 10323: 10235:  48: * If you distribute the Game in unmodified form, include the original credits (which should already list the author) and license information. Typically, the Game already contains an in-game credits section or documentation listing the author and contributors — retain that.
10412: 10324: 10236:  49: * If you create a Mod or a fork of the Game, you must credit SledHEAD and the original author somewhere in your project. For example, in an “About” menu, “Credits” screen, README file, or documentation for your Mod, include a notice such as: “This project is based on SledHEAD, originally created by Marvin Bentley II. SledHEAD is © 2024 Marvin Bentley II and is licensed under AGPLv3 (code) and CC BY-NC-SA 4.0 (assets).” Adjust the wording as appropriate, but it should be reasonably prominent, as appropriate for the medium.
10413: 10325: 10237:  50: * If you use parts of the Source Code in another project, you must keep the copyright and license notices in those source files per AGPL requirements. Additionally, an attribution in your project’s documentation or credits to the SledHEAD project is required.
10414: 10326: 10238:  51: * The attribution requirement is not intended to be burdensome: it’s mainly to ensure the original creators are acknowledged. A single mention in a credits section or README is typically sufficient, as long as it's accessible to users of your product or Mod.
10415: 10327: 10239:  52: 
10416: 10328: 10240:  53: ## 6. Modding and Derivative Works
10417: 10329: 10241:  54: 
10418: 10330: 10242:  55: SledHEAD is mod-friendly and open to community contributions, under the following conditions:
10419: 10331: 10243:  56: 
10420: 10332: 10244:  57: * **Mods - Source Code:** If you create a Mod that includes or is based on the Game’s Source Code, the Mod’s source code must be released under the AGPLv3 (same as the Game) or an even more permissive open-source license. More permissive licenses include, for example, GNU GPLv3, MIT, Apache 2.0, etc., which do not impose additional restrictions beyond AGPL. This ensures that anyone who plays or uses your Mod has the same rights to obtain and modify the source. You cannot make a closed-source mod using the Game’s code without a separate Commercial License (see Section 7).
10421: 10333: 10245:  58: * **Mods - Assets:** If your Mod includes or modifies any of the Game’s Assets, then all such Assets in your Mod must be licensed under CC BY-NC-SA 4.0 (the same license as the base game assets) or a more permissive license. “More permissive” in this context could be, for example, CC BY-SA 4.0 (which allows commercial use but still requires ShareAlike) or CC BY 4.0 (which allows commercial use and no ShareAlike). You may choose a more permissive license for your original assets if you want to allow broader use, but you must at least allow the same scope of use that CC BY-NC-SA permits. You cannot put additional restrictions on derivatives of the Game’s Assets beyond CC BY-NC-SA.
10422: 10334: 10246:  59: * **No circumvention via Mods:** You may not create a Mod or derivative work that is essentially a way to evade the NonCommercial restriction on the original Assets. For example, you can’t repackage a level of SledHEAD as a “mod” and sell it, claiming the new level’s art is under a different license. Any part of a Mod derived from original Assets inherits the NonCommercial restriction.
10423: 10335: 10247:  60: * **Paid Mods:** SledHEAD’s open licenses are designed such that Mods are freely shareable and open. While charging money for a Mod is strongly discouraged under this license scheme, we acknowledge it can happen. If you choose to sell or paywall a Mod, you do so at your own risk under the license terms:
10424: 10336: 10248:  61:   * The Mod’s source code must still be AGPLv3 (or open-source), meaning anyone who obtains the Mod (even by purchasing it) must have access to the source and the right to redistribute it. Practically, this means once one person has bought your Mod, they have the legal right to share the code with others for free. You cannot revoke that right, so a paywalled open-source mod is of limited enforceability (the “paywall” is more of a donation or early access mechanism, not a true sale of exclusive rights).
10425: 10337: 10249:  62:   * Any of the Mod’s assets that derive from SledHEAD Assets carry the NonCommercial clause. This means you technically cannot charge for those assets or any product containing them. If your Mod contains only your own original assets and you license them under a more permissive license (such as CC BY-SA or even a proprietary license you own), you have more leeway to charge for the Mod. However, by including SledHEAD’s original game content or requiring the Game to run, your Mod is still a derivative work of the Game as a whole, and thus selling it without the Licensor’s permission could violate the spirit of the NonCommercial clause.
10426: 10338: 10250:  63:   * In summary: If you want to monetize a Mod, you should seek a Commercial License from the Licensor (see Section 7) to cover that, or ensure that your Mod is completely your own independent work and doesn’t include NonCommercial content. Otherwise, anyone is legally free to redistribute your Mod for non-commercial purposes (or as allowed by whatever license you chose) without paying, and the Licensor reserves the right to enforce the NonCommercial clause if needed.
10427: 10339: 10251:  64: * **Mods Must Credit Original:** As noted in Section 5, Mods should credit SledHEAD and the original author. Making mods open-source and crediting the base game helps build a healthy community and is a condition of using the Game’s content.
10428: 10340: 10252:  65: * **Upstream Contributions:** If you make improvements or fixes to the base Game’s Source Code (as opposed to separate mods), you are encouraged to contribute them back to the main project. You can do this by submitting patches or pull requests to the original repository. Note that by contributing, you agree that your contribution will be licensed under the same terms as this License (so it remains AGPL for code and CC BY-NC-SA for any assets you contribute, unless otherwise agreed). The Licensor may ask you to sign a contributor agreement (see Section 9) to clarify licensing of contributions.
10429: 10341: 10253:  66: 
10430: 10342: 10254:  67: ## 7. Commercial License Option
10431: 10343: 10255:  68: 
10432: 10344: 10256:  69: The Licensor offers the possibility of a separate Commercial License for parties interested in using SledHEAD in ways not permitted by the above open licenses (AGPL and CC BY-NC-SA). This could apply if, for example, you want to: distribute the game in a proprietary (closed-source) manner, use the Assets commercially, include SledHEAD in a commercial product, or otherwise not comply with AGPL/CC BY-NC-SA terms. The following terms govern the Commercial License option:
10433: 10345: 10257:  70: 
10434: 10346: 10258:  71: * **By Request:** You must contact the Licensor to request a Commercial License. Terms (including scope, duration, and fees) are negotiable on a case-by-case basis. For instance, the Licensor may offer a one-time purchase license, a revenue-sharing agreement, or a subscription model, depending on the nature of the use.
10435: 10347: 10259:  72: * **No Guaranteed Approval:** The Licensor has sole discretion to decide whether or not to grant a Commercial License to any requesting party. Simply requesting a Commercial License does not guarantee you will receive one. The Licensor may decline for any reason or require certain conditions.
10436: 10348: 10260:  73: * **Override of Open Terms:** A duly granted Commercial License will override or modify the AGPL and CC BY-NC-SA terms for the party to whom it is granted, as specified in that license agreement. For example, a Commercial License may allow you to keep your source code modifications proprietary, or to use the Assets in a commercial game, notwithstanding Sections 2 and 3. The exact permissions and exceptions will be written in that separate agreement. Unless and until you have a signed Commercial License, you are bound by the AGPL and CC BY-NC-SA terms described in this document.
10437: 10349: 10261:  74: * **Closed Source Allowed with Commercial License:** Under a Commercial License, the Licensor may permit you to create a closed-source derivative or include SledHEAD code in a larger proprietary project. This is an exception to the copyleft requirement, granted only through the Commercial License.
10438: 10350: 10262:  75: * **Written Agreement:** Any Commercial License will be provided in writing (which may be a separate contract or license document). It will detail the rights granted, any limitations, and the financial terms. You will likely be required to prominently credit the original author even in commercial use, unless otherwise agreed.
10439: 10351: 10263:  76: 
10440: 10352: 10264:  77: ## 8. Reservation of Rights and Future Relicensing
10441: 10353: 10265:  78: 
10442: 10354: 10266:  79: * **Ownership:** The Licensor (original author) retains all rights, title, and interest in SledHEAD and its Source Code and Assets, except for the licenses expressly granted to you under this Agreement. No trademark rights are granted (the name SledHEAD is not necessarily covered by this license—separate permissions may be needed to use the name or logos in commercial contexts).
10443: 10355: 10267:  80: * **Right to Relicense:** The Licensor reserves the right to relicense or release parts or all of the Game under different terms in the future, including more permissive open-source licenses. For example, the Licensor may later decide to release certain Assets under a license like CC BY 4.0 (which would allow commercial use) or even dedicate some components to the public domain. Similarly, future versions of the Source Code might be released under a license like MIT or GPL, etc., at the Licensor’s discretion.
10444: 10356: 10268:  81: * **Effect on Existing License:** Any such re-licensing by the Licensor in the future will not retroactively revoke the rights you've obtained under this Agreement. (For example, if you received the game under AGPL/CC BY-NC-SA, that specific release is still under those terms for you.) However, the Licensor may offer upgraded license terms for future versions or for specific components, which you can opt to use under those new terms.
10445: 10357: 10269:  82: * **Contributions from Others:** If the project receives contributions from other developers (community contributions), the Licensor will ensure that those contributions are either made under a contributor agreement or appropriate terms such that the Licensor can include them in future releases. This is to maintain the ability to relicense if needed. (See Section 9 about contributor agreements.)
10446: 10358: 10270:  83: * **No Obligation to Future Licensing:** Nothing in this clause guarantees that the Licensor will release a more permissive version, only that it’s a possibility. Users and contributors should be aware that license terms might be adjusted in future releases, but any such change will be clearly communicated and, if necessary, consent from contributors will be obtained.
10447: 10359: 10271:  84: 
10448: 10360: 10272:  85: ## 9. Contributor License Agreement (CLA) (for external contributors)
10449: 10361: 10273:  86: 
10450: 10362: 10274:  87: At present (initial release), all code and assets in SledHEAD are authored by the original Licensor. If you wish to contribute to the project (e.g., by submitting code or asset improvements), the Licensor may ask you to sign a Contributor License Agreement. A CLA typically confirms that: (a) you have the right to contribute what you send, (b) you grant the Licensor permission to use and relicense your contribution under this project’s license and potentially other licenses in the future, and (c) you understand your contribution is provided under the same open license to all users.
10451: 10363: 10275:  88: 
10452: 10364: 10276:  89: * **Necessity of CLA:** The CLA is intended to make future license changes or commercial licensing of the project smoother, by ensuring all contributors agree on how their contributions can be used. If you do not sign such an agreement, the Licensor might not be able to accept your contribution, especially if it’s significant, because it could complicate the ability to relicense or offer commercial terms later.
10453: 10365: 10277:  90: * **Timing:** You generally won’t need to sign a CLA until you are about to make the first contribution that will be merged into the project. Simply using or modding the game doesn’t require a CLA. It’s only for when you contribute code or assets back to the official project. The Licensor may publish the CLA text and a process (e.g., an online sign-off) when the project starts accepting outside contributions.
10454: 10366: 10278:  91: * **Contributor Rights:** Even after signing a CLA, you (as a contributor) still retain copyright to your contributions and you can reuse your contributed code elsewhere. The CLA just gives the Licensor a broad right to include your work in SledHEAD and relicense as needed (for instance, if in the future SledHEAD moves to a different license or a commercial dual-license model, your contribution can be included).
10455: 10367: 10279:  92: * **No CLA at Initial Release:** If you are simply downloading or using the game, this section doesn’t affect you. It’s informational in case the project grows with community help. The Licensor will announce when a CLA becomes required (likely before accepting the first non-trivial external commit).
10456: 10368: 10280:  93: 
10457: 10369: 10281:  94: ## 10. Disclaimer of Warranty
10458: 10370: 10282:  95: 
10459: 10371: 10283:  96: THE GAME (INCLUDING SOURCE CODE AND ASSETS) IS PROVIDED "AS IS" AND WITHOUT WARRANTY OF ANY KIND. To the fullest extent permitted by law, the Licensor disclaims all warranties, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement. You accept all risk as to the quality and performance of the Game. Should the Game prove defective, you assume the cost of all necessary servicing, repair, or correction. No oral or written information or advice provided by the Licensor shall create any warranty. (This disclaimer is in line with Section 15 of the AGPLv3 and Section 5 of CC BY-NC-SA 4.0.)
10460: 10372: 10284:  97: 
10461: 10373: 10285:  98: ## 11. Limitation of Liability
10462: 10374: 10286:  99: 
10463: 10375: 10287: 100: Under no circumstances and under no legal theory (including, without limitation, tort (including negligence), contract, or otherwise) shall the Licensor, or anyone who has contributed to the Game, be liable to you for any direct, indirect, incidental, consequential, special, or exemplary damages arising out of or relating to this License or the use of the Game, even if the Licensor has been advised of the possibility of such damages. In jurisdictions that do not allow the exclusion or limitation of certain damages, the Licensor’s liability shall be limited to the minimum extent permitted by law. You acknowledge that the Licensor is not liable for how you use the Game or Mods, or any outcomes of using it (for example, no liability for loss of data, loss of profits, or legal issues you might incur by violating this Agreement).
10464: 10376: 10288: 101: 
10465: 10377: 10289: 102: ## 12. General
10466: 10378: 10290: 103: 
10467: 10379: 10291: 104: * **Severability:** If any provision of this License is held to be unenforceable or invalid by a court of competent jurisdiction, that provision will be modified to the minimum extent necessary to make it enforceable (or severed if necessary), and the rest of the License will remain in effect.
10468: 10380: 10292: 105: * **No Endorsement:** Nothing in this License gives you rights to use the name, logos, or trademarks of SledHEAD or the Licensor for promotional purposes (aside from factual attribution as required). You cannot imply that your Mod or product is endorsed by the original author without separate permission.
10469: 10381: 10293: 106: * **License Acceptance:** By using the Game (or any of its Source Code or Assets), you indicate your acceptance of this License. If you do not agree to these terms, you do not have permission to use the Game or its contents.
10470: 10382: 10294: 107: * **Copyright Notice:** © 2024 Marvin Bentley II. All rights reserved, except as explicitly granted by this License.
10471: 10383: 10295: ``````
10472: 10384: 10296: 
10473: 10385: 10297: ## File: js/mobs/mountainlion.js
10474: 10386: 10298: ``````javascript
10475: 10387: 10299:  1: /* mountainlion.js - Mountain Lion Animal Module
10476: 10388: 10300:  2: // This module defines the mountain lion characteristics for the wildlife simulation.
10477: 10389: 10301:  3: // It registers itself with wildlife.js by calling registerAnimalType().
10478: 10390: 10302:  4: // Drawn in a style consistent with our bear and bird modules, with a pretty kitty flair.
10479: 10391: 10303:  5: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
10480: 10392: 10304:  6: */
10481: 10393: 10305:  7: (function() {
10482: 10394: 10306:  8:     // Helper function to draw a rectangle at an angle, centered at (cx, cy)
10483: 10395: 10307:  9:     function drawRectAtAngle(ctx, cx, cy, width, height, angleDeg, fillStyle) {
10484: 10396: 10308: 10:         let rad = angleDeg * Math.PI / 180;
10485: 10397: 10309: 11:         ctx.save();
10486: 10398: 10310: 12:         ctx.translate(cx, cy);
10487: 10399: 10311: 13:         ctx.rotate(rad);
10488: 10400: 10312: 14:         ctx.fillStyle = fillStyle;
10489: 10401: 10313: 15:         ctx.fillRect(-width / 2, -height / 2, width, height);
10490: 10402: 10314: 16:         ctx.restore();
10491: 10403: 10315: 17:     }
10492: 10404: 10316: 18:     var mountainLionData = {
10493: 10405: 10317: 19:         type: "mountainlion",
10494: 10406: 10318: 20:         spawnProbability: 2.0, // Very high spawn chance
10495: 10407: 10319: 21:         width: 50,
10496: 10408: 10320: 22:         height: 30,
10497: 10409: 10321: 23:         detectionRadius: 60,
10498: 10410: 10322: 24:         speed: 10,
10499: 10411: 10323: 25:         basePhotoBonus: 15, // Good bonus for a pretty kitty
10500: 10412: 10324: 26:         color: "#F9E79F",   // A soft golden color
10501: 10413: 10325: 27:         spawningBiomes: [
10502: 10414: 10326: 28:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
10503: 10415: 10327: 29:         ],
10504: 10416: 10328: 30:         customUpdate: null,
10505: 10417: 10329: 31:         customDraw: function(animal, screenY, ctx) {
10506: 10418: 10330: 32:             // Draw the body
10507: 10419: 10331: 33:             ctx.fillStyle = animal.color;
10508: 10420: 10332: 34:             ctx.fillRect(
10509: 10421: 10333: 35:                 animal.x - animal.width / 2,
10510: 10422: 10334: 36:                 screenY - animal.height / 2,
10511: 10423: 10335: 37:                 animal.width,
10512: 10424: 10336: 38:                 animal.height
10513: 10425: 10337: 39:             );
10514: 10426: 10338: 40:             // Draw left ear as a triangle
10515: 10427: 10339: 41:             ctx.beginPath();
10516: 10428: 10340: 42:             ctx.moveTo(animal.x - animal.width / 4, screenY - animal.height / 2);
10517: 10429: 10341: 43:             ctx.lineTo(animal.x - animal.width / 4 - 10, screenY - animal.height / 2 - 15);
10518: 10430: 10342: 44:             ctx.lineTo(animal.x - animal.width / 4 + 10, screenY - animal.height / 2 - 15);
10519: 10431: 10343: 45:             ctx.closePath();
10520: 10432: 10344: 46:             ctx.fillStyle = "#000000";
10521: 10433: 10345: 47:             ctx.fill();
10522: 10434: 10346: 48:             // Draw right ear
10523: 10435: 10347: 49:             ctx.beginPath();
10524: 10436: 10348: 50:             ctx.moveTo(animal.x + animal.width / 4, screenY - animal.height / 2);
10525: 10437: 10349: 51:             ctx.lineTo(animal.x + animal.width / 4 - 10, screenY - animal.height / 2 - 15);
10526: 10438: 10350: 52:             ctx.lineTo(animal.x + animal.width / 4 + 10, screenY - animal.height / 2 - 15);
10527: 10439: 10351: 53:             ctx.closePath();
10528: 10440: 10352: 54:             ctx.fill();
10529: 10441: 10353: 55:             // Draw a tail using an angled rectangle
10530: 10442: 10354: 56:             let tailPivotX = animal.x + animal.width / 2;
10531: 10443: 10355: 57:             let tailPivotY = screenY + animal.height / 2;
10532: 10444: 10356: 58:             let tailAngle = -45;
10533: 10445: 10357: 59:             let tailWidth = 20;
10534: 10446: 10358: 60:             let tailHeight = 8;
10535: 10447: 10359: 61:             drawRectAtAngle(ctx, 
10536: 10448: 10360: 62:                 tailPivotX + (tailWidth / 2) * Math.cos(tailAngle * Math.PI / 180),
10537: 10449: 10361: 63:                 tailPivotY + (tailWidth / 2) * Math.sin(tailAngle * Math.PI / 180),
10538: 10450: 10362: 64:                 tailWidth, 
10539: 10451: 10363: 65:                 tailHeight, 
10540: 10452: 10364: 66:                 tailAngle, 
10541: 10453: 10365: 67:                 animal.color
10542: 10454: 10366: 68:             );
10543: 10455: 10367: 69:             // Altitude indicator
10544: 10456: 10368: 70:             let t = 1 - (animal.altitude / 100);
10545: 10457: 10369: 71:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
10546: 10458: 10370: 72:             ctx.fillStyle = altitudeColor;
10547: 10459: 10371: 73:             ctx.fillRect(
10548: 10460: 10372: 74:                 animal.x + animal.width / 2 + 5,
10549: 10461: 10373: 75:                 screenY - 5,
10550: 10462: 10374: 76:                 10,
10551: 10463: 10375: 77:                 10
10552: 10464: 10376: 78:             );
10553: 10465: 10377: 79:         }
10554: 10466: 10378: 80:     };
10555: 10467: 10379: 81:     if (typeof registerAnimalType === 'function') {
10556: 10468: 10380: 82:         registerAnimalType(mountainLionData);
10557: 10469: 10381: 83:     } else {
10558: 10470: 10382: 84:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
10559: 10471: 10383: 85:     }
10560: 10472: 10384: 86: })();
10561: 10473: 10385: ``````
10562: 10474: 10386: 
10563: 10475: 10387: ## File: js/camera.js
10564: 10476: 10388: ``````javascript
10565: 10477: 10389:  1: // camera.js
10566: 10478: 10390:  2: // This file is responsible for handling the photography
10567: 10479: 10391:  3: // mechanics.
10568: 10480: 10392:  4: // Global variables for photo system
10569: 10481: 10393:  5: var lastPhotoTime = 0;
10570: 10482: 10394:  6: // ------------------- Photo (Critter) Minigame Logic -------------------
10571: 10483: 10395:  7: // Handles taking a photo of an animal when conditions are met.
10572: 10484: 10396:  8: function takePhoto() {
10573: 10485: 10397:  9:   let now = Date.now();
10574: 10486: 10398: 10:   if (now - lastPhotoTime < TWEAK.photoCooldown) return; // Enforce cooldown
10575: 10487: 10399: 11:   if (!activeAnimal || !isAnimalInsideCone(activeAnimal)) return;
10576: 10488: 10400: 12:   lastPhotoTime = now;
10577: 10489: 10401: 13:   let baseValue = TWEAK.basePhotoValue;
10578: 10490: 10402: 14:   // Altitude Bonus: exponential falloff within 50 units.
10579: 10491: 10403: 15:   let diffAlt = Math.abs(player.altitudeLine - activeAnimal.altitude);
10580: 10492: 10404: 16:   let altitudeMatchBonus;
10581: 10493: 10405: 17:   if (diffAlt > 50) {
10582: 10494: 10406: 18:     altitudeMatchBonus = 1;
10583: 10495: 10407: 19:   } else {
10584: 10496: 10408: 20:     altitudeMatchBonus = 1 + (TWEAK.altitudeMatchMultiplier - 1) * Math.exp(-diffAlt / 15);
10585: 10497: 10409: 21:   }
10586: 10498: 10410: 22:   // Center Bonus: based on the angle difference between camera direction and animal.
10587: 10499: 10411: 23:   let animalAngle = Math.atan2(activeAnimal.y - player.absY, activeAnimal.x - player.x) * (180 / Math.PI);
10588: 10500: 10412: 24:   if (animalAngle < 0) animalAngle += 360;
10589: 10501: 10413: 25:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
10590: 10502: 10414: 26:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
10591: 10503: 10415: 27:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
10592: 10504: 10416: 28:   let sweetSpotPercentage = 0.10 + (playerUpgrades.optimalOptics * 0.01);
10593: 10505: 10417: 29:   let sweetSpotAngle = coneAngle * sweetSpotPercentage;
10594: 10506: 10418: 30:   let centerBonus;
10595: 10507: 10419: 31:   if (diffAngle <= sweetSpotAngle) {
10596: 10508: 10420: 32:     centerBonus = TWEAK.centerPOVMultiplier;
10597: 10509: 10421: 33:   } else if (diffAngle < coneAngle / 2) {
10598: 10510: 10422: 34:     let factor = (diffAngle - sweetSpotAngle) / (coneAngle / 2 - sweetSpotAngle);
10599: 10511: 10423: 35:     centerBonus = 1 + (TWEAK.centerPOVMultiplier - 1) * Math.exp(-factor * 3);
10600: 10512: 10424: 36:   } else {
10601: 10513: 10425: 37:     centerBonus = 1;
10602: 10514: 10426: 38:   }
10603: 10515: 10427: 39:   // Movement Bonus and Animal Type Multiplier:
10604: 10516: 10428: 40:   let movementBonus = activeAnimal.state !== "sitting" ? TWEAK.fleeingAnimalMultiplier : 1;
10605: 10517: 10429: 41:   let animalTypeMultiplier = activeAnimal.type === "bear" ? TWEAK.bearMultiplier : TWEAK.birdMultiplier;
10606: 10518: 10430: 42:   let repeatPenalty = activeAnimal.hasBeenPhotographed ? TWEAK.repeatPhotoPenalty : 1;
10607: 10519: 10431: 43:   let totalMoney = Math.floor(baseValue * altitudeMatchBonus * centerBonus * movementBonus * animalTypeMultiplier * repeatPenalty);
10608: 10520: 10432: 44:   player.money += totalMoney;
10609: 10521: 10433: 45:   showMoneyGain(totalMoney, `(📸 ${activeAnimal.type})`);
10610: 10522: 10434: 46:   addFloatingText(`+$${totalMoney} 📸`, player.x, player.absY);
10611: 10523: 10435: 47:   console.log(`Captured ${activeAnimal.type}! Calculation details: Base=$${baseValue}, AltitudeBonus=${altitudeMatchBonus.toFixed(2)}, CenterBonus=${centerBonus.toFixed(2)}, MovementBonus=${movementBonus.toFixed(2)}, AnimalTypeMultiplier=${animalTypeMultiplier}, RepeatPenalty=${repeatPenalty}, Total=$${totalMoney}.`);
10612: 10524: 10436: 48:   // After taking a photo, animal should always flee
10613: 10525: 10437: 49:   if (activeAnimal.state === "sitting") {
10614: 10526: 10438: 50:     console.log(`Animal (${activeAnimal.type}) startled by camera - changing state from sitting to fleeing`);
10615: 10527: 10439: 51:     activeAnimal.state = "fleeing";
10616: 10528: 10440: 52:     activeAnimal.fleeingLogOnce = false; // Reset so we get the fleeing log message
10617: 10529: 10441: 53:   }
10618: 10530: 10442: 54:   activeAnimal.hasBeenPhotographed = true;
10619: 10531: 10443: 55: }
10620: 10532: 10444: 56: // Check if the animal is inside the camera cone
10621: 10533: 10445: 57: function isAnimalInsideCone(animal) {
10622: 10534: 10446: 58:   // Distance check
10623: 10535: 10447: 59:   let dx = animal.x - player.x;
10624: 10536: 10448: 60:   let dy = animal.y - player.absY;
10625: 10537: 10449: 61:   let distanceSquared = dx * dx + dy * dy;
10626: 10538: 10450: 62:   let maxDistance = TWEAK.maxAnimalPhotoDistance;
10627: 10539: 10451: 63:   if (distanceSquared > maxDistance * maxDistance) return false;
10628: 10540: 10452: 64:   // Angle check
10629: 10541: 10453: 65:   let animalAngle = Math.atan2(dy, dx) * (180 / Math.PI);
10630: 10542: 10454: 66:   if (animalAngle < 0) animalAngle += 360;
10631: 10543: 10455: 67:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
10632: 10544: 10456: 68:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
10633: 10545: 10457: 69:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
10634: 10546: 10458: 70:   return diffAngle <= coneAngle / 2;
10635: 10547: 10459: 71: }
10636: 10548: 10460: ``````
10637: 10549: 10461: 
10638: 10550: 10462: ## File: js/jumpsled.js
10639: 10551: 10463: ``````javascript
10640: 10552: 10464:  1: // jumpsled.js
10641: 10553: 10465:  2: // This file contains all jump-related functions for SledHEAD
10642: 10554: 10466:  3: function onPlayerJumpStart() {
10643: 10555: 10467:  4:   player.jumpStartTime = performance.now();
10644: 10556: 10468:  5:   player.jumpStartY = player.absY;
10645: 10557: 10469:  6:   player.jumpPeakY = player.absY;
10646: 10558: 10470:  7:   console.log("Jump initiated at Y:", player.jumpStartY.toFixed(1));
10647: 10559: 10471:  8:   unlockAudioContext();
10648: 10560: 10472:  9:   jumpOsc = audioCtx.createOscillator();
10649: 10561: 10473: 10:   jumpGain = audioCtx.createGain();
10650: 10562: 10474: 11:   jumpOsc.type = "sine";
10651: 10563: 10475: 12:   jumpGain.gain.setValueAtTime(0.3, audioCtx.currentTime);
10652: 10564: 10476: 13:   jumpOsc.connect(jumpGain);
10653: 10565: 10477: 14:   jumpGain.connect(audioCtx.destination);
10654: 10566: 10478: 15:   jumpOsc.start();
10655: 10567: 10479: 16:   // Drain stamina on jump initiation
10656: 10568: 10480: 17:   stamina.drainJump();
10657: 10569: 10481: 18: }
10658: 10570: 10482: 19: function onPlayerJumpPeak() {
10659: 10571: 10483: 20:   console.log("Reached peak of jump.");
10660: 10572: 10484: 21:   // Optionally add a sound effect here.
10661: 10573: 10485: 22: }
10662: 10574: 10486: 23: function cleanupJumpSound() {
10663: 10575: 10487: 24:   if (jumpOsc) {
10664: 10576: 10488: 25:     jumpOsc.stop();
10665: 10577: 10489: 26:     jumpOsc.disconnect();
10666: 10578: 10490: 27:     jumpOsc = null;
10667: 10579: 10491: 28:   }
10668: 10580: 10492: 29:   if (jumpGain) {
10669: 10581: 10493: 30:     jumpGain.disconnect();
10670: 10582: 10494: 31:     jumpGain = null;
10671: 10583: 10495: 32:   }
10672: 10584: 10496: 33: }
10673: 10585: 10497: 34: function onPlayerLand() {
10674: 10586: 10498: 35:   const jumpTime = (performance.now() - player.jumpStartTime) / 1000;
10675: 10587: 10499: 36:   const jumpHeight = player.jumpPeakY - player.jumpStartY;
10676: 10588: 10500: 37:   const totalDistance = player.absY - player.jumpStartY;
10677: 10589: 10501: 38:   console.log(`Jump complete! Time: ${jumpTime.toFixed(2)}s, Peak Height: ${jumpHeight.toFixed(1)}, Distance: ${totalDistance.toFixed(1)}`);
10678: 10590: 10502: 39:   cleanupJumpSound();
10679: 10591: 10503: 40:   stamina.resetJumpTrigger();
10680: 10592: 10504: 41: }
10681: 10593: 10505: ``````
10682: 10594: 10506: 
10683: 10595: 10507: ## File: js/loan.js
10684: 10596: 10508: ``````javascript
10685: 10597: 10509:  1: /* loan.js - Loan Management & Victory Condition */
10686: 10598: 10510:  2: // Loan System
10687: 10599: 10511:  3: var loanAmount = 100000; // Initial loan amount
10688: 10600: 10512:  4: function updateLoanButton() {
10689: 10601: 10513:  5:   const loanButton = document.getElementById("payLoan");
10690: 10602: 10514:  6:   if (loanButton) {
10691: 10603: 10515:  7:     if (loanAmount <= 0) {
10692: 10604: 10516:  8:       loanButton.textContent = "LOAN PAID OFF!";
10693: 10605: 10517:  9:       loanButton.disabled = true;
10694: 10606: 10518: 10:       // Show victory banner
10695: 10607: 10519: 11:       document.getElementById("victoryBanner").style.display = "block";
10696: 10608: 10520: 12:     } else {
10697: 10609: 10521: 13:       loanButton.textContent = `Pay Loan ($${loanAmount.toLocaleString()})`;
10698: 10610: 10522: 14:       loanButton.disabled = false;
10699: 10611: 10523: 15:     }
10700: 10612: 10524: 16:   }
10701: 10613: 10525: 17: }
10702: 10614: 10526: 18: function payLoan() {
10703: 10615: 10527: 19:   if (player.money > 0) {
10704: 10616: 10528: 20:     const payment = Math.min(player.money, loanAmount);
10705: 10617: 10529: 21:     loanAmount -= payment;
10706: 10618: 10530: 22:     player.money -= payment;
10707: 10619: 10531: 23:     updateMoneyDisplay(); // This function should update the on-screen money (see below)
10708: 10620: 10532: 24:     updateLoanButton();
10709: 10621: 10533: 25:     if (loanAmount <= 0) {
10710: 10622: 10534: 26:       console.log("🎉 Loan paid off! Victory!");
10711: 10623: 10535: 27:       playTone(800, "sine", 0.3, 0.5); // Victory sound
10712: 10624: 10536: 28:     } else {
10713: 10625: 10537: 29:       console.log(`💰 Loan payment: $${payment}. Remaining: $${loanAmount}`);
10714: 10626: 10538: 30:       playTone(600, "sine", 0.1, 0.2); // Payment sound
10715: 10627: 10539: 31:     }
10716: 10628: 10540: 32:   }
10717: 10629: 10541: 33: }
10718: 10630: 10542: ``````
10719: 10631: 10543: 
10720: 10632: 10544: ## File: js/notify.js
10721: 10633: 10545: ``````javascript
10722: 10634: 10546:  1: /* notify.js */
10723: 10635: 10547:  2: // Generic notification framework for SledHEAD
10724: 10636: 10548:  3: // Base function to show notifications
10725: 10637: 10549:  4: function showNotification(message, colorRGBA = [255, 255, 0, 0.8], duration = 1000) {
10726: 10638: 10550:  5:   // Generate a unique ID based on the message
10727: 10639: 10551:  6:   const notificationId = 'notification-' + message.replace(/\s+/g, '-').toLowerCase();
10728: 10640: 10552:  7:   // Create or get the notification element
10729: 10641: 10553:  8:   let notification = document.getElementById(notificationId);
10730: 10642: 10554:  9:   if (!notification) {
10731: 10643: 10555: 10:     notification = document.createElement('div');
10732: 10644: 10556: 11:     notification.id = notificationId;
10733: 10645: 10557: 12:     notification.style.position = 'fixed';
10734: 10646: 10558: 13:     notification.style.top = '50%';
10735: 10647: 10559: 14:     notification.style.left = '50%';
10736: 10648: 10560: 15:     notification.style.transform = 'translate(-50%, -50%)';
10737: 10649: 10561: 16:     notification.style.backgroundColor = `rgba(${colorRGBA[0]}, ${colorRGBA[1]}, ${colorRGBA[2]}, ${colorRGBA[3]})`;
10738: 10650: 10562: 17:     notification.style.color = 'white';
10739: 10651: 10563: 18:     notification.style.padding = '20px';
10740: 10652: 10564: 19:     notification.style.borderRadius = '10px';
10741: 10653: 10565: 20:     notification.style.fontWeight = 'bold';
10742: 10654: 10566: 21:     notification.style.fontSize = '24px';
10743: 10655: 10567: 22:     notification.style.textAlign = 'center';
10744: 10656: 10568: 23:     notification.style.zIndex = '1000';
10745: 10657: 10569: 24:     notification.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.7)';
10746: 10658: 10570: 25:     document.body.appendChild(notification);
10747: 10659: 10571: 26:   }
10748: 10660: 10572: 27:   // Set content and make visible
10749: 10661: 10573: 28:   notification.textContent = message;
10750: 10662: 10574: 29:   notification.style.display = 'block';
10751: 10663: 10575: 30:   // Fade out after specified duration
10752: 10664: 10576: 31:   setTimeout(() => {
10753: 10665: 10577: 32:     notification.style.transition = 'opacity 0.5s';
10754: 10666: 10578: 33:     notification.style.opacity = '0';
10755: 10667: 10579: 34:     setTimeout(() => {
10756: 10668: 10580: 35:       notification.style.display = 'none';
10757: 10669: 10581: 36:       notification.style.opacity = '1';
10758: 10670: 10582: 37:       notification.style.transition = '';
10759: 10671: 10583: 38:     }, 500);
10760: 10672: 10584: 39:   }, duration);
10761: 10673: 10585: 40: }
10762: 10674: 10586: 41: // Specific notification types with predefined colors
10763: 10675: 10587: 42: function showErrorNotification(message, duration = 1000) {
10764: 10676: 10588: 43:   // Red background for errors
10765: 10677: 10589: 44:   showNotification(message, [255, 0, 0, 0.8], duration);
10766: 10678: 10590: 45:   // Play an error sound if available
10767: 10679: 10591: 46:   if (typeof playTone === 'function') {
10768: 10680: 10592: 47:     playTone(200, "square", 0.3, 0.4);
10769: 10681: 10593: 48:   }
10770: 10682: 10594: 49: }
10771: 10683: 10595: 50: function showSuccessNotification(message, duration = 1000) {
10772: 10684: 10596: 51:   // Green background for success
10773: 10685: 10597: 52:   showNotification(message, [0, 128, 0, 0.8], duration);
10774: 10686: 10598: 53:   // Play a positive sound if available
10775: 10687: 10599: 54:   if (typeof playTone === 'function') {
10776: 10688: 10600: 55:     playTone(600, "sine", 0.3, 0.4);
10777: 10689: 10601: 56:   }
10778: 10690: 10602: 57: }
10779: 10691: 10603: 58: function showWarningNotification(message, duration = 1000) {
10780: 10692: 10604: 59:   // Yellow background for warnings
10781: 10693: 10605: 60:   showNotification(message, [255, 255, 0, 0.8], duration);
10782: 10694: 10606: 61:   // Play a warning sound if available
10783: 10695: 10607: 62:   if (typeof playTone === 'function') {
10784: 10696: 10608: 63:     playTone(400, "triangle", 0.3, 0.4);
10785: 10697: 10609: 64:   }
10786: 10698: 10610: 65: }
10787: 10699: 10611: 66: function showInfoNotification(message, duration = 1000) {
10788: 10700: 10612: 67:   // Blue background for info
10789: 10701: 10613: 68:   showNotification(message, [0, 0, 255, 0.8], duration);
10790: 10702: 10614: 69: }
10791: 10703: 10615: 70: // Export functions for use in other modules
10792: 10704: 10616: 71: if (typeof module !== 'undefined' && module.exports) {
10793: 10705: 10617: 72:   module.exports = {
10794: 10706: 10618: 73:     showNotification,
10795: 10707: 10619: 74:     showErrorNotification,
10796: 10708: 10620: 75:     showSuccessNotification,
10797: 10709: 10621: 76:     showWarningNotification,
10798: 10710: 10622: 77:     showInfoNotification
10799: 10711: 10623: 78:   };
10800: 10712: 10624: 79: }
10801: 10713: 10625: ``````
10802: 10714: 10626: 
10803: 10715: 10627: ## File: js/registry.js
10804: 10716: 10628: ``````javascript
10805: 10717: 10629:  1: /*
10806: 10718: 10630:  2: // registry.js
10807: 10719: 10631:  3: export const functionRegistry = {};
10808: 10720: 10632:  4: export function register(name) {
10809: 10721: 10633:  5:   return function(target, key, descriptor) {
10810: 10722: 10634:  6:     const fnName = name || key;
10811: 10723: 10635:  7:     functionRegistry[fnName] = descriptor.value;
10812: 10724: 10636:  8:     return descriptor;
10813: 10725: 10637:  9:   };
10814: 10726: 10638: 10: }
10815: 10727: 10639: 11: */
10816: 10728: 10640: 12: // registry.js
10817: 10729: 10641: 13: export const functionRegistry = {};
10818: 10730: 10642: 14: export function register(name, fn) {
10819: 10731: 10643: 15:   functionRegistry[name] = fn;
10820: 10732: 10644: 16: }
10821: 10733: 10645: ``````
10822: 10734: 10646: 
10823: 10735: 10647: ## File: js/trees.js
10824: 10736: 10648: ``````javascript
10825: 10737: 10649:  1: /* trees.js - Tree Generation and Rendering */
10826: 10738: 10650:  2: /**
10827: 10739: 10651:  3:  * Generates clusters of trees across the terrain
10828: 10740: 10652:  4:  * @param {Object} options Configuration options
10829: 10741: 10653:  5:  * @param {number} options.count Number of tree clusters to generate
10830: 10742: 10654:  6:  * @param {Object} options.terrainBounds Bounds for placing trees {xMin, xMax, yMin, yMax}
10831: 10743: 10655:  7:  * @param {number} options.playerSize Reference size to scale trees relative to player
10832: 10744: 10656:  8:  * @returns {Array} Array of tree objects with positions and dimensions
10833: 10745: 10657:  9:  */
10834: 10746: 10658: 10: function generateTreeClumps(options) {
10835: 10747: 10659: 11:   const { count, terrainBounds, playerSize } = options;
10836: 10748: 10660: 12:   const clumps = [];
10837: 10749: 10661: 13:   for (let i = 0; i < count; i++) {
10838: 10750: 10662: 14:     const clump = [];
10839: 10751: 10663: 15:     const clumpSize = 2 + Math.floor(Math.random() * 3); // 2-4 trees per clump
10840: 10752: 10664: 16:     const clumpX = terrainBounds.xMin + Math.random() * (terrainBounds.xMax - terrainBounds.xMin);
10841: 10753: 10665: 17:     const clumpY = terrainBounds.yMin + Math.random() * (terrainBounds.yMax - terrainBounds.yMin);
10842: 10754: 10666: 18:     for (let j = 0; j < clumpSize; j++) {
10843: 10755: 10667: 19:       const sizeFactor = 0.5 + Math.random() * 1.5; // 50–200%
10844: 10756: 10668: 20:       const squareSize = playerSize * sizeFactor;
10845: 10757: 10669: 21:       const offsetX = (Math.random() - 0.5) * playerSize * 2;
10846: 10758: 10670: 22:       const offsetY = (Math.random() - 0.5) * playerSize * 2;
10847: 10759: 10671: 23:       clump.push({
10848: 10760: 10672: 24:         x: clumpX + offsetX,
10849: 10761: 10673: 25:         y: clumpY + offsetY,
10850: 10762: 10674: 26:         width: squareSize,
10851: 10763: 10675: 27:         height: squareSize,
10852: 10764: 10676: 28:         type: 'tree'
10853: 10765: 10677: 29:       });
10854: 10766: 10678: 30:     }
10855: 10767: 10679: 31:     clumps.push(...clump);
10856: 10768: 10680: 32:   }
10857: 10769: 10681: 33:   return clumps;
10858: 10770: 10682: 34: }
10859: 10771: 10683: 35: /**
10860: 10772: 10684: 36:  * Helper function to draw a more visually interesting tree
10861: 10773: 10685: 37:  * @param {CanvasRenderingContext2D} ctx Canvas context to draw on
10862: 10774: 10686: 38:  * @param {Object} tree Tree object with position and size information
10863: 10775: 10687: 39:  */
10864: 10776: 10688: 40: function drawTree(ctx, tree) {
10865: 10777: 10689: 41:   // Tree trunk (brown rectangle)
10866: 10778: 10690: 42:   const trunkWidth = tree.width * 0.3;
10867: 10779: 10691: 43:   const trunkHeight = tree.height * 0.6;
10868: 10780: 10692: 44:   const trunkX = tree.x + (tree.width - trunkWidth) / 2;
10869: 10781: 10693: 45:   const trunkY = tree.y + tree.height - trunkHeight;
10870: 10782: 10694: 46:   ctx.fillStyle = "#8B4513"; // saddle brown for trunk
10871: 10783: 10695: 47:   ctx.fillRect(trunkX, trunkY, trunkWidth, trunkHeight);
10872: 10784: 10696: 48:   // Tree canopy (green circle)
10873: 10785: 10697: 49:   const canopyRadius = tree.width * 0.6;
10874: 10786: 10698: 50:   const canopyCenterX = tree.x + tree.width / 2;
10875: 10787: 10699: 51:   const canopyCenterY = tree.y + tree.height * 0.4;
10876: 10788: 10700: 52:   ctx.fillStyle = "#228B22"; // forest green
10877: 10789: 10701: 53:   ctx.beginPath();
10878: 10790: 10702: 54:   ctx.arc(canopyCenterX, canopyCenterY, canopyRadius, 0, Math.PI * 2);
10879: 10791: 10703: 55:   ctx.fill();
10880: 10792: 10704: 56: }
10881: 10793: 10705: ``````
10882: 10794: 10706: 
10883: 10795: 10707: ## File: js/upgradeData.js
10884: 10796: 10708: ``````javascript
10885: 10797: 10709:   1: // js/upgradeData.js
10886: 10798: 10710:   2: export const upgradeCategories = [
10887: 10799: 10711:   3:     {
10888: 10800: 10712:   4:       name: "Personal Upgrades",
10889: 10801: 10713:   5:       type: "player",
10890: 10802: 10714:   6:       upgrades: [
10891: 10803: 10715:   7:         {
10892: 10804: 10716:   8:           key: "rocketSurgery",
10893: 10805: 10717:   9:           label: "Rocket Surgery",
10894: 10806: 10718:  10:           desc: "Boosts top speed & acceleration for faster downhill runs.",
10895: 10807: 10719:  11:           max: 10,
10896: 10808: 10720:  12:           icon: "🚀"
10897: 10809: 10721:  13:         },
10898: 10810: 10722:  14:         {
10899: 10811: 10723:  15:           key: "optimalOptics",
10900: 10812: 10724:  16:           label: "Optimal Optics",
10901: 10813: 10725:  17:           desc: "Frees focus & boosts fan engagement for easier weaving.",
10902: 10814: 10726:  18:           max: 10,
10903: 10815: 10727:  19:           icon: "📸"
10904: 10816: 10728:  20:         },
10905: 10817: 10729:  21:         {
10906: 10818: 10730:  22:           key: "sledDurability",
10907: 10819: 10731:  23:           label: "Sled Durability",
10908: 10820: 10732:  24:           desc: "Reinforce your sled to withstand bigger impacts.",
10909: 10821: 10733:  25:           max: 10,
10910: 10822: 10734:  26:           icon: "🛷"
10911: 10823: 10735:  27:         },
10912: 10824: 10736:  28:         {
10913: 10825: 10737:  29:           key: "fancierFootwear",
10914: 10826: 10738:  30:           label: "Fancier Footwear",
10915: 10827: 10739:  31:           desc: "Less time climbing, more time sledding.",
10916: 10828: 10740:  32:           max: 10,
10917: 10829: 10741:  33:           icon: "👢"
10918: 10830: 10742:  34:         },
10919: 10831: 10743:  35:         {
10920: 10832: 10744:  36:           key: "grapplingAnchor",
10921: 10833: 10745:  37:           label: "Grappling Anchor",
10922: 10834: 10746:  38:           desc: "Hook onto terrain to swing into tricky spots.",
10923: 10835: 10747:  39:           max: 0,
10924: 10836: 10748:  40:           icon: "🪝"
10925: 10837: 10749:  41:         },
10926: 10838: 10750:  42:         {
10927: 10839: 10751:  43:           key: "attendLegDay",
10928: 10840: 10752:  44:           label: "Attend Leg Day",
10929: 10841: 10753:  45:           desc: "Reduce stamina cost for climbing back up.",
10930: 10842: 10754:  46:           max: 0,
10931: 10843: 10755:  47:           icon: "🏋️"
10932: 10844: 10756:  48:         },
10933: 10845: 10757:  49:         {
10934: 10846: 10758:  50:           key: "shortcutAwareness",
10935: 10847: 10759:  51:           label: "Shortcut Awareness",
10936: 10848: 10760:  52:           desc: "Reveal hidden shortcuts & groomed trails.",
10937: 10849: 10761:  53:           max: 0,
10938: 10850: 10762:  54:           icon: "🗺️"
10939: 10851: 10763:  55:         },
10940: 10852: 10764:  56:         {
10941: 10853: 10765:  57:           key: "crowdHypeman",
10942: 10854: 10766:  58:           label: "Crowd Hypeman",
10943: 10855: 10767:  59:           desc: "Perform tricks near fans for boosts.",
10944: 10856: 10768:  60:           max: 0,
10945: 10857: 10769:  61:           icon: "📣"
10946: 10858: 10770:  62:         },
10947: 10859: 10771:  63:         {
10948: 10860: 10772:  64:           key: "crowdWeaver",
10949: 10861: 10773:  65:           label: "Crowd Weaver",
10950: 10862: 10774:  66:           desc: "Crowds move aside more often.",
10951: 10863: 10775:  67:           max: 0,
10952: 10864: 10776:  68:           icon: "🧍‍♂️"
10953: 10865: 10777:  69:         },
10954: 10866: 10778:  70:         {
10955: 10867: 10779:  71:           key: "weatherWarrior",
10956: 10868: 10780:  72:           label: "Weather Warrior",
10957: 10869: 10781:  73:           desc: "Storms & blizzards barely slow you down.",
10958: 10870: 10782:  74:           max: 0,
10959: 10871: 10783:  75:           icon: "🌨️"
10960: 10872: 10784:  76:         }
10961: 10873: 10785:  77:       ]
10962: 10874: 10786:  78:     },
10963: 10875: 10787:  79:     {
10964: 10876: 10788:  80:       name: "Mountain Upgrades",
10965: 10877: 10789:  81:       type: "mountain",
10966: 10878: 10790:  82:       upgrades: [
10967: 10879: 10791:  83:         {
10968: 10880: 10792:  84:           key: "skiLifts",
10969: 10881: 10793:  85:           label: "High-Speed Ski Lift Expansion",
10970: 10882: 10794:  86:           desc: "Ride lifts faster & attract more visitors.",
10971: 10883: 10795:  87:           max: 0,
10972: 10884: 10796:  88:           icon: "🎿"
10973: 10885: 10797:  89:         },
10974: 10886: 10798:  90:         {
10975: 10887: 10799:  91:           key: "snowmobileRentals",
10976: 10888: 10800:  92:           label: "Snowmobile Rentals",
10977: 10889: 10801:  93:           desc: "Rent them out or ride them yourself.",
10978: 10890: 10802:  94:           max: 0,
10979: 10891: 10803:  95:           icon: "🏍️"
10980: 10892: 10804:  96:         },
10981: 10893: 10805:  97:         {
10982: 10894: 10806:  98:           key: "eateries",
10983: 10895: 10807:  99:           label: "Eateries & Snack Bars",
10984: 10896: 10808: 100:           desc: "Restore stamina and make money.",
10985: 10897: 10809: 101:           max: 0,
10986: 10898: 10810: 102:           icon: "🍔"
10987: 10899: 10811: 103:         },
10988: 10900: 10812: 104:         {
10989: 10901: 10813: 105:           key: "groomedTrails",
10990: 10902: 10814: 106:           label: "Groomed Trails",
10991: 10903: 10815: 107:           desc: "Smoothed paths with boosty sections.",
10992: 10904: 10816: 108:           max: 0,
10993: 10905: 10817: 109:           icon: "🥾"
10994: 10906: 10818: 110:         },
10995: 10907: 10819: 111:         {
10996: 10908: 10820: 112:           key: "firstAidStations",
10997: 10909: 10821: 113:           label: "Safety & First-Aid Stations",
10998: 10910: 10822: 114:           desc: "Heal and reduce collision penalties.",
10999: 10911: 10823: 115:           max: 0,
11000: 10912: 10824: 116:           icon: "⛑️"
11001: 10913: 10825: 117:         },
11002: 10914: 10826: 118:         {
11003: 10915: 10827: 119:           key: "scenicOverlooks",
11004: 10916: 10828: 120:           label: "Scenic Overlook Platforms",
11005: 10917: 10829: 121:           desc: "Lure tourists or use as shortcuts.",
11006: 10918: 10830: 122:           max: 0,
11007: 10919: 10831: 123:           icon: "📷"
11008: 10920: 10832: 124:         },
11009: 10921: 10833: 125:         {
11010: 10922: 10834: 126:           key: "advertisingRamps",
11011: 10923: 10835: 127:           label: "Advertising Ramp-Billboards",
11012: 10924: 10836: 128:           desc: "Sponsor revenue and epic trick ramps.",
11013: 10925: 10837: 129:           max: 0,
11014: 10926: 10838: 130:           icon: "📢"
11015: 10927: 10839: 131:         },
11016: 10928: 10840: 132:         {
11017: 10929: 10841: 133:           key: "resortLodges",
11018: 10930: 10842: 134:           label: "Resort Amenities & Lodges",
11019: 10931: 10843: 135:           desc: "Start from fancy remote lodges.",
11020: 10932: 10844: 136:           max: 0,
11021: 10933: 10845: 137:           icon: "🏨"
11022: 10934: 10846: 138:         },
11023: 10935: 10847: 139:         {
11024: 10936: 10848: 140:           key: "nightLighting",
11025: 10937: 10849: 141:           label: "Night Lighting Upgrades",
11026: 10938: 10850: 142:           desc: "Unlock night sledding.",
11027: 10939: 10851: 143:           max: 0,
11028: 10940: 10852: 144:           icon: "🌙"
11029: 10941: 10853: 145:         },
11030: 10942: 10854: 146:         {
11031: 10943: 10855: 147:           key: "weatherControl",
11032: 10944: 10856: 148:           label: "Weather Control Systems",
11033: 10945: 10857: 149:           desc: "Control the challenge for higher rewards.",
11034: 10946: 10858: 150:           max: 0,
11035: 10947: 10859: 151:           icon: "🌦️"
11036: 10948: 10860: 152:         }
11037: 10949: 10861: 153:       ]
11038: 10950: 10862: 154:     }
11039: 10951: 10863: 155:   ];
11040: 10952: 10864: ``````
11041: 10953: 10865: 
11042: 10954: 10866: ## File: js/upgradeLogic.js
11043: 10955: 10867: ``````javascript
11044: 10956: 10868:   1: // js/upgradeLogic.js
11045: 10957: 10869:   2: // Using global utility functions instead of imports
11046: 10958: 10870:   3: // Track upgrade levels
11047: 10959: 10871:   4: let playerUpgrades = {
11048: 10960: 10872:   5:   rocketSurgery: 0,
11049: 10961: 10873:   6:   optimalOptics: 0,
11050: 10962: 10874:   7:   sledDurability: 0,
11051: 10963: 10875:   8:   fancierFootwear: 0,
11052: 10964: 10876:   9:   grapplingAnchor: 0,
11053: 10965: 10877:  10:   attendLegDay: 0,
11054: 10966: 10878:  11:   shortcutAwareness: 0,
11055: 10967: 10879:  12:   crowdHypeman: 0,
11056: 10968: 10880:  13:   crowdWeaver: 0,
11057: 10969: 10881:  14:   weatherWarrior: 0
11058: 10970: 10882:  15: };
11059: 10971: 10883:  16: let mountainUpgrades = {
11060: 10972: 10884:  17:   skiLifts: 0,
11061: 10973: 10885:  18:   snowmobileRentals: 0,
11062: 10974: 10886:  19:   eateries: 0,
11063: 10975: 10887:  20:   groomedTrails: 0,
11064: 10976: 10888:  21:   firstAidStations: 0,
11065: 10977: 10889:  22:   scenicOverlooks: 0,
11066: 10978: 10890:  23:   advertisingRamps: 0,
11067: 10979: 10891:  24:   resortLodges: 0,
11068: 10980: 10892:  25:   nightLighting: 0,
11069: 10981: 10893:  26:   weatherControl: 0
11070: 10982: 10894:  27: };
11071: 10983: 10895:  28: const upgradeMaxLevel = {
11072: 10984: 10896:  29:   rocketSurgery: 10,
11073: 10985: 10897:  30:   optimalOptics: 10,
11074: 10986: 10898:  31:   sledDurability: 10,
11075: 10987: 10899:  32:   fancierFootwear: 10,
11076: 10988: 10900:  33:   grapplingAnchor: 0,
11077: 10989: 10901:  34:   attendLegDay: 0,
11078: 10990: 10902:  35:   shortcutAwareness: 0,
11079: 10991: 10903:  36:   crowdHypeman: 0,
11080: 10992: 10904:  37:   crowdWeaver: 0,
11081: 10993: 10905:  38:   weatherWarrior: 0,
11082: 10994: 10906:  39:   skiLifts: 0,
11083: 10995: 10907:  40:   snowmobileRentals: 0,
11084: 10996: 10908:  41:   eateries: 0,
11085: 10997: 10909:  42:   groomedTrails: 0,
11086: 10998: 10910:  43:   firstAidStations: 0,
11087: 10999: 10911:  44:   scenicOverlooks: 0,
11088: 11000: 10912:  45:   advertisingRamps: 0,
11089: 11001: 10913:  46:   resortLodges: 0,
11090: 11002: 10914:  47:   nightLighting: 0,
11091: 11003: 10915:  48:   weatherControl: 0
11092: 11004: 10916:  49: };
11093: 11005: 10917:  50: function getUpgradeCost(upgradeKey, currentLevel) {
11094: 11006: 10918:  51:   return Math.floor(100 * Math.pow(1.1, currentLevel + 1));
11095: 11007: 10919:  52: }
11096: 11008: 10920:  53: function updateMoneyDisplay() {
11097: 11009: 10921:  54:   const moneyText = document.getElementById("moneyText");
11098: 11010: 10922:  55:   if (moneyText) {
11099: 11011: 10923:  56:     moneyText.textContent = "Money: $" + player.money;
11100: 11012: 10924:  57:   }
11101: 11013: 10925:  58: }
11102: 11014: 10926:  59: function getUpgradeDisplayText(upgradeKey, currentLevel, maxLevel) {
11103: 11015: 10927:  60:   let text = formatUpgradeName(upgradeKey) + ` (Lv ${currentLevel}/${maxLevel})`;
11104: 11016: 10928:  61:   if (maxLevel > 0 && currentLevel < maxLevel) {
11105: 11017: 10929:  62:     let cost = getUpgradeCost(upgradeKey, currentLevel);
11106: 11018: 10930:  63:     text += " – Cost: $" + cost;
11107: 11019: 10931:  64:   }
11108: 11020: 10932:  65:   return text;
11109: 11021: 10933:  66: }
11110: 11022: 10934:  67: function initUpgradeButton(upgradeKey, upgradeValue) {
11111: 11023: 10935:  68:   const maxLevel = upgradeMaxLevel[upgradeKey];
11112: 11024: 10936:  69:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
11113: 11025: 10937:  70:   const button = document.getElementById(btnId);
11114: 11026: 10938:  71:   button.innerText = getUpgradeDisplayText(upgradeKey, upgradeValue, maxLevel);
11115: 11027: 10939:  72:   if (maxLevel === 0 || upgradeValue >= maxLevel) {
11116: 11028: 10940:  73:     button.disabled = true;
11117: 11029: 10941:  74:   }
11118: 11030: 10942:  75: }
11119: 11031: 10943:  76: function purchaseUpgrade(upgradeType, upgradeKey) {
11120: 11032: 10944:  77:   const currentLevel = upgradeType[upgradeKey];
11121: 11033: 10945:  78:   const maxLevel = upgradeMaxLevel[upgradeKey];
11122: 11034: 10946:  79:   if (maxLevel === 0 || currentLevel >= maxLevel) {
11123: 11035: 10947:  80:     console.log("Upgrade", upgradeKey, "is locked or already maxed.");
11124: 11036: 10948:  81:     return;
11125: 11037: 10949:  82:   }
11126: 11038: 10950:  83:   const cost = getUpgradeCost(upgradeKey, currentLevel);
11127: 11039: 10951:  84:   if (player.money < cost) {
11128: 11040: 10952:  85:     console.log("Not enough money to purchase", upgradeKey, ". Cost:", cost, "Money:", player.money);
11129: 11041: 10953:  86:     return;
11130: 11042: 10954:  87:   }
11131: 11043: 10955:  88:   player.money -= cost;
11132: 11044: 10956:  89:   upgradeType[upgradeKey]++;
11133: 11045: 10957:  90:   const newLevel = upgradeType[upgradeKey];
11134: 11046: 10958:  91:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
11135: 11047: 10959:  92:   document.getElementById(btnId).innerText = getUpgradeDisplayText(upgradeKey, newLevel, maxLevel);
11136: 11048: 10960:  93:   if (newLevel >= maxLevel) {
11137: 11049: 10961:  94:     document.getElementById(btnId).disabled = true;
11138: 11050: 10962:  95:   }
11139: 11051: 10963:  96:   updateMoneyDisplay();
11140: 11052: 10964:  97:   console.log("Purchased upgrade", upgradeKey, "New level:", newLevel, "Remaining money:", player.money);
11141: 11053: 10965:  98: }
11142: 11054: 10966:  99: // Export all necessary variables and functions
11143: 11055: 10967: 100: export {
11144: 11056: 10968: 101:   playerUpgrades,
11145: 11057: 10969: 102:   mountainUpgrades,
11146: 11058: 10970: 103:   upgradeMaxLevel,
11147: 11059: 10971: 104:   getUpgradeCost,
11148: 11060: 10972: 105:   getUpgradeDisplayText,
11149: 11061: 10973: 106:   initUpgradeButton,
11150: 11062: 10974: 107:   updateMoneyDisplay,
11151: 11063: 10975: 108:   purchaseUpgrade
11152: 11064: 10976: 109: };
11153: 11065: 10977: ``````
11154: 11066: 10978: 
11155: 11067: 10979: ## File: js/upgrades.js
11156: 11068: 10980: ``````javascript
11157: 11069: 10981:  1: // js/upgrades.js
11158: 11070: 10982:  2: import { upgradeCategories } from './upgradeData.js';
11159: 11071: 10983:  3: import { 
11160: 11072: 10984:  4:   playerUpgrades, 
11161: 11073: 10985:  5:   mountainUpgrades, 
11162: 11074: 10986:  6:   upgradeMaxLevel, 
11163: 11075: 10987:  7:   purchaseUpgrade, 
11164: 11076: 10988:  8:   getUpgradeCost,
11165: 11077: 10989:  9:   getUpgradeDisplayText 
11166: 11078: 10990: 10: } from './upgradeLogic.js';
11167: 11079: 10991: 11: // Using global capitalizeFirstLetter instead of importing it
11168: 11080: 10992: 12: function createUpgradeElement(upgrade, isPlayerUpgrade = true) {
11169: 11081: 10993: 13:   const upgradeType = isPlayerUpgrade ? playerUpgrades : mountainUpgrades;
11170: 11082: 10994: 14:   const currentLevel = upgradeType[upgrade.key];
11171: 11083: 10995: 15:   const maxLevel = upgradeMaxLevel[upgrade.key];
11172: 11084: 10996: 16:   const cost = getUpgradeCost(upgrade.key, currentLevel);
11173: 11085: 10997: 17:   const entry = document.createElement('div');
11174: 11086: 10998: 18:   entry.className = 'upgrade-entry';
11175: 11087: 10999: 19:   const button = document.createElement('button');
11176: 11088: 11000: 20:   const btnId = `upgrade${capitalizeFirstLetter(upgrade.key)}`;
11177: 11089: 11001: 21:   button.id = btnId;
11178: 11090: 11002: 22:   button.innerText = getUpgradeDisplayText(upgrade.key, currentLevel, maxLevel);
11179: 11091: 11003: 23:   // Disable if maxed or locked
11180: 11092: 11004: 24:   if (maxLevel === 0 || currentLevel >= maxLevel) {
11181: 11093: 11005: 25:     button.disabled = true;
11182: 11094: 11006: 26:   }
11183: 11095: 11007: 27:   button.addEventListener('click', () => {
11184: 11096: 11008: 28:     purchaseUpgrade(upgradeType, upgrade.key);
11185: 11097: 11009: 29:   });
11186: 11098: 11010: 30:   const desc = document.createElement('p');
11187: 11099: 11011: 31:   desc.className = 'upgrade-desc';
11188: 11100: 11012: 32:   desc.textContent = upgrade.desc;
11189: 11101: 11013: 33:   entry.appendChild(button);
11190: 11102: 11014: 34:   entry.appendChild(desc);
11191: 11103: 11015: 35:   return entry;
11192: 11104: 11016: 36: }
11193: 11105: 11017: 37: function renderUpgradeMenu() {
11194: 11106: 11018: 38:   const container = document.getElementById('dynamic-upgrade-columns');
11195: 11107: 11019: 39:   if (!container) return;
11196: 11108: 11020: 40:   upgradeCategories.forEach(category => {
11197: 11109: 11021: 41:     const column = document.createElement('div');
11198: 11110: 11022: 42:     column.className = 'upgrade-column';
11199: 11111: 11023: 43:     const header = document.createElement('h2');
11200: 11112: 11024: 44:     header.textContent = category.name;
11201: 11113: 11025: 45:     column.appendChild(header);
11202: 11114: 11026: 46:     const isPlayerUpgrade = category.type === "player";
11203: 11115: 11027: 47:     category.upgrades.forEach(upgrade => {
11204: 11116: 11028: 48:       const element = createUpgradeElement(upgrade, isPlayerUpgrade);
11205: 11117: 11029: 49:       column.appendChild(element);
11206: 11118: 11030: 50:     });
11207: 11119: 11031: 51:     container.appendChild(column);
11208: 11120: 11032: 52:   });
11209: 11121: 11033: 53: }
11210: 11122: 11034: 54: renderUpgradeMenu();
11211: 11123: 11035: ``````
11212: 11124: 11036: 
11213: 11125: 11037: ## File: js/uphill.js
11214: 11126: 11038: ``````javascript
11215: 11127: 11039:  1: /* uphill.js - Uphill Movement & Camera Control */
11216: 11128: 11040:  2: // Handle all uphill movement, camera controls, and related mechanics
11217: 11129: 11041:  3: function updateUphill(deltaTime) {
11218: 11130: 11042:  4:   let upSpeed = TWEAK.baseUpSpeed + (playerUpgrades.fancierFootwear * TWEAK.fancierFootwearUpSpeedPerLevel);
11219: 11131: 11043:  5:   // Vertical movement
11220: 11132: 11044:  6:   if (keysDown["w"]) { player.absY -= upSpeed; }
11221: 11133: 11045:  7:   if (keysDown["s"]) { player.absY += upSpeed; }
11222: 11134: 11046:  8:   // Horizontal movement with bounds checking
11223: 11135: 11047:  9:   let newXUphill = player.x;
11224: 11136: 11048: 10:   if (keysDown["a"]) { newXUphill -= upSpeed; }
11225: 11137: 11049: 11:   if (keysDown["d"]) { newXUphill += upSpeed; }
11226: 11138: 11050: 12:   player.x = clamp(newXUphill, player.width/2, canvas.width - player.width/2);
11227: 11139: 11051: 13:   // Prevent going beyond mountain bounds vertically
11228: 11140: 11052: 14:   player.absY = clamp(player.absY, 0, mountainHeight);
11229: 11141: 11053: 15:   // Camera and altitude control
11230: 11142: 11054: 16:   if (keysDown["ArrowLeft"]) { player.cameraAngle -= 2; }
11231: 11143: 11055: 17:   if (keysDown["ArrowRight"]) { player.cameraAngle += 2; }
11232: 11144: 11056: 18:   if (keysDown["ArrowUp"]) { player.altitudeLine = Math.max(0, player.altitudeLine - 2); }
11233: 11145: 11057: 19:   if (keysDown["ArrowDown"]) { player.altitudeLine = Math.min(100, player.altitudeLine + 2); }
11234: 11146: 11058: 20:   // Normalize camera angle
11235: 11147: 11059: 21:   if (player.cameraAngle < 0) player.cameraAngle += 360;
11236: 11148: 11060: 22:   if (player.cameraAngle >= 360) player.cameraAngle -= 360;
11237: 11149: 11061: 23:   // Reset horizontal velocity in uphill mode
11238: 11150: 11062: 24:   player.xVel = 0;
11239: 11151: 11063: 25:   // Check for collisions with terrain
11240: 11152: 11064: 26:   terrain.forEach(obstacle => {
11241: 11153: 11065: 27:     if (checkCollision(
11242: 11154: 11066: 28:         player.x - player.width / 2, player.absY - player.height / 2,
11243: 11155: 11067: 29:         player.width, player.height,
11244: 11156: 11068: 30:         obstacle.x, obstacle.y,
11245: 11157: 11069: 31:         obstacle.width, obstacle.height
11246: 11158: 11070: 32:     )) {
11247: 11159: 11071: 33:       console.log("Collision on uphill.");
11248: 11160: 11072: 34:       resolveCollision(player, obstacle);
11249: 11161: 11073: 35:     }
11250: 11162: 11074: 36:   });
11251: 11163: 11075: 37:   // Call animal update from wildlife.js
11252: 11164: 11076: 38:   updateAnimal();
11253: 11165: 11077: 39:   // Return to house if player reaches bottom of mountain
11254: 11166: 11078: 40:   if (player.absY >= mountainHeight) {
11255: 11167: 11079: 41:     player.absY = mountainHeight;
11256: 11168: 11080: 42:     console.log("Reached bottom. Returning to house.");
11257: 11169: 11081: 43:     changeState(GameState.HOUSE);
11258: 11170: 11082: 44:   }
11259: 11171: 11083: 45: }
11260: 11172: 11084: ``````
11261: 11173: 11085: 
11262: 11174: 11086: ## File: styles.css
11263: 11175: 11087: ``````css
11264: 11176: 11088:   1: /* gameplay.css */
11265: 11177: 11089:   2: /* Styles for the gameplay phase (canvas-based) */
11266: 11178: 11090:   3: #game-screen {
11267: 11179: 11091:   4:   position: absolute;
11268: 11180: 11092:   5:   top: 50px;
11269: 11181: 11093:   6:   left: 0;
11270: 11182: 11094:   7:   width: 100%;
11271: 11183: 11095:   8:   height: calc(100% - 50px);
11272: 11184: 11096:   9:   /* No fixed width/height here—the Phaser Scale Manager will resize the canvas */
11273: 11185: 11097:  10: }
11274: 11186: 11098:  11: #gameCanvas {
11275: 11187: 11099:  12:   width: 100%;
11276: 11188: 11100:  13:   height: 100%;
11277: 11189: 11101:  14:   display: block;
11278: 11190: 11102:  15:   background-color: #87CEEB;
11279: 11191: 11103:  16:   border: none;
11280: 11192: 11104:  17: }
11281: 11193: 11105:  18: /* house.css */
11282: 11194: 11106:  19: /* Styles for the house phase & upgrade menu */
11283: 11195: 11107:  20: #upgrade-menu {
11284: 11196: 11108:  21:   position: absolute;
11285: 11197: 11109:  22:   top: 50px;
11286: 11198: 11110:  23:   left: 0;
11287: 11199: 11111:  24:   width: 100%;
11288: 11200: 11112:  25:   height: calc(100% - 50px);
11289: 11201: 11113:  26:   background-color: rgba(0, 0, 0, 0.9);
11290: 11202: 11114:  27:   padding: 20px;
11291: 11203: 11115:  28:   box-sizing: border-box;
11292: 11204: 11116:  29:   display: block;
11293: 11205: 11117:  30:   overflow-y: auto;
11294: 11206: 11118:  31: }
11295: 11207: 11119:  32: .upgrade-menu-columns {
11296: 11208: 11120:  33:   display: flex;
11297: 11209: 11121:  34:   justify-content: space-around;
11298: 11210: 11122:  35:   align-items: flex-start;
11299: 11211: 11123:  36:   flex-wrap: wrap;
11300: 11212: 11124:  37: }
11301: 11213: 11125:  38: .upgrade-column {
11302: 11214: 11126:  39:   width: 45%;
11303: 11215: 11127:  40:   margin: 10px 0;
11304: 11216: 11128:  41: }
11305: 11217: 11129:  42: .upgrade-column h2 {
11306: 11218: 11130:  43:   text-align: center;
11307: 11219: 11131:  44:   margin-bottom: 10px;
11308: 11220: 11132:  45: }
11309: 11221: 11133:  46: .upgrade-entry {
11310: 11222: 11134:  47:   margin-bottom: 15px;
11311: 11223: 11135:  48: }
11312: 11224: 11136:  49: .upgrade-entry button {
11313: 11225: 11137:  50:   width: 100%;
11314: 11226: 11138:  51:   margin: 5px 0 2px 0;
11315: 11227: 11139:  52:   padding: 10px;
11316: 11228: 11140:  53:   font-size: 16px;
11317: 11229: 11141:  54:   background-color: #007bff;
11318: 11230: 11142:  55:   color: white;
11319: 11231: 11143:  56:   border: none;
11320: 11232: 11144:  57:   border-radius: 5px;
11321: 11233: 11145:  58:   cursor: pointer;
11322: 11234: 11146:  59:   transition: background-color 0.2s ease;
11323: 11235: 11147:  60: }
11324: 11236: 11148:  61: .upgrade-entry button:hover {
11325: 11237: 11149:  62:   background-color: #0056b3;
11326: 11238: 11150:  63: }
11327: 11239: 11151:  64: .upgrade-entry button:disabled {
11328: 11240: 11152:  65:   background-color: #555;
11329: 11241: 11153:  66:   cursor: not-allowed;
11330: 11242: 11154:  67: }
11331: 11243: 11155:  68: .upgrade-desc {
11332: 11244: 11156:  69:   font-size: 14px;
11333: 11245: 11157:  70:   line-height: 1.2;
11334: 11246: 11158:  71:   margin: 0;
11335: 11247: 11159:  72:   color: #ccc;
11336: 11248: 11160:  73: }
11337: 11249: 11161:  74: #bestTimeText {
11338: 11250: 11162:  75:   margin-top: 20px;
11339: 11251: 11163:  76:   text-align: center;
11340: 11252: 11164:  77:   color: #fff;
11341: 11253: 11165:  78: }
11342: 11254: 11166:  79: #startGame {
11343: 11255: 11167:  80:   display: block;
11344: 11256: 11168:  81:   margin: 10px auto;
11345: 11257: 11169:  82:   font-size: 16px;
11346: 11258: 11170:  83:   padding: 8px 16px;
11347: 11259: 11171:  84:   cursor: pointer;
11348: 11260: 11172:  85:   background-color: #28a745;
11349: 11261: 11173:  86:   border: none;
11350: 11262: 11174:  87:   border-radius: 5px;
11351: 11263: 11175:  88:   transition: background-color 0.2s ease;
11352: 11264: 11176:  89: }
11353: 11265: 11177:  90: #startGame:hover {
11354: 11266: 11178:  91:   background-color: #218838;
11355: 11267: 11179:  92: }
11356: 11268: 11180:  93: /* Global UI elements (title, money display) */
11357: 11269: 11181:  94: h1 {
11358: 11270: 11182:  95:   text-align: center;
11359: 11271: 11183:  96:   margin-top: 10px;
11360: 11272: 11184:  97:   color: #000;
11361: 11273: 11185:  98:   font-size: 36px;
11362: 11274: 11186:  99:   font-weight: bold;
11363: 11275: 11187: 100: }
11364: 11276: 11188: 101: /* Improved money display */
11365: 11277: 11189: 102: #moneyDisplay {
11366: 11278: 11190: 103:   position: fixed;
11367: 11279: 11191: 104:   top: 10px;
11368: 11280: 11192: 105:   right: 10px;
11369: 11281: 11193: 106:   font-size: 20px;
11370: 11282: 11194: 107:   background-color: rgba(0, 0, 0, 0.9);
11371: 11283: 11195: 108:   padding: 12px 16px;
11372: 11284: 11196: 109:   border-radius: 10px;
11373: 11285: 11197: 110:   color: #FFD700;
11374: 11286: 11198: 111:   font-weight: bold;
11375: 11287: 11199: 112:   z-index: 1000;
11376: 11288: 11200: 113: }
11377: 11289: 11201: 114: /* Live money updates should stand out */
11378: 11290: 11202: 115: #moneyText {
11379: 11291: 11203: 116:   font-size: 22px;
11380: 11292: 11204: 117:   font-weight: bold;
11381: 11293: 11205: 118:   color: #FFD700;
11382: 11294: 11206: 119:   transition: transform 0.1s ease-in-out, color 0.2s ease-in-out;
11383: 11295: 11207: 120: }
11384: 11296: 11208: 121: /* Bounce effect when money updates */
11385: 11297: 11209: 122: .money-increase {
11386: 11298: 11210: 123:   transform: scale(1.2);
11387: 11299: 11211: 124:   color: #FFFFFF;
11388: 11300: 11212: 125: }
11389: 11301: 11213: ``````
11390: 11302: 11214: 
11391: 11303: 11215: ## File: docs/1.0_README.md
11392: 11304: 11216: ``````markdown
11393: 11305: 11217:   1: # **SledHEAD**
11394: 11306: 11218:   2: **Genre:** Roguelike | Trick & Time Trial Racer | Adventure  
11395: 11307: 11219:   3: **Platform:** Web-based (PC, potentially mobile)  
11396: 11308: 11220:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
11397: 11309: 11221:   5: 
11398: 11310: 11222:   6: ---
11399: 11311: 11223:   7: 
11400: 11312: 11224:   8: ## Table of Contents
11401: 11313: 11225:   9: 1. [Core Concept](#core-concept)
11402: 11314: 11226:  10: 2. [Procedural World & Persistence](#procedural-world--persistence)
11403: 11315: 11227:  11: 3. [Gameplay Loops](#gameplay-loops)
11404: 11316: 11228:  12:    - [Sledding Phase (Downhill)](#1-sledding-phase-downhill)
11405: 11317: 11229:  13:    - [Climbing Phase (Uphill)](#2-climbing-phase-uphill)
11406: 11318: 11230:  14:    - [Management Phase (House & Upgrades)](#3-management-phase-house--upgrades)
11407: 11319: 11231:  15: 4. [Trick System (For Extra Cash & Fan Engagement)](#trick-system-for-extra-cash--fan-engagement)
11408: 11320: 11232:  16: 5. [Upgrade System](#upgrade-system)
11409: 11321: 11233:  17:    - [Personal Upgrades](#personal-upgrades-character-enhancements)
11410: 11322: 11234:  18:    - [Mountain Upgrades](#mountain-upgrades-resort-expansion)
11411: 11323: 11235:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)
11412: 11324: 11236:  20: 7. [Mountain Themes & Progression](#mountain-themes--progression)
11413: 11325: 11237:  21: 8. [Mini-Games in SledHEAD](#mini-games-in-sledhead)
11414: 11326: 11238:  22: 9. [NPCs & Mountain Town Ecosystem](#npcs--mountain-town-ecosystem)
11415: 11327: 11239:  23: 
11416: 11328: 11240:  24: 
11417: 11329: 11241:  25: ---
11418: 11330: 11242:  26: 
11419: 11331: 11243:  27: ## 🎯 **Core Concept**
11420: 11332: 11244:  28: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
11421: 11333: 11245:  29: 
11422: 11334: 11246:  30: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
11423: 11335: 11247:  31: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
11424: 11336: 11248:  32: 
11425: 11337: 11249:  33: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
11426: 11338: 11250:  34: 
11427: 11339: 11251:  35: ---
11428: 11340: 11252:  36: 
11429: 11341: 11253:  37: ## 🎮 **Controls & Gameplay Mechanics**
11430: 11342: 11254:  38: 
11431: 11343: 11255:  39: ### **⬇️ Downhill Phase: Fast-Paced Sledding**
11432: 11344: 11256:  40: In the **downhill phase**, you’re controlling your sled as it races down procedurally generated slopes, dodging obstacles, pulling off tricks, and aiming for the fastest times.
11433: 11345: 11257:  41: 
11434: 11346: 11258:  42: #### **Basic Movement:**
11435: 11347: 11259:  43: - **Left / Right Arrow Keys (← →)** – Steer your sled left or right.  
11436: 11348: 11260:  44: - **Down Arrow (↓)** – Crouch for extra speed on straightaways.  
11437: 11349: 11261:  45: - **Up Arrow (↑)** – Prepare for a jump off a ramp.  
11438: 11350: 11262:  46: 
11439: 11351: 11263:  47: #### **Trick System:**
11440: 11352: 11264:  48: - Tricks are executed using combinations of **Up, Down, Left, and Right Arrows**.
11441: 11353: 11265:  49: - Landing tricks successfully grants extra money and fan engagement.
11442: 11354: 11266:  50: - Be mindful of your timing - land while doing a trick, and you could crash!
11443: 11355: 11267:  51: 
11444: 11356: 11268:  52: #### **Hazards & Interactions:**
11445: 11357: 11269:  53: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
11446: 11358: 11270:  54: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
11447: 11359: 11271:  55: - **Ice Patches:** Reduce control and make turns trickier.
11448: 11360: 11272:  56: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
11449: 11361: 11273:  57: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
11450: 11362: 11274:  58: 
11451: 11363: 11275:  59: ---
11452: 11364: 11276:  60: 
11453: 11365: 11277:  61: ### **⬆️ Uphill Phase: Climbing & Exploration**
11454: 11366: 11278:  62: Once you reach the bottom, it’s time to **make your way back up**. The mountain doesn’t regenerate, so you’ll be retracing paths and discovering new shortcuts.
11455: 11367: 11279:  63: 
11456: 11368: 11280:  64: #### **Basic Movement & Stamina:**
11457: 11369: 11281:  65: - **Left / Right Arrow Keys (← →)** – Move horizontally across the mountain.
11458: 11370: 11282:  66: - **Up Arrow (↑)** – Hike uphill, consuming stamina.
11459: 11371: 11283:  67: - **Down Arrow (↓)** – Rest momentarily to recover stamina.
11460: 11372: 11284:  68: 
11461: 11373: 11285:  69: #### **Navigation & Assistance:**
11462: 11374: 11286:  70: - If you've **unlocked ski lifts or snowmobiles**, you can use them for a quicker return.
11463: 11375: 11287:  71: - **Shortcut Awareness** upgrades help you find hidden paths to make the climb easier.
11464: 11376: 11288:  72: - **Food Stalls & Rest Areas** restore stamina—plan your route accordingly!
11465: 11377: 11289:  73: 
11466: 11378: 11290:  74: #### **Wildlife Photography Mini-Game 📸**
11467: 11379: 11291:  75: - While hiking, **animals appear every few seconds**.
11468: 11380: 11292:  76: - Aim the camera using **Arrow Keys**, and take a shot with **Spacebar**.
11469: 11381: 11293:  77: - Align your camera with the **altitude line** for a perfect photo.
11470: 11382: 11294:  78: - **Moving animals give higher rewards** but are harder to capture.
11471: 11383: 11295:  79: 
11472: 11384: 11296:  80: ---
11473: 11385: 11297:  81: 
11474: 11386: 11298:  82: **Next Steps:**  
11475: 11387: 11299:  83: - **If you want to make money:** Optimize your tricks and time trials.  
11476: 11388: 11300:  84: - **If you want to upgrade:** Invest in stamina, sled durability, and trick enhancements.  
11477: 11389: 11301:  85: - **If you want to explore:** Look for wildlife, hidden shortcuts, and fan hotspots!  
11478: 11390: 11302:  86: 
11479: 11391: 11303:  87: ---
11480: 11392: 11304:  88: 
11481: 11393: 11305:  89: ## 🌎 **Procedural World & Persistence**
11482: 11394: 11306:  90: - The mountain remains consistent during a playthrough.  
11483: 11395: 11307:  91: - **New terrain is only generated when starting a new game.**  
11484: 11396: 11308:  92: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
11485: 11397: 11309:  93: - **Changes per run:**
11486: 11398: 11310:  94:   - Tourists & fans shift positions.  
11487: 11399: 11311:  95:   - Weather may change dynamically.  
11488: 11400: 11312:  96:   - Wildlife encounters vary.
11489: 11401: 11313:  97: 
11490: 11402: 11314:  98: ---
11491: 11403: 11315:  99: 
11492: 11404: 11316: 100: ## 🎮 **Gameplay Loops**
11493: 11405: 11317: 101: 
11494: 11406: 11318: 102: ### 1️⃣ **Sledding Phase (Downhill) ⬇️**
11495: 11407: 11319: 103: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
11496: 11408: 11320: 104: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
11497: 11409: 11321: 105: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
11498: 11410: 11322: 106: - **Obstacles:**
11499: 11411: 11323: 107:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
11500: 11412: 11324: 108:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
11501: 11413: 11325: 109:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
11502: 11414: 11326: 110: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
11503: 11415: 11327: 111: - **Time Trials:**  
11504: 11416: 11328: 112:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
11505: 11417: 11329: 113:   - **Your time between activators determines your bonus.**  
11506: 11418: 11330: 114:   - **Faster times = more money!**  
11507: 11419: 11331: 115:   - Not all runs are timed; only those where you activate a trial.  
11508: 11420: 11332: 116: 
11509: 11421: 11333: 117: ---
11510: 11422: 11334: 118: 
11511: 11423: 11335: 119: ### 2️⃣ **Climbing Phase (Uphill) ⬆️**
11512: 11424: 11336: 120: 🚶 **Top-down adventure traversal with stamina management and exploration.**  
11513: 11425: 11337: 121: - **Goal:** Return to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
11514: 11426: 11338: 122: - **Terrain:** The same generated world as the downhill run (no regenerating between runs).  
11515: 11427: 11339: 123: - **Stamina System:**  
11516: 11428: 11340: 124:   - Stamina drains when hiking.  
11517: 11429: 11341: 125:   - Replenished by **food stands, resting points, or upgrades**.  
11518: 11430: 11342: 126: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
11519: 11431: 11343: 127:   - **Random animals appear every 5–10 seconds (TWEAK variable).**  
11520: 11432: 11344: 128:   - Animals either **stay still (1–20 seconds) or move (making them harder to photograph).**  
11521: 11433: 11345: 129:   - **Use the Arrow Keys to aim the camera cone** around your character.  
11522: 11434: 11346: 130:   - **Align the altitude line** with the animal’s altitude for a perfect shot.  
11523: 11435: 11347: 131:   - **Photos earn money, with multipliers for:**  
11524: 11436: 11348: 132:     - Accuracy (center of POV cone).  
11525: 11437: 11349: 133:     - Altitude match precision.  
11526: 11438: 11350: 134:     - Moving vs. stationary targets (moving = 3x value).  
11527: 11439: 11351: 135: 
11528: 11440: 11352: 136: ---
11529: 11441: 11353: 137: 
11530: 11442: 11354: 138: ### 3️⃣ **Management Phase (House & Upgrades) 🏠**
11531: 11443: 11355: 139: 🏡 **Upgrade your gear, mountain, and social media presence.**  
11532: 11444: 11356: 140: - **Spend earned money on:**
11533: 11445: 11357: 141:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
11534: 11446: 11358: 142:   - **Sled Upgrades:** Speed, handling, trick potential.  
11535: 11447: 11359: 143:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
11536: 11448: 11360: 144: - **New Game Start:**  
11537: 11449: 11361: 145:   - Mountain **ONLY regenerates when starting a completely new game.**  
11538: 11450: 11362: 146:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
11539: 11451: 11363: 147:   - **Current seed is displayed at home.**  
11540: 11452: 11364: 148: 
11541: 11453: 11365: 149: ---
11542: 11454: 11366: 150: 
11543: 11455: 11367: 151: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
11544: 11456: 11368: 152: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
11545: 11457: 11369: 153: 
11546: 11458: 11370: 154: 1. **☁️🪂 Parachute (Up, Down)**  
11547: 11459: 11371: 155:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
11548: 11460: 11372: 156:    **Pixel Art Representation:**  
11549: 11461: 11373: 157:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
11550: 11462: 11374: 158: 
11551: 11463: 11375: 159: 2. **🛑🎿 Air Brake (Up, Up)**  
11552: 11464: 11376: 160:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
11553: 11465: 11377: 161:    **Pixel Art Representation:**  
11554: 11466: 11378: 162:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
11555: 11467: 11379: 163: 
11556: 11468: 11380: 164: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
11557: 11469: 11381: 165:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
11558: 11470: 11382: 166:    **Pixel Art Representation:**  
11559: 11471: 11383: 167:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
11560: 11472: 11384: 168: 
11561: 11473: 11385: 169: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
11562: 11474: 11386: 170:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
11563: 11475: 11387: 171:    **Pixel Art Representation:**  
11564: 11476: 11388: 172:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
11565: 11477: 11389: 173: 
11566: 11478: 11390: 174: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
11567: 11479: 11391: 175:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
11568: 11480: 11392: 176:    **Pixel Art Representation:**  
11569: 11481: 11393: 177:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
11570: 11482: 11394: 178: 
11571: 11483: 11395: 179: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
11572: 11484: 11396: 180:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
11573: 11485: 11397: 181:    **Pixel Art Representation:**  
11574: 11486: 11398: 182:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
11575: 11487: 11399: 183: 
11576: 11488: 11400: 184: 7. **🦸‍♂️✨ Superman (Down, Down)**  
11577: 11489: 11401: 185:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
11578: 11490: 11402: 186:    **Pixel Art Representation:**  
11579: 11491: 11403: 187:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
11580: 11492: 11404: 188: 
11581: 11493: 11405: 189: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
11582: 11494: 11406: 190:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
11583: 11495: 11407: 191:    **Pixel Art Representation:**  
11584: 11496: 11408: 192:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
11585: 11497: 11409: 193: 
11586: 11498: 11410: 194: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
11587: 11499: 11411: 195:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
11588: 11500: 11412: 196:    **Pixel Art Representation:**  
11589: 11501: 11413: 197:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
11590: 11502: 11414: 198: 
11591: 11503: 11415: 199: 10. **👻🔥 Ghost Rider (Left, Right)**  
11592: 11504: 11416: 200:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
11593: 11505: 11417: 201:     **Pixel Art Representation:**  
11594: 11506: 11418: 202:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
11595: 11507: 11419: 203: 
11596: 11508: 11420: 204: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
11597: 11509: 11421: 205:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
11598: 11510: 11422: 206:     **Pixel Art Representation:**  
11599: 11511: 11423: 207:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
11600: 11512: 11424: 208: 
11601: 11513: 11425: 209: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
11602: 11514: 11426: 210:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
11603: 11515: 11427: 211:     **Pixel Art Representation:**  
11604: 11516: 11428: 212:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
11605: 11517: 11429: 213: 
11606: 11518: 11430: 214: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
11607: 11519: 11431: 215:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
11608: 11520: 11432: 216:     **Pixel Art Representation:**  
11609: 11521: 11433: 217:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
11610: 11522: 11434: 218: 
11611: 11523: 11435: 219: 14. **✨⬆️ Falling Star (Down, Up)**  
11612: 11524: 11436: 220:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
11613: 11525: 11437: 221:     **Pixel Art Representation:**  
11614: 11526: 11438: 222:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
11615: 11527: 11439: 223: 
11616: 11528: 11440: 224: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
11617: 11529: 11441: 225:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
11618: 11530: 11442: 226:     **Pixel Art Representation:**  
11619: 11531: 11443: 227:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
11620: 11532: 11444: 228: 
11621: 11533: 11445: 229: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
11622: 11534: 11446: 230:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
11623: 11535: 11447: 231:     **Pixel Art Representation:**  
11624: 11536: 11448: 232:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
11625: 11537: 11449: 233: 
11626: 11538: 11450: 234: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
11627: 11539: 11451: 235: 
11628: 11540: 11452: 236: ---
11629: 11541: 11453: 237: 
11630: 11542: 11454: 238: ## 🔧 **Upgrade System**
11631: 11543: 11455: 239: 
11632: 11544: 11456: 240: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
11633: 11545: 11457: 241: | Upgrade                    | Effect                                             |
11634: 11546: 11458: 242: |----------------------------|----------------------------------------------------|
11635: 11547: 11459: 243: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
11636: 11548: 11460: 244: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
11637: 11549: 11461: 245: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
11638: 11550: 11462: 246: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
11639: 11551: 11463: 247: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
11640: 11552: 11464: 248: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
11641: 11553: 11465: 249: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
11642: 11554: 11466: 250: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
11643: 11555: 11467: 251: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
11644: 11556: 11468: 252: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
11645: 11557: 11469: 253: 
11646: 11558: 11470: 254: ---
11647: 11559: 11471: 255: 
11648: 11560: 11472: 256: ### 🏔️ Mountain Upgrades (Resort Expansion)
11649: 11561: 11473: 257: | Upgrade                        | Effect                                                         |
11650: 11562: 11474: 258: |--------------------------------|----------------------------------------------------------------|
11651: 11563: 11475: 259: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
11652: 11564: 11476: 260: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
11653: 11565: 11477: 261: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
11654: 11566: 11478: 262: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
11655: 11567: 11479: 263: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
11656: 11568: 11480: 264: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
11657: 11569: 11481: 265: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
11658: 11570: 11482: 266: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
11659: 11571: 11483: 267: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
11660: 11572: 11484: 268: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
11661: 11573: 11485: 269: 
11662: 11574: 11486: 270: ---
11663: 11575: 11487: 271: 
11664: 11576: 11488: 272: ## ⚖️ **Game Balance & Tweakable Variables**
11665: 11577: 11489: 273: All these are stored in the **TWEAK object** for easy adjustments:
11666: 11578: 11490: 274: - Wildlife spawn times (min/max).
11667: 11579: 11491: 275: - Wildlife **sit duration** (min/max).
11668: 11580: 11492: 276: - Moving animal multiplier.
11669: 11581: 11493: 277: - Camera **POV cone size**.
11670: 11582: 11494: 278: - **Time trial activator frequency** & bonuses.
11671: 11583: 11495: 279: - **Stamina drain rates**.
11672: 11584: 11496: 280: - **Mountain regeneration rules**.
11673: 11585: 11497: 281: - **Trick scoring multipliers**.
11674: 11586: 11498: 282: - **Photograph accuracy bonuses**. 
11675: 11587: 11499: 283: 
11676: 11588: 11500: 284: **Progression Goals:**  
11677: 11589: 11501: 285: - **Prototype:** Repay the cost of the mountain.  
11678: 11590: 11502: 286: - **Full Game:**  
11679: 11591: 11503: 287:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
11680: 11592: 11504: 288:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
11681: 11593: 11505: 289:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
11682: 11594: 11506: 290:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
11683: 11595: 11507: 291: 
11684: 11596: 11508: 292: ---
11685: 11597: 11509: 293: 
11686: 11598: 11510: 294: ## 🏔️ **Mountain Themes & Progression**
11687: 11599: 11511: 295: 
11688: 11600: 11512: 296: ### Lava Mountain 🌋
11689: 11601: 11513: 297: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
11690: 11602: 11514: 298: - **Mechanics:**  
11691: 11603: 11515: 299:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
11692: 11604: 11516: 300:   - **Ash Clouds:** Temporarily block visibility.
11693: 11605: 11517: 301: - **Power-Up:** **Heat Shielding Sled Coating**  
11694: 11606: 11518: 302:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
11695: 11607: 11519: 303: 
11696: 11608: 11520: 304: ---
11697: 11609: 11521: 305: 
11698: 11610: 11522: 306: ### Space Mountain 🌌
11699: 11611: 11523: 307: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
11700: 11612: 11524: 308: - **Mechanics:**  
11701: 11613: 11525: 309:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
11702: 11614: 11526: 310:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
11703: 11615: 11527: 311: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
11704: 11616: 11528: 312:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
11705: 11617: 11529: 313: 
11706: 11618: 11530: 314: ---
11707: 11619: 11531: 315: 
11708: 11620: 11532: 316: ### Underwater Mountain 🌊
11709: 11621: 11533: 317: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
11710: 11622: 11534: 318: - **Mechanics:**  
11711: 11623: 11535: 319:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
11712: 11624: 11536: 320: - **Power-Up:** **Aqua-Lung Mittens**  
11713: 11625: 11537: 321:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
11714: 11626: 11538: 322: 
11715: 11627: 11539: 323: ---
11716: 11628: 11540: 324: 
11717: 11629: 11541: 325: ### Garbage Dump Glacier 🗑️❄️
11718: 11630: 11542: 326: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
11719: 11631: 11543: 327: - **Mechanics:**  
11720: 11632: 11544: 328:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
11721: 11633: 11545: 329: - **Power-Up:** **Slick Wax Spray**  
11722: 11634: 11546: 330:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
11723: 11635: 11547: 331: 
11724: 11636: 11548: 332: ---
11725: 11637: 11549: 333: 
11726: 11638: 11550: 334: ### Micro Mountain 🐜🌱
11727: 11639: 11551: 335: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
11728: 11640: 11552: 336: - **Mechanics:**  
11729: 11641: 11553: 337:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
11730: 11642: 11554: 338: - **Power-Up:** **Antigrav Wax**  
11731: 11643: 11555: 339:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
11732: 11644: 11556: 340: 
11733: 11645: 11557: 341: ---
11734: 11646: 11558: 342: 
11735: 11647: 11559: 343: ### Candy Cane Canyon 🍭
11736: 11648: 11560: 344: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
11737: 11649: 11561: 345: - **Mechanics:**  
11738: 11650: 11562: 346:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
11739: 11651: 11563: 347: - **Power-Up:** **Sweet-Tooth Coating**  
11740: 11652: 11564: 348:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
11741: 11653: 11565: 349: 
11742: 11654: 11566: 350: ---
11743: 11655: 11567: 351: 
11744: 11656: 11568: 352: ### Crystal Cave Cavern 🔮
11745: 11657: 11569: 353: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
11746: 11658: 11570: 354: - **Mechanics:**  
11747: 11659: 11571: 355:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
11748: 11660: 11572: 356: - **Power-Up:** **Crystal Clear Goggles**  
11749: 11661: 11573: 357:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
11750: 11662: 11574: 358: 
11751: 11663: 11575: 359: ---
11752: 11664: 11576: 360: 
11753: 11665: 11577: 361: ### Haunted Graveyard Hill 👻
11754: 11666: 11578: 362: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
11755: 11667: 11579: 363: - **Mechanics:**  
11756: 11668: 11580: 364:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
11757: 11669: 11581: 365: - **Power-Up:** **Spirit Lantern**  
11758: 11670: 11582: 366:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
11759: 11671: 11583: 367: 
11760: 11672: 11584: 368: ---
11761: 11673: 11585: 369: 
11762: 11674: 11586: 370: ### Sky Jellyfish Mountain ☁️🪼
11763: 11675: 11587: 371: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
11764: 11676: 11588: 372: - **Mechanics:**  
11765: 11677: 11589: 373:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
11766: 11678: 11590: 374: - **Power-Up:** **Stabilizer Sled Rails**  
11767: 11679: 11591: 375:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
11768: 11680: 11592: 376: 
11769: 11681: 11593: 377: ---
11770: 11682: 11594: 378: 
11771: 11683: 11595: 379: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
11772: 11684: 11596: 380: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
11773: 11685: 11597: 381: - **Mechanics:**  
11774: 11686: 11598: 382:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
11775: 11687: 11599: 383: - **Power-Up:** **Clockwork Treads**  
11776: 11688: 11600: 384:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
11777: 11689: 11601: 385: 
11778: 11690: 11602: 386: ---
11779: 11691: 11603: 387: 
11780: 11692: 11604: 388: ### Pyramid Peak 🐫🏜️
11781: 11693: 11605: 389: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
11782: 11694: 11606: 390: - **Mechanics:**  
11783: 11695: 11607: 391:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
11784: 11696: 11608: 392: - **Power-Up:** **Sandrunner Skis**  
11785: 11697: 11609: 393:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
11786: 11698: 11610: 394: 
11787: 11699: 11611: 395: ---
11788: 11700: 11612: 396: 
11789: 11701: 11613: 397: ### Digital Mountain (Cyber Slopes) 💻🔮
11790: 11702: 11614: 398: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
11791: 11703: 11615: 399: - **Mechanics:**  
11792: 11704: 11616: 400:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
11793: 11705: 11617: 401: - **Power-Up:** **Data Shielding**  
11794: 11706: 11618: 402:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
11795: 11707: 11619: 403: 
11796: 11708: 11620: 404: ---
11797: 11709: 11621: 405: 
11798: 11710: 11622: 406: ## 🎮 **Mini-Games in SledHEAD**
11799: 11711: 11623: 407: 
11800: 11712: 11624: 408: ### 1. **Animal Photography** 📸🐾
11801: 11713: 11625: 409: - **Objective:**  
11802: 11714: 11626: 410:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
11803: 11715: 11627: 411: - **Mechanics:**  
11804: 11716: 11628: 412:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
11805: 11717: 11629: 413:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
11806: 11718: 11630: 414:   - **Scoring Bonuses:**  
11807: 11719: 11631: 415:     - **Altitude Match Multiplier**  
11808: 11720: 11632: 416:     - **POV Centering Bonus**  
11809: 11721: 11633: 417:     - **Speed Capture Bonus**  
11810: 11722: 11634: 418: - **Upgrades:**  
11811: 11723: 11635: 419:   - **Optimal Optics:** Increases the camera’s POV cone.  
11812: 11724: 11636: 420:   - **Steady Hands:** Reduces camera sway.  
11813: 11725: 11637: 421:   - **Animal Baiting:** Increases rare animal appearance.
11814: 11726: 11638: 422: - **Special Events:**  
11815: 11727: 11639: 423:   - **Rare Animal Sightings** and **Storm Photography**.
11816: 11728: 11640: 424: - **Risk/Challenge:**  
11817: 11729: 11641: 425:   - **Repeat Photo Penalty** and aggressive animal disruptions.
11818: 11730: 11642: 426: 
11819: 11731: 11643: 427: ---
11820: 11732: 11644: 428: 
11821: 11733: 11645: 429: ### 2. **Fishing** 🎣🐟  
11822: 11734: 11646: 430: - **Objective:**  
11823: 11735: 11647: 431:   Catch fish using various techniques and bait types.
11824: 11736: 11648: 432: - **Mechanics:**  
11825: 11737: 11649: 433:   - Dynamic water simulation with varied fish behaviors.  
11826: 11738: 11650: 434:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
11827: 11739: 11651: 435:   - Legendary fish yield major rewards.
11828: 11740: 11652: 436: - **Upgrades:**  
11829: 11741: 11653: 437:   - Stronger fishing lines, advanced lures, and sonar detection.
11830: 11742: 11654: 438: - **Special Events:**  
11831: 11743: 11655: 439:   - Fishing tournaments and rare migration patterns.
11832: 11744: 11656: 440: - **Risk/Challenge:**  
11833: 11745: 11657: 441:   - Line snapping and predator interference.
11834: 11746: 11658: 442: 
11835: 11747: 11659: 443: ---
11836: 11748: 11660: 444: 
11837: 11749: 11661: 445: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
11838: 11750: 11662: 446: - **Objective:**  
11839: 11751: 11663: 447:   Unlock doors, safes, and hidden compartments.
11840: 11752: 11664: 448: - **Mechanics:**  
11841: 11753: 11665: 449:   - Use tools like **rakes, hooks, and tension wrenches**.  
11842: 11754: 11666: 450:   - Navigate traps such as alarms and rusted internals.
11843: 11755: 11667: 451: - **Upgrades:**  
11844: 11756: 11668: 452:   - High-quality picks, electronic bypass tools, and vibration sensors.
11845: 11757: 11669: 453: - **Special Events:**  
11846: 11758: 11670: 454:   - Timed heists and races with rival scavengers.
11847: 11759: 11671: 455: - **Risk/Challenge:**  
11848: 11760: 11672: 456:   - Unstable buildings and hazards that may alert authorities.
11849: 11761: 11673: 457: 
11850: 11762: 11674: 458: ---
11851: 11763: 11675: 459: 
11852: 11764: 11676: 460: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
11853: 11765: 11677: 461: - **Objective:**  
11854: 11766: 11678: 462:   Find buried treasure using maps, clues, and metal detectors.
11855: 11767: 11679: 463: - **Mechanics:**  
11856: 11768: 11680: 464:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
11857: 11769: 11681: 465:   - Digging requires stamina management and upgraded tools.
11858: 11770: 11682: 466: - **Upgrades:**  
11859: 11771: 11683: 467:   - Advanced metal detectors, excavation tools, and digging drones.
11860: 11772: 11684: 468: - **Special Events:**  
11861: 11773: 11685: 469:   - NPC treasure races and secret cache discoveries.
11862: 11774: 11686: 470: - **Risk/Challenge:**  
11863: 11775: 11687: 471:   - Booby traps, hostile environments, and law enforcement risks.
11864: 11776: 11688: 472: 
11865: 11777: 11689: 473: ---
11866: 11778: 11690: 474: 
11867: 11779: 11691: 475: ### 5. **Kite Flying** 🪁🌬️  
11868: 11780: 11692: 476: - **Objective:**  
11869: 11781: 11693: 477:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
11870: 11782: 11694: 478: - **Mechanics:**  
11871: 11783: 11695: 479:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
11872: 11784: 11696: 480:   - **Downhill:** Kites extend air time and grant special bonuses.
11873: 11785: 11697: 481: - **Upgrades:**  
11874: 11786: 11698: 482:   - **Glide Boost, Speed Stream, and Aero Control.**
11875: 11787: 11699: 483: - **Special Events:**  
11876: 11788: 11700: 484:   - **Storm Riding** with higher boosts but riskier winds.
11877: 11789: 11701: 485: - **Risk/Challenge:**  
11878: 11790: 11702: 486:   - Strong gusts may destabilize your kite.
11879: 11791: 11703: 487: 
11880: 11792: 11704: 488: ---
11881: 11793: 11705: 489: 
11882: 11794: 11706: 490: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
11883: 11795: 11707: 491: - **Objective:**  
11884: 11796: 11708: 492:   Search for valuable minerals, gems, and gold.
11885: 11797: 11709: 493: - **Mechanics:**  
11886: 11798: 11710: 494:   - Explore rivers, caves, and rock formations.  
11887: 11799: 11711: 495:   - **Panning:** Swirl water to separate gold.  
11888: 11800: 11712: 496:   - **Pickaxe Mining:** Break rocks for hidden gems.
11889: 11801: 11713: 497: - **Upgrades:**  
11890: 11802: 11714: 498:   - High-tech panning kits, seismic scanners, precision drills.
11891: 11803: 11715: 499: - **Special Events:**  
11892: 11804: 11716: 500:   - Gold rush hotspots, rare mineral finds, and cave-ins.
11893: 11805: 11717: 501: - **Risk/Challenge:**  
11894: 11806: 11718: 502:   - Unstable ground and rival prospectors.
11895: 11807: 11719: 503: 
11896: 11808: 11720: 504: ---
11897: 11809: 11721: 505: 
11898: 11810: 11722: 506: ### 7. **Cryptid Fossil Digging** 🦴🔍  
11899: 11811: 11723: 507: - **Objective:**  
11900: 11812: 11724: 508:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
11901: 11813: 11725: 509: - **Mechanics:**  
11902: 11814: 11726: 510:   - Use brushes, chisels, and excavation tools to reveal fossils.  
11903: 11815: 11727: 511:   - Transport fossils to the museum at the base of the first mountain.
11904: 11816: 11728: 512: - **Upgrades:**  
11905: 11817: 11729: 513:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
11906: 11818: 11730: 514: - **Special Events:**  
11907: 11819: 11731: 515:   - Competing paleontologists and hidden dig sites.
11908: 11820: 11732: 516: - **Risk/Challenge:**  
11909: 11821: 11733: 517:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
11910: 11822: 11734: 518: 
11911: 11823: 11735: 519: ---
11912: 11824: 11736: 520: 
11913: 11825: 11737: 521: ### 8. **Sled Tricking** 🛷✨  
11914: 11826: 11738: 522: - **Objective:**  
11915: 11827: 11739: 523:   Chain together aerial sled tricks to earn cash and boost fan engagement.
11916: 11828: 11740: 524: - **Mechanics:**  
11917: 11829: 11741: 525:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
11918: 11830: 11742: 526:   - Chain tricks for higher multipliers.
11919: 11831: 11743: 527: - **Upgrades:**  
11920: 11832: 11744: 528:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
11921: 11833: 11745: 529: - **Special Events:**  
11922: 11834: 11746: 530:   - Trick challenges and fan-requested stunt competitions.
11923: 11835: 11747: 531: - **Risk/Challenge:**  
11924: 11836: 11748: 532:   - Mistimed tricks can cause crashes and loss of earnings.
11925: 11837: 11749: 533: 
11926: 11838: 11750: 534: ---
11927: 11839: 11751: 535: 
11928: 11840: 11752: 536: ### 9. **Time Trial Racing** 🏁🛷  
11929: 11841: 11753: 537: - **Objective:**  
11930: 11842: 11754: 538:   Trigger time trial races by hitting gates while sledding for money rewards.
11931: 11843: 11755: 539: - **Mechanics:**  
11932: 11844: 11756: 540:   - Crossing a time trial gate starts a timer.  
11933: 11845: 11757: 541:   - The faster and further you go, the more money you earn.
11934: 11846: 11758: 542: - **Why It Fits:**  
11935: 11847: 11759: 543:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
11936: 11848: 11760: 544: 
11937: 11849: 11761: 545: ---
11938: 11850: 11762: 546: 
11939: 11851: 11763: 547: ### 10. **RC Motor Sled** ❄️🏎️  
11940: 11852: 11764: 548: - **Objective:**  
11941: 11853: 11765: 549:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
11942: 11854: 11766: 550: - **Mechanics:**  
11943: 11855: 11767: 551:   - Maneuver nimble RC sleds across frozen tundra.  
11944: 11856: 11768: 552:   - Nitro boosts and mid-air tricks enhance performance.  
11945: 11857: 11769: 553:   - Customization options include different sled bodies, engines, and handling upgrades.
11946: 11858: 11770: 554: - **Special Events:**  
11947: 11859: 11771: 555:   - Avalanche races, night rides, and hazard runs.
11948: 11860: 11772: 556: - **Risk/Challenge:**  
11949: 11861: 11773: 557:   - Limited battery life, high winds, and signal loss in deep snow.
11950: 11862: 11774: 558: 
11951: 11863: 11775: 559: ## 🏔️ **NPCs & Mountain Town Ecosystem**
11952: 11864: 11776: 560: SledHEAD’s world is filled with **unique characters** who contribute to your journey as a **trick-riding, fan-growing, upgrade-building, sled-stunting** legend. Some run the town, some enhance your sledding skills, and others add depth to the **roguelike adventure**.
11953: 11865: 11777: 561: 
11954: 11866: 11778: 562: ---
11955: 11867: 11779: 563: 
11956: 11868: 11780: 564: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
11957: 11869: 11781: 565: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
11958: 11870: 11782: 566: 
11959: 11871: 11783: 567: #### 🏂 **The Sled Tech (Sled Repairs & Mods)**
11960: 11872: 11784: 568: - **Purpose:** Repairs damage, sells sled mods.
11961: 11873: 11785: 569: - **Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
11962: 11874: 11786: 570: - **Best Quote:** “What’d ya do, run into a moose? I can fix it… for a price.”
11963: 11875: 11787: 571: 
11964: 11876: 11788: 572: #### 🍔 **The Food Vendor (Buffs & Endurance Recovery)**
11965: 11877: 11789: 573: - **Purpose:** Sells food that restores stamina and gives **temporary buffs** for sledding.
11966: 11878: 11790: 574: - **Best Quote:** “Hot cocoa makes you go faster, I swear. Try it.”
11967: 11879: 11791: 575: 
11968: 11880: 11792: 576: #### 🎥 **The Stream Manager (Audience Growth & Sponsorships)**
11969: 11881: 11793: 577: - **Purpose:** Manages your in-game audience; unlocks **sponsorship deals**.
11970: 11882: 11794: 578: - **Best Quote:** “If you don’t clip the trick, did you even land it?”
11971: 11883: 11795: 579: 
11972: 11884: 11796: 580: #### 🏁 **The Race Commissioner (Tournaments & Time Trials)**
11973: 11885: 11797: 581: - **Purpose:** Hosts **time trials, speedrun events, and competitive circuits**.
11974: 11886: 11798: 582: - **Best Quote:** “Half a second off the record? C’mon, I thought you were good.”
11975: 11887: 11799: 583: 
11976: 11888: 11800: 584: #### 🚠 **The Lift Operator (Ski Lift & Shortcut Unlocks)**
11977: 11889: 11801: 585: - **Purpose:** Lets you **unlock ski lifts** for quicker uphill trips.
11978: 11890: 11802: 586: - **Upgrades Unlocked:** **Gondola expansions, VIP lift passes.**
11979: 11891: 11803: 587: - **Best Quote:** “Sure, you could walk… or you could bribe me.”
11980: 11892: 11804: 588: 
11981: 11893: 11805: 589: ---
11982: 11894: 11806: 590: 
11983: 11895: 11807: 591: ### 💨 **Trick & Racing-Oriented NPCs (For Stunts, Style, & Money)**
11984: 11896: 11808: 592: These folks help you **push your limits**, pull off **sick tricks**, and **maximize profits**.
11985: 11897: 11809: 593: 
11986: 11898: 11810: 594: #### 🎿 **The Trick Trainer (Advanced Trick Lessons)**
11987: 11899: 11811: 595: - **Purpose:** Unlocks **trick combos & advanced air control.**
11988: 11900: 11812: 596: - **Best Quote:** “No guts, no glory. You wanna spin faster? Listen up.”
11989: 11901: 11813: 597: 
11990: 11902: 11814: 598: #### 📸 **The Hype Photographer (Proof-Based Challenges & Bonus Money)**
11991: 11903: 11815: 599: - **Purpose:** **Trick verification & photography mini-games**.
11992: 11904: 11816: 600: - **Upgrades Unlocked:** **Slow-mo replays, sponsorship boosts for sick shots.**
11993: 11905: 11817: 601: - **Best Quote:** “A trick’s only worth money if people see it.”
11994: 11906: 11818: 602: 
11995: 11907: 11819: 603: #### 💰 **The Black Market Gear Dealer (Risky Upgrades & Illegal Mods)**
11996: 11908: 11820: 604: - **Purpose:** Sells **risky sled tech** (illegal nitro boosts, magnetized rails for grinds).
11997: 11909: 11821: 605: - **Upgrades Unlocked:** **Unstable overclocked sled parts**.
11998: 11910: 11822: 606: - **Best Quote:** “No refunds. Don’t ask what’s in it.”
11999: 11911: 11823: 607: 
12000: 11912: 11824: 608: #### 🤡 **The Stunt Organizer (Jackass-Style Events & Side Hustles)**
12001: 11913: 11825: 609: - **Purpose:** Hosts **insane trick challenges** with **huge risk & reward**.
12002: 11914: 11826: 610: - **Best Quote:** “Land a quadruple flip, and I’ll give you something real nice.”
12003: 11915: 11827: 611: 
12004: 11916: 11828: 612: ---
12005: 11917: 11829: 613: 
12006: 11918: 11830: 614: ### 🌎 **Worldbuilding NPCs (Exploration, Hidden Routes, & Fan Engagement)**
12007: 11919: 11831: 615: These folks **expand the world** and **give reasons to explore**.
12008: 11920: 11832: 616: 
12009: 11921: 11833: 617: #### ⛷️ **The Retired Pro (Hidden Sledding Routes & Legend Quests)**
12010: 11922: 11834: 618: - **Purpose:** Tells **lore, hidden trails, and backstory of previous champions.**
12011: 11923: 11835: 619: - **Upgrades Unlocked:** **Secret mountain shortcuts & sled blueprints.**
12012: 11924: 11836: 620: - **Best Quote:** “Before you, there was someone else. And he disappeared.”
12013: 11925: 11837: 621: 
12014: 11926: 11838: 622: #### 🦊 **The Wildlife Researcher (Animal Photography & Rare Fan Unlocks)**
12015: 11927: 11839: 623: - **Purpose:** Ties into **wildlife photography mini-games**.
12016: 11928: 11840: 624: - **Upgrades Unlocked:** **Animal-based sled skins & rare sponsor deals.**
12017: 11929: 11841: 625: - **Best Quote:** “Snow leopards? They’re watching you, too.”
12018: 11930: 11842: 626: 
12019: 11931: 11843: 627: #### 📡 **The Event Broadcaster (Commentary & Competitive Meta)**
12020: 11932: 11844: 628: - **Purpose:** Gives **updates on leaderboards, rival NPCs, and changing conditions**.
12021: 11933: 11845: 629: - **Upgrades Unlocked:** **"Breaking News" reports on your achievements.**
12022: 11934: 11846: 630: - **Best Quote:** “The fans are watching, buddy. Make it count.”
12023: 11935: 11847: 631: 
12024: 11936: 11848: 632: ---
12025: 11937: 11849: 633: 
12026: 11938: 11850: 634: ### 🛤️ **The Travel-Ready NPCs (Appear Across Multiple Mountains)**
12027: 11939: 11851: 635: They **don’t just stay in one place**—you’ll run into them as you unlock new peaks.
12028: 11940: 11852: 636: 
12029: 11941: 11853: 637: #### 🎭 **The Rival (Dynamic Trick & Time Trial Duels)**
12030: 11942: 11854: 638: - **Purpose:** Appears on any unlocked mountain to **challenge your records**.
12031: 11943: 11855: 639: - **Best Quote:** “Your best time? That’s cute.”
12032: 11944: 11856: 640: 
12033: 11945: 11857: 641: #### 🛠️ **The Tinkerer (Experimental Sled Mods)**
12034: 11946: 11858: 642: - **Purpose:** Sells **unstable, high-risk sled modifications**.
12035: 11947: 11859: 643: - **Upgrades Unlocked:** **Prototype sled tech.**
12036: 11948: 11860: 644: - **Best Quote:** “This is 50% science and 50% dumb luck.”
12037: 11949: 11861: 645: 
12038: 11950: 11862: 646: #### 🎩 **The Mysterious Merchant (Random Legendary Gear)**
12039: 11951: 11863: 647: - **Purpose:** Appears randomly, selling **rare sleds & gear**.
12040: 11952: 11864: 648: - **Best Quote:** “You don’t know what you need… until you see it.”
12041: 11953: 11865: 649: 
12042: 11954: 11866: 650: ---
12043: 11955: 11867: 651: 
12044: 11956: 11868: 652: ### 🎭 **The Wild Cards (Weird & Legendary NPCs)**
12045: 11957: 11869: 653: These folks are **just strange**, but they add **flavor, mystery, and unpredictability**.
12046: 11958: 11870: 654: 
12047: 11959: 11871: 655: #### 👻 **The Ghost of the Mountain (Phantom Races & Haunted Challenges)**
12048: 11960: 11872: 656: - **Purpose:** Unlocks **ghost time trials & haunted trick courses**.
12049: 11961: 11873: 657: - **Best Quote:** “You ride my path, you race my shadow.”
12050: 11962: 11874: 658: 
12051: 11963: 11875: 659: #### 🧙‍♂️ **The Winter Shaman (Weather Manipulation & Magic Sleds)**
12052: 11964: 11876: 660: - **Purpose:** **Controls mountain weather** for harder/easier runs.
12053: 11965: 11877: 661: - **Best Quote:** “Blizzards make legends.”
12054: 11966: 11878: 662: 
12055: 11967: 11879: 663: #### 🐻 **The Bear Whisperer (Bear Sled Racing Mini-Game)**
12056: 11968: 11880: 664: - **Purpose:** Lets you **race against trained bears** for money.
12057: 11969: 11881: 665: - **Best Quote:** “You sled. They sled. Only one wins.”
12058: 11970: 11882: 666: 
12059: 11971: 11883: 667: #### 🥶 **The Ice Sculptor (Sled Cosmetics & Customization)**
12060: 11972: 11884: 668: - **Purpose:** Crafts **one-of-a-kind sled designs**.
12061: 11973: 11885: 669: - **Best Quote:** “Your ride should be a masterpiece.”
12062: 11974: 11886: 670: 
12063: 11975: 11887: 671: #### 🔮 **The Time Traveler (Future & Past Sled Tech)**
12064: 11976: 11888: 672: - **Purpose:** Unlocks **anachronistic sled models** (steampunk, cyberpunk, caveman logs).
12065: 11977: 11889: 673: - **Best Quote:** “The future’s fast. The past is brutal.”
12066: 11978: 11890: 674: 
12067: 11979: 11891: 675: ---
12068: 11980: 11892: 676: 
12069: 11981: 11893: 677: ## **🏔️ Final Thoughts**
12070: 11982: 11894: 678: This crew **perfectly balances**:
12071: 11983: 11895: 679: ✅ **Core game economy & upgrades**  
12072: 11984: 11896: 680: ✅ **High-speed trick-focused gameplay**  
12073: 11985: 11897: 681: ✅ **Exploration & hidden content**  
12074: 11986: 11898: 682: ✅ **Hilarious but valuable side NPCs**  
12075: 11987: 11899: 683: 
12076: 11988: 11900: 684: These **NPCs make the town feel alive, push competitive play, and add world depth**. Get ready to **build, race, trick, and explore** with this **cast of unforgettable characters**.
12077: 11989: 11901: ``````
12078: 11990: 11902: 
12079: 11991: 11903: ## File: docs/CONTROLS.md
12080: 11992: 11904: ``````markdown
12081: 11993: 11905:   1: # SledHEAD Game Controls
12082: 11994: 11906:   2: 
12083: 11995: 11907:   3: ## 🎯 Game Overview
12084: 11996: 11908:   4: 
12085: 11997: 11909:   5: SledHEAD is an **arcade-style sledding game** where you play as an **aspiring sledding champion & content creator** who has purchased an entire procedurally generated mountain. Your goal is to master the mountain through optimized sled runs, perform spectacular aerial tricks, photograph elusive wildlife, and earn money to upgrade your equipment and pay off your mountain loan.
12086: 11998: 11910:   6: 
12087: 11999: 11911:   7: The game consists of three distinct phases:
12088: 12000: 11912:   8: 
12089: 12001: 11913:   9: 1. **⬆️ Uphill/Climbing Phase** - Navigate uphill to find the perfect starting position, manage your stamina, and photograph wildlife
12090: 12002: 11914:  10: 2. **⬇️ Downhill/Sledding Phase** - Race down the mountain, performing tricks and avoiding obstacles
12091: 12003: 11915:  11: 3. **🏠 Management Phase** - Spend your earnings on upgrades for your equipment and mountain infrastructure
12092: 12004: 11916:  12: 
12093: 12005: 11917:  13: ---
12094: 12006: 11918:  14: 
12095: 12007: 11919:  15: ## 🎮 Core Controls
12096: 12008: 11920:  16: 
12097: 12009: 11921:  17: ### ⬆️ Uphill/Climbing Phase Controls
12098: 12010: 11922:  18: 
12099: 12011: 11923:  19: | Input | Action |
12100: 12012: 11924:  20: |-------|--------|
12101: 12013: 11925:  21: | **W/A/S/D** | Move the player up/left/down/right across the mountain |
12102: 12014: 11926:  22: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line for photography |
12103: 12015: 11927:  23: | **Spacebar** | Take a photograph when an animal is in view & the altitude line is rapidly flashing|
12104: 12016: 11928:  24: | **E** | [Debug] Manually spawn an animal for testing |
12105: 12017: 11929:  25: 
12106: 12018: 11930:  26: During the uphill phase, you'll:
12107: 12019: 11931:  27: - Navigate the mountain terrain to find optimal starting points
12108: 12020: 11932:  28: - Manage your stamina (which depletes while climbing)
12109: 12021: 11933:  29: - Photograph wildlife to earn additional money
12110: 12022: 11934:  30: - Look for shortcuts and strategic positions for your downhill run
12111: 12023: 11935:  31: 
12112: 12024: 11936:  32: ### ⬇️ Downhill/Sledding Phase Controls
12113: 12025: 11937:  33: 
12114: 12026: 11938:  34: | Input | Action |
12115: 12027: 11939:  35: |-------|--------|
12116: 12028: 11940:  36: | **Arrow Keys ←→** | Steer your sled left or right |
12117: 12029: 11941:  37: | **Spacebar** | Initiate jumps |
12118: 12030: 11942:  38: | **Arrow Keys** (during jumps) | Perform tricks (specific combinations detailed below) |
12119: 12031: 11943:  39: 
12120: 12032: 11944:  40: During downhill sledding, you'll:
12121: 12033: 11945:  41: - Build momentum and navigate the fastest route down
12122: 12034: 11946:  42: - Avoid obstacles like rocks, trees, and tourists
12123: 12035: 11947:  43: - Find and hit jumps to perform tricks
12124: 12036: 11948:  44: - Chain tricks together for bonus rewards
12125: 12037: 11949:  45: 
12126: 12038: 11950:  46: ### 🏠 Management (House & Upgrades) Controls
12127: 12039: 11951:  47: 
12128: 12040: 11952:  48: Navigate menus using mouse/keyboard to:
12129: 12041: 11953:  49: - Purchase equipment upgrades
12130: 12042: 11954:  50: - Expand mountain infrastructure 
12131: 12043: 11955:  51: - Track your earnings and loan payments
12132: 12044: 11956:  52: - Check your current mountain seed (for sharing great mountains!)
12133: 12045: 11957:  53: 
12134: 12046: 11958:  54: ---
12135: 12047: 11959:  55: 
12136: 12048: 11960:  56: ## ✨ Trick System
12137: 12049: 11961:  57: 
12138: 12050: 11962:  58: Perform these trick combinations during jumps to earn additional cash:
12139: 12051: 11963:  59: 
12140: 12052: 11964:  60: | Trick Name | Input Combination | Description |
12141: 12053: 11965:  61: |------------|-------------------|-------------|
12142: 12054: 11966:  62: | **🚁⬅️ Helicopter Spin Left** | Left, Left | Spin horizontally like a helicopter twirling left |
12143: 12055: 11967:  63: | **🚁➡️ Helicopter Spin Right** | Right, Right | Spin horizontally like a helicopter twirling right |
12144: 12056: 11968:  64: | **🪂 Parachute** | Up, Down | Hold sled overhead to slow descent and extend air time |
12145: 12057: 11969:  65: | **🛑 Air Brake** | Up, Up | Use sled as air brake to slow lateral speed |
12146: 12058: 11970:  66: 
12147: 12059: 11971:  67: **Trick Tips:**
12148: 12060: 11972:  68: - Successfully landing tricks earns money
12149: 12061: 11973:  69: - Chain tricks for bonus multipliers
12150: 12062: 11974:  70: - Be careful - attempting tricks without enough air time can result in crashes!
12151: 12063: 11975:  71: - Re-hitting jumps can extend combo chains
12152: 12064: 11976:  72: 
12153: 12065: 11977:  73: ---
12154: 12066: 11978:  74: 
12155: 12067: 11979:  75: ## 📸 Photography System Controls
12156: 12068: 11980:  76: 
12157: 12069: 11981:  77: | Control | Action |
12158: 12070: 11982:  78: |---------|--------|
12159: 12071: 11983:  79: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line |
12160: 12072: 11984:  80: | **Spacebar** | Take photo |
12161: 12073: 11985:  81: 
12162: 12074: 11986:  82: **Photography Tips:**
12163: 12075: 11987:  83: - Match the altitude line with the animal for maximum reward
12164: 12076: 11988:  84: - Animals that are moving yield higher rewards
12165: 12077: 11989:  85: - Each repeated photo of the same animal gives diminishing returns
12166: 12078: 11990:  86: - Upgrade your camera equipment to improve your photography income
12167: 12079: 11991:  87: 
12168: 12080: 11992:  88: ---
12169: 12081: 11993:  89: 
12170: 12082: 11994:  90: ## ⚙️ Advanced Mechanics
12171: 12083: 11995:  91: 
12172: 12084: 11996:  92: ### Stamina Management
12173: 12085: 11997:  93: - Stamina depletes during uphill climbing
12174: 12086: 11998:  94: - Return to the house to end your day and restore stamina
12175: 12087: 11999:  95: - Each day you will be charged 0.5% of your loan
12176: 12088: 12000:  96: - If you run out of stamina, you are immediately returned to the house, and charged 100*(houseReEntry*0.1)
12177: 12089: 12001:  97: - Upgrade your equipment to reduce stamina consumption
12178: 12090: 12002:  98: 
12179: 12091: 12003:  99: ### Collision Handling
12180: 12092: 12004: 100: - Collisions with obstacles slow you down and may cause crashes
12181: 12093: 12005: 101: - Upgrade sled durability to withstand more collisions
12182: 12094: 12006: 102: - Each crash reduces your potential earnings
12183: 12095: 12007: 103: 
12184: 12096: 12008: 104: ### Upgrade System
12185: 12097: 12009: 105: Spend your earnings on:
12186: 12098: 12010: 106: - **Rocket Surgery**: Increases speed and jump dynamics
12187: 12099: 12011: 107: - **Optimal Optics**: Improves camera angle and accuracy
12188: 12100: 12012: 108: - **Sled Durability**: Increases collision tolerance
12189: 12101: 12013: 109: - **Fancier Footwear**: Improves uphill movement speed
12190: 12102: 12014: 110: 
12191: 12103: 12015: 111: ### Win Condition
12192: 12104: 12016: 112: - Pay off your mountain loan to trigger the victory state
12193: 12105: 12017: 113: - Challenge yourself to complete this with fewer runs!
12194: 12106: 12018: ``````
12195: 12107: 12019: 
12196: 12108: 12020: ## File: docs/README.md
12197: 12109: 12021: ``````markdown
12198: 12110: 12022:   1: # **SledHEAD**  
12199: 12111: 12023:   2: **Genre:** Trick & Time Trial Racer | Adventure  
12200: 12112: 12024:   3: **Platform:** Web-based (PC)  
12201: 12113: 12025:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
12202: 12114: 12026:   5: 
12203: 12115: 12027:   6: > 🎮 **[Game Controls Guide](CONTROLS.md)** - Detailed explanation of all game controls and mechanics
12204: 12116: 12028:   7: 
12205: 12117: 12029:   8: ---
12206: 12118: 12030:   9: 
12207: 12119: 12031:  10: ## Table of Contents  
12208: 12120: 12032:  11: 1. [Core Concept](#core-concept)  
12209: 12121: 12033:  12: 2. [Gameplay Loops](#gameplay-loops)  
12210: 12122: 12034:  13:    - [Sledding Phase (Downhill)](#sledding-phase-downhill)  
12211: 12123: 12035:  14:    - [Climbing Phase (Uphill)](#climbing-phase-uphill)  
12212: 12124: 12036:  15:    - [Management Phase (House & Upgrades)](#management-phase-house--upgrades)  
12213: 12125: 12037:  16: 3. [Trick System](#trick-system)  
12214: 12126: 12038:  17: 4. [Upgrade System](#upgrade-system)  
12215: 12127: 12039:  18: 5. [Photo System](#photo-system)  
12216: 12128: 12040:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)  
12217: 12129: 12041:  20: 
12218: 12130: 12042:  21: ---
12219: 12131: 12043:  22: 
12220: 12132: 12044:  23: ## 🎯 **Core Concept**  
12221: 12133: 12045:  24: You are an **aspiring sledding champion & content creator**, challenging yourself to master an enormous mountain. Your goal is to optimize sled runs, perform aerial tricks, and earn money by completing daring stunts and photographing wildlife.
12222: 12134: 12046:  25: 
12223: 12135: 12047:  26: ---
12224: 12136: 12048:  27: 
12225: 12137: 12049:  28: ## 🎮 **Gameplay Loops**  
12226: 12138: 12050:  29: 
12227: 12139: 12051:  30: ### ⬇️ **Sledding Phase (Downhill)**  
12228: 12140: 12052:  31: - **Speed & Gravity:** Race down the mountain, using gravity and momentum to your advantage.  
12229: 12141: 12053:  32: - **Perform Tricks:** Execute tricks mid-air to earn extra cash.  
12230: 12142: 12054:  33: - **Avoid Obstacles:** Rocks and other hazards can slow you down and increase collision counts.  
12231: 12143: 12055:  34: 
12232: 12144: 12056:  35: ### ⬆️ **Climbing Phase (Uphill)**  
12233: 12145: 12057:  36: - **Manual Return:** Use simple directional controls to climb back up the mountain.  
12234: 12146: 12058:  37: - **Camera Controls:** Rotate your camera and adjust the altitude line to prepare for wildlife photography.  
12235: 12147: 12059:  38: 
12236: 12148: 12060:  39: ### 🏠 **Management Phase (House & Upgrades)**  
12237: 12149: 12061:  40: - **Upgrade Equipment:** Use your earnings to purchase upgrades that improve your sledding, camera, and movement capabilities.  
12238: 12150: 12062:  41: - **Pay Off Loan:** Reduce your initial loan with the money you earn. Once it's fully repaid, you win!
12239: 12151: 12063:  42: 
12240: 12152: 12064:  43: ---
12241: 12153: 12065:  44: 
12242: 12154: 12066:  45: ## ✨ **Trick System**  
12243: 12155: 12067:  46: - Perform tricks during jumps to earn additional cash.  
12244: 12156: 12068:  47: - Tricks include:  
12245: 12157: 12069:  48:   - **Left Helicopter** (Rotate left mid-air)  
12246: 12158: 12070:  49:   - **Right Helicopter** (Rotate right mid-air)  
12247: 12159: 12071:  50:   - **Air Brake** (Apply aerial braking)  
12248: 12160: 12072:  51:   - **Parachute** (Deploy for controlled descent)  
12249: 12161: 12073:  52: - Tricks can be chained for bonus rewards, and re-hit jumps can extend combo chains.  
12250: 12162: 12074:  53: 
12251: 12163: 12075:  54: ---
12252: 12164: 12076:  55: 
12253: 12165: 12077:  56: ## 🔧 **Upgrade System**  
12254: 12166: 12078:  57: Upgrades enhance gameplay and include:
12255: 12167: 12079:  58: 
12256: 12168: 12080:  59: ### 🛷 **Personal Upgrades:**  
12257: 12169: 12081:  60: - **Rocket Surgery:** Increases speed and jump dynamics.  
12258: 12170: 12082:  61: - **Optimal Optics:** Improves camera angle and accuracy for better wildlife photography.  
12259: 12171: 12083:  62: - **Sled Durability:** Increases the number of collisions you can survive.  
12260: 12172: 12084:  63: - **Fancier Footwear:** Improves uphill movement speed.  
12261: 12173: 12085:  64: 
12262: 12174: 12086:  65: ### 🏔️ **Mountain Upgrades:**  
12263: 12175: 12087:  66: - **Ski Lifts:** (Planned but not yet implemented)  
12264: 12176: 12088:  67: - **Snowmobile Rentals:** (Planned but not yet implemented)  
12265: 12177: 12089:  68: - **Groomed Trails:** (Planned but not yet implemented)  
12266: 12178: 12090:  69: 
12267: 12179: 12091:  70: ---
12268: 12180: 12092:  71: 
12269: 12181: 12093:  72: ## 📸 **Photo System**  
12270: 12182: 12094:  73: - **Wildlife Spawning:** Bears and birds spawn during the uphill phase.  
12271: 12183: 12095:  74: - **Camera Use:** Adjust the camera angle and altitude line to capture the perfect shot.  
12272: 12184: 12096:  75: - **Scoring Factors:**  
12273: 12185: 12097:  76:   - **Altitude Matching:** Better alignment with animal altitude increases reward.  
12274: 12186: 12098:  77:   - **Centering:** Well-centered shots provide bonus payouts.  
12275: 12187: 12099:  78:   - **Movement Bonus:** Photographing moving animals yields more cash.  
12276: 12188: 12100:  79:   - **Repeat Penalty:** Avoid photographing the same animal multiple times for reduced penalties.  
12277: 12189: 12101:  80: 
12278: 12190: 12102:  81: ---
12279: 12191: 12103:  82: 
12280: 12192: 12104:  83: ## ⚙️ **Game Balance & Tweakable Variables**  
12281: 12193: 12105:  84: Key variables that control game mechanics and can be adjusted include:  
12282: 12194: 12106:  85: - **Jump Mechanics:** Height, duration, and zoom bonuses.  
12283: 12195: 12107:  86: - **Animal Behavior:** Spawn times, movement speed, and flee mechanics.  
12284: 12196: 12108:  87: - **Upgrade Costs & Effects:** Each upgrade scales in cost and effectiveness.  
12285: 12197: 12109:  88: - **Collision Handling:** How collisions are managed and penalized.  
12286: 12198: 12110:  89: 
12287: 12199: 12111:  90: ---
12288: 12200: 12112:  91: 
12289: 12201: 12113:  92: ## 🎮 **Controls**  
12290: 12202: 12114:  93: - **W/A/S/D:** Move the player during the uphill phase.  
12291: 12203: 12115:  94: - **Arrow Keys:** Adjust the camera angle and altitude line.  
12292: 12204: 12116:  95: - **Spacebar:**  
12293: 12205: 12117:  96:   - **Downhill Phase:** Initiates jumps.  
12294: 12206: 12118:  97:   - **Uphill Phase:** Takes a photo.  
12295: 12207: 12119:  98: - **E:** Manually spawn an animal (for testing purposes).  
12296: 12208: 12120:  99: 
12297: 12209: 12121: 100: ---
12298: 12210: 12122: 101: 
12299: 12211: 12123: 102: ## ✅ **Win Condition**  
12300: 12212: 12124: 103: - Pay off the initial loan to trigger the victory state.
12301: 12213: 12125: ``````
12302: 12214: 12126: 
12303: 12215: 12127: ## File: js/mobs/bear.js
12304: 12216: 12128: ``````javascript
12305: 12217: 12129:  1: /* bear.js - Bear Animal Module
12306: 12218: 12130:  2: // This module defines the bear characteristics for the wildlife simulation.
12307: 12219: 12131:  3: // It registers itself with wildlife.js by calling registerAnimalType().
12308: 12220: 12132:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
12309: 12221: 12133:  5: */
12310: 12222: 12134:  6: (function() {
12311: 12223: 12135:  7:     var bearData = {
12312: 12224: 12136:  8:         type: "bear",
12313: 12225: 12137:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.bearSpawnProbability) || 0.5,
12314: 12226: 12138: 10:         width: 40,
12315: 12227: 12139: 11:         height: 60,
12316: 12228: 12140: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.bearDetectionRadius) || 50,
12317: 12229: 12141: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.bearSpeed) || 8,
12318: 12230: 12142: 14:         basePhotoBonus: 10, // Bears yield a higher photo bonus
12319: 12231: 12143: 15:         color: "#8B4513",
12320: 12232: 12144: 16:         spawningBiomes: [
12321: 12233: 12145: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
12322: 12234: 12146: 18:         ],
12323: 12235: 12147: 19:         customUpdate: null,
12324: 12236: 12148: 20:         customDraw: function(animal, screenY, ctx) {
12325: 12237: 12149: 21:             // Draw the bear's body
12326: 12238: 12150: 22:             ctx.fillStyle = "#8B4513";
12327: 12239: 12151: 23:             ctx.fillRect(
12328: 12240: 12152: 24:                 animal.x - animal.width / 2,
12329: 12241: 12153: 25:                 screenY - animal.height / 2,
12330: 12242: 12154: 26:                 animal.width,
12331: 12243: 12155: 27:                 animal.height
12332: 12244: 12156: 28:             );
12333: 12245: 12157: 29:             // Draw bear ears as simple rectangles
12334: 12246: 12158: 30:             ctx.fillStyle = "#000000";
12335: 12247: 12159: 31:             ctx.fillRect(
12336: 12248: 12160: 32:                 animal.x - animal.width / 3,
12337: 12249: 12161: 33:                 screenY - animal.height / 2 - 10,
12338: 12250: 12162: 34:                 10,
12339: 12251: 12163: 35:                 10
12340: 12252: 12164: 36:             );
12341: 12253: 12165: 37:             ctx.fillRect(
12342: 12254: 12166: 38:                 animal.x + animal.width / 3 - 10,
12343: 12255: 12167: 39:                 screenY - animal.height / 2 - 10,
12344: 12256: 12168: 40:                 10,
12345: 12257: 12169: 41:                 10
12346: 12258: 12170: 42:             );
12347: 12259: 12171: 43:             // Altitude indicator
12348: 12260: 12172: 44:             let t = 1 - (animal.altitude / 100);
12349: 12261: 12173: 45:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
12350: 12262: 12174: 46:             ctx.fillStyle = altitudeColor;
12351: 12263: 12175: 47:             ctx.fillRect(
12352: 12264: 12176: 48:                 animal.x + animal.width / 2 + 5,
12353: 12265: 12177: 49:                 screenY - 5,
12354: 12266: 12178: 50:                 10,
12355: 12267: 12179: 51:                 10
12356: 12268: 12180: 52:             );
12357: 12269: 12181: 53:         }
12358: 12270: 12182: 54:     };
12359: 12271: 12183: 55:     if (typeof registerAnimalType === 'function') {
12360: 12272: 12184: 56:         registerAnimalType(bearData);
12361: 12273: 12185: 57:     } else {
12362: 12274: 12186: 58:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
12363: 12275: 12187: 59:     }
12364: 12276: 12188: 60: })();
12365: 12277: 12189: ``````
12366: 12278: 12190: 
12367: 12279: 12191: ## File: js/mobs/bird.js
12368: 12280: 12192: ``````javascript
12369: 12281: 12193:  1: /* bird.js - Bird Animal Module
12370: 12282: 12194:  2: // This module defines the bird characteristics for the wildlife simulation.
12371: 12283: 12195:  3: // It registers itself with wildlife.js by calling registerAnimalType().
12372: 12284: 12196:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
12373: 12285: 12197:  5: */
12374: 12286: 12198:  6: (function() {
12375: 12287: 12199:  7:     var birdData = {
12376: 12288: 12200:  8:         type: "bird",
12377: 12289: 12201:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.birdSpawnProbability) || 0.5,
12378: 12290: 12202: 10:         width: 20,
12379: 12291: 12203: 11:         height: 20,
12380: 12292: 12204: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.birdDetectionRadius) || 50,
12381: 12293: 12205: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.birdSpeed) || 12,
12382: 12294: 12206: 14:         basePhotoBonus: 5, // Birds yield a lower photo bonus
12383: 12295: 12207: 15:         color: "#1E90FF",
12384: 12296: 12208: 16:         spawningBiomes: [
12385: 12297: 12209: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
12386: 12298: 12210: 18:         ],
12387: 12299: 12211: 19:         customUpdate: null,
12388: 12300: 12212: 20:         customDraw: function(animal, screenY, ctx) {
12389: 12301: 12213: 21:             // Draw the bird's body
12390: 12302: 12214: 22:             ctx.fillStyle = "#1E90FF";
12391: 12303: 12215: 23:             ctx.fillRect(
12392: 12304: 12216: 24:                 animal.x - animal.width / 2,
12393: 12305: 12217: 25:                 screenY - animal.height / 2,
12394: 12306: 12218: 26:                 animal.width,
12395: 12307: 12219: 27:                 animal.height
12396: 12308: 12220: 28:             );
12397: 12309: 12221: 29:             // Draw bird wings with a simple flapping effect
12398: 12310: 12222: 30:             ctx.fillStyle = "#000000";
12399: 12311: 12223: 31:             if (Math.floor(Date.now() / 200) % 2 === 0) {
12400: 12312: 12224: 32:                 ctx.beginPath();
12401: 12313: 12225: 33:                 ctx.moveTo(animal.x, screenY);
12402: 12314: 12226: 34:                 ctx.lineTo(animal.x - 20, screenY - 10);
12403: 12315: 12227: 35:                 ctx.lineTo(animal.x + 20, screenY - 10);
12404: 12316: 12228: 36:                 ctx.closePath();
12405: 12317: 12229: 37:                 ctx.fill();
12406: 12318: 12230: 38:             } else {
12407: 12319: 12231: 39:                 ctx.beginPath();
12408: 12320: 12232: 40:                 ctx.moveTo(animal.x, screenY);
12409: 12321: 12233: 41:                 ctx.lineTo(animal.x - 20, screenY + 5);
12410: 12322: 12234: 42:                 ctx.lineTo(animal.x + 20, screenY + 5);
12411: 12323: 12235: 43:                 ctx.closePath();
12412: 12324: 12236: 44:                 ctx.fill();
12413: 12325: 12237: 45:             }
12414: 12326: 12238: 46:             // Altitude indicator
12415: 12327: 12239: 47:             let t = 1 - (animal.altitude / 100);
12416: 12328: 12240: 48:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
12417: 12329: 12241: 49:             ctx.fillStyle = altitudeColor;
12418: 12330: 12242: 50:             ctx.fillRect(
12419: 12331: 12243: 51:                 animal.x + animal.width / 2 + 5,
12420: 12332: 12244: 52:                 screenY - 5,
12421: 12333: 12245: 53:                 10,
12422: 12334: 12246: 54:                 10
12423: 12335: 12247: 55:             );
12424: 12336: 12248: 56:         }
12425: 12337: 12249: 57:     };
12426: 12338: 12250: 58:     if (typeof registerAnimalType === 'function') {
12427: 12339: 12251: 59:         registerAnimalType(birdData);
12428: 12340: 12252: 60:     } else {
12429: 12341: 12253: 61:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
12430: 12342: 12254: 62:     }
12431: 12343: 12255: 63: })();
12432: 12344: 12256: ``````
12433: 12345: 12257: 
12434: 12346: 12258: ## File: js/input.js
12435: 12347: 12259: ``````javascript
12436: 12348: 12260:  1: /* input.js - Keyboard Input Handling */
12437: 12349: 12261:  2: // Global keyboard input tracking
12438: 12350: 12262:  3: var keysDown = {};
12439: 12351: 12263:  4: // Global cursor position tracking
12440: 12352: 12264:  5: var cursorPosition = {
12441: 12353: 12265:  6:   absoluteX: 0,
12442: 12354: 12266:  7:   absoluteY: 0,
12443: 12355: 12267:  8:   viewportX: 0,
12444: 12356: 12268:  9:   viewportY: 0,
12445: 12357: 12269: 10:   lastUpdateTime: 0
12446: 12358: 12270: 11: };
12447: 12359: 12271: 12: // Set up event listeners for keyboard input
12448: 12360: 12272: 13: window.addEventListener("keydown", function(e) {
12449: 12361: 12273: 14:   keysDown[e.key] = true;
12450: 12362: 12274: 15: });
12451: 12363: 12275: 16: window.addEventListener("keyup", function(e) {
12452: 12364: 12276: 17:   keysDown[e.key] = false;
12453: 12365: 12277: 18: });
12454: 12366: 12278: 19: // Set up event listener for mouse movement
12455: 12367: 12279: 20: window.addEventListener("mousemove", function(e) {
12456: 12368: 12280: 21:   // Store both absolute and viewport coordinates
12457: 12369: 12281: 22:   cursorPosition.absoluteX = e.pageX;
12458: 12370: 12282: 23:   cursorPosition.absoluteY = e.pageY;
12459: 12371: 12283: 24:   cursorPosition.viewportX = e.clientX;
12460: 12372: 12284: 25:   cursorPosition.viewportY = e.clientY;
12461: 12373: 12285: 26: });
12462: 12374: 12286: 27: // Update the cursor position display
12463: 12375: 12287: 28: function updateCursorPositionDisplay() {
12464: 12376: 12288: 29:   const cursorPositionElement = document.getElementById("cursor-position");
12465: 12377: 12289: 30:   if (cursorPositionElement) {
12466: 12378: 12290: 31:     cursorPositionElement.textContent = `Abs-xy: (${cursorPosition.absoluteX}, ${cursorPosition.absoluteY}) | View: (${cursorPosition.viewportX}, ${cursorPosition.viewportY})`;
12467: 12379: 12291: 32:   }
12468: 12380: 12292: 33: }
12469: 12381: 12293: 34: // Set up interval to update cursor position display once per second
12470: 12382: 12294: 35: setInterval(updateCursorPositionDisplay, 1000);
12471: 12383: 12295: 36: // Helper function to check if a key is currently pressed
12472: 12384: 12296: 37: function isKeyDown(key) {
12473: 12385: 12297: 38:   return keysDown[key] === true;
12474: 12386: 12298: 39: }
12475: 12387: 12299: ``````
12476: 12388: 12300: 
12477: 12389: 12301: ## File: js/tricks.js
12478: 12390: 12302: ``````javascript
12479: 12391: 12303:  1: /* tricks.js - Trick System & Logic */
12480: 12392: 12304:  2: import { register } from './registry.js';
12481: 12393: 12305:  3: function startTrick(trickName) {
12482: 12394: 12306:  4:   if (player.currentTrick) return;
12483: 12395: 12307:  5:   player.currentTrick = trickName;
12484: 12396: 12308:  6:   player.trickTimer = 0;
12485: 12397: 12309:  7:   player.trickRotation = 0;
12486: 12398: 12310:  8:   player.trickOffset = 0;
12487: 12399: 12311:  9:   let now = Date.now();
12488: 12400: 12312: 10:   let cooldownEnd = player.trickCooldowns[trickName] || 0;
12489: 12401: 12313: 11:   let timeLeft = Math.max(0, cooldownEnd - now);
12490: 12402: 12314: 12:   player.currentTrickValueMultiplier = timeLeft > 0 ? Math.max(0.1, 1 - (timeLeft / TWEAK._trickCooldown)) : 1;
12491: 12403: 12315: 13:   player.trickCooldowns[trickName] = now + TWEAK._trickCooldown;
12492: 12404: 12316: 14:   console.log(`Starting ${trickName} (Value: ${(player.currentTrickValueMultiplier * 100).toFixed(0)}%)`);
12493: 12405: 12317: 15: }
12494: 12406: 12318: 16: register("startTrick", startTrick);
12495: 12407: 12319: 17: function checkTrickInputs() {
12496: 12408: 12320: 18:   if (!player.currentTrick && player.isJumping) {
12497: 12409: 12321: 19:     if (keysDown["ArrowLeft"]) startTrick("leftHelicopter");
12498: 12410: 12322: 20:     else if (keysDown["ArrowRight"]) startTrick("rightHelicopter");
12499: 12411: 12323: 21:     else if (keysDown["ArrowUp"]) startTrick("airBrake");
12500: 12412: 12324: 22:     else if (keysDown["ArrowDown"]) startTrick("parachute");
12501: 12413: 12325: 23:   }
12502: 12414: 12326: 24: }
12503: 12415: 12327: 25: register("checkTrickInputs", checkTrickInputs);
12504: 12416: 12328: 26: function processTrick(deltaTime) {
12505: 12417: 12329: 27:   if (player.currentTrick) {
12506: 12418: 12330: 28:     player.trickTimer += deltaTime;
12507: 12419: 12331: 29:     let trickProgress = player.trickTimer / (TWEAK._trickBaseDuration * TWEAK._trickTimeMultiplier + TWEAK._trickTimeAdder);
12508: 12420: 12332: 30:     switch (player.currentTrick) {
12509: 12421: 12333: 31:       case "leftHelicopter":
12510: 12422: 12334: 32:         player.trickRotation -= TWEAK._trickRotationSpeed * (deltaTime / 1000);
12511: 12423: 12335: 33:         break;
12512: 12424: 12336: 34:       case "rightHelicopter":
12513: 12425: 12337: 35:         player.trickRotation += TWEAK._trickRotationSpeed * (deltaTime / 1000);
12514: 12426: 12338: 36:         break;
12515: 12427: 12339: 37:       case "airBrake":
12516: 12428: 12340: 38:       case "parachute":
12517: 12429: 12341: 39:         player.trickOffset = TWEAK._trickOffsetDistance * Math.sin(Math.PI * trickProgress);
12518: 12430: 12342: 40:         break;
12519: 12431: 12343: 41:     }
12520: 12432: 12344: 42:     if (trickProgress >= 1) {
12521: 12433: 12345: 43:       completeTrick();
12522: 12434: 12346: 44:     }
12523: 12435: 12347: 45:   }
12524: 12436: 12348: 46: }
12525: 12437: 12349: 47: register("processTrick", processTrick);
12526: 12438: 12350: 48: function completeTrick() {
12527: 12439: 12351: 49:   let trickMoney = TWEAK._trickMoneyBase;
12528: 12440: 12352: 50:   let chainBonus = 1;
12529: 12441: 12353: 51:   if (player.lastTrick && player.lastTrick !== player.currentTrick) {
12530: 12442: 12354: 52:     player.trickChainCount++;
12531: 12443: 12355: 53:     chainBonus = Math.pow(TWEAK._trickChainMultiplier, player.trickChainCount);
12532: 12444: 12356: 54:     trickMoney *= chainBonus;
12533: 12445: 12357: 55:   } else {
12534: 12446: 12358: 56:     player.trickChainCount = 0;
12535: 12447: 12359: 57:   }
12536: 12448: 12360: 58:   trickMoney *= player.currentTrickValueMultiplier;
12537: 12449: 12361: 59:   let finalMoney = Math.floor(trickMoney);
12538: 12450: 12362: 60:   player.money += finalMoney;
12539: 12451: 12363: 61:   showMoneyGain(finalMoney, `(${player.currentTrick})`);
12540: 12452: 12364: 62:   addFloatingText(`+$${finalMoney} ${player.currentTrick}`, player.x, player.absY);
12541: 12453: 12365: 63:   console.log(`Completed ${player.currentTrick}! +$${finalMoney}`);
12542: 12454: 12366: 64:   player.lastTrick = player.currentTrick;
12543: 12455: 12367: 65:   player.currentTrick = null;
12544: 12456: 12368: 66:   player.trickTimer = 0;
12545: 12457: 12369: 67:   player.trickRotation = 0;
12546: 12458: 12370: 68:   player.trickOffset = 0;
12547: 12459: 12371: 69:   playTrickCompleteSound();
12548: 12460: 12372: 70: }
12549: 12461: 12373: 71: register("completeTrick", completeTrick);
12550: 12462: 12374: 72: function resetTrickState() {
12551: 12463: 12375: 73:   player.currentTrick = null;
12552: 12464: 12376: 74:   player.trickTimer = 0;
12553: 12465: 12377: 75:   player.trickRotation = 0;
12554: 12466: 12378: 76:   player.trickOffset = 0;
12555: 12467: 12379: 77:   player.lastTrick = null;
12556: 12468: 12380: 78:   player.trickChainCount = 0;
12557: 12469: 12381: 79: }
12558: 12470: 12382: 80: register("resetTrickState", resetTrickState);
12559: 12471: 12383: 81: function playTrickCompleteSound() {
12560: 12472: 12384: 82:   playTone(600, "sine", 0.1, 0.2);
12561: 12473: 12385: 83: }
12562: 12474: 12386: 84: register("playTrickCompleteSound", playTrickCompleteSound);
12563: 12475: 12387: 85: // Expose checkTrickInputs globally so that other modules (like downhill.js) can call it.
12564: 12476: 12388: 86: window.checkTrickInputs = checkTrickInputs;
12565: 12477: 12389: 87: export {
12566: 12478: 12390: 88:   startTrick,
12567: 12479: 12391: 89:   checkTrickInputs,
12568: 12480: 12392: 90:   processTrick,
12569: 12481: 12393: 91:   completeTrick,
12570: 12482: 12394: 92:   resetTrickState,
12571: 12483: 12395: 93:   playTrickCompleteSound,
12572: 12484: 12396: 94: };
12573: 12485: 12397: ``````
12574: 12486: 12398: 
12575: 12487: 12399: ## File: js/settings.js
12576: 12488: 12400: ``````javascript
12577: 12489: 12401:   1: // settings.js - various TWEAK settings and their
12578: 12490: 12402:   2: // knob-turnings go here
12579: 12491: 12403:   3: /* Global Configuration & Shared Globals */
12580: 12492: 12404:   4: // Define our current mountain biome and layer defaults.
12581: 12493: 12405:   5: var currentBiome = "starterMountain";  // We're on the Starter Mountain by default.
12582: 12494: 12406:   6: var currentMountainLayer = 1;          // Default layer (if you're using numeric layers)
12583: 12495: 12407:   7: var currentLayerPercent = 25;          // Or if you're using percentages (0-100)
12584: 12496: 12408:   8: var TWEAK = {
12585: 12497: 12409:   9:     tweakNob: 1,
12586: 12498: 12410:  10:     // Animal spawning and movement
12587: 12499: 12411:  11:     minSpawnTime: 5000, // Minimum delay between spawns (5 sec)
12588: 12500: 12412:  12:     maxSpawnTime: 10000, // Maximum delay between spawns (10 sec)
12589: 12501: 12413:  13:     minIdleTime: 3000, // Minimum time an animal sits still (1 sec)
12590: 12502: 12414:  14:     maxIdleTime: 8000, // Maximum time an animal sits still (20 sec)
12591: 12503: 12415:  15:     minMoveSpeed: 5, // Slowest movement speed for animals
12592: 12504: 12416:  16:     maxMoveSpeed: 11.2, // Fastest movement speed for animals
12593: 12505: 12417:  17:     fleeAngle: 45, // This may be obsolete - confirm before removing
12594: 12506: 12418:  18:     photoCooldown: 1000, // Must wait 1 second between photos
12595: 12507: 12419:  19:     repeatPhotoPenalty: 0.5, // 50% less money if the same animal is photographed again
12596: 12508: 12420:  20:     minAnimalSpawnDistance: 400,
12597: 12509: 12421:  21:     maxAnimalSpawnDistance: 500,
12598: 12510: 12422:  22:     bearSpawnProbability: 0.3, // 30% chance of a bear
12599: 12511: 12423:  23:     bearSpeed: 6, // Bears move a bit slower
12600: 12512: 12424:  24:     birdSpeed: 9, // Birds move faster
12601: 12513: 12425:  25:     bearDetectionRadius: 150, // Bears detect player from farther away
12602: 12514: 12426:  26:     birdDetectionRadius: 50, // Birds have smaller detection radius
12603: 12515: 12427:  27:     maxAnimalPhotoDistance: 600, // Maximum distance for taking photos
12604: 12516: 12428:  28:     // Jumping stuff
12605: 12517: 12429:  29:     jumpType: "immediate",               // "immediate" or "charge" - DO NOT REMOVE
12606: 12518: 12430:  30:     jumpCollisionMultiplier: 3,
12607: 12519: 12431:  31:     jumpBaseAscent: 1000,                 // Base ascent time (ms)
12608: 12520: 12432:  32:     jumpMaxHoldTime: 1000,               // Maximum charge duration (1 sec)
12609: 12521: 12433:  33:     jumpPeakScale: 2,                    // Base peak visual jump scale
12610: 12522: 12434:  34:     jumpHeightPerRocketSurgery: 0.05,    // Each level adds 5% to jump height
12611: 12523: 12435:  35:     jumpTimePerRocketSurgery: 0.05,      // Each level adds 5% to jump duration
12612: 12524: 12436:  36:     jumpZoomPerHeightIncrease: 0.5,      // For every 100% height increase, add 50% more zoom
12613: 12525: 12437:  37:     // Re-Hit Jump System
12614: 12526: 12438:  38:     reHitWindowStart: 0.70,              // When re-hit window opens (70% through jump)
12615: 12527: 12439:  39:     reHitIndicatorScale: 2.5,            // Size multiplier for indicator circle
12616: 12528: 12440:  40:     reHitIndicatorColor: "rgba(255, 0, 255, 0.4)",  // Bright magenta with more opacity
12617: 12529: 12441:  41:     reHitIndicatorOutlineColor: "#FF00FF", // Solid magenta outline
12618: 12530: 12442:  42:     reHitBonusDuration: 1.2,             // Duration multiplier for re-hit jumps
12619: 12531: 12443:  43:     // Trick Physics Adjustments
12620: 12532: 12444:  44:     parachuteGravityFactor: 0.8,         // Gravity reduction during parachute
12621: 12533: 12445:  45:     airBrakeFrictionMultiplier: 0.85,    // Speed reduction during air brake
12622: 12534: 12446:  46:     // Camera and aiming
12623: 12535: 12447:  47:     basePOVAngle: 30,
12624: 12536: 12448:  48:     optimalOpticsPOVIncrease: 5,
12625: 12537: 12449:  49:     altitudeFlashMinSpeed: 200,
12626: 12538: 12450:  50:     altitudeFlashMaxSpeed: 10,
12627: 12539: 12451:  51:     altitudeGradientStart: "blue",
12628: 12540: 12452:  52:     altitudeGradientEnd: "red",
12629: 12541: 12453:  53:     // Photo scoring
12630: 12542: 12454:  54:     basePhotoValue: 50, // Base money earned from a photo
12631: 12543: 12455:  55:     altitudeMatchMultiplier: 2,
12632: 12544: 12456:  56:     centerPOVMultiplier: 1.5,
12633: 12545: 12457:  57:     fleeingAnimalMultiplier: 3,
12634: 12546: 12458:  58:     // Animal multipliers
12635: 12547: 12459:  59:     bearMultiplier: 1.5,
12636: 12548: 12460:  60:     birdMultiplier: 1,
12637: 12549: 12461:  61:     // House entry costs
12638: 12550: 12462:  62:     houseEntryLoanDeduction: 0.005, // 0.5% loan deduction when entering house
12639: 12551: 12463:  63:     // Underlying base values
12640: 12552: 12464:  64:     _sledMass: 1.0,
12641: 12553: 12465:  65:     _baseGravity: 0.1,
12642: 12554: 12466:  66:     _baseHorizontalAccel: 0.25,
12643: 12555: 12467:  67:     _baseFriction: 0.95,
12644: 12556: 12468:  68:     _baseMaxXVel: 3,
12645: 12557: 12469:  69:     _rocketSurgeryFactorPerLevel: 0.1,
12646: 12558: 12470:  70:     _optimalOpticsAccelFactorPerLevel: 0.02,
12647: 12559: 12471:  71:     _optimalOpticsFrictionFactorPerLevel: 0.005,
12648: 12560: 12472:  72:     _fancierFootwearUpSpeedPerLevel: 0.3,
12649: 12561: 12473:  73:     _baseUpSpeed: 2,
12650: 12562: 12474:  74:     _baseCollisionsAllowed: 3,
12651: 12563: 12475:  75:     _starterCash: 200, // Jacked up for testing
12652: 12564: 12476:  76:     _bounceImpulse: 3,  // New bounce impulse value
12653: 12565: 12477:  77:     // Trick system configuration
12654: 12566: 12478:  78:     _trickCooldown: 5000,          // Base cooldown per trick (5 sec)
12655: 12567: 12479:  79:     _trickTimeMultiplier: 1.0,     // Global trick duration multiplier
12656: 12568: 12480:  80:     _trickTimeAdder: 0,            // Global trick duration additive time
12657: 12569: 12481:  81:     _trickBaseDuration: 250,       // Base duration for tricks (ms)
12658: 12570: 12482:  82:     _trickRotationSpeed: 720,     // Degrees per second for helicopter tricks (3 full spins)
12659: 12571: 12483:  83:     _trickOffsetDistance: 40,      // Pixels to offset sled for air brake/parachute
12660: 12572: 12484:  84:     _trickMoneyBase: 50,           // Base money earned per trick
12661: 12573: 12485:  85:     _trickChainMultiplier: 1.5,    // Multiplier for chaining different tricks
12662: 12574: 12486:  86:     // Getters to apply tweakNob multiplier
12663: 12575: 12487:  87:     get sledMass() { return this._sledMass * this.tweakNob; },
12664: 12576: 12488:  88:     set sledMass(val) { this._sledMass = val; },
12665: 12577: 12489:  89:     get baseGravity() { return this._baseGravity * this.tweakNob; },
12666: 12578: 12490:  90:     set baseGravity(val) { this._baseGravity = val; },
12667: 12579: 12491:  91:     get baseHorizontalAccel() { return this._baseHorizontalAccel; },
12668: 12580: 12492:  92:     set baseHorizontalAccel(val) { this._baseHorizontalAccel = val; },
12669: 12581: 12493:  93:     get baseFriction() { return this._baseFriction; }, // * this.tweakNob
12670: 12582: 12494:  94:     set baseFriction(val) { this._baseFriction = val; },
12671: 12583: 12495:  95:     get baseMaxXVel() { return this._baseMaxXVel * this.tweakNob; },
12672: 12584: 12496:  96:     set baseMaxXVel(val) { this._baseMaxXVel = val; },
12673: 12585: 12497:  97:     get rocketSurgeryFactorPerLevel() { return this._rocketSurgeryFactorPerLevel * this.tweakNob; },
12674: 12586: 12498:  98:     set rocketSurgeryFactorPerLevel(val) { this._rocketSurgeryFactorPerLevel = val; },
12675: 12587: 12499:  99:     get optimalOpticsAccelFactorPerLevel() { return this._optimalOpticsAccelFactorPerLevel * this.tweakNob; },
12676: 12588: 12500: 100:     set optimalOpticsAccelFactorPerLevel(val) { this._optimalOpticsAccelFactorPerLevel = val; },
12677: 12589: 12501: 101:     get optimalOpticsFrictionFactorPerLevel() { return this._optimalOpticsFrictionFactorPerLevel * this.tweakNob; },
12678: 12590: 12502: 102:     set optimalOpticsFrictionFactorPerLevel(val) { this._optimalOpticsFrictionFactorPerLevel = val; },
12679: 12591: 12503: 103:     get fancierFootwearUpSpeedPerLevel() { return this._fancierFootwearUpSpeedPerLevel * this.tweakNob; },
12680: 12592: 12504: 104:     set fancierFootwearUpSpeedPerLevel(val) { this._fancierFootwearUpSpeedPerLevel = val; },
12681: 12593: 12505: 105:     get baseUpSpeed() { return this._baseUpSpeed * this.tweakNob; },
12682: 12594: 12506: 106:     set baseUpSpeed(val) { this._baseUpSpeed = val; },
12683: 12595: 12507: 107:     get baseCollisionsAllowed() { return this._baseCollisionsAllowed * this.tweakNob; },
12684: 12596: 12508: 108:     set baseCollisionsAllowed(val) { this._baseCollisionsAllowed = val; },
12685: 12597: 12509: 109:     get starterCash() { return this._starterCash * this.tweakNob; },
12686: 12598: 12510: 110:     set starterCash(val) { this._starterCash = val; },
12687: 12599: 12511: 111:     // New dynamic bounceImpulse getter/setter
12688: 12600: 12512: 112:     get bounceImpulse() { return this._bounceImpulse * this.tweakNob; },
12689: 12601: 12513: 113:     set bounceImpulse(val) { this._bounceImpulse = val; }
12690: 12602: 12514: 114: };
12691: 12603: 12515: 115: // New: function to compute max collisions
12692: 12604: 12516: 116: TWEAK.getMaxCollisions = function() {
12693: 12605: 12517: 117:     // Ensure playerUpgrades exists before accessing it
12694: 12606: 12518: 118:     return TWEAK.baseCollisionsAllowed + (typeof playerUpgrades !== "undefined" && playerUpgrades.sledDurability ? playerUpgrades.sledDurability : 0);
12695: 12607: 12519: 119: };
12696: 12608: 12520: ``````
12697: 12609: 12521: 
12698: 12610: 12522: ## File: !READ_FIRST-FILE_SUMMARY.txt
12699: 12611: 12523: ``````
12700: 12612: 12524:  1: ## JavaScript Files:
12701: 12613: 12525:  2: 
12702: 12614: 12526:  3: - **js/entities.js**: Manages collision detection, camera overlay rendering, and animal spawning/behavior mechanics, including drawing animal entities and handling animal fleeing behavior.
12703: 12615: 12527:  4: - **js/game.js**: Controls the core game loop and state transitions, including initializing gameplay, managing UI elements, and handling game start and loan payment logic.
12704: 12616: 12528:  5: - **js/input.js**: Handles global keyboard input tracking, including setting up event listeners for keydown and keyup events, and provides helper functions for checking key states.
12705: 12617: 12529:  6: - **js/mechanics.js**: Manages core gameplay mechanics such as loan repayment, jump and trick systems, collision detection, and movement handling for downhill and uphill phases.
12706: 12618: 12530:  7: - **js/player.js**: Defines the player object with all state variables, including position, velocity, camera angles, trick tracking, and jump state properties.
12707: 12619: 12531:  8: - **js/render.js**: Contains the rendering logic for drawing the player, terrain, floating texts, camera overlays, and animals. Manages visual effects like trick animations and the Re-Hit indicator.
12708: 12620: 12532:  9: - **js/upgrades.js**: Manages player and mountain upgrades, including upgrade costs, UI display logic, and purchase mechanics.
12709: 12621: 12533: 10: - **js/utils.js**: Provides utility functions and configurations, including game tweak parameters, audio functions, collision detection, mathematical helpers, and color interpolation utilities.
12710: 12622: 12534: 11: - **js/wildlifephotos.js**: Contains logic for the wildlife photography mini-game, including animal spawning, photo scoring, and managing animal behaviors like fleeing.
12711: 12623: 12535: 12: - **js/world.js**: Manages the generation of terrain and the awarding of money based on the player's distance traveled.
12712: 12624: 12536: 13: 
12713: 12625: 12537: 14: ## Project Files:
12714: 12626: 12538: 15: 
12715: 12627: 12539: 16: - **index.html**: Main HTML file linking JavaScript and CSS files, defines the game UI structure.
12716: 12628: 12540: 17: - **styles.css**: Contains the game's styling, including layout and visual styles for UI elements.
12717: 12629: 12541: 18: - **1.0_README.md**: Likely an initial readme or changelog document for version 1.0.
12718: 12630: 12542: 19: - **README.md**: Primary documentation file for the project, describing setup and usage instructions.
12719: 12631: 12543: 20: - **ROADMAP.md**: Outlines planned features and future development directions.
12720: 12632: 12544: 21: - **LICENSE.md**: Contains the licensing terms for the project.
12721: 12633: 12545: 22: - **.gitignore**: Specifies which files and directories should be ignored by version control.
12722: 12634: 12546: 23: - **todo.txt**: Simple text file listing tasks and development priorities.
12723: 12635: 12547: 24: - **!READ_FIRST-FILE_SUMMARY.txt**: Possibly an initial overview or summary of the project.
12724: 12636: 12548: ``````
12725: 12637: 12549: 
12726: 12638: 12550: ## File: docs/ROADMAP.md
12727: 12639: 12551: ``````markdown
12728: 12640: 12552:   1: # 📍 **SledHEAD Comprehensive Development Roadmap**
12729: 12641: 12553:   2: 
12730: 12642: 12554:   3: This document outlines the detailed path from the current implementation to the complete "1.0" version of **SledHEAD**, including the critical gameplay shift to an **Up-Then-Down** stamina-based mechanic.
12731: 12643: 12555:   4: 
12732: 12644: 12556:   5: ---
12733: 12645: 12557:   6: 
12734: 12646: 12558:   7: ## 🎯 **Core Concept**
12735: 12647: 12559:   8: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
12736: 12648: 12560:   9: 
12737: 12649: 12561:  10: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
12738: 12650: 12562:  11: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
12739: 12651: 12563:  12: 
12740: 12652: 12564:  13: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
12741: 12653: 12565:  14: 
12742: 12654: 12566:  15: ## 🎯 **Gameplay Loop Overview**
12743: 12655: 12567:  16: - Players start at the mountain's base, managing stamina as they climb upward.
12744: 12656: 12568:  17: - Strategic decision-making to sled down for rewards before stamina depletion.
12745: 12657: 12569:  18: - Higher altitudes host rare wildlife, higher rewards, and greater risks.
12746: 12658: 12570:  19: 
12747: 12659: 12571:  20: ---
12748: 12660: 12572:  21: 
12749: 12661: 12573:  22: ## 🌄 **Segmented Cylinder Wrapping (Layered Mountain Structure)**  
12750: 12662: 12574:  23: **Handling Horizontal Wrapping at Different Elevations**
12751: 12663: 12575:  24: 
12752: 12664: 12576:  25: To create the effect of a **finite mountain with wraparound sides**, SledHEAD uses a **layered cylindrical system** instead of a continuous cone. The mountain is divided into **stacked segments**, each with its own **fixed circumference** that gets **smaller as you go higher**. This allows for a **consistent wraparound mechanic** while keeping movement predictable.
12753: 12665: 12577:  26: 
12754: 12666: 12578:  27: ### 🏔️ **How It Works:**
12755: 12667: 12579:  28: - Each **layer** is a separate horizontal zone, like a **floating ring** around the mountain.  
12756: 12668: 12580:  29: - If a player **crosses the left or right boundary** of a layer, they seamlessly wrap around to the other side.  
12757: 12669: 12581:  30: - **Lower layers are wider**, giving more horizontal space.  
12758: 12670: 12582:  31: - **Upper layers are narrower**, meaning wraparound happens sooner.  
12759: 12671: 12583:  32: 
12760: 12672: 12584:  33: ### ⬆️⬇️ **Moving Between Layers**
12761: 12673: 12585:  34: When transitioning **between vertical segments**:
12762: 12674: 12586:  35: 1. If the player **moves downward** past the bottom boundary of a layer:
12763: 12675: 12587:  36:    - They **teleport to the top boundary** of the layer below.  
12764: 12676: 12588:  37:    - Their **horizontal position scales** based on the new circumference to maintain a proportional location.  
12765: 12677: 12589:  38:    
12766: 12678: 12590:  39:    ```pseudocode
12767: 12679: 12591:  40:    scale_factor = new_layer.circumference / old_layer.circumference
12768: 12680: 12592:  41:    x_new = x_old * scale_factor
12769: 12681: 12593:  42: 
12770: 12682: 12594:  43: 2. If the player **moves upward** past the top boundary of a layer:
12771: 12683: 12595:  44:    - They **appear at the bottom** of the next layer up with **their horizontal position **scaled.
12772: 12684: 12596:  45: 
12773: 12685: 12597:  46: ### 🏁 **Gameplay Implications**
12774: 12686: 12598:  47:    - Predictable & Manageable: Keeps wraparound and movement feeling natural while allowing for different gameplay per layer.
12775: 12687: 12599:  48: 
12776: 12688: 12600:  49: ### **Layer-Specific Challenges**:
12777: 12689: 12601:  50:    - Broader paths at lower levels = more open sledding.
12778: 12690: 12602:  51:    - Tighter paths at higher levels = more technical, precision-based gameplay.
12779: 12691: 12603:  52:    - Performance-Friendly: Each layer is an isolated map segment, simplifying collision checks and procedural generation.
12780: 12692: 12604:  53: 
12781: 12693: 12605:  54: ---
12782: 12694: 12606:  55: 
12783: 12695: 12607:  56: ## 🌄 **Light/Dark Gradient Altitude System**
12784: 12696: 12608:  57: 
12785: 12697: 12609:  58: - Introduce a dynamic visual gradient where snow and terrain visually shift, with the snow at higher altitudes lighter due to being cleaner, and the snow downhill from you appears darker (due to the dirt and debres that flows down hill). 🚀
12786: 12698: 12610:  59: - The gradient will provide a dynamic natural visual guide for players to intuitively gauge altitude and plan their climbs and descents. 🎯
12787: 12699: 12611:  60: 
12788: 12700: 12612:  61: ---
12789: 12701: 12613:  62: 
12790: 12702: 12614:  63: ## 🌎 **Procedural World & Persistence**
12791: 12703: 12615:  64: 
12792: 12704: 12616:  65: - The mountain remains consistent during a playthrough.  
12793: 12705: 12617:  66: - **New terrain is only generated when starting a new game.**  
12794: 12706: 12618:  67: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
12795: 12707: 12619:  68: - **Changes per run:**
12796: 12708: 12620:  69:   - Tourists & fans shift positions.  
12797: 12709: 12621:  70:   - Weather may change dynamically.  
12798: 12710: 12622:  71:   - Wildlife encounters vary.
12799: 12711: 12623:  72: 
12800: 12712: 12624:  73: ---
12801: 12713: 12625:  74: 
12802: 12714: 12626:  75: ## 🎢 Gameplay Loops
12803: 12715: 12627:  76: **Progression Goals:**  
12804: 12716: 12628:  77: - **Prototype:** Repay the cost of the mountain.  
12805: 12717: 12629:  78: - **Full Game:**  
12806: 12718: 12630:  79:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
12807: 12719: 12631:  80:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
12808: 12720: 12632:  81:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
12809: 12721: 12633:  82:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
12810: 12722: 12634:  83: ### **⬆️1️⃣ Uphill Phase: Climbing & Exploration**
12811: 12723: 12635:  84: #### 🚶 **Top-down adventure traversal with stamina management and exploration.**  
12812: 12724: 12636:  85: - **Goal:** Ascend to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
12813: 12725: 12637:  86: - **Stamina System:**  
12814: 12726: 12638:  87:   - Stamina drains when moving.  
12815: 12727: 12639:  88:   - Replenished by **food stands, resting points, or upgrades**.  
12816: 12728: 12640:  89: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
12817: 12729: 12641:  90:   - **Random animals appear every few seconds (TWEAK variable).**  
12818: 12730: 12642:  91:   - Animals either **stay still and will run if you get too close.** Eventually they will **wander off**.  
12819: 12731: 12643:  92:   - **Use the Left & Right Arrow Keys to aim the camera cone** around your character.  
12820: 12732: 12644:  93:   - **Align the altitude line (using the Up & Down Arrow Keys)** with the animal’s altitude for a perfect shot.  
12821: 12733: 12645:  94:   - **Photos earn money, with multipliers for:**  
12822: 12734: 12646:  95:     - Accuracy (center of POV cone).  
12823: 12735: 12647:  96:     - Altitude match precision.  
12824: 12736: 12648:  97:     - Moving vs. stationary targets (moving = 3x value).
12825: 12737: 12649:  98:     - Animal Rarity (more exotic animals the further up the mountain you are).
12826: 12738: 12650:  99: 
12827: 12739: 12651: 100: ### **⬇️2️⃣ Sledding Phase (Downhill)**
12828: 12740: 12652: 101: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
12829: 12741: 12653: 102: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
12830: 12742: 12654: 103: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
12831: 12743: 12655: 104: - **Obstacles:**
12832: 12744: 12656: 105:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
12833: 12745: 12657: 106:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
12834: 12746: 12658: 107:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
12835: 12747: 12659: 108: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
12836: 12748: 12660: 109: - **Time Trials:**  
12837: 12749: 12661: 110:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
12838: 12750: 12662: 111:   - **Your time between activators determines your bonus.**  
12839: 12751: 12663: 112:   - **Faster times = more money!**  
12840: 12752: 12664: 113:   - Not all runs are timed; only those where you activate a trial.
12841: 12753: 12665: 114: 
12842: 12754: 12666: 115: ### 🏠3️⃣ **Management Phase (House & Upgrades)**
12843: 12755: 12667: 116: 🏡 **Upgrade your gear, mountain, and social media presence.**  
12844: 12756: 12668: 117: - **Spend earned money on:**
12845: 12757: 12669: 118:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
12846: 12758: 12670: 119:   - **Sled Upgrades:** Speed, handling, trick potential.  
12847: 12759: 12671: 120:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
12848: 12760: 12672: 121: - **New Game Start:**  
12849: 12761: 12673: 122:   - Mountain **ONLY regenerates when starting a completely new game.**  
12850: 12762: 12674: 123:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
12851: 12763: 12675: 124:   - **Current seed is displayed at home.** 
12852: 12764: 12676: 125: 
12853: 12765: 12677: 126: ---
12854: 12766: 12678: 127: 
12855: 12767: 12679: 128: ## 🏡 **Tutorial Level: Childhood Memories on Grandpa’s Hill**  
12856: 12768: 12680: 129: **Learning the Basics in a Cozy, Story-Driven Introduction**
12857: 12769: 12681: 130: 
12858: 12770: 12682: 131: Before tackling the **massive procedural mountains** of SledHEAD, players start with a heartwarming **tutorial level**, set in a **quiet rural winter landscape**. This **flashback sequence** lets players experience sledding as a **young child**, learning the fundamental mechanics under the guidance of their **grandfather**.
12859: 12771: 12683: 132: 
12860: 12772: 12684: 133: ### 📜 **Narrative Setup**
12861: 12773: 12685: 134: The game opens on a **small, snow-covered hill** just outside a **cozy cabin**, where the protagonist—**a child version of themselves**—is spending time with their **grandfather** on a crisp winter afternoon. Grandpa is **wrapped up in a warm coat, standing at the base of the hill after sledding down himself**, watching proudly as the player **takes their maiden toboggan run, learning to sled**. The sky glows with the **soft oranges and purples of a winter sunset**, setting a nostalgic and peaceful mood.
12862: 12774: 12686: 135: 
12863: 12775: 12687: 136: Before long, Grandpa gives a gentle laugh:  
12864: 12776: 12688: 137: > **"Ahh, y'know, I used to be the best sledder on this hill... but these ol' legs don’t have the stamina they used to! You go on, get a few more runs in—I’ll watch and cheer ya on from here! And remember - the snow's always whiter above you, and dirtier below!"**  
12865: 12777: 12689: 138: 
12866: 12778: 12690: 139: With that, the tutorial **fully hands control to the player**, reinforcing the **stamina system** and setting up a meaningful reason to **manage energy wisely**.
12867: 12779: 12691: 140: 
12868: 12780: 12692: 141: ---
12869: 12781: 12693: 142: 
12870: 12782: 12694: 143: ## 🎮 **Tutorial Mechanics Introduced**
12871: 12783: 12695: 144: The tutorial unfolds organically through **simple, playful challenges**, without heavy UI elements. Players **learn by doing**, with Grandpa offering **gentle, supportive guidance**.
12872: 12784: 12696: 145: 
12873: 12785: 12697: 146: ### **⬆️ Walking Uphill (Basic Movement & Stamina)**
12874: 12786: 12698: 147: - Players move **uphill by walking**, learning that **whiter snow = uphill, darker snow = downhill**.  
12875: 12787: 12699: 148: - Moving uphill **drains stamina** gradually.  
12876: 12788: 12700: 149: - Grandpa occasionally calls out:
12877: 12789: 12701: 150:   > **"You’re strong, kid! But ya gotta pace yourself—harder climbs mean ya gotta rest up after!"**
12878: 12790: 12702: 151: 
12879: 12791: 12703: 152: ### **🛷 Sledding Downhill (Turning & Speed Control)**
12880: 12792: 12704: 153: - Players start **at the top of the small hill** and practice their **first sled run**.  
12881: 12793: 12705: 154: - **Turning left/right** is introduced, along with simple speed adjustments.  
12882: 12794: 12706: 155: - Grandpa **cheers when the player makes a smooth turn**:
12883: 12795: 12707: 156:   > **"Look at that! You’re a natural! Sleddin’s all about balance—lean just right and the hill will do the rest!"**
12884: 12796: 12708: 157: 
12885: 12797: 12709: 158: ### **🔄 Climbing & Repeating Runs**
12886: 12798: 12710: 159: - After a few runs, Grandpa suggests:
12887: 12799: 12711: 160:   > **"Why don’t ya take a few more runs? See if ya can get all the way to the bottom without wipin’ out!"**  
12888: 12800: 12712: 161: - The player is **free to keep practicing**, reinforcing that **sledding is about trial and improvement**.  
12889: 12801: 12713: 162: - The game subtly **introduces self-motivated play**, rewarding experimentation.
12890: 12802: 12714: 163: 
12891: 12803: 12715: 164: ### **🏁 Tutorial Completion**
12892: 12804: 12716: 165: - Once the player **feels confident**, a final sled run **transitions seamlessly into the present day**, cutting to the **modern protagonist** standing atop their massive new mountain.
12893: 12805: 12717: 166: - **Grandpa’s words echo**, setting the tone for the adventure ahead:
12894: 12806: 12718: 167:   > **"One day, you’ll take on bigger mountains than this… but no matter how high you go, never forget the joy of the ride."**  
12895: 12807: 12719: 168: - The camera pulls back, revealing the **full mountain**, and gameplay transitions into the **core SledHEAD experience**.
12896: 12808: 12720: 169: 
12897: 12809: 12721: 170: ---
12898: 12810: 12722: 171: 
12899: 12811: 12723: 172: ## ✨ **Why This Works**
12900: 12812: 12724: 173: - **Emotionally Engaging** – Connects the player to their childhood roots and motivation.  
12901: 12813: 12725: 174: - **Smooth Learning Curve** – Teaches fundamental mechanics **without forced tutorials**.  
12902: 12814: 12726: 175: - **Worldbuilding & Nostalgia** – Grandpa’s wisdom adds charm and meaning to the stamina system.  
12903: 12815: 12727: 176: - **Seamless Transition to Main Game** – Keeps momentum going without feeling like a "tutorial level."  
12904: 12816: 12728: 177: 
12905: 12817: 12729: 178: This opening ensures that **players feel connected to their journey**—from childhood sledding to **becoming a sledding legend**. 🎿🔥  
12906: 12818: 12730: 179: 
12907: 12819: 12731: 180: ---
12908: 12820: 12732: 181: 
12909: 12821: 12733: 182: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
12910: 12822: 12734: 183: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
12911: 12823: 12735: 184: 
12912: 12824: 12736: 185: 1. **☁️🪂 Parachute (Up, Down)**  
12913: 12825: 12737: 186:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
12914: 12826: 12738: 187:    **Pixel Art Representation:**  
12915: 12827: 12739: 188:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
12916: 12828: 12740: 189: 
12917: 12829: 12741: 190: 2. **🛑🎿 Air Brake (Up, Up)**  
12918: 12830: 12742: 191:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
12919: 12831: 12743: 192:    **Pixel Art Representation:**  
12920: 12832: 12744: 193:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
12921: 12833: 12745: 194: 
12922: 12834: 12746: 195: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
12923: 12835: 12747: 196:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
12924: 12836: 12748: 197:    **Pixel Art Representation:**  
12925: 12837: 12749: 198:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
12926: 12838: 12750: 199: 
12927: 12839: 12751: 200: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
12928: 12840: 12752: 201:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
12929: 12841: 12753: 202:    **Pixel Art Representation:**  
12930: 12842: 12754: 203:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
12931: 12843: 12755: 204: 
12932: 12844: 12756: 205: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
12933: 12845: 12757: 206:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
12934: 12846: 12758: 207:    **Pixel Art Representation:**  
12935: 12847: 12759: 208:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
12936: 12848: 12760: 209: 
12937: 12849: 12761: 210: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
12938: 12850: 12762: 211:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
12939: 12851: 12763: 212:    **Pixel Art Representation:**  
12940: 12852: 12764: 213:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
12941: 12853: 12765: 214: 
12942: 12854: 12766: 215: 7. **🦸‍♂️✨ Superman (Down, Down)**  
12943: 12855: 12767: 216:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
12944: 12856: 12768: 217:    **Pixel Art Representation:**  
12945: 12857: 12769: 218:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
12946: 12858: 12770: 219: 
12947: 12859: 12771: 220: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
12948: 12860: 12772: 221:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
12949: 12861: 12773: 222:    **Pixel Art Representation:**  
12950: 12862: 12774: 223:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
12951: 12863: 12775: 224: 
12952: 12864: 12776: 225: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
12953: 12865: 12777: 226:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
12954: 12866: 12778: 227:    **Pixel Art Representation:**  
12955: 12867: 12779: 228:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
12956: 12868: 12780: 229: 
12957: 12869: 12781: 230: 10. **👻🔥 Ghost Rider (Left, Right)**  
12958: 12870: 12782: 231:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
12959: 12871: 12783: 232:     **Pixel Art Representation:**  
12960: 12872: 12784: 233:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
12961: 12873: 12785: 234: 
12962: 12874: 12786: 235: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
12963: 12875: 12787: 236:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
12964: 12876: 12788: 237:     **Pixel Art Representation:**  
12965: 12877: 12789: 238:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
12966: 12878: 12790: 239: 
12967: 12879: 12791: 240: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
12968: 12880: 12792: 241:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
12969: 12881: 12793: 242:     **Pixel Art Representation:**  
12970: 12882: 12794: 243:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
12971: 12883: 12795: 244: 
12972: 12884: 12796: 245: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
12973: 12885: 12797: 246:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
12974: 12886: 12798: 247:     **Pixel Art Representation:**  
12975: 12887: 12799: 248:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
12976: 12888: 12800: 249: 
12977: 12889: 12801: 250: 14. **✨⬆️ Falling Star (Down, Up)**  
12978: 12890: 12802: 251:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
12979: 12891: 12803: 252:     **Pixel Art Representation:**  
12980: 12892: 12804: 253:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
12981: 12893: 12805: 254: 
12982: 12894: 12806: 255: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
12983: 12895: 12807: 256:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
12984: 12896: 12808: 257:     **Pixel Art Representation:**  
12985: 12897: 12809: 258:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
12986: 12898: 12810: 259: 
12987: 12899: 12811: 260: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
12988: 12900: 12812: 261:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
12989: 12901: 12813: 262:     **Pixel Art Representation:**  
12990: 12902: 12814: 263:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
12991: 12903: 12815: 264: 
12992: 12904: 12816: 265: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
12993: 12905: 12817: 266: 
12994: 12906: 12818: 267: ### **Hazards & Interactions:**
12995: 12907: 12819: 268: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
12996: 12908: 12820: 269: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
12997: 12909: 12821: 270: - **Ice Patches:** Reduce control and make turns trickier.
12998: 12910: 12822: 271: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
12999: 12911: 12823: 272: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
13000: 12912: 12824: 273: 
13001: 12913: 12825: 274: ---
13002: 12914: 12826: 275: 
13003: 12915: 12827: 276: ## 🔧 **Upgrade System**
13004: 12916: 12828: 277: 
13005: 12917: 12829: 278: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
13006: 12918: 12830: 279: | Upgrade                    | Effect                                             |
13007: 12919: 12831: 280: |----------------------------|----------------------------------------------------|
13008: 12920: 12832: 281: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
13009: 12921: 12833: 282: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
13010: 12922: 12834: 283: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
13011: 12923: 12835: 284: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
13012: 12924: 12836: 285: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
13013: 12925: 12837: 286: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
13014: 12926: 12838: 287: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
13015: 12927: 12839: 288: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
13016: 12928: 12840: 289: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
13017: 12929: 12841: 290: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
13018: 12930: 12842: 291: 
13019: 12931: 12843: 292: ### 🏔️ Mountain Upgrades (Resort Expansion)
13020: 12932: 12844: 293: | Upgrade                        | Effect                                                         |
13021: 12933: 12845: 294: |--------------------------------|----------------------------------------------------------------|
13022: 12934: 12846: 295: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
13023: 12935: 12847: 296: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
13024: 12936: 12848: 297: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
13025: 12937: 12849: 298: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
13026: 12938: 12850: 299: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
13027: 12939: 12851: 300: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
13028: 12940: 12852: 301: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
13029: 12941: 12853: 302: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
13030: 12942: 12854: 303: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
13031: 12943: 12855: 304: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
13032: 12944: 12856: 305: 
13033: 12945: 12857: 306: ---
13034: 12946: 12858: 307: 
13035: 12947: 12859: 308: ## 🎮 **Mini-Games in SledHEAD**
13036: 12948: 12860: 309: 
13037: 12949: 12861: 310: ### 1. **Animal Photography** 📸🐾
13038: 12950: 12862: 311: - **Objective:**  
13039: 12951: 12863: 312:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
13040: 12952: 12864: 313: - **Mechanics:**  
13041: 12953: 12865: 314:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
13042: 12954: 12866: 315:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
13043: 12955: 12867: 316:   - **Scoring Bonuses:**  
13044: 12956: 12868: 317:     - **Altitude Match Multiplier**  
13045: 12957: 12869: 318:     - **POV Centering Bonus**  
13046: 12958: 12870: 319:     - **Speed Capture Bonus**  
13047: 12959: 12871: 320: - **Upgrades:**  
13048: 12960: 12872: 321:   - **Optimal Optics:** Increases the camera’s POV cone.  
13049: 12961: 12873: 322:   - **Steady Hands:** Reduces camera sway.  
13050: 12962: 12874: 323:   - **Animal Baiting:** Increases rare animal appearance.
13051: 12963: 12875: 324: - **Special Events:**  
13052: 12964: 12876: 325:   - **Rare Animal Sightings** and **Storm Photography**.
13053: 12965: 12877: 326: - **Risk/Challenge:**  
13054: 12966: 12878: 327:   - **Repeat Photo Penalty** and aggressive animal disruptions.
13055: 12967: 12879: 328: 
13056: 12968: 12880: 329: ---
13057: 12969: 12881: 330: 
13058: 12970: 12882: 331: ### 2. **Fishing** 🎣🐟  
13059: 12971: 12883: 332: - **Objective:**  
13060: 12972: 12884: 333:   Catch fish using various techniques and bait types.
13061: 12973: 12885: 334: - **Mechanics:**  
13062: 12974: 12886: 335:   - Dynamic water simulation with varied fish behaviors.  
13063: 12975: 12887: 336:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
13064: 12976: 12888: 337:   - Legendary fish yield major rewards.
13065: 12977: 12889: 338: - **Upgrades:**  
13066: 12978: 12890: 339:   - Stronger fishing lines, advanced lures, and sonar detection.
13067: 12979: 12891: 340: - **Special Events:**  
13068: 12980: 12892: 341:   - Fishing tournaments and rare migration patterns.
13069: 12981: 12893: 342: - **Risk/Challenge:**  
13070: 12982: 12894: 343:   - Line snapping and predator interference.
13071: 12983: 12895: 344: 
13072: 12984: 12896: 345: ---
13073: 12985: 12897: 346: 
13074: 12986: 12898: 347: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
13075: 12987: 12899: 348: - **Objective:**  
13076: 12988: 12900: 349:   Unlock doors, safes, and hidden compartments.
13077: 12989: 12901: 350: - **Mechanics:**  
13078: 12990: 12902: 351:   - Use tools like **rakes, hooks, and tension wrenches**.  
13079: 12991: 12903: 352:   - Navigate traps such as alarms and rusted internals.
13080: 12992: 12904: 353: - **Upgrades:**  
13081: 12993: 12905: 354:   - High-quality picks, electronic bypass tools, and vibration sensors.
13082: 12994: 12906: 355: - **Special Events:**  
13083: 12995: 12907: 356:   - Timed heists and races with rival scavengers.
13084: 12996: 12908: 357: - **Risk/Challenge:**  
13085: 12997: 12909: 358:   - Unstable buildings and hazards that may alert authorities.
13086: 12998: 12910: 359: 
13087: 12999: 12911: 360: ---
13088: 13000: 12912: 361: 
13089: 13001: 12913: 362: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
13090: 13002: 12914: 363: - **Objective:**  
13091: 13003: 12915: 364:   Find buried treasure using maps, clues, and metal detectors.
13092: 13004: 12916: 365: - **Mechanics:**  
13093: 13005: 12917: 366:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
13094: 13006: 12918: 367:   - Digging requires stamina management and upgraded tools.
13095: 13007: 12919: 368: - **Upgrades:**  
13096: 13008: 12920: 369:   - Advanced metal detectors, excavation tools, and digging drones.
13097: 13009: 12921: 370: - **Special Events:**  
13098: 13010: 12922: 371:   - NPC treasure races and secret cache discoveries.
13099: 13011: 12923: 372: - **Risk/Challenge:**  
13100: 13012: 12924: 373:   - Booby traps, hostile environments, and law enforcement risks.
13101: 13013: 12925: 374: 
13102: 13014: 12926: 375: ---
13103: 13015: 12927: 376: 
13104: 13016: 12928: 377: ### 5. **Kite Flying** 🪁🌬️  
13105: 13017: 12929: 378: - **Objective:**  
13106: 13018: 12930: 379:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
13107: 13019: 12931: 380: - **Mechanics:**  
13108: 13020: 12932: 381:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
13109: 13021: 12933: 382:   - **Downhill:** Kites extend air time and grant special bonuses.
13110: 13022: 12934: 383: - **Upgrades:**  
13111: 13023: 12935: 384:   - **Glide Boost, Speed Stream, and Aero Control.**
13112: 13024: 12936: 385: - **Special Events:**  
13113: 13025: 12937: 386:   - **Storm Riding** with higher boosts but riskier winds.
13114: 13026: 12938: 387: - **Risk/Challenge:**  
13115: 13027: 12939: 388:   - Strong gusts may destabilize your kite.
13116: 13028: 12940: 389: 
13117: 13029: 12941: 390: ---
13118: 13030: 12942: 391: 
13119: 13031: 12943: 392: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
13120: 13032: 12944: 393: - **Objective:**  
13121: 13033: 12945: 394:   Search for valuable minerals, gems, and gold.
13122: 13034: 12946: 395: - **Mechanics:**  
13123: 13035: 12947: 396:   - Explore rivers, caves, and rock formations.  
13124: 13036: 12948: 397:   - **Panning:** Swirl water to separate gold.  
13125: 13037: 12949: 398:   - **Pickaxe Mining:** Break rocks for hidden gems.
13126: 13038: 12950: 399: - **Upgrades:**  
13127: 13039: 12951: 400:   - High-tech panning kits, seismic scanners, precision drills.
13128: 13040: 12952: 401: - **Special Events:**  
13129: 13041: 12953: 402:   - Gold rush hotspots, rare mineral finds, and cave-ins.
13130: 13042: 12954: 403: - **Risk/Challenge:**  
13131: 13043: 12955: 404:   - Unstable ground and rival prospectors.
13132: 13044: 12956: 405: 
13133: 13045: 12957: 406: ---
13134: 13046: 12958: 407: 
13135: 13047: 12959: 408: ### 7. **Cryptid Fossil Digging** 🦴🔍  
13136: 13048: 12960: 409: - **Objective:**  
13137: 13049: 12961: 410:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
13138: 13050: 12962: 411: - **Mechanics:**  
13139: 13051: 12963: 412:   - Use brushes, chisels, and excavation tools to reveal fossils.  
13140: 13052: 12964: 413:   - Transport fossils to the museum at the base of the first mountain.
13141: 13053: 12965: 414: - **Upgrades:**  
13142: 13054: 12966: 415:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
13143: 13055: 12967: 416: - **Special Events:**  
13144: 13056: 12968: 417:   - Competing paleontologists and hidden dig sites.
13145: 13057: 12969: 418: - **Risk/Challenge:**  
13146: 13058: 12970: 419:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
13147: 13059: 12971: 420: 
13148: 13060: 12972: 421: ---
13149: 13061: 12973: 422: 
13150: 13062: 12974: 423: ### 8. **Sled Tricking** 🛷✨  
13151: 13063: 12975: 424: - **Objective:**  
13152: 13064: 12976: 425:   Chain together aerial sled tricks to earn cash and boost fan engagement.
13153: 13065: 12977: 426: - **Mechanics:**  
13154: 13066: 12978: 427:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
13155: 13067: 12979: 428:   - Chain tricks for higher multipliers.
13156: 13068: 12980: 429: - **Upgrades:**  
13157: 13069: 12981: 430:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
13158: 13070: 12982: 431: - **Special Events:**  
13159: 13071: 12983: 432:   - Trick challenges and fan-requested stunt competitions.
13160: 13072: 12984: 433: - **Risk/Challenge:**  
13161: 13073: 12985: 434:   - Mistimed tricks can cause crashes and loss of earnings.
13162: 13074: 12986: 435: 
13163: 13075: 12987: 436: ---
13164: 13076: 12988: 437: 
13165: 13077: 12989: 438: ### 9. **Time Trial Racing** 🏁🛷  
13166: 13078: 12990: 439: - **Objective:**  
13167: 13079: 12991: 440:   Trigger time trial races by hitting gates while sledding for money rewards.
13168: 13080: 12992: 441: - **Mechanics:**  
13169: 13081: 12993: 442:   - Crossing a time trial gate starts a timer.  
13170: 13082: 12994: 443:   - The faster and further you go, the more money you earn.
13171: 13083: 12995: 444: - **Why It Fits:**  
13172: 13084: 12996: 445:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
13173: 13085: 12997: 446: 
13174: 13086: 12998: 447: ---
13175: 13087: 12999: 448: 
13176: 13088: 13000: 449: ### 10. **RC Motor Sled** ❄️🏎️  
13177: 13089: 13001: 450: - **Objective:**  
13178: 13090: 13002: 451:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
13179: 13091: 13003: 452: - **Mechanics:**  
13180: 13092: 13004: 453:   - Maneuver nimble RC sleds across frozen tundra.  
13181: 13093: 13005: 454:   - Nitro boosts and mid-air tricks enhance performance.  
13182: 13094: 13006: 455:   - Customization options include different sled bodies, engines, and handling upgrades.
13183: 13095: 13007: 456: - **Special Events:**  
13184: 13096: 13008: 457:   - Avalanche races, night rides, and hazard runs.
13185: 13097: 13009: 458: - **Risk/Challenge:**  
13186: 13098: 13010: 459:   - Limited battery life, high winds, and signal loss in deep snow.
13187: 13099: 13011: 460: 
13188: 13100: 13012: 461: ---
13189: 13101: 13013: 462: 
13190: 13102: 13014: 463: ### 11. **Sap Sugaring** 🍁🔥  
13191: 13103: 13015: 464: - **Objective:**  
13192: 13104: 13016: 465:   Tap into nature’s sweetest resource—maple syrup! Harvest sap from trees to create energy-restoring treats and valuable trade goods.  
13193: 13105: 13017: 466: - **Mechanics:**  
13194: 13106: 13018: 467:   - Start by tapping maple trees on the starter mountain.  
13195: 13107: 13019: 468:   - Explore new regions to discover exotic trees like the **Cinderwillow** on Volcano Mountain, producing rare and powerful saps.  
13196: 13108: 13020: 469:   - Upgrade your tapping tools and storage tanks to increase yield and quality.  
13197: 13109: 13021: 470: - **Upgrades:**  
13198: 13110: 13022: 471:   - **Precision Taps:** Extract sap faster with reduced waste.  
13199: 13111: 13023: 472:   - **Insulated Buckets:** Prevent spoilage and maximize collection.  
13200: 13112: 13024: 473:   - **Sap Refinery:** Process sap into premium syrup with added benefits.  
13201: 13113: 13025: 474: 
13202: 13114: 13026: 475: ---
13203: 13115: 13027: 476: 
13204: 13116: 13028: 477: ### 12. **Beekeeping** 🐝🍯  
13205: 13117: 13029: 478: - **Objective:**  
13206: 13118: 13030: 479:   Raise and breed bees to produce high-quality honey and wax, each offering unique benefits for sledding, income, and buffs.  
13207: 13119: 13031: 480: - **Mechanics:**  
13208: 13120: 13032: 481:   - Manage beehives and optimize honey production.  
13209: 13121: 13033: 482:   - Crossbreed bees to develop specialized traits.  
13210: 13122: 13034: 483:   - Explore forests to find and capture new queen bees.  
13211: 13123: 13035: 484:   - Maintain hive conditions to ensure steady honey and wax yields.  
13212: 13124: 13036: 485: - **Upgrades:**  
13213: 13125: 13037: 486:   - **Deluxe Hives:** Improve bee happiness and productivity.  
13214: 13126: 13038: 487:   - **Queen Breeding Chambers:** Unlock advanced genetic traits for custom honey effects.  
13215: 13127: 13039: 488:   - **Protective Suits & Smokers:** Handle bees safely and reduce swarm risks.  
13216: 13128: 13040: 489: - **Special Events:**  
13217: 13129: 13041: 490:   - **Swarm Rescues:** Save lost colonies for rare genetic lines.  
13218: 13130: 13042: 491:   - **Beekeeper Pete’s Challenges:** Complete tricky hive management tasks for rewards.  
13219: 13131: 13043: 492: 
13220: 13132: 13044: 493: ---
13221: 13133: 13045: 494: 
13222: 13134: 13046: 495: ## 🌆 **NPCs & Mountain Ecosystem**
13223: 13135: 13047: 496: A thriving **mountain resort** needs a mix of **essential services, skilled specialists, and quirky legends**. These NPCs **enhance gameplay, create dynamic events, and unlock hidden mechanics**.
13224: 13136: 13048: 497: 
13225: 13137: 13049: 498: ---
13226: 13138: 13050: 499: 
13227: 13139: 13051: 500: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
13228: 13140: 13052: 501: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
13229: 13141: 13053: 502: 
13230: 13142: 13054: 503: #### 🏂 **Sled Tech Steve**
13231: 13143: 13055: 504: - **Purpose:** Repairs damage, sells sled mods.
13232: 13144: 13056: 505: - **Example Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
13233: 13145: 13057: 506: - **Best Quote:** *"What’d ya do, run into a bear during a race? I can fix it… for a price."*
13234: 13146: 13058: 507: 
13235: 13147: 13059: 508: #### 🍔 **Food Vendor**
13236: 13148: 13060: 509: - **Purpose:** Sells food that provides **stamina buffs & temporary performance boosts**.
13237: 13149: 13061: 510: - **Example Menu:** **Hot cocoa (warmth boost), Protein bars (stamina regen), Energy drinks (speed burst).**
13238: 13150: 13062: 511: - **Best Quote:** *"You can't land tricks on an empty stomach!"*
13239: 13151: 13063: 512: 
13240: 13152: 13064: 513: #### 🎈 **Lift Operator Jay** *(kite enthusiast)*
13241: 13153: 13065: 514: - **Purpose:** Manages lifts, introduces **kite mechanics** for gliding shortcuts.
13242: 13154: 13066: 515: - **Example Unlocks:** **Kite rentals, lift season passes, wind path hints.**
13243: 13155: 13067: 516: - **Best Quote:** *"Ever thought about catching air... without your sled?"*
13244: 13156: 13068: 517: 
13245: 13157: 13069: 518: #### 🏨 **The Hotel Hostess**
13246: 13158: 13070: 519: - **Purpose:** Offers accommodations & **passive income based on popularity**.
13247: 13159: 13071: 520: - **Example Unlocks:** **Penthouse suites, reputation perks, tourism boosts.**
13248: 13160: 13072: 521: - **Best Quote:** *"The more people love this place, the more we all win."*
13249: 13161: 13073: 522: 
13250: 13162: 13074: 523: #### 🏪 **Convenience Store Owner Tilly**
13251: 13163: 13075: 524: - **Purpose:** Sells consumables, **prospecting gear**, and utility tools.
13252: 13164: 13076: 525: - **Example Stock:** **Batteries, flares, bait, shovels.**
13253: 13165: 13077: 526: - **Best Quote:** *"You never know when you’ll need an extra pack of hand warmers."*
13254: 13166: 13078: 527: 
13255: 13167: 13079: 528: #### 🏔️ **Resort Manager Montana Snow**
13256: 13168: 13080: 529: - **Purpose:** Oversees **mountain upgrades & expansion.**
13257: 13169: 13081: 530: - **Example Unlocks:** **New trails, safety patrols, winter festivals.**
13258: 13170: 13082: 531: - **Best Quote:** *"A bigger, better mountain keeps ‘em coming back!"*
13259: 13171: 13083: 532: 
13260: 13172: 13084: 533: ---
13261: 13173: 13085: 534: 
13262: 13174: 13086: 535: ### 🏆 **Trick & Racing-Oriented NPCs**
13263: 13175: 13087: 536: These **drive skill progression**—unlocking **better tricks, harder competitions, and high-stakes challenges**.
13264: 13176: 13088: 537: 
13265: 13177: 13089: 538: #### 📸 **Hype Photographer Darlene**
13266: 13178: 13090: 539: - **Purpose:** **Photo verification & bonus earnings** for sick tricks.
13267: 13179: 13091: 540: - **Example Unlocks:** **Sponsor deals, cinematic trick replays.**
13268: 13180: 13092: 541: - **Best Quote:** *"If it ain't on camera, did it even happen?"*
13269: 13181: 13093: 542: 
13270: 13182: 13094: 543: #### 🏅 **Stunt Organizer Whistler**
13271: 13183: 13095: 544: - **Purpose:** Hosts **extreme challenge events**—big air, freestyle sessions.
13272: 13184: 13096: 545: - **Example Unlocks:** **Timed trick courses, skydiving sled events.**
13273: 13185: 13097: 546: - **Best Quote:** *"I wanna see something so crazy I forget my own name!"*
13274: 13186: 13098: 547: 
13275: 13187: 13099: 548: #### 🏁 **Race Commissioner Cannon**
13276: 13188: 13100: 549: - **Purpose:** Runs **competitions & time trials**.
13277: 13189: 13101: 550: - **Example Unlocks:** **Speed sleds, racing circuits, timed event boards.**
13278: 13190: 13102: 551: - **Best Quote:** *"Fastest run gets the trophy—simple as that."*
13279: 13191: 13103: 552: 
13280: 13192: 13104: 553: #### 🏂 **Retired Pro Burton**
13281: 13193: 13105: 554: - **Purpose:** **Teaches advanced tricks & unlocks sledboarding**.
13282: 13194: 13106: 555: - **Example Unlocks:** **Sled-to-board transitions, trick combos.**
13283: 13195: 13107: 556: - **Best Quote:** *"Back in my day, we landed tricks with style. I can show ya how."*
13284: 13196: 13108: 557: 
13285: 13197: 13109: 558: ---
13286: 13198: 13110: 559: 
13287: 13199: 13111: 560: ### 🏔️ **World-Building & Exploration NPCs**
13288: 13200: 13112: 561: These **add depth, side quests, and hidden mechanics** to the world.
13289: 13201: 13113: 562: 
13290: 13202: 13114: 563: #### 🐾 **Wildlife Researcher**
13291: 13203: 13115: 564: - **Purpose:** Tracks **rare animal spawns, photographic missions, fishing spots.**
13292: 13204: 13116: 565: - **Example Unlocks:** **Bear sightings, falcon partner, eco-tourism quests.**
13293: 13205: 13117: 566: - **Best Quote:** *"You ever seen a snow leopard up close? Neither have I… yet."*
13294: 13206: 13118: 567: 
13295: 13207: 13119: 568: #### 🚑 **Sled Patrol Captain**
13296: 13208: 13120: 569: - **Purpose:** Leads **rescue missions & avalanche drills.**
13297: 13209: 13121: 570: - **Example Unlocks:** **Emergency sled deployment, survival training.**
13298: 13210: 13122: 571: - **Best Quote:** *"We save people, we don’t just watch ‘em wipe out."*
13299: 13211: 13123: 572: 
13300: 13212: 13124: 573: ---
13301: 13213: 13125: 574: 
13302: 13214: 13126: 575: ### 🎭 **Traveling & Recurring NPCs**
13303: 13215: 13127: 576: They **come and go**, bringing **special challenges, rare gear, and unpredictable encounters**.
13304: 13216: 13128: 577: 
13305: 13217: 13129: 578: #### 🔥 **Rival**
13306: 13218: 13130: 579: - **Purpose:** **Dynamic trick/time trial duels.**
13307: 13219: 13131: 580: - **Example Unlocks:** **Personalized callouts, grudge matches, rare sled decals.**
13308: 13220: 13132: 581: - **Best Quote:** *"You think you’re better than me? Prove it."*
13309: 13221: 13133: 582: 
13310: 13222: 13134: 583: #### 🎩 **Mysterious Merchant**
13311: 13223: 13135: 584: - **Purpose:** **Sells rare & high-risk tech**—limited stock, always random.
13312: 13224: 13136: 585: - **Example Stock:** **Prototype sled engines, cloaking wax, ghost sled.**
13313: 13225: 13137: 586: - **Best Quote:** *"I sell only to those who dare."*
13314: 13226: 13138: 587: 
13315: 13227: 13139: 588: #### 🔧 **Tinkerer**
13316: 13228: 13140: 589: - **Purpose:** **Experimental tech**—RC sleds, lock-picking, custom builds.
13317: 13229: 13141: 590: - **Example Unlocks:** **Remote sleds, grappling hooks, hacking upgrades.**
13318: 13230: 13142: 591: - **Best Quote:** *"You didn’t hear this from me, but I might’ve… *enhanced* a sled or two."*
13319: 13231: 13143: 592: 
13320: 13232: 13144: 593: ---
13321: 13233: 13145: 594: 
13322: 13234: 13146: 595: ### ❄️ **Legendary NPCs**
13323: 13235: 13147: 596: These are **mythic figures**, unlocking **wild game mechanics, hidden areas, and secret challenges**.
13324: 13236: 13148: 597: 
13325: 13237: 13149: 598: #### 🌨️ **Winter Shaman Bromley**
13326: 13238: 13150: 599: - **Purpose:** **Controls weather effects**—snowstorms, icy terrain, wind boosts.
13327: 13239: 13151: 600: - **Example Unlocks:** **Weather manipulation quests, legendary snowboards.**
13328: 13240: 13152: 601: - **Best Quote:** *"The mountain speaks… and I listen."*
13329: 13241: 13153: 602: 
13330: 13242: 13154: 603: #### 🐻 **Bear Whisperer Carrie**
13331: 13243: 13155: 604: - **Purpose:** Unlocks **bear-racing.**
13332: 13244: 13156: 605: - **Example Unlocks:** **Bear races, such as Time Trials and Elimination.**
13333: 13245: 13157: 606: - **Best Quote:** *"Bears don’t bite... if you know how to ask nicely."*
13334: 13246: 13158: 607: 
13335: 13247: 13159: 608: #### 🐝 **Beekeeper Pete**
13336: 13248: 13160: 609: - **Purpose:** Sells **beekeeping upgrades**.
13337: 13249: 13161: 610: - **Example Unlocks:** **Speed honey, frost-resistant sled wax.**
13338: 13250: 13162: 611: - **Best Quote:** *"Snow bees? Oh yeah, they’re real… and fast."*
13339: 13251: 13163: 612: 
13340: 13252: 13164: 613: #### ⏳ **The Time Traveler**
13341: 13253: 13165: 614: - **Purpose:** Unlocks **cryptid fossil digging & timeline anomalies.**
13342: 13254: 13166: 615: - **Example Unlocks:** **Ancient sleds, legendary trails, prehistoric snowboard challenges.**
13343: 13255: 13167: 616: - **Best Quote:** *"The past isn’t gone—it’s just buried under the snow."*
13344: 13256: 13168: 617: 
13345: 13257: 13169: 618: ---
13346: 13258: 13170: 619: 
13347: 13259: 13171: 620: ## 🎮 Enhanced Controls & UI Improvements
13348: 13260: 13172: 621: - Fully customizable control remapping
13349: 13261: 13173: 622: - Comprehensive tutorial and onboarding systems
13350: 13262: 13174: 623: - Improved HUD clarity (stamina, trick scoring, wildlife photography)
13351: 13263: 13175: 624: 
13352: 13264: 13176: 625: ---
13353: 13265: 13177: 626: 
13354: 13266: 13178: 627: ## 🏔️ **Mountain Themes & Progression**
13355: 13267: 13179: 628: 
13356: 13268: 13180: 629: ### Lava Mountain 🌋
13357: 13269: 13181: 630: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
13358: 13270: 13182: 631: - **Mechanics:**  
13359: 13271: 13183: 632:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
13360: 13272: 13184: 633:   - **Ash Clouds:** Temporarily block visibility.
13361: 13273: 13185: 634: - **Power-Up:** **Heat Shielding Sled Coating**  
13362: 13274: 13186: 635:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
13363: 13275: 13187: 636: 
13364: 13276: 13188: 637: ---
13365: 13277: 13189: 638: 
13366: 13278: 13190: 639: ### Space Mountain 🌌
13367: 13279: 13191: 640: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
13368: 13280: 13192: 641: - **Mechanics:**  
13369: 13281: 13193: 642:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
13370: 13282: 13194: 643:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
13371: 13283: 13195: 644: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
13372: 13284: 13196: 645:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
13373: 13285: 13197: 646: 
13374: 13286: 13198: 647: ---
13375: 13287: 13199: 648: 
13376: 13288: 13200: 649: ### Underwater Mountain 🌊
13377: 13289: 13201: 650: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
13378: 13290: 13202: 651: - **Mechanics:**  
13379: 13291: 13203: 652:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
13380: 13292: 13204: 653: - **Power-Up:** **Aqua-Lung Mittens**  
13381: 13293: 13205: 654:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
13382: 13294: 13206: 655: 
13383: 13295: 13207: 656: ---
13384: 13296: 13208: 657: 
13385: 13297: 13209: 658: ### Garbage Dump Glacier 🗑️❄️
13386: 13298: 13210: 659: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
13387: 13299: 13211: 660: - **Mechanics:**  
13388: 13300: 13212: 661:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
13389: 13301: 13213: 662: - **Power-Up:** **Slick Wax Spray**  
13390: 13302: 13214: 663:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
13391: 13303: 13215: 664: 
13392: 13304: 13216: 665: ---
13393: 13305: 13217: 666: 
13394: 13306: 13218: 667: ### Micro Mountain 🐜🌱
13395: 13307: 13219: 668: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
13396: 13308: 13220: 669: - **Mechanics:**  
13397: 13309: 13221: 670:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
13398: 13310: 13222: 671: - **Power-Up:** **Antigrav Wax**  
13399: 13311: 13223: 672:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
13400: 13312: 13224: 673: 
13401: 13313: 13225: 674: ---
13402: 13314: 13226: 675: 
13403: 13315: 13227: 676: ### Candy Cane Canyon 🍭
13404: 13316: 13228: 677: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
13405: 13317: 13229: 678: - **Mechanics:**  
13406: 13318: 13230: 679:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
13407: 13319: 13231: 680: - **Power-Up:** **Sweet-Tooth Coating**  
13408: 13320: 13232: 681:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
13409: 13321: 13233: 682: 
13410: 13322: 13234: 683: ---
13411: 13323: 13235: 684: 
13412: 13324: 13236: 685: ### Crystal Cave Cavern 🔮
13413: 13325: 13237: 686: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
13414: 13326: 13238: 687: - **Mechanics:**  
13415: 13327: 13239: 688:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
13416: 13328: 13240: 689: - **Power-Up:** **Crystal Clear Goggles**  
13417: 13329: 13241: 690:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
13418: 13330: 13242: 691: 
13419: 13331: 13243: 692: ---
13420: 13332: 13244: 693: 
13421: 13333: 13245: 694: ### Haunted Graveyard Hill 👻
13422: 13334: 13246: 695: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
13423: 13335: 13247: 696: - **Mechanics:**  
13424: 13336: 13248: 697:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
13425: 13337: 13249: 698: - **Power-Up:** **Spirit Lantern**  
13426: 13338: 13250: 699:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
13427: 13339: 13251: 700: 
13428: 13340: 13252: 701: ---
13429: 13341: 13253: 702: 
13430: 13342: 13254: 703: ### Sky Jellyfish Mountain ☁️🪼
13431: 13343: 13255: 704: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
13432: 13344: 13256: 705: - **Mechanics:**  
13433: 13345: 13257: 706:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
13434: 13346: 13258: 707: - **Power-Up:** **Stabilizer Sled Rails**  
13435: 13347: 13259: 708:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
13436: 13348: 13260: 709: 
13437: 13349: 13261: 710: ---
13438: 13350: 13262: 711: 
13439: 13351: 13263: 712: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
13440: 13352: 13264: 713: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
13441: 13353: 13265: 714: - **Mechanics:**  
13442: 13354: 13266: 715:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
13443: 13355: 13267: 716: - **Power-Up:** **Clockwork Treads**  
13444: 13356: 13268: 717:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
13445: 13357: 13269: 718: 
13446: 13358: 13270: 719: ---
13447: 13359: 13271: 720: 
13448: 13360: 13272: 721: ### Pyramid Peak 🐫🏜️
13449: 13361: 13273: 722: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
13450: 13362: 13274: 723: - **Mechanics:**  
13451: 13363: 13275: 724:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
13452: 13364: 13276: 725: - **Power-Up:** **Sandrunner Skis**  
13453: 13365: 13277: 726:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
13454: 13366: 13278: 727: 
13455: 13367: 13279: 728: ---
13456: 13368: 13280: 729: 
13457: 13369: 13281: 730: ### Digital Mountain (Cyber Slopes) 💻🔮
13458: 13370: 13282: 731: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
13459: 13371: 13283: 732: - **Mechanics:**  
13460: 13372: 13284: 733:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
13461: 13373: 13285: 734: - **Power-Up:** **Data Shielding**  
13462: 13374: 13286: 735:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
13463: 13375: 13287: 736: 
13464: 13376: 13288: 737: ---
13465: 13377: 13289: 738: 
13466: 13378: 13290: 739: 🔄 Infinite Upgrades with Soft Caps
13467: 13379: 13291: 740: ===================================
13468: 13380: 13292: 741: 
13469: 13381: 13293: 742: **Expanding Progression Without Breaking Balance**
13470: 13382: 13294: 743: 
13471: 13383: 13295: 744: Currently, upgrades in **SledHEAD** have **hard caps**, limiting how many times they can be purchased. While this provides structure, it **restricts long-term progression** and prevents **emergent playstyles** from evolving over multiple runs. To keep **each run fresh and engaging**, we're shifting to an **infinite upgrade system** with **diminishing returns** beyond a **soft cap** for
13472: 13384: 13296: 745: **Personal Upgrades**. **Mountain Upgrades** will
13473: 13385: 13297: 746: need to be rebought for each new mountain purchased, and
13474: 13386: 13298: 747: may or may not be infinite as appropriate to the upgrade.
13475: 13387: 13299: 748: 
13476: 13388: 13300: 749: 🎯 Proposed Solution
13477: 13389: 13301: 750: --------------------
13478: 13390: 13302: 751: 
13479: 13391: 13303: 752: -   **All upgrades become infinitely upgradable.**
13480: 13392: 13304: 753: -   Each upgrade **retains its effectiveness early on** but **scales down gradually** beyond a set level.
13481: 13393: 13305: 754: -   **Soft caps vary** depending on the upgrade type:
13482: 13394: 13306: 755:     -   **Speed upgrades** could start diminishing at **Level 10**.
13483: 13395: 13307: 756:     -   **Trick bonuses** could scale freely until **Level 20** before slowing down.
13484: 13396: 13308: 757: -   **Mathematical balancing** ensures that upgrades remain **meaningful** but **don't become overpowered**.
13485: 13397: 13309: 758: 
13486: 13398: 13310: 759: 📊 Scaling Formula: Exponential & Logarithmic Decay
13487: 13399: 13311: 760: ---------------------------------------------------
13488: 13400: 13312: 761: 
13489: 13401: 13313: 762: Instead of **linear scaling** (e.g., "+1 Speed per level"), we use **diminishing returns** to keep upgrades valuable without breaking balance.
13490: 13402: 13314: 763: 
13491: 13403: 13315: 764: ### ✏ Formula Example:
13492: 13404: 13316: 765: 
13493: 13405: 13317: 766: newValue = baseValue + (scalingFactor * sqrt(level))
13494: 13406: 13318: 767: 
13495: 13407: 13319: 768: -   **Early levels feel impactful**, allowing noticeable improvements.
13496: 13408: 13320: 769: -   **Later levels slow down naturally**, preventing infinite stacking from making players overpowered.
13497: 13409: 13321: 770: -   Works across **various upgrade types**, from **speed boosts to trick multipliers**.
13498: 13410: 13322: 771: 
13499: 13411: 13323: 772: 🔎 **Alternative Approach: Logarithmic Scaling**\
13500: 13412: 13324: 773: For upgrades that should scale *aggressively early on* but taper off smoothly:
13501: 13413: 13325: 774: 
13502: 13414: 13326: 775: newValue = baseValue * (1 + (scalingFactor * log(level + 1)))
13503: 13415: 13327: 776: 
13504: 13416: 13328: 777: -   Great for upgrades like **boost charge rates or sled handling**, where a **big early impact** makes sense but **total mastery should be gradual**.
13505: 13417: 13329: 778: 
13506: 13418: 13330: 779: ✅ Benefits of Infinite Upgrades with Soft Caps
13507: 13419: 13331: 780: ----------------------------------------------
13508: 13420: 13332: 781: 
13509: 13421: 13333: 782: ✔ **Keeps long-term progression engaging** -- No artificial "max level" bottleneck.\
13510: 13422: 13334: 783: ✔ **Encourages specialized strategies** -- Players can **focus on speed, tricks, or economy-based builds**.\
13511: 13423: 13335: 784: ✔ **Prevents upgrade obsolescence** -- Players **always have something meaningful to invest in**.\
13512: 13424: 13336: 785: ✔ **Maintains challenge balance** -- Runs become **progressively stronger**, but not infinitely easy.
13513: 13425: 13337: 786: 
13514: 13426: 13338: 787: 📌 Tasks & Implementation Plan
13515: 13427: 13339: 788: ------------------------------
13516: 13428: 13340: 789: 
13517: 13429: 13341: 790: -   [ ]  **Remove hard upgrade caps** for all current upgrades.
13518: 13430: 13342: 791: -   [ ]  **Implement soft cap mechanics** using **square root or logarithmic scaling**.
13519: 13431: 13343: 792: -   [ ]  **Fine-tune soft cap levels** for different upgrade categories (e.g., Speed vs. Trick Boosts).
13520: 13432: 13344: 793: -   [ ]  **Balance test progression** to ensure **long-term upgrades stay meaningful but not overpowered**.
13521: 13433: 13345: 794: 
13522: 13434: 13346: 795: This system ensures **players always have room to grow**, while keeping **SledHEAD's challenge intact**. 🚀🔥
13523: 13435: 13347: 796: 
13524: 13436: 13348: 797: ---
13525: 13437: 13349: 798: 
13526: 13438: 13350: 799: ## 🏆 Endgame & Prestige Content
13527: 13439: 13351: 800: - Prestige system for continued replayability
13528: 13440: 13352: 801: - Elite sled runs with intensified challenges
13529: 13441: 13353: 802: - Legendary animal photo hunts for ultimate rewards
13530: 13442: 13354: 803: 
13531: 13443: 13355: 804: ---
13532: 13444: 13356: 805: 
13533: 13445: 13357: 806: ## 📅 Development Milestones & Timeline
13534: 13446: 13358: 807: ### Short-Term:
13535: 13447: 13359: 808: - Implement stamina system, basic uphill-downhill gameplay
13536: 13448: 13360: 809: - Expand wildlife photography with rare animals at altitude
13537: 13449: 13361: 810: - Basic personal and mountain upgrades functionality
13538: 13450: 13362: 811: 
13539: 13451: 13363: 812: ### Mid-Term:
13540: 13452: 13364: 813: - Integrate the light/dark gradient altitude system to enhance visual depth and player navigation
13541: 13453: 13365: 814: - Introduce NPCs and interactive infrastructure
13542: 13454: 13366: 815: - Initial mini-games integration
13543: 13455: 13367: 816: 
13544: 13456: 13368: 817: ### Long-Term:
13545: 13457: 13369: 818: - Add mountain biomes and unique thematic mechanics
13546: 13458: 13370: 819: - Fully expand trick system
13547: 13459: 13371: 820: - Complete mini-games and endgame challenges
13548: 13460: 13372: 821: - Polish UI/UX and refine progression systems
13549: 13461: 13373: 822: 
13550: 13462: 13374: 823: ---
13551: 13463: 13375: 824: 
13552: 13464: 13376: 825: This comprehensive roadmap encapsulates all planned features and mechanics, clearly outlines the development trajectory, and integrates your newly defined gameplay mechanic. Use this as your foundational documentation moving forward to guide development clearly and effectively.
13553: 13465: 13377: ``````
13554: 13466: 13378: 
13555: 13467: 13379: ## File: js/stamina.js
13556: 13468: 13380: ``````javascript
13557: 13469: 13381:   1: // Global counter for stamina depletion re-entries
13558: 13470: 13382:   2: let reentryCount = 0;
13559: 13471: 13383:   3: // In stamina.js
13560: 13472: 13384:   4: class Stamina {
13561: 13473: 13385:   5:     constructor() {
13562: 13474: 13386:   6:       this.maxStamina = 100;
13563: 13475: 13387:   7:       this.currentStamina = this.maxStamina;
13564: 13476: 13388:   8:       this.staminaDrainWalking = 0.1;  // Drains steadily when walking uphill
13565: 13477: 13389:   9:       this.staminaDrainJumping = 2.0;    // Drains once on jump launch
13566: 13478: 13390:  10:       this.staminaDrainSledding = 0.01;  // Drains very slowly when sledding
13567: 13479: 13391:  11:       this.isVisible = false;
13568: 13480: 13392:  12:       this.jumpTriggered = false;        // Initialize jump flag
13569: 13481: 13393:  13:       this.previousState = null;         // Track previous game state
13570: 13482: 13394:  14:       this.lastLogTime = 0;              // Timestamp for throttling log messages
13571: 13483: 13395:  15:       this.canvas = document.createElement("canvas");
13572: 13484: 13396:  16:       this.ctx = this.canvas.getContext("2d");
13573: 13485: 13397:  17:       this.canvas.width = 200;
13574: 13486: 13398:  18:       this.canvas.height = 20;
13575: 13487: 13399:  19:       this.canvas.style.position = "fixed";
13576: 13488: 13400:  20:       this.canvas.style.top = "40px";
13577: 13489: 13401:  21:       this.canvas.style.left = "40px";
13578: 13490: 13402:  22:       this.canvas.style.zIndex = "1000";
13579: 13491: 13403:  23:       document.body.appendChild(this.canvas);
13580: 13492: 13404:  24:     }
13581: 13493: 13405:  25:     // New method to drain stamina on jump initiation
13582: 13494: 13406:  26:     drainJump() {
13583: 13495: 13407:  27:       if (!this.jumpTriggered) {
13584: 13496: 13408:  28:         this.currentStamina -= this.staminaDrainJumping;
13585: 13497: 13409:  29:         this.jumpTriggered = true;
13586: 13498: 13410:  30:         this.throttledLog("Jump drain: stamina reduced by " + this.staminaDrainJumping + " New stamina: " + this.currentStamina);
13587: 13499: 13411:  31:       }
13588: 13500: 13412:  32:     }
13589: 13501: 13413:  33:     // Reset jump flag (to be called on landing)
13590: 13502: 13414:  34:     resetJumpTrigger() {
13591: 13503: 13415:  35:       this.jumpTriggered = false;
13592: 13504: 13416:  36:       this.throttledLog("Jump trigger reset");
13593: 13505: 13417:  37:     }
13594: 13506: 13418:  38:     // Throttled logging function to limit messages to once per second
13595: 13507: 13419:  39:     throttledLog(message) {
13596: 13508: 13420:  40:       const currentTime = Date.now();
13597: 13509: 13421:  41:       if (currentTime - this.lastLogTime >= 1000) { // Only log once per second
13598: 13510: 13422:  42:         console.log(message);
13599: 13511: 13423:  43:         this.lastLogTime = currentTime;
13600: 13512: 13424:  44:       }
13601: 13513: 13425:  45:     }
13602: 13514: 13426:  46:     handleStaminaDepletion() {
13603: 13515: 13427:  47:         this.throttledLog("Stamina depleted - returning to house");
13604: 13516: 13428:  48:         // Move player to house
13605: 13517: 13429:  49:         changeState(window.GameState.HOUSE);
13606: 13518: 13430:  50:         // Refill stamina
13607: 13519: 13431:  51:         this.currentStamina = this.maxStamina;
13608: 13520: 13432:  52:         this.throttledLog("Stamina refilled to maximum");
13609: 13521: 13433:  53:         // Despawn all animals
13610: 13522: 13434:  54:         despawnAllAnimals();
13611: 13523: 13435:  55:         this.throttledLog("All animals despawned");
13612: 13524: 13436:  56:         // Calculate and charge re-entry fee
13613: 13525: 13437:  57:         const fee = 100 * (reentryCount + 1);
13614: 13526: 13438:  58:         player.money = Math.max(0, player.money - fee);
13615: 13527: 13439:  59:         this.throttledLog(`Charged re-entry fee: $${fee}`);
13616: 13528: 13440:  60:         // Increment re-entry counter
13617: 13529: 13441:  61:         reentryCount++;
13618: 13530: 13442:  62:         this.throttledLog(`Re-entry count increased to: ${reentryCount}`);
13619: 13531: 13443:  63:     }
13620: 13532: 13444:  64:     update() {
13621: 13533: 13445:  65:       // Check for entering house state (state transition)
13622: 13534: 13446:  66:       const enteringHouse = this.previousState !== window.GameState.HOUSE && window.currentState === window.GameState.HOUSE;
13623: 13535: 13447:  67:       // Only show stamina bar if the player is NOT at home
13624: 13536: 13448:  68:       this.isVisible = (window.currentState !== window.GameState.HOUSE);
13625: 13537: 13449:  69:       if (!this.isVisible) {
13626: 13538: 13450:  70:         if (enteringHouse) {
13627: 13539: 13451:  71:           this.currentStamina = this.maxStamina; // Reset stamina only when entering the house
13628: 13540: 13452:  72:           this.throttledLog("At home - resetting stamina");
13629: 13541: 13453:  73:         }
13630: 13542: 13454:  74:         this.canvas.style.display = "none";
13631: 13543: 13455:  75:         this.previousState = window.currentState; // Update previous state
13632: 13544: 13456:  76:         return;
13633: 13545: 13457:  77:       }
13634: 13546: 13458:  78:       this.canvas.style.display = "block";
13635: 13547: 13459:  79:       // Drain stamina when moving uphill
13636: 13548: 13460:  80:       if (window.currentState === window.GameState.UPHILL) {
13637: 13549: 13461:  81:         if (keysDown["w"] || keysDown["a"] || keysDown["s"] || keysDown["d"]) {
13638: 13550: 13462:  82:           this.currentStamina -= this.staminaDrainWalking;
13639: 13551: 13463:  83:           this.throttledLog("UPHILL movement: draining stamina by " + this.staminaDrainWalking + " Current stamina: " + this.currentStamina);
13640: 13552: 13464:  84:         }
13641: 13553: 13465:  85:       }
13642: 13554: 13466:  86:       // (No jump drain logic here now—it's moved to mechanics.js)
13643: 13555: 13467:  87:       // Drain stamina very slowly when sledding
13644: 13556: 13468:  88:       if (player.isSliding) {
13645: 13557: 13469:  89:         this.currentStamina -= this.staminaDrainSledding;
13646: 13558: 13470:  90:         this.throttledLog("Sledding: draining stamina by " + this.staminaDrainSledding + " Current stamina: " + this.currentStamina);
13647: 13559: 13471:  91:       }
13648: 13560: 13472:  92:       // Check for stamina depletion
13649: 13561: 13473:  93:       if (this.currentStamina <= 0 && window.currentState !== window.GameState.HOUSE) {
13650: 13562: 13474:  94:         this.handleStaminaDepletion();
13651: 13563: 13475:  95:       }
13652: 13564: 13476:  96:       // Clamp stamina value between 0 and max
13653: 13565: 13477:  97:       this.currentStamina = Math.max(0, Math.min(this.currentStamina, this.maxStamina));
13654: 13566: 13478:  98:       // Render the stamina bar
13655: 13567: 13479:  99:       this.render();
13656: 13568: 13480: 100:       // Update previous state
13657: 13569: 13481: 101:       this.previousState = window.currentState;
13658: 13570: 13482: 102:     }
13659: 13571: 13483: 103:     render() {
13660: 13572: 13484: 104:       this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
13661: 13573: 13485: 105:       // Determine stamina bar color based on stamina percentage
13662: 13574: 13486: 106:       let staminaRatio = this.currentStamina / this.maxStamina;
13663: 13575: 13487: 107:       let color = "#00FF00"; // Green (full stamina)
13664: 13576: 13488: 108:       if (staminaRatio < 0.5) color = "#FFA500"; // Orange (moderate stamina)
13665: 13577: 13489: 109:       if (staminaRatio < 0.2) color = "#FF0000"; // Red (critical stamina)
13666: 13578: 13490: 110:       // Draw the bar background
13667: 13579: 13491: 111:       this.ctx.fillStyle = "#333";
13668: 13580: 13492: 112:       this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
13669: 13581: 13493: 113:       // Draw the stamina portion
13670: 13582: 13494: 114:       this.ctx.fillStyle = color;
13671: 13583: 13495: 115:       this.ctx.fillRect(0, 0, this.canvas.width * staminaRatio, this.canvas.height);
13672: 13584: 13496: 116:     }
13673: 13585: 13497: 117:   }
13674: 13586: 13498: 118:   // Initialize stamina system
13675: 13587: 13499: 119:   const stamina = new Stamina();
13676: 13588: 13500: 120:   // Hook into the game's update loop
13677: 13589: 13501: 121:   function updateStamina() {
13678: 13590: 13502: 122:     stamina.update();
13679: 13591: 13503: 123:     requestAnimationFrame(updateStamina);
13680: 13592: 13504: 124:   }
13681: 13593: 13505: 125:   updateStamina();
13682: 13594: 13506: 126: // Make stamina available globally
13683: 13595: 13507: 127: window.stamina = stamina;
13684: 13596: 13508: ``````
13685: 13597: 13509: 
13686: 13598: 13510: ## File: js/wildlife.js
13687: 13599: 13511: ``````javascript
13688: 13600: 13512:   1: /* wildlife.js - Wildlife Simulation (Refactored with Spawning Biomes and Fallback)
13689: 13601: 13513:   2: // This file handles the overall wildlife simulation logic using a registration system.
13690: 13602: 13514:   3: // Each animal module (e.g., bear.js, bird.js, mountainlion.js) registers itself by calling registerAnimalType().
13691: 13603: 13515:   4: // Animals have a "spawningBiomes" property that defines in which biomes and mountain layers they spawn.
13692: 13604: 13516:   5: // If currentBiome is not defined or unrecognized, the system assumes every mountain is valid.
13693: 13605: 13517:   6: */
13694: 13606: 13518:   7: // Global registry for animal types
13695: 13607: 13519:   8: var animalRegistry = [];
13696: 13608: 13520:   9: // Function for animal modules to register themselves
13697: 13609: 13521:  10: function registerAnimalType(animalData) {
13698: 13610: 13522:  11:     animalRegistry.push(animalData);
13699: 13611: 13523:  12:     console.log("Registered animal type: " + animalData.type);
13700: 13612: 13524:  13: }
13701: 13613: 13525:  14: // Global variables for the animal system
13702: 13614: 13526:  15: var activeAnimal = null;
13703: 13615: 13527:  16: var animalStateCheckInterval = null;
13704: 13616: 13528:  17: // ------------------- Animal (Critter) Update Logic -------------------
13705: 13617: 13529:  18: function updateAnimal() {
13706: 13618: 13530:  19:   if (!activeAnimal) return;
13707: 13619: 13531:  20:   // Call custom update if provided
13708: 13620: 13532:  21:   if (activeAnimal.customUpdate && typeof activeAnimal.customUpdate === 'function') {
13709: 13621: 13533:  22:       activeAnimal.customUpdate(activeAnimal);
13710: 13622: 13534:  23:   }
13711: 13623: 13535:  24:   checkPlayerProximity();
13712: 13624: 13536:  25:   if (activeAnimal.state === "fleeing") {
13713: 13625: 13537:  26:     if (!activeAnimal.fleeingLogOnce) {
13714: 13626: 13538:  27:       console.log(`Animal fleeing - Type: ${activeAnimal.type}, Angle: ${activeAnimal.fleeAngleActual.toFixed(2)}°, Speed: ${activeAnimal.speed}`);
13715: 13627: 13539:  28:       activeAnimal.fleeingLogOnce = true;
13716: 13628: 13540:  29:     }
13717: 13629: 13541:  30:     let rad = activeAnimal.fleeAngleActual * Math.PI / 180;
13718: 13630: 13542:  31:     activeAnimal.x += Math.cos(rad) * activeAnimal.speed * 0.5;
13719: 13631: 13543:  32:     activeAnimal.y += Math.sin(rad) * activeAnimal.speed * 0.5;
13720: 13632: 13544:  33:     let dx = activeAnimal.x - player.x;
13721: 13633: 13545:  34:     let dy = activeAnimal.y - player.absY;
13722: 13634: 13546:  35:     let distance = Math.sqrt(dx * dx + dy * dy);
13723: 13635: 13547:  36:     if (distance > 1000 && !activeAnimal.despawnScheduled) {
13724: 13636: 13548:  37:       activeAnimal.despawnScheduled = true;
13725: 13637: 13549:  38:       console.log(`Animal is more than 1000 away. Scheduling despawn in 500ms.`);
13726: 13638: 13550:  39:       setTimeout(() => {
13727: 13639: 13551:  40:         if (activeAnimal) {
13728: 13640: 13552:  41:           console.log(`Animal despawned after 500ms out of range`);
13729: 13641: 13553:  42:           activeAnimal = null;
13730: 13642: 13554:  43:           spawnAnimal();
13731: 13643: 13555:  44:         }
13732: 13644: 13556:  45:       }, 5000);
13733: 13645: 13557:  46:     }
13734: 13646: 13558:  47:   } else if (activeAnimal.state === "sitting") {
13735: 13647: 13559:  48:     if (Math.random() < 0.0001) {
13736: 13648: 13560:  49:       console.log(`Animal (${activeAnimal.type}) spontaneously changing state from sitting to fleeing`);
13737: 13649: 13561:  50:       activeAnimal.state = "fleeing";
13738: 13650: 13562:  51:       activeAnimal.fleeingLogOnce = false;
13739: 13651: 13563:  52:     }
13740: 13652: 13564:  53:   }
13741: 13653: 13565:  54: }
13742: 13654: 13566:  55: function checkPlayerProximity() {
13743: 13655: 13567:  56:   if (!activeAnimal || activeAnimal.state === "fleeing") return;
13744: 13656: 13568:  57:   let dx = activeAnimal.x - player.x;
13745: 13657: 13569:  58:   let dy = activeAnimal.y - player.absY;
13746: 13658: 13570:  59:   let distanceSquared = dx * dx + dy * dy;
13747: 13659: 13571:  60:   if (distanceSquared < activeAnimal.detectionRadius * activeAnimal.detectionRadius) {
13748: 13660: 13572:  61:     console.log(`Player too close to animal (${Math.sqrt(distanceSquared).toFixed(1)} < ${activeAnimal.detectionRadius}) - animal fleeing`);
13749: 13661: 13573:  62:     activeAnimal.state = "fleeing";
13750: 13662: 13574:  63:     activeAnimal.fleeingLogOnce = false;
13751: 13663: 13575:  64:     activeAnimal.fleeAngleActual = Math.atan2(dy, dx) * (180 / Math.PI);
13752: 13664: 13576:  65:     activeAnimal.fleeAngleActual += (Math.random() - 0.5) * 30;
13753: 13665: 13577:  66:   }
13754: 13666: 13578:  67: }
13755: 13667: 13579:  68: // Spawn a new animal using the registered types, with biome filtering and fallback.
13756: 13668: 13580:  69: function spawnAnimal() {
13757: 13669: 13581:  70:   if (currentState !== GameState.UPHILL || activeAnimal !== null) return;
13758: 13670: 13582:  71:   // Define recognized mountain biomes.
13759: 13671: 13583:  72:   var recognizedBiomes = ["starterMountain", "spaceMountain", "volcanoMountain"];
13760: 13672: 13584:  73:   let availableAnimals;
13761: 13673: 13585:  74:   // If currentBiome is not defined or unrecognized, allow all animals.
13762: 13674: 13586:  75:   if (!currentBiome || recognizedBiomes.indexOf(currentBiome) === -1) {
13763: 13675: 13587:  76:       availableAnimals = animalRegistry;
13764: 13676: 13588:  77:   } else {
13765: 13677: 13589:  78:       availableAnimals = animalRegistry.filter(animal => {
13766: 13678: 13590:  79:           // If spawningBiomes is not specified, default to spawning only on the Starter Mountain.
13767: 13679: 13591:  80:           if (!animal.spawningBiomes || animal.spawningBiomes.length === 0) {
13768: 13680: 13592:  81:               return currentBiome === "starterMountain";
13769: 13681: 13593:  82:           }
13770: 13682: 13594:  83:           return animal.spawningBiomes.some(rule => {
13771: 13683: 13595:  84:               if (rule.biome !== currentBiome) return false;
13772: 13684: 13596:  85:               if (rule.layers && Array.isArray(rule.layers)) {
13773: 13685: 13597:  86:                   return rule.layers.includes(currentMountainLayer);
13774: 13686: 13598:  87:               }
13775: 13687: 13599:  88:               if (rule.layerRange && typeof rule.layerRange.min === 'number' && typeof rule.layerRange.max === 'number') {
13776: 13688: 13600:  89:                   return currentLayerPercent >= rule.layerRange.min && currentLayerPercent <= rule.layerRange.max;
13777: 13689: 13601:  90:               }
13778: 13690: 13602:  91:               return true;
13779: 13691: 13603:  92:           });
13780: 13692: 13604:  93:       });
13781: 13693: 13605:  94:   }
13782: 13694: 13606:  95:   if (availableAnimals.length === 0) {
13783: 13695: 13607:  96:       console.error("No animal types available for current biome and layer!");
13784: 13696: 13608:  97:       return;
13785: 13697: 13609:  98:   }
13786: 13698: 13610:  99:   let spawnX = (window.innerWidth * 0.1) + (Math.random() * window.innerWidth * 0.9);
13787: 13699: 13611: 100:   let spawnY = player.absY - (window.innerHeight / 2);
13788: 13700: 13612: 101:   let altitude = Math.floor(Math.random() * 100);
13789: 13701: 13613: 102:   let initialState = "sitting";
13790: 13702: 13614: 103:   let baseAngle = spawnX > window.innerWidth / 2 ?
13791: 13703: 13615: 104:                   Math.random() * (170 - 135) + 135 :
13792: 13704: 13616: 105:                   Math.random() * (55 - 20) + 20;
13793: 13705: 13617: 106:   let angleOffset = Math.random() * 15;
13794: 13706: 13618: 107:   let fleeAngleActual = baseAngle + (Math.random() < 0.5 ? -angleOffset : angleOffset);
13795: 13707: 13619: 108:   let totalWeight = availableAnimals.reduce((sum, animal) => sum + animal.spawnProbability, 0);
13796: 13708: 13620: 109:   let r = Math.random() * totalWeight;
13797: 13709: 13621: 110:   let chosenAnimalType = null;
13798: 13710: 13622: 111:   for (let animal of availableAnimals) {
13799: 13711: 13623: 112:     r -= animal.spawnProbability;
13800: 13712: 13624: 113:     if (r <= 0) {
13801: 13713: 13625: 114:       chosenAnimalType = animal;
13802: 13714: 13626: 115:       break;
13803: 13715: 13627: 116:     }
13804: 13716: 13628: 117:   }
13805: 13717: 13629: 118:   if (!chosenAnimalType) chosenAnimalType = availableAnimals[0];
13806: 13718: 13630: 119:   activeAnimal = {
13807: 13719: 13631: 120:     type: chosenAnimalType.type,
13808: 13720: 13632: 121:     x: spawnX,
13809: 13721: 13633: 122:     y: spawnY,
13810: 13722: 13634: 123:     width: chosenAnimalType.width,
13811: 13723: 13635: 124:     height: chosenAnimalType.height,
13812: 13724: 13636: 125:     state: initialState,
13813: 13725: 13637: 126:     speed: chosenAnimalType.speed,
13814: 13726: 13638: 127:     altitude: altitude,
13815: 13727: 13639: 128:     hasBeenPhotographed: false,
13816: 13728: 13640: 129:     detectionRadius: chosenAnimalType.detectionRadius,
13817: 13729: 13641: 130:     fleeAngleActual: fleeAngleActual,
13818: 13730: 13642: 131:     fleeingLogOnce: false,
13819: 13731: 13643: 132:     lastStateChange: Date.now(),
13820: 13732: 13644: 133:     stateChangeCount: 0,
13821: 13733: 13645: 134:     basePhotoBonus: chosenAnimalType.basePhotoBonus || 0,
13822: 13734: 13646: 135:     customUpdate: chosenAnimalType.customUpdate || null,
13823: 13735: 13647: 136:     customDraw: chosenAnimalType.customDraw || null,
13824: 13736: 13648: 137:   };
13825: 13737: 13649: 138:   console.log(`Spawned ${activeAnimal.type} at (${spawnX.toFixed(1)}, ${spawnY.toFixed(1)}), altitude: ${altitude}, state: ${initialState}, speed: ${activeAnimal.speed}, detectionRadius: ${activeAnimal.detectionRadius}`);
13826: 13738: 13650: 139:   if (!animalStateCheckInterval) {
13827: 13739: 13651: 140:     animalStateCheckInterval = setInterval(logAnimalState, 3000);
13828: 13740: 13652: 141:   }
13829: 13741: 13653: 142: }
13830: 13742: 13654: 143: function despawnAllAnimals() {
13831: 13743: 13655: 144:     activeAnimal = null;
13832: 13744: 13656: 145:     console.log('All animals despawned');
13833: 13745: 13657: 146: }
13834: 13746: 13658: 147: function logAnimalState() {
13835: 13747: 13659: 148:   if (!activeAnimal) {
13836: 13748: 13660: 149:     console.log("No active animal right now");
13837: 13749: 13661: 150:     clearInterval(animalStateCheckInterval);
13838: 13750: 13662: 151:     animalStateCheckInterval = null;
13839: 13751: 13663: 152:     return;
13840: 13752: 13664: 153:   }
13841: 13753: 13665: 154:   let playerDist = Math.sqrt(
13842: 13754: 13666: 155:     Math.pow(activeAnimal.x - player.x, 2) + 
13843: 13755: 13667: 156:     Math.pow(activeAnimal.y - player.absY, 2)
13844: 13756: 13668: 157:   );
13845: 13757: 13669: 158:   console.log(`Animal status: ${activeAnimal.type}, state: ${activeAnimal.state}, position: (${activeAnimal.x.toFixed(1)}, ${activeAnimal.y.toFixed(1)}), distance to player: ${playerDist.toFixed(1)}`);
13846: 13758: 13670: 159: }
13847: 13759: 13671: 160: function drawAnimal() {
13848: 13760: 13672: 161:   if (!activeAnimal || currentState !== GameState.UPHILL) return;
13849: 13761: 13673: 162:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
13850: 13762: 13674: 163:   let animalScreenY = activeAnimal.y - cameraOffset;
13851: 13763: 13675: 164:   if (activeAnimal.customDraw && typeof activeAnimal.customDraw === 'function') {
13852: 13764: 13676: 165:       activeAnimal.customDraw(activeAnimal, animalScreenY, ctx);
13853: 13765: 13677: 166:   } else {
13854: 13766: 13678: 167:       ctx.fillStyle = activeAnimal.color || "#888888";
13855: 13767: 13679: 168:       ctx.fillRect(
13856: 13768: 13680: 169:         activeAnimal.x - activeAnimal.width / 2,
13857: 13769: 13681: 170:         animalScreenY - activeAnimal.height / 2,
13858: 13770: 13682: 171:         activeAnimal.width,
13859: 13771: 13683: 172:         activeAnimal.height
13860: 13772: 13684: 173:       );
13861: 13773: 13685: 174:   }
13862: 13774: 13686: 175: }
13863: 13775: 13687: 176: window.registerAnimalType = registerAnimalType;
13864: 13776: 13688: 177: window.updateAnimal = updateAnimal;
13865: 13777: 13689: 178: window.spawnAnimal = spawnAnimal;
13866: 13778: 13690: 179: window.despawnAllAnimals = despawnAllAnimals;
13867: 13779: 13691: 180: window.drawAnimal = drawAnimal;
13868: 13780: 13692: ``````
13869: 13781: 13693: 
13870: 13782: 13694: ## File: todo.txt
13871: 13783: 13695: ``````
13872: 13784: 13696:  1: Feat: Swap from down-to-up to up-to-down.
13873: 13785: 13697:  2: 
13874: 13786: 13698:  3: Docs: Find some NPC to cover prospecting, treasure hunting, and rescue missions
13875: 13787: 13699:  4: 
13876: 13788: 13700:  5: Refactor: Refactor mechanics.js & utils.js
13877: 13789: 13701:  6: 
13878: 13790: 13702:  7: Refactor: Switch tricks from press to hold (so you choose if you do a 180 or a 1080)
13879: 13791: 13703:  8: (more advanced tricks can still be some sort of combo press)
13880: 13792: 13704:  9: 
13881: 13793: 13705: 10: Feat: Nerf jumping, buff ramps, attend leg day affects jump height
13882: 13794: 13706: ``````
13883: 13795: 13707: 
13884: 13796: 13708: ## File: js/downhill.js
13885: 13797: 13709: ``````javascript
13886: 13798: 13710:   1: /* downhill.js - Downhill Mechanics & Physics */
13887: 13799: 13711:   2: import {
13888: 13800: 13712:   3:   processTrick,
13889: 13801: 13713:   4:   checkTrickInputs,
13890: 13802: 13714:   5:   resetTrickState
13891: 13803: 13715:   6: } from './tricks.js';
13892: 13804: 13716:   7: // Update all downhill-specific physics and mechanics
13893: 13805: 13717:   8: function updateDownhill(deltaTime) {
13894: 13806: 13718:   9:   let rocketFactor = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.rocketSurgeryFactorPerLevel);
13895: 13807: 13719:  10:   let gravity = TWEAK.baseGravity * rocketFactor;
13896: 13808: 13720:  11:   let maxXVel = TWEAK.baseMaxXVel * (rocketFactor - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel));
13897: 13809: 13721:  12:   maxXVel = Math.max(0, maxXVel);
13898: 13810: 13722:  13:   let opticsFactor = 1 + (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsAccelFactorPerLevel);
13899: 13811: 13723:  14:   let horizontalAccel = TWEAK.baseHorizontalAccel * opticsFactor;
13900: 13812: 13724:  15:   let friction = TWEAK.baseFriction - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel);
13901: 13813: 13725:  16:   if (friction < 0.8) friction = 0.8;
13902: 13814: 13726:  17:   // Horizontal movement handling with bounds checking
13903: 13815: 13727:  18:   if (window.keysDown["a"]) { player.xVel -= horizontalAccel; }
13904: 13816: 13728:  19:   if (window.keysDown["d"]) { player.xVel += horizontalAccel; }
13905: 13817: 13729:  20:   player.xVel *= friction;
13906: 13818: 13730:  21:   player.xVel = clamp(player.xVel, -maxXVel, maxXVel);
13907: 13819: 13731:  22:   let newX = player.x + player.xVel;
13908: 13820: 13732:  23:   // Prevent going off screen horizontally
13909: 13821: 13733:  24:   player.x = clamp(newX, player.width/2, window.canvas.width - player.width/2);
13910: 13822: 13734:  25:   // --- Jump Input Handling ---
13911: 13823: 13735:  26:   // Immediate Mode:
13912: 13824: 13736:  27:   if (TWEAK.jumpType === "immediate") {
13913: 13825: 13737:  28:     if (window.keysDown[" "] && !player.isJumping && player.canJump) {
13914: 13826: 13738:  29:       player.isJumping = true;
13915: 13827: 13739:  30:       player.canJump = false;
13916: 13828: 13740:  31:       player.isCharging = false;
13917: 13829: 13741:  32:       let heightBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpHeightPerRocketSurgery);
13918: 13830: 13742:  33:       let timeBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpTimePerRocketSurgery);
13919: 13831: 13743:  34:       let heightIncrease = heightBonus - 1;
13920: 13832: 13744:  35:       let extraZoom = heightIncrease * TWEAK.jumpZoomPerHeightIncrease;
13921: 13833: 13745:  36:       player.jumpHeightFactor = heightBonus;
13922: 13834: 13746:  37:       player.jumpDuration = TWEAK.jumpBaseAscent * timeBonus;
13923: 13835: 13747:  38:       player.jumpZoomBonus = extraZoom;
13924: 13836: 13748:  39:       player.jumpTimer = 0;
13925: 13837: 13749:  40:       player.hasReachedJumpPeak = false;
13926: 13838: 13750:  41:       if (window.playerUpgrades.rocketSurgery > 0) {
13927: 13839: 13751:  42:         console.log(`Jump boosted by Rocket Surgery ${window.playerUpgrades.rocketSurgery}: Height x${heightBonus.toFixed(2)}, Time x${timeBonus.toFixed(2)}, Zoom +${(extraZoom*100).toFixed(0)}%`);
13928: 13840: 13752:  43:       }
13929: 13841: 13753:  44:       onPlayerJumpStart();
13930: 13842: 13754:  45:     }
13931: 13843: 13755:  46:   }
13932: 13844: 13756:  47:   // Charge Mode:
13933: 13845: 13757:  48:   else if (TWEAK.jumpType === "charge") {
13934: 13846: 13758:  49:     if (window.keysDown[" "] && !player.isJumping && !player.isCharging && player.canJump) {
13935: 13847: 13759:  50:       player.isCharging = true;
13936: 13848: 13760:  51:       player.canJump = false;
13937: 13849: 13761:  52:       player.jumpChargeTime = 0;
13938: 13850: 13762:  53:     }
13939: 13851: 13763:  54:     if (player.isCharging) {
13940: 13852: 13764:  55:       player.jumpChargeTime += deltaTime;
13941: 13853: 13765:  56:       if (!window.keysDown[" "]) {
13942: 13854: 13766:  57:         let chargeRatio = Math.min(1, player.jumpChargeTime / TWEAK.jumpMaxHoldTime);
13943: 13855: 13767:  58:         player.isCharging = false;
13944: 13856: 13768:  59:         player.isJumping = true;
13945: 13857: 13769:  60:         player.jumpHeightFactor = chargeRatio;
13946: 13858: 13770:  61:         player.jumpDuration = 500 + 500 * chargeRatio;
13947: 13859: 13771:  62:         player.jumpTimer = 0;
13948: 13860: 13772:  63:         player.hasReachedJumpPeak = false;
13949: 13861: 13773:  64:         onPlayerJumpStart();
13950: 13862: 13774:  65:       } else if (player.jumpChargeTime >= TWEAK.jumpMaxHoldTime) {
13951: 13863: 13775:  66:         player.isCharging = false;
13952: 13864: 13776:  67:         player.isJumping = true;
13953: 13865: 13777:  68:         player.jumpHeightFactor = 1;
13954: 13866: 13778:  69:         player.jumpDuration = 1000;
13955: 13867: 13779:  70:         player.jumpTimer = 0;
13956: 13868: 13780:  71:         player.hasReachedJumpPeak = false;
13957: 13869: 13781:  72:         onPlayerJumpStart();
13958: 13870: 13782:  73:       }
13959: 13871: 13783:  74:     }
13960: 13872: 13784:  75:   }
13961: 13873: 13785:  76:   // Jump Animation & Trick Handling:
13962: 13874: 13786:  77:   if (player.isJumping) {
13963: 13875: 13787:  78:     player.jumpTimer += deltaTime;
13964: 13876: 13788:  79:     let progress = player.jumpTimer / player.jumpDuration;
13965: 13877: 13789:  80:     // Re-hit window handling:
13966: 13878: 13790:  81:     if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
13967: 13879: 13791:  82:       if (window.keysDown[" "] && !player.reHitActivated && !player.isCharging) {
13968: 13880: 13792:  83:         console.log("Re-hit jump activated!");
13969: 13881: 13793:  84:         player.reHitActivated = true;
13970: 13882: 13794:  85:         player.jumpTimer = 0;
13971: 13883: 13795:  86:         player.jumpDuration *= TWEAK.reHitBonusDuration;
13972: 13884: 13796:  87:         player.jumpHeightFactor = 1;
13973: 13885: 13797:  88:         playTone(600, "sine", 0.1, 0.3);
13974: 13886: 13798:  89:         return;
13975: 13887: 13799:  90:       }
13976: 13888: 13800:  91:     }
13977: 13889: 13801:  92:     if (player.isJumping && jumpOsc) {
13978: 13890: 13802:  93:       let f_start = 300, f_peak = 800, f_end = 300, freq;
13979: 13891: 13803:  94:       if (progress < 0.5) {
13980: 13892: 13804:  95:         let t = progress / 0.5;
13981: 13893: 13805:  96:         freq = f_start + (f_peak - f_start) * (t * t);
13982: 13894: 13806:  97:       } else {
13983: 13895: 13807:  98:         let t = (progress - 0.5) / 0.5;
13984: 13896: 13808:  99:         freq = f_peak - (f_peak - f_end) * (t * t);
13985: 13897: 13809: 100:       }
13986: 13898: 13810: 101:       jumpOsc.frequency.setValueAtTime(freq, audioCtx.currentTime);
13987: 13899: 13811: 102:     }
13988: 13900: 13812: 103:     // Check for trick inputs and process any active tricks
13989: 13901: 13813: 104:     checkTrickInputs();
13990: 13902: 13814: 105:     processTrick(deltaTime);
13991: 13903: 13815: 106:     if (!player.hasReachedJumpPeak && progress >= 0.5) {
13992: 13904: 13816: 107:       player.hasReachedJumpPeak = true;
13993: 13905: 13817: 108:       onPlayerJumpPeak();
13994: 13906: 13818: 109:     }
13995: 13907: 13819: 110:     if (progress >= 1) {
13996: 13908: 13820: 111:       // End jump: reset jump/trick state and restore scale
13997: 13909: 13821: 112:       player.isJumping = false;
13998: 13910: 13822: 113:       player.jumpTimer = 0;
13999: 13911: 13823: 114:       player.hasReachedJumpPeak = false;
14000: 13912: 13824: 115:       resetTrickState();
14001: 13913: 13825: 116:       player.width = player.baseWidth;
14002: 13914: 13826: 117:       player.height = player.baseHeight;
14003: 13915: 13827: 118:       onPlayerLand();
14004: 13916: 13828: 119:       // Check for landing collisions
14005: 13917: 13829: 120:       for (let i = 0; i < terrain.length; i++) {
14006: 13918: 13830: 121:         let obstacle = terrain[i];
14007: 13919: 13831: 122:         if (checkCollision(
14008: 13920: 13832: 123:             player.x - player.width / 2, player.absY - player.height / 2,
14009: 13921: 13833: 124:             player.width, player.height,
14010: 13922: 13834: 125:             obstacle.x, obstacle.y,
14011: 13923: 13835: 126:             obstacle.width, obstacle.height
14012: 13924: 13836: 127:         )) {
14013: 13925: 13837: 128:           console.log("Collision on landing.");
14014: 13926: 13838: 129:           player.velocityY = -TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
14015: 13927: 13839: 130:           player.absY -= TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
14016: 13928: 13840: 131:           player.collisions++;
14017: 13929: 13841: 132:           terrain.splice(i, 1);
14018: 13930: 13842: 133:           if (player.collisions >= TWEAK.getMaxCollisions()) {
14019: 13931: 13843: 134:             console.log("Max collisions reached.");
14020: 13932: 13844: 135:             player.sledDamaged = 1; // Mark sled as damaged
14021: 13933: 13845: 136:             console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
14022: 13934: 13846: 137:             playCrashSound();
14023: 13935: 13847: 138:             changeState(GameState.UPHILL);
14024: 13936: 13848: 139:             return;
14025: 13937: 13849: 140:           } else {
14026: 13938: 13850: 141:             playRockHitSound();
14027: 13939: 13851: 142:           }
14028: 13940: 13852: 143:           break;
14029: 13941: 13853: 144:         }
14030: 13942: 13854: 145:       }
14031: 13943: 13855: 146:     } else {
14032: 13944: 13856: 147:       // Scale player sprite for jump arc effect
14033: 13945: 13857: 148:       let baseScale = TWEAK.jumpPeakScale + player.jumpZoomBonus;
14034: 13946: 13858: 149:       let scale = 1 + (baseScale - 1) * Math.sin(Math.PI * progress) * player.jumpHeightFactor;
14035: 13947: 13859: 150:       player.width = player.baseWidth * scale;
14036: 13948: 13860: 151:       player.height = player.baseHeight * scale;
14037: 13949: 13861: 152:     }
14038: 13950: 13862: 153:   }
14039: 13951: 13863: 154:   // Allow jump restart when space is released
14040: 13952: 13864: 155:   if (!window.keysDown[" "]) {
14041: 13953: 13865: 156:     player.canJump = true;
14042: 13954: 13866: 157:   }
14043: 13955: 13867: 158:   // Normal downhill physics & collision handling (skip during jump)
14044: 13956: 13868: 159:   let prevAbsY = player.absY;
14045: 13957: 13869: 160:   if (!player.isJumping) {
14046: 13958: 13870: 161:     for (let i = 0; i < terrain.length; i++) {
14047: 13959: 13871: 162:       let obstacle = terrain[i];
14048: 13960: 13872: 163:       if (checkCollision(
14049: 13961: 13873: 164:           player.x - player.width / 2, player.absY - player.height / 2,
14050: 13962: 13874: 165:           player.width, player.height,
14051: 13963: 13875: 166:           obstacle.x, obstacle.y,
14052: 13964: 13876: 167:           obstacle.width, obstacle.height
14053: 13965: 13877: 168:       )) {
14054: 13966: 13878: 169:         console.log("Collision on downhill.");
14055: 13967: 13879: 170:         player.velocityY = -TWEAK.bounceImpulse;
14056: 13968: 13880: 171:         player.absY = prevAbsY - TWEAK.bounceImpulse;
14057: 13969: 13881: 172:         player.collisions++;
14058: 13970: 13882: 173:         terrain.splice(i, 1);
14059: 13971: 13883: 174:         if (player.collisions >= TWEAK.getMaxCollisions()) {
14060: 13972: 13884: 175:           console.log("Max collisions reached. Ending run.");
14061: 13973: 13885: 176:           player.sledDamaged = 1; // Mark sled as damaged
14062: 13974: 13886: 177:           console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
14063: 13975: 13887: 178:           awardMoney();
14064: 13976: 13888: 179:           playCrashSound();
14065: 13977: 13889: 180:           changeState(GameState.UPHILL);
14066: 13978: 13890: 181:           return;
14067: 13979: 13891: 182:         } else {
14068: 13980: 13892: 183:           playRockHitSound();
14069: 13981: 13893: 184:         }
14070: 13982: 13894: 185:       }
14071: 13983: 13895: 186:     }
14072: 13984: 13896: 187:   }
14073: 13985: 13897: 188:   player.velocityY += player.isJumping ? TWEAK.baseGravity : gravity;
14074: 13986: 13898: 189:   player.absY += player.velocityY;
14075: 13987: 13899: 190:   updateLiveMoney();
14076: 13988: 13900: 191:   // Check for transition to UPHILL mode near bottom
14077: 13989: 13901: 192:   if (player.absY >= mountainHeight - (player.height * 4)) {
14078: 13990: 13902: 193:     player.absY = mountainHeight - (player.height * 4);
14079: 13991: 13903: 194:     player.velocityY = 0;
14080: 13992: 13904: 195:     console.log("Reached transition point. Switching to uphill mode.");
14081: 13993: 13905: 196:     // Fix for jumping transition - handle jump state before changing modes
14082: 13994: 13906: 197:     if (player.isJumping) {
14083: 13995: 13907: 198:       // Smoothly reset jump zoom and finalize landing
14084: 13996: 13908: 199:       lerpJumpZoomToZero(() => {
14085: 13997: 13909: 200:         onPlayerJumpLand(); // handles trick cleanup, sound, etc.
14086: 13998: 13910: 201:       });
14087: 13999: 13911: 202:     }
14088: 14000: 13912: 203:     changeState(GameState.UPHILL);
14089: 14001: 13913: 204:     return;
14090: 14002: 13914: 205:   }
14091: 14003: 13915: 206:   // Check for actual bottom
14092: 14004: 13916: 207:   if (player.absY >= mountainHeight) {
14093: 14005: 13917: 208:     player.absY = mountainHeight;
14094: 14006: 13918: 209:     console.log("Reached bottom. Returning to house.");
14095: 14007: 13919: 210:     awardMoney();
14096: 14008: 13920: 211:     changeState(GameState.HOUSE);
14097: 14009: 13921: 212:   }
14098: 14010: 13922: 213: }
14099: 14011: 13923: 214: // Helper function for smooth jump transition
14100: 14012: 13924: 215: function lerpJumpZoomToZero(callback) {
14101: 14013: 13925: 216:   const startZoom = player.jumpZoomBonus;
14102: 14014: 13926: 217:   const duration = 250; // ms
14103: 14015: 13927: 218:   const startTime = performance.now();
14104: 14016: 13928: 219:   function animate(time) {
14105: 14017: 13929: 220:     const elapsed = time - startTime;
14106: 14018: 13930: 221:     const t = Math.min(1, elapsed / duration);
14107: 14019: 13931: 222:     player.jumpZoomBonus = startZoom * (1 - t);
14108: 14020: 13932: 223:     if (t < 1) {
14109: 14021: 13933: 224:       requestAnimationFrame(animate);
14110: 14022: 13934: 225:     } else {
14111: 14023: 13935: 226:       player.jumpZoomBonus = 0;
14112: 14024: 13936: 227:       player.isJumping = false;
14113: 14025: 13937: 228:       player.jumpTimer = 0;
14114: 14026: 13938: 229:       player.hasReachedJumpPeak = false;
14115: 14027: 13939: 230:       resetTrickState();
14116: 14028: 13940: 231:       player.width = player.baseWidth;
14117: 14029: 13941: 232:       player.height = player.baseHeight;
14118: 14030: 13942: 233:       if (callback) callback();
14119: 14031: 13943: 234:     }
14120: 14032: 13944: 235:   }
14121: 14033: 13945: 236:   requestAnimationFrame(animate);
14122: 14034: 13946: 237: }
14123: 14035: 13947: 238: // Export necessary functions
14124: 14036: 13948: 239: export { updateDownhill, lerpJumpZoomToZero };
14125: 14037: 13949: ``````
14126: 14038: 13950: 
14127: 14039: 13951: ## File: js/player.js
14128: 14040: 13952: ``````javascript
14129: 14041: 13953:  1: /* player.js */
14130: 14042: 13954:  2: let player = {
14131: 14043: 13955:  3:   x: window.canvas.width / 2,  // Use global canvas reference
14132: 14044: 13956:  4:   absY: 0,
14133: 14045: 13957:  5:   width: 20,
14134: 14046: 13958:  6:   height: 20,
14135: 14047: 13959:  7:   velocityY: 0,
14136: 14048: 13960:  8:   xVel: 0,
14137: 14049: 13961:  9:   collisions: 0,
14138: 14050: 13962: 10:   bestTime: Infinity,
14139: 14051: 13963: 11:   money: 200, // Default initial value instead of directly accessing TWEAK.starterCash
14140: 14052: 13964: 12:   sledDamaged: 0,  // Track if sled is damaged: 0 = not damaged, >0 = damaged
14141: 14053: 13965: 13:   // Camera aim properties
14142: 14054: 13966: 14:   cameraAngle: 270,  // Camera rotation in degrees
14143: 14055: 13967: 15:   altitudeLine: 50,  // Starts at 50% of the view range
14144: 14056: 13968: 16:   // Trick system properties
14145: 14057: 13969: 17:   currentTrick: null,        // Currently active trick
14146: 14058: 13970: 18:   trickTimer: 0,            // Time elapsed in current trick
14147: 14059: 13971: 19:   trickRotation: 0,         // Current rotation angle for helicopter tricks
14148: 14060: 13972: 20:   trickOffset: 0,           // Current offset for air brake/parachute
14149: 14061: 13973: 21:   lastTrick: null,          // Last completed trick for chain tracking
14150: 14062: 13974: 22:   trickChainCount: 0,       // Number of different tricks chained
14151: 14063: 13975: 23:   trickCooldowns: {         // Individual cooldown timers for each trick
14152: 14064: 13976: 24:     leftHelicopter: 0,
14153: 14065: 13977: 25:     rightHelicopter: 0,
14154: 14066: 13978: 26:     airBrake: 0,
14155: 14067: 13979: 27:     parachute: 0
14156: 14068: 13980: 28:   },
14157: 14069: 13981: 29:   // *** NEW: Jump State Properties ***
14158: 14070: 13982: 30:   isJumping: false,          // Are we in a jump?
14159: 14071: 13983: 31:   isCharging: false,         // For "charge" mode to accumulate jump time
14160: 14072: 13984: 32:   canJump: true,             // Ensures jump is triggered only once per key press
14161: 14073: 13985: 33:   reHitActivated: false,     // Prevents multiple re-hits during one key press
14162: 14074: 13986: 34:   jumpTimer: 0,              // Elapsed time since jump started (ms)
14163: 14075: 13987: 35:   jumpDuration: 0,           // Total duration of the jump (ascent + descent)
14164: 14076: 13988: 36:   jumpChargeTime: 0,         // Accumulated hold time for charge mode
14165: 14077: 13989: 37:   hasReachedJumpPeak: false, // Flag to trigger the peak hook only once per jump
14166: 14078: 13990: 38:   jumpHeightFactor: 0,       // Height multiplier from Rocket Surgery (1.0 = normal)
14167: 14079: 13991: 39:   jumpZoomBonus: 0,         // Extra zoom from increased jump height
14168: 14080: 13992: 40:   baseWidth: 20,             // Original sprite width (for scaling)
14169: 14081: 13993: 41:   baseHeight: 20             // Original sprite height (for scaling)
14170: 14082: 13994: 42: };
14171: 14083: 13995: 43: // Initialize player money from TWEAK settings once they're available
14172: 14084: 13996: 44: function initializePlayerMoney() {
14173: 14085: 13997: 45:   if (window.TWEAK && typeof window.TWEAK.starterCash !== 'undefined') {
14174: 14086: 13998: 46:     player.money = window.TWEAK.starterCash;
14175: 14087: 13999: 47:     console.log("Player money initialized to:", player.money);
14176: 14088: 14000: 48:   }
14177: 14089: 14001: 49: }
14178: 14090: 14002: 50: // Call this function after TWEAK is initialized (e.g., from game.js)
14179: 14091: 14003: 51: window.initializePlayerMoney = initializePlayerMoney;
14180: 14092: 14004: ``````
14181: 14093: 14005: 
14182: 14094: 14006: ## File: .gitignore
14183: 14095: 14007: ``````
14184: 14096: 14008: 1: repomix-output.txt
14185: 14097: 14009: 2: repomix-output.txt.xml
14186: 14098: 14010: 3: .repomix/bundles.json
14187: 14099: 14011: 4: OLD Codebase.xml
14188: 14100: 14012: 5: repomix-output.txt.md
14189: 14101: 14013: 6: complete-condensed-codebase-for-reference.md
14190: 14102: 14014: ``````
14191: 14103: 14015: 
14192: 14104: 14016: ## File: js/entities.js
14193: 14105: 14017: ``````javascript
14194: 14106: 14018:   1: /* entities.js - Pruned version to avoid overlap with wildlifephotos.js */
14195: 14107: 14019:   2: // Resolves collisions between the player and obstacles.
14196: 14108: 14020:   3: function resolveCollision(player, obstacle) {
14197: 14109: 14021:   4:   let playerCenterX = player.x;
14198: 14110: 14022:   5:   let playerCenterY = player.absY;
14199: 14111: 14023:   6:   let obstacleCenterX = obstacle.x + obstacle.width / 2;
14200: 14112: 14024:   7:   let obstacleCenterY = obstacle.y + obstacle.height / 2;
14201: 14113: 14025:   8:   let halfWidthPlayer = player.width / 2;
14202: 14114: 14026:   9:   let halfWidthObstacle = obstacle.width / 2;
14203: 14115: 14027:  10:   let halfHeightPlayer = player.height / 2;
14204: 14116: 14028:  11:   let halfHeightObstacle = obstacle.height / 2;
14205: 14117: 14029:  12:   let dx = playerCenterX - obstacleCenterX;
14206: 14118: 14030:  13:   let dy = playerCenterY - obstacleCenterY;
14207: 14119: 14031:  14:   let overlapX = halfWidthPlayer + halfWidthObstacle - Math.abs(dx);
14208: 14120: 14032:  15:   let overlapY = halfHeightPlayer + halfHeightObstacle - Math.abs(dy);
14209: 14121: 14033:  16:   if (overlapX < 0 || overlapY < 0) return;
14210: 14122: 14034:  17:   if (overlapX < overlapY) {
14211: 14123: 14035:  18:     if (dx > 0) {
14212: 14124: 14036:  19:       player.x += overlapX * 0.3;
14213: 14125: 14037:  20:     } else {
14214: 14126: 14038:  21:       player.x -= overlapX * 0.3;
14215: 14127: 14039:  22:     }
14216: 14128: 14040:  23:   } else {
14217: 14129: 14041:  24:     if (dy > 0) {
14218: 14130: 14042:  25:       player.absY += overlapY * 0.3;
14219: 14131: 14043:  26:     } else {
14220: 14132: 14044:  27:       player.absY -= overlapY * 0.3;
14221: 14133: 14045:  28:     }
14222: 14134: 14046:  29:   }
14223: 14135: 14047:  30: }
14224: 14136: 14048:  31: // Draws the camera overlay with the POV cone and a steady altitude line.
14225: 14137: 14049:  32: function drawCameraOverlay() {
14226: 14138: 14050:  33:   // Only display the overlay when in UPHILL mode.
14227: 14139: 14051:  34:   if (window.currentState !== window.GameState.UPHILL) return;
14228: 14140: 14052:  35:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
14229: 14141: 14053:  36:   let centerX = player.x;
14230: 14142: 14054:  37:   let centerY = player.absY - cameraOffset;
14231: 14143: 14055:  38:   let coneLength = 300; // Length of the camera cone
14232: 14144: 14056:  39:   // Draw the camera POV Cone.
14233: 14145: 14057:  40:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
14234: 14146: 14058:  41:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
14235: 14147: 14059:  42:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
14236: 14148: 14060:  43:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
14237: 14149: 14061:  44:   ctx.beginPath();
14238: 14150: 14062:  45:   ctx.moveTo(centerX, centerY);
14239: 14151: 14063:  46:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
14240: 14152: 14064:  47:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
14241: 14153: 14065:  48:   ctx.closePath();
14242: 14154: 14066:  49:   ctx.fill();
14243: 14155: 14067:  50:   // Draw the altitude line.
14244: 14156: 14068:  51:   // Map altitudeLine [0,100] to an offset along the camera's central axis:
14245: 14157: 14069:  52:   // 0 aligns with the player sprite’s bottom, 100 with its top.
14246: 14158: 14070:  53:   let offsetTop = ((coneLength / 2) + player.height);
14247: 14159: 14071:  54:   let offsetBottom = player.height / 2;
14248: 14160: 14072:  55:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
14249: 14161: 14073:  56:   let rad = player.cameraAngle * Math.PI / 180;
14250: 14162: 14074:  57:   let lineCenterX = centerX + offset * Math.cos(rad);
14251: 14163: 14075:  58:   let lineCenterY = centerY + offset * Math.sin(rad);
14252: 14164: 14076:  59:   // Draw altitude line perpendicular to camera direction.
14253: 14165: 14077:  60:   let lineLength = 100;
14254: 14166: 14078:  61:   let perpX = -Math.sin(rad);
14255: 14167: 14079:  62:   let perpY = Math.cos(rad);
14256: 14168: 14080:  63:   let x1 = lineCenterX - (lineLength / 2) * perpX;
14257: 14169: 14081:  64:   let y1 = lineCenterY - (lineLength / 2) * perpY;
14258: 14170: 14082:  65:   let x2 = lineCenterX + (lineLength / 2) * perpX;
14259: 14171: 14083:  66:   let y2 = lineCenterY + (lineLength / 2) * perpY;
14260: 14172: 14084:  67:   // Steady color gradient from red (bottom) to blue (top)
14261: 14173: 14085:  68:   let t = 1 - (player.altitudeLine / 100);
14262: 14174: 14086:  69:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
14263: 14175: 14087:  70:   ctx.strokeStyle = altitudeColor;
14264: 14176: 14088:  71:   ctx.lineWidth = 3;
14265: 14177: 14089:  72:   // Draw the altitude line without any flashing.
14266: 14178: 14090:  73:   ctx.beginPath();
14267: 14179: 14091:  74:   ctx.moveTo(x1, y1);
14268: 14180: 14092:  75:   ctx.lineTo(x2, y2);
14269: 14181: 14093:  76:   ctx.stroke();
14270: 14182: 14094:  77: }
14271: 14183: 14095:  78: // Draws the game entities such as the background, terrain, player, and sled.
14272: 14184: 14096:  79: function drawEntities() {
14273: 14185: 14097:  80:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
14274: 14186: 14098:  81:   ctx.clearRect(0, 0, canvas.width, canvas.height);
14275: 14187: 14099:  82:   // Draw background.
14276: 14188: 14100:  83:   ctx.fillStyle = window.currentState === window.GameState.DOWNHILL ? "#ADD8E6" : "#98FB98";
14277: 14189: 14101:  84:   ctx.fillRect(0, 0, canvas.width, canvas.height);
14278: 14190: 14102:  85:   // Draw terrain obstacles.
14279: 14191: 14103:  86:   terrain.forEach(obstacle => {
14280: 14192: 14104:  87:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
14281: 14193: 14105:  88:       ctx.fillStyle = "#808080"; // Obstacles are drawn in grey.
14282: 14194: 14106:  89:       ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
14283: 14195: 14107:  90:     }
14284: 14196: 14108:  91:   });
14285: 14197: 14109:  92:   let playerDrawY = player.absY - cameraOffset;
14286: 14198: 14110:  93:   ctx.save(); // Save the current context state
14287: 14199: 14111:  94:   // Apply trick-specific transformations.
14288: 14200: 14112:  95:   if (player.currentTrick) {
14289: 14201: 14113:  96:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
14290: 14202: 14114:  97:       // Rotate around the player's center for helicopter tricks.
14291: 14203: 14115:  98:       ctx.translate(player.x, playerDrawY);
14292: 14204: 14116:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
14293: 14205: 14117: 100:       ctx.translate(-player.x, -playerDrawY);
14294: 14206: 14118: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
14295: 14207: 14119: 102:       // Offset for air brake/parachute tricks.
14296: 14208: 14120: 103:       if (player.currentTrick === "airBrake") {
14297: 14209: 14121: 104:         playerDrawY += player.trickOffset;  // Move sled behind the player.
14298: 14210: 14122: 105:       } else {
14299: 14211: 14123: 106:         playerDrawY -= player.trickOffset;  // Move player above the sled for parachute.
14300: 14212: 14124: 107:       }
14301: 14213: 14125: 108:     }
14302: 14214: 14126: 109:   }
14303: 14215: 14127: 110:   // Draw the sled (as a red square).
14304: 14216: 14128: 111:   ctx.fillStyle = "#FF0000";
14305: 14217: 14129: 112:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
14306: 14218: 14130: 113:   // Draw the player (as a yellow circle) when applicable.
14307: 14219: 14131: 114:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
14308: 14220: 14132: 115:     ctx.fillStyle = "#FFFF00";
14309: 14221: 14133: 116:     ctx.beginPath();
14310: 14222: 14134: 117:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
14311: 14223: 14135: 118:     ctx.fill();
14312: 14224: 14136: 119:   }
14313: 14225: 14137: 120:   ctx.restore(); // Restore the context state
14314: 14226: 14138: 121:   // Draw the camera overlay.
14315: 14227: 14139: 122:   drawCameraOverlay();
14316: 14228: 14140: 123: }
14317: 14229: 14141: ``````
14318: 14230: 14142: 
14319: 14231: 14143: ## File: js/render.js
14320: 14232: 14144: ``````javascript
14321: 14233: 14145:   1: /* render.js - Rendering Logic */
14322: 14234: 14146:   2: // Floating Text System (unchanged)
14323: 14235: 14147:   3: class FloatingText {
14324: 14236: 14148:   4:   constructor(text, x, y) {
14325: 14237: 14149:   5:     this.text = text;
14326: 14238: 14150:   6:     this.x = x;
14327: 14239: 14151:   7:     this.initialY = y;
14328: 14240: 14152:   8:     this.age = 0;
14329: 14241: 14153:   9:     this.lifetime = 1000;
14330: 14242: 14154:  10:     this.visualOffsetY = -30;
14331: 14243: 14155:  11:   }
14332: 14244: 14156:  12:   update(deltaTime) {
14333: 14245: 14157:  13:     this.age += deltaTime;
14334: 14246: 14158:  14:     this.visualOffsetY -= deltaTime * 0.25;
14335: 14247: 14159:  15:     return this.age < this.lifetime;
14336: 14248: 14160:  16:   }
14337: 14249: 14161:  17:   draw(ctx, cameraY) {
14338: 14250: 14162:  18:     const alpha = 1 - (this.age / this.lifetime);
14339: 14251: 14163:  19:     ctx.fillStyle = `rgba(0, 0, 0, ${alpha})`;
14340: 14252: 14164:  20:     ctx.font = "bold 24px Arial";
14341: 14253: 14165:  21:     ctx.textAlign = "center";
14342: 14254: 14166:  22:     const screenY = player.absY - cameraY + this.visualOffsetY;
14343: 14255: 14167:  23:     ctx.fillText(this.text, this.x, screenY);
14344: 14256: 14168:  24:   }
14345: 14257: 14169:  25: }
14346: 14258: 14170:  26: function addFloatingText(text, x, y) {
14347: 14259: 14171:  27:   window.floatingTexts.push(new FloatingText(text, x, y - 30));
14348: 14260: 14172:  28: }
14349: 14261: 14173:  29: // No changes to money display logic
14350: 14262: 14174:  30: function updateLiveMoney() {
14351: 14263: 14175:  31:   let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
14352: 14264: 14176:  32:   distanceTraveled = Math.max(1, distanceTraveled);
14353: 14265: 14177:  33:   let moneyEarned = Math.floor(distanceTraveled / 100);
14354: 14266: 14178:  34:   moneyEarned = Math.max(1, moneyEarned);
14355: 14267: 14179:  35:   let moneyText = document.getElementById("moneyText");
14356: 14268: 14180:  36:   if (moneyText) {
14357: 14269: 14181:  37:     moneyText.textContent = `Money: $${player.money} (+$${moneyEarned})`;
14358: 14270: 14182:  38:   }
14359: 14271: 14183:  39: }
14360: 14272: 14184:  40: function showMoneyGain(amount, source = "") {
14361: 14273: 14185:  41:   let moneyText = document.getElementById("moneyText");
14362: 14274: 14186:  42:   if (moneyText) {
14363: 14275: 14187:  43:     if (source) {
14364: 14276: 14188:  44:       moneyText.textContent = `Money: $${player.money} (+$${amount} ${source})`;
14365: 14277: 14189:  45:     } else {
14366: 14278: 14190:  46:       moneyText.textContent = `Money: $${player.money} (+$${amount})`;
14367: 14279: 14191:  47:     }
14368: 14280: 14192:  48:     moneyText.classList.add("money-increase");
14369: 14281: 14193:  49:     setTimeout(() => {
14370: 14282: 14194:  50:       moneyText.classList.remove("money-increase");
14371: 14283: 14195:  51:     }, 100);
14372: 14284: 14196:  52:   }
14373: 14285: 14197:  53: }
14374: 14286: 14198:  54: function updateMoneyDisplay() {
14375: 14287: 14199:  55:   let moneyText = document.getElementById("moneyText");
14376: 14288: 14200:  56:   if (moneyText) {
14377: 14289: 14201:  57:     moneyText.textContent = `Money: $${player.money}`;
14378: 14290: 14202:  58:   }
14379: 14291: 14203:  59: }
14380: 14292: 14204:  60: // MAIN RENDER
14381: 14293: 14205:  61: function render() {
14382: 14294: 14206:  62:   console.log("render START");
14383: 14295: 14207:  63:   // Clear the canvas each frame
14384: 14296: 14208:  64:   ctx.clearRect(0, 0, canvas.width, canvas.height);
14385: 14297: 14209:  65:   // Background color depends on state
14386: 14298: 14210:  66:   ctx.fillStyle = (window.currentState === window.GameState.DOWNHILL) ? "#ADD8E6" : "#98FB98";
14387: 14299: 14211:  67:   ctx.fillRect(0, 0, canvas.width, canvas.height);
14388: 14300: 14212:  68:   drawEntities();
14389: 14301: 14213:  69:   ctx.save();
14390: 14302: 14214:  70:   window.floatingTexts.forEach(text => text.draw(ctx, player.absY - canvas.height / 2));
14391: 14303: 14215:  71:   ctx.restore();
14392: 14304: 14216:  72:   drawReHitIndicator();
14393: 14305: 14217:  73:   console.log("render END");
14394: 14306: 14218:  74: }
14395: 14307: 14219:  75: function drawEntities() {
14396: 14308: 14220:  76:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
14397: 14309: 14221:  77:   // Terrain
14398: 14310: 14222:  78:   terrain.forEach(obstacle => {
14399: 14311: 14223:  79:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
14400: 14312: 14224:  80:       if (obstacle.type === 'tree') {
14401: 14313: 14225:  81:         drawTree(ctx, {
14402: 14314: 14226:  82:           x: obstacle.x,
14403: 14315: 14227:  83:           y: obstacle.y - cameraOffset,
14404: 14316: 14228:  84:           width: obstacle.width,
14405: 14317: 14229:  85:           height: obstacle.height
14406: 14318: 14230:  86:         });
14407: 14319: 14231:  87:       } else {
14408: 14320: 14232:  88:         ctx.fillStyle = "#808080";
14409: 14321: 14233:  89:         ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
14410: 14322: 14234:  90:       }
14411: 14323: 14235:  91:     }
14412: 14324: 14236:  92:   });
14413: 14325: 14237:  93:   // Player
14414: 14326: 14238:  94:   let playerDrawY = player.absY - cameraOffset;
14415: 14327: 14239:  95:   ctx.save();
14416: 14328: 14240:  96:   if (player.currentTrick) {
14417: 14329: 14241:  97:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
14418: 14330: 14242:  98:       ctx.translate(player.x, playerDrawY);
14419: 14331: 14243:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
14420: 14332: 14244: 100:       ctx.translate(-player.x, -playerDrawY);
14421: 14333: 14245: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
14422: 14334: 14246: 102:       playerDrawY += (player.currentTrick === "airBrake") ? player.trickOffset : -player.trickOffset;
14423: 14335: 14247: 103:     }
14424: 14336: 14248: 104:   }
14425: 14337: 14249: 105:   ctx.fillStyle = "#FF0000";
14426: 14338: 14250: 106:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
14427: 14339: 14251: 107:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
14428: 14340: 14252: 108:     ctx.fillStyle = "#FFFF00";
14429: 14341: 14253: 109:     ctx.beginPath();
14430: 14342: 14254: 110:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
14431: 14343: 14255: 111:     ctx.fill();
14432: 14344: 14256: 112:   }
14433: 14345: 14257: 113:   ctx.restore();
14434: 14346: 14258: 114:   drawCameraOverlay();
14435: 14347: 14259: 115:   drawAnimal();
14436: 14348: 14260: 116: }
14437: 14349: 14261: 117: function drawCameraOverlay() {
14438: 14350: 14262: 118:   if (window.currentState !== window.GameState.UPHILL) return;
14439: 14351: 14263: 119:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
14440: 14352: 14264: 120:   let centerX = player.x;
14441: 14353: 14265: 121:   let centerY = player.absY - cameraOffset;
14442: 14354: 14266: 122:   let coneLength = 300;
14443: 14355: 14267: 123:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
14444: 14356: 14268: 124:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
14445: 14357: 14269: 125:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
14446: 14358: 14270: 126:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
14447: 14359: 14271: 127:   ctx.beginPath();
14448: 14360: 14272: 128:   ctx.moveTo(centerX, centerY);
14449: 14361: 14273: 129:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
14450: 14362: 14274: 130:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
14451: 14363: 14275: 131:   ctx.closePath();
14452: 14364: 14276: 132:   ctx.fill();
14453: 14365: 14277: 133:   let offsetTop = (coneLength / 2) + player.height;
14454: 14366: 14278: 134:   let offsetBottom = player.height / 2;
14455: 14367: 14279: 135:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
14456: 14368: 14280: 136:   let rad = player.cameraAngle * Math.PI / 180;
14457: 14369: 14281: 137:   let lineCenterX = centerX + offset * Math.cos(rad);
14458: 14370: 14282: 138:   let lineCenterY = centerY + offset * Math.sin(rad);
14459: 14371: 14283: 139:   let lineLength = 100;
14460: 14372: 14284: 140:   let perpX = -Math.sin(rad);
14461: 14373: 14285: 141:   let perpY = Math.cos(rad);
14462: 14374: 14286: 142:   let x1 = lineCenterX - (lineLength / 2) * perpX;
14463: 14375: 14287: 143:   let y1 = lineCenterY - (lineLength / 2) * perpY;
14464: 14376: 14288: 144:   let x2 = lineCenterX + (lineLength / 2) * perpX;
14465: 14377: 14289: 145:   let y2 = lineCenterY + (lineLength / 2) * perpY;
14466: 14378: 14290: 146:   let t = 1 - (player.altitudeLine / 100);
14467: 14379: 14291: 147:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
14468: 14380: 14292: 148:   ctx.strokeStyle = altitudeColor;
14469: 14381: 14293: 149:   ctx.lineWidth = 3;
14470: 14382: 14294: 150:   if (activeAnimal && isAnimalInsideCone(activeAnimal)) {
14471: 14383: 14295: 151:     let flashSpeed = mapRange(Math.abs(player.altitudeLine - activeAnimal.altitude), 0, 100, TWEAK.altitudeFlashMaxSpeed, TWEAK.altitudeFlashMinSpeed);
14472: 14384: 14296: 152:     if (Math.floor(Date.now() / flashSpeed) % 2 === 0) {
14473: 14385: 14297: 153:       ctx.beginPath();
14474: 14386: 14298: 154:       ctx.moveTo(x1, y1);
14475: 14387: 14299: 155:       ctx.lineTo(x2, y2);
14476: 14388: 14300: 156:       ctx.stroke();
14477: 14389: 14301: 157:     }
14478: 14390: 14302: 158:   } else {
14479: 14391: 14303: 159:     ctx.beginPath();
14480: 14392: 14304: 160:     ctx.moveTo(x1, y1);
14481: 14393: 14305: 161:     ctx.lineTo(x2, y2);
14482: 14394: 14306: 162:     ctx.stroke();
14483: 14395: 14307: 163:   }
14484: 14396: 14308: 164: }
14485: 14397: 14309: 165: function drawReHitIndicator() {
14486: 14398: 14310: 166:   if (!player.isJumping) return;
14487: 14399: 14311: 167:   const progress = player.jumpTimer / player.jumpDuration;
14488: 14400: 14312: 168:   if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
14489: 14401: 14313: 169:     ctx.save();
14490: 14402: 14314: 170:     ctx.beginPath();
14491: 14403: 14315: 171:     const radius = (player.baseWidth * TWEAK.reHitIndicatorScale) / 2;
14492: 14404: 14316: 172:     const cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
14493: 14405: 14317: 173:     const screenY = canvas.height / 2 + (player.absY - cameraOffset - canvas.height / 2);
14494: 14406: 14318: 174:     ctx.shadowColor = TWEAK.reHitIndicatorOutlineColor;
14495: 14407: 14319: 175:     ctx.shadowBlur = 20;
14496: 14408: 14320: 176:     ctx.lineWidth = 3;
14497: 14409: 14321: 177:     const pulseScale = 1 + Math.sin(Date.now() / 100) * 0.1;
14498: 14410: 14322: 178:     ctx.arc(player.x, screenY, radius * pulseScale, 0, Math.PI * 2);
14499: 14411: 14323: 179:     ctx.fillStyle = TWEAK.reHitIndicatorColor;
14500: 14412: 14324: 180:     ctx.fill();
14501: 14413: 14325: 181:     ctx.strokeStyle = TWEAK.reHitIndicatorOutlineColor;
14502: 14414: 14326: 182:     ctx.stroke();
14503: 14415: 14327: 183:     ctx.closePath();
14504: 14416: 14328: 184:     ctx.restore();
14505: 14417: 14329: 185:   }
14506: 14418: 14330: 186: }
14507: 14419: 14331: ``````
14508: 14420: 14332: 
14509: 14421: 14333: ## File: js/world.js
14510: 14422: 14334: ``````javascript
14511: 14423: 14335:  1: /* world.js */
14512: 14424: 14336:  2: const mountainHeight = 200000; // Mountain is now 100x bigger!
14513: 14425: 14337:  3: let terrain = [];
14514: 14426: 14338:  4: const obstacleCount = 1500; // Reduced rock count to make room for trees
14515: 14427: 14339:  5: const treeClusterCount = 3000; // Number of tree clusters to generate
14516: 14428: 14340:  6: let earlyFinish = false;
14517: 14429: 14341:  7: const heightMultiplierBase = 1; // Base value for height multiplier - can be adjusted later
14518: 14430: 14342:  8: const distanceMultiplierBase = 1; // Base value for distance multiplier - can be adjusted later
14519: 14431: 14343:  9: const speedMultiplierBase = 1; // Base value for speed multiplier - can be adjusted later
14520: 14432: 14344: 10: function generateTerrain() {
14521: 14433: 14345: 11:   terrain = [];
14522: 14434: 14346: 12:   // Generate rock obstacles
14523: 14435: 14347: 13:   for (let i = 0; i < obstacleCount; i++) {
14524: 14436: 14348: 14:     let obstacle = {
14525: 14437: 14349: 15:       x: Math.random() * (canvas.width - 70) + 10,
14526: 14438: 14350: 16:       y: Math.random() * mountainHeight,
14527: 14439: 14351: 17:       width: 30 + Math.random() * 40,
14528: 14440: 14352: 18:       height: 10 + Math.random() * 20,
14529: 14441: 14353: 19:       type: 'rock' // Explicitly mark as rock
14530: 14442: 14354: 20:     };
14531: 14443: 14355: 21:     terrain.push(obstacle);
14532: 14444: 14356: 22:   }
14533: 14445: 14357: 23:   // Generate tree clusters
14534: 14446: 14358: 24:   const terrainBounds = { 
14535: 14447: 14359: 25:     xMin: 0, 
14536: 14448: 14360: 26:     xMax: canvas.width, 
14537: 14449: 14361: 27:     yMin: 0, 
14538: 14450: 14362: 28:     yMax: mountainHeight 
14539: 14451: 14363: 29:   };
14540: 14452: 14364: 30:   // Assume player size reference (can be adjusted based on actual player dimensions)
14541: 14453: 14365: 31:   const playerSize = 30; // Estimate based on what's visible in the game
14542: 14454: 14366: 32:   const treeObstacles = generateTreeClumps({ 
14543: 14455: 14367: 33:     count: treeClusterCount, 
14544: 14456: 14368: 34:     terrainBounds, 
14545: 14457: 14369: 35:     playerSize 
14546: 14458: 14370: 36:   });
14547: 14459: 14371: 37:   // Add trees to terrain array
14548: 14460: 14372: 38:   terrain.push(...treeObstacles);
14549: 14461: 14373: 39:   // Sort all obstacles by Y position for rendering order
14550: 14462: 14374: 40:   terrain.sort((a, b) => a.y - b.y);
14551: 14463: 14375: 41: }
14552: 14464: 14376: 42: function awardMoney() {
14553: 14465: 14377: 43:     // Calculate real distance traveled based on starting and ending Y positions
14554: 14466: 14378: 44:     // Note: In this game's coordinate system, higher Y values mean lower on the mountain
14555: 14467: 14379: 45:     // So the distance traveled downhill is player.absY - playerStartAbsY
14556: 14468: 14380: 46:     let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
14557: 14469: 14381: 47:     // Ensure at least 1 unit
14558: 14470: 14382: 48:     distanceTraveled = Math.max(1, distanceTraveled);
14559: 14471: 14383: 49:     // Calculate the height multiplier based on starting position
14560: 14472: 14384: 50:     // Higher up the mountain (lower playerStartAbsY value) gives better multiplier
14561: 14473: 14385: 51:     // This will make a run from the top worth 3x more than from the bottom
14562: 14474: 14386: 52:     const startHeightRatio = 1 - (playerStartAbsY / mountainHeight); // 0 at bottom, 1 at top
14563: 14475: 14387: 53:     const startHeightMultiplier = 1 + (startHeightRatio * 2 * heightMultiplierBase); // Range: 1-3x
14564: 14476: 14388: 54:     // Calculate the distance multiplier based on how much of the mountain was traversed
14565: 14477: 14389: 55:     // This makes longer runs more valuable (e.g., a full mountain run worth 3x more than 10 runs of 10% each)
14566: 14478: 14390: 56:     const distanceRatio = distanceTraveled / mountainHeight; // What fraction of the mountain was traversed
14567: 14479: 14391: 57:     const distanceMultiplier = 1 + (Math.min(1, distanceRatio * 10) * 2 * distanceMultiplierBase); // Range: 1-3x
14568: 14480: 14392: 58:     // The formula ensures a full mountain run (10% of mountain = 1.2x, 20% = 1.4x, ... 100% = 3x)
14569: 14481: 14393: 59:     // Calculate speed multiplier based on the time taken to complete the run
14570: 14482: 14394: 60:     let speedMultiplier = 1;
14571: 14483: 14395: 61:     if (downhillStartTime !== null) {
14572: 14484: 14396: 62:         const runDuration = (performance.now() - downhillStartTime) / 1000; // Convert to seconds
14573: 14485: 14397: 63:         // Calculate expected time based on distance
14574: 14486: 14398: 64:         // Assuming an "average" speed would be covering the entire mountain in the below number of seconds
14575: 14487: 14399: 65:         const expectedTime = (distanceTraveled / mountainHeight) * 500;
14576: 14488: 14400: 66:         // Calculate speed ratio: lower than 1 means faster than expected
14577: 14489: 14401: 67:         // We want lower times to give higher multipliers
14578: 14490: 14402: 68:         const speedRatio = Math.max(0.1, Math.min(2, runDuration / Math.max(1, expectedTime)));
14579: 14491: 14403: 69:         // Invert the ratio: 1/speedRatio, so faster runs (lower speedRatio) get higher multipliers
14580: 14492: 14404: 70:         // Adjust the curve to get 1x for average speed, up to 3x for twice as fast
14581: 14493: 14405: 71:         speedMultiplier = 1 + (Math.max(0, (1 - speedRatio)) * 3 * speedMultiplierBase); // Range: 1-3x
14582: 14494: 14406: 72:         console.log(`Run duration: ${runDuration.toFixed(2)}s, Expected: ${expectedTime.toFixed(2)}s, Speed ratio: ${speedRatio.toFixed(2)}, Multiplier: ${speedMultiplier.toFixed(2)}x`);
14583: 14495: 14407: 73:     }
14584: 14496: 14408: 74:     // Apply all multipliers to the money calculation
14585: 14497: 14409: 75:     let moneyEarned = Math.floor((distanceTraveled / 100) * startHeightMultiplier * distanceMultiplier * speedMultiplier);
14586: 14498: 14410: 76:     moneyEarned = Math.max(0, moneyEarned); // Guarantee no negative values
14587: 14499: 14411: 77:     console.log(`Awarding money: $${moneyEarned} (Distance: ${distanceTraveled}, Height multiplier: ${startHeightMultiplier.toFixed(2)}, Distance multiplier: ${distanceMultiplier.toFixed(2)}, Speed multiplier: ${speedMultiplier.toFixed(2)})`);
14588: 14500: 14412: 78:     player.money += moneyEarned;
14589: 14501: 14413: 79:     updateMoneyDisplay();
14590: 14502: 14414: 80: }
14591: 14503: 14415: ``````
14592: 14504: 14416: 
14593: 14505: 14417: ## File: js/mechanics.js
14594: 14506: 14418: ``````javascript
14595: 14507: 14419:  1: /* mechanics.js - Gameplay Mechanics & Interactions */
14596: 14508: 14420:  2: // Update all gameplay state and physics – including jump/trick handling and collision updates.
14597: 14509: 14421:  3: function updateMechanics(deltaTime) {
14598: 14510: 14422:  4:     deltaTime *= 1;
14599: 14511: 14423:  5:     if (window.currentState === window.GameState.DOWNHILL) {
14600: 14512: 14424:  6:       // Call the refactored downhill function from downhill.js
14601: 14513: 14425:  7:       updateDownhill(deltaTime);
14602: 14514: 14426:  8:     } else if (window.currentState === window.GameState.UPHILL) {
14603: 14515: 14427:  9:       // Call the refactored uphill function from uphill.js
14604: 14516: 14428: 10:       updateUphill(deltaTime);
14605: 14517: 14429: 11:     }
14606: 14518: 14430: 12:   }
14607: 14519: 14431: 13:   // Note: Jump-related functions moved to jumpsled.js
14608: 14520: 14432: 14: function lerpPlayerToGround(duration, onComplete) {
14609: 14521: 14433: 15:   const startY = player.absY;
14610: 14522: 14434: 16:   const endY = mountainHeight - (player.height * 3); // Safe landing height
14611: 14523: 14435: 17:   const startTime = performance.now();
14612: 14524: 14436: 18:   function animate() {
14613: 14525: 14437: 19:     const now = performance.now();
14614: 14526: 14438: 20:     const t = Math.min(1, (now - startTime) / duration);
14615: 14527: 14439: 21:     // Use smooth easing
14616: 14528: 14440: 22:     const easedT = t * t * (3 - 2 * t);
14617: 14529: 14441: 23:     player.absY = startY + (endY - startY) * easedT;
14618: 14530: 14442: 24:     if (t < 1) {
14619: 14531: 14443: 25:       requestAnimationFrame(animate);
14620: 14532: 14444: 26:     } else {
14621: 14533: 14445: 27:       player.absY = endY;
14622: 14534: 14446: 28:       if (onComplete) onComplete();
14623: 14535: 14447: 29:     }
14624: 14536: 14448: 30:   }
14625: 14537: 14449: 31:   animate();
14626: 14538: 14450: 32: }
14627: 14539: 14451: ``````
14628: 14540: 14452: 
14629: 14541: 14453: ## File: js/utils.js
14630: 14542: 14454: ``````javascript
14631: 14543: 14455:   1: /* utils.js */
14632: 14544: 14456:   2: // Global Configuration & Shared Globals moved to settings.js
14633: 14545: 14457:   3: window.GameState = {
14634: 14546: 14458:   4:     HOUSE: 'house',
14635: 14547: 14459:   5:     DOWNHILL: 'downhill',
14636: 14548: 14460:   6:     UPHILL: 'uphill'
14637: 14549: 14461:   7: };
14638: 14550: 14462:   8: // Instead of getting the canvas element (which no longer exists),
14639: 14551: 14463:   9: // we define a dummy canvas object for width/height references.
14640: 14552: 14464:  10: var canvas = { width: 800, height: 450 };
14641: 14553: 14465:  11: // We'll expose canvas globally for other scripts to access
14642: 14554: 14466:  12: window.canvas = canvas;
14643: 14555: 14467:  13: // We'll set ctx in game.js once the Phaser Canvas Texture is created.
14644: 14556: 14468:  14: var ctx = null;
14645: 14557: 14469:  15: /* NEW: Global keysDown object and event listeners */
14646: 14558: 14470:  16: var keysDown = {};
14647: 14559: 14471:  17: var spacePressed = false;
14648: 14560: 14472:  18: window.addEventListener("keydown", function (e) {
14649: 14561: 14473:  19:     // Prevent default behavior for arrow keys, space, and tab to ensure correct capture
14650: 14562: 14474:  20:     if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", " ", "Tab"].includes(e.key)) {
14651: 14563: 14475:  21:         e.preventDefault();
14652: 14564: 14476:  22:     }
14653: 14565: 14477:  23:     keysDown[e.key] = true;
14654: 14566: 14478:  24:     // Track space in HOUSE state
14655: 14567: 14479:  25:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
14656: 14568: 14480:  26:         spacePressed = true;
14657: 14569: 14481:  27:     }
14658: 14570: 14482:  28:     // Take a photo in UPHILL state when space is pressed
14659: 14571: 14483:  29:     if (e.key === " " && window.currentState === window.GameState.UPHILL) {
14660: 14572: 14484:  30:         takePhoto();
14661: 14573: 14485:  31:     }
14662: 14574: 14486:  32:     // Press "E" to manually spawn an animal in UPHILL mode (DEBUG)
14663: 14575: 14487:  33:     if (e.key.toLowerCase() === 'e' && window.currentState === window.GameState.UPHILL) {
14664: 14576: 14488:  34:         spawnAnimal();
14665: 14577: 14489:  35:     }
14666: 14578: 14490:  36:     // Handle Tab key to toggle between UPHILL and DOWNHILL
14667: 14579: 14491:  37:     if (e.key === "Tab" && window.currentState !== window.GameState.HOUSE) {
14668: 14580: 14492:  38:         if (window.currentState === window.GameState.UPHILL && player.sledDamaged === 1) {
14669: 14581: 14493:  39:             console.log("Cannot switch to DOWNHILL mode - Sled is damaged and needs repair");
14670: 14582: 14494:  40:             showSledDamageNotice();
14671: 14583: 14495:  41:             return;
14672: 14584: 14496:  42:         }
14673: 14585: 14497:  43:         const newState = window.currentState === window.GameState.UPHILL ? window.GameState.DOWNHILL : window.GameState.UPHILL;
14674: 14586: 14498:  44:         changeState(newState);
14675: 14587: 14499:  45:     }
14676: 14588: 14500:  46: });
14677: 14589: 14501:  47: window.addEventListener("keyup", function (e) {
14678: 14590: 14502:  48:     delete keysDown[e.key];
14679: 14591: 14503:  49:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
14680: 14592: 14504:  50:         spacePressed = false;
14681: 14593: 14505:  51:         console.log("Space released, starting sled run.");
14682: 14594: 14506:  52:         unlockAudioContext();
14683: 14595: 14507:  53:         playStartGameSound();
14684: 14596: 14508:  54:         changeState(window.GameState.DOWNHILL);
14685: 14597: 14509:  55:     }
14686: 14598: 14510:  56: });
14687: 14599: 14511:  57: /* Utility functions */
14688: 14600: 14512:  58: function formatUpgradeName(name) {
14689: 14601: 14513:  59:     let formattedName = name.replace(/([A-Z])/g, ' $1').trim();
14690: 14602: 14514:  60:     return formattedName.charAt(0).toUpperCase() + formattedName.slice(1);
14691: 14603: 14515:  61: }
14692: 14604: 14516:  62: function capitalizeFirstLetter(string) {
14693: 14605: 14517:  63:     return string.charAt(0).toUpperCase() + string.slice(1);
14694: 14606: 14518:  64: }
14695: 14607: 14519:  65: function checkCollision(ax, ay, aw, ah, bx, by, bw, bh) {
14696: 14608: 14520:  66:     return ax < bx + bw && ax + aw > bx && ay < by + bh && ay + ah > by;
14697: 14609: 14521:  67: }
14698: 14610: 14522:  68: function clamp(val, min, max) {
14699: 14611: 14523:  69:     return Math.max(min, Math.min(max, val));
14700: 14612: 14524:  70: }
14701: 14613: 14525:  71: function getCameraOffset(playerAbsY, canvasHeight, mountainHeight) {
14702: 14614: 14526:  72:     let offset = playerAbsY - canvasHeight / 2;
14703: 14615: 14527:  73:     return clamp(offset, 0, mountainHeight - canvasHeight);
14704: 14616: 14528:  74: }
14705: 14617: 14529:  75: // Make utility functions available globally for both normal scripts and modules
14706: 14618: 14530:  76: window.formatUpgradeName = formatUpgradeName;
14707: 14619: 14531:  77: window.capitalizeFirstLetter = capitalizeFirstLetter;
14708: 14620: 14532:  78: window.checkCollision = checkCollision;
14709: 14621: 14533:  79: window.clamp = clamp;
14710: 14622: 14534:  80: window.getCameraOffset = getCameraOffset;
14711: 14623: 14535:  81: /* Ensure Web Audio API is unlocked */
14712: 14624: 14536:  82: let audioCtx;
14713: 14625: 14537:  83: function unlockAudioContext() {
14714: 14626: 14538:  84:     if (!audioCtx) {
14715: 14627: 14539:  85:         audioCtx = new (window.AudioContext || window.webkitAudioContext)();
14716: 14628: 14540:  86:     }
14717: 14629: 14541:  87: }
14718: 14630: 14542:  88: /* Audio Utility Functions */
14719: 14631: 14543:  89: function playTone(frequency = 440, type = "sine", duration = 0.5, volume = 0.3) {
14720: 14632: 14544:  90:     unlockAudioContext(); // Ensure audio context is unlocked
14721: 14633: 14545:  91:     const oscillator = audioCtx.createOscillator();
14722: 14634: 14546:  92:     const gainNode = audioCtx.createGain();
14723: 14635: 14547:  93:     oscillator.type = type;
14724: 14636: 14548:  94:     oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);
14725: 14637: 14549:  95:     gainNode.gain.setValueAtTime(volume, audioCtx.currentTime);
14726: 14638: 14550:  96:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);
14727: 14639: 14551:  97:     oscillator.connect(gainNode);
14728: 14640: 14552:  98:     gainNode.connect(audioCtx.destination);
14729: 14641: 14553:  99:     oscillator.start();
14730: 14642: 14554: 100:     oscillator.stop(audioCtx.currentTime + duration);
14731: 14643: 14555: 101: }
14732: 14644: 14556: 102: /* Sound Effects */
14733: 14645: 14557: 103: function playStartGameSound() {
14734: 14646: 14558: 104:     playTone(440, "triangle", 0.5);
14735: 14647: 14559: 105: }
14736: 14648: 14560: 106: function playCrashSound() {
14737: 14649: 14561: 107:     unlockAudioContext();
14738: 14650: 14562: 108:     const oscillator = audioCtx.createOscillator();
14739: 14651: 14563: 109:     const gainNode = audioCtx.createGain();
14740: 14652: 14564: 110:     oscillator.type = "sawtooth";
14741: 14653: 14565: 111:     oscillator.frequency.setValueAtTime(800, audioCtx.currentTime);
14742: 14654: 14566: 112:     oscillator.frequency.exponentialRampToValueAtTime(100, audioCtx.currentTime + 0.5);
14743: 14655: 14567: 113:     gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
14744: 14656: 14568: 114:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.5);
14745: 14657: 14569: 115:     oscillator.connect(gainNode);
14746: 14658: 14570: 116:     gainNode.connect(audioCtx.destination);
14747: 14659: 14571: 117:     oscillator.start();
14748: 14660: 14572: 118:     oscillator.stop(audioCtx.currentTime + 0.5);
14749: 14661: 14573: 119: }
14750: 14662: 14574: 120: function playRockHitSound() {
14751: 14663: 14575: 121:     playTone(200, "square", 0.2);
14752: 14664: 14576: 122: }
14753: 14665: 14577: 123: function playMoneyGainSound() {
14754: 14666: 14578: 124:     playTone(1000, "sine", 0.15, 0.2);
14755: 14667: 14579: 125: }
14756: 14668: 14580: 126: function mapRange(value, inMin, inMax, outMin, outMax) {
14757: 14669: 14581: 127:     return outMin + ((value - inMin) * (outMax - outMin)) / (inMax - inMin);
14758: 14670: 14582: 128: }
14759: 14671: 14583: 129: // Helper functions for color conversion and interpolation
14760: 14672: 14584: 130: function hexToRgb(hex) {
14761: 14673: 14585: 131:     hex = hex.replace(/^#/, '');
14762: 14674: 14586: 132:     if (hex.length === 3) {
14763: 14675: 14587: 133:       hex = hex.split('').map(c => c + c).join('');
14764: 14676: 14588: 134:     }
14765: 14677: 14589: 135:     let bigint = parseInt(hex, 16);
14766: 14678: 14590: 136:     let r = (bigint >> 16) & 255;
14767: 14679: 14591: 137:     let g = (bigint >> 8) & 255;
14768: 14680: 14592: 138:     let b = (bigint & 255) & 255;
14769: 14681: 14593: 139:     return { r, g, b };
14770: 14682: 14594: 140: }
14771: 14683: 14595: 141: function rgbToHex(r, g, b) {
14772: 14684: 14596: 142:     return "#" + ((1 << 24) + (r << 16) + (g << 8) + b)
14773: 14685: 14597: 143:       .toString(16)
14774: 14686: 14598: 144:       .slice(1)
14775: 14687: 14599: 145:       .toUpperCase();
14776: 14688: 14600: 146: }
14777: 14689: 14601: 147: function lerpColor(color1, color2, t) {
14778: 14690: 14602: 148:     let c1 = hexToRgb(color1);
14779: 14691: 14603: 149:     let c2 = hexToRgb(color2);
14780: 14692: 14604: 150:     let r = Math.round(c1.r + (c2.r - c1.r) * t);
14781: 14693: 14605: 151:     let g = Math.round(c1.g + (c2.g - c1.g) * t);
14782: 14694: 14606: 152:     let b = Math.round(c1.b + (c2.b - c1.b) * t);
14783: 14695: 14607: 153:     return rgbToHex(r, g, b);
14784: 14696: 14608: 154: }
14785: 14697: 14609: 155: // Notification helpers
14786: 14698: 14610: 156: function showSledDamageNotice() {
14787: 14699: 14611: 157:   showErrorNotification('Sled Damaged! Please Repair');
14788: 14700: 14612: 158: }
14789: 14701: 14613: 159: function showSledRepairedNotice() {
14790: 14702: 14614: 160:   showSuccessNotification('Sled Repaired!');
14791: 14703: 14615: 161: }
14792: 14704: 14616: 162: // Add additional utility functions to window object
14793: 14705: 14617: 163: window.mapRange = mapRange;
14794: 14706: 14618: 164: window.hexToRgb = hexToRgb;
14795: 14707: 14619: 165: window.rgbToHex = rgbToHex;
14796: 14708: 14620: 166: window.lerpColor = lerpColor;
14797: 14709: 14621: 167: window.showSledDamageNotice = showSledDamageNotice;
14798: 14710: 14622: 168: window.showSledRepairedNotice = showSledRepairedNotice;
14799: 14711: 14623: 169: window.playTone = playTone;
14800: 14712: 14624: 170: window.playStartGameSound = playStartGameSound;
14801: 14713: 14625: 171: window.playCrashSound = playCrashSound;
14802: 14714: 14626: 172: window.playRockHitSound = playRockHitSound;
14803: 14715: 14627: 173: window.playMoneyGainSound = playMoneyGainSound;
14804: 14716: 14628: 174: window.unlockAudioContext = unlockAudioContext;
14805: 14717: 14629: 175: // Note: export statement has been removed and all functions are now attached to window
14806: 14718: 14630: ``````
14807: 14719: 14631: 
14808: 14720: 14632: ## File: index.html
14809: 14721: 14633: ``````html
14810: 14722: 14634:  1: <!DOCTYPE html>
14811: 14723: 14635:  2: <html lang="en">
14812: 14724: 14636:  3: <head>
14813: 14725: 14637:  4:   <meta charset="UTF-8" />
14814: 14726: 14638:  5:   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
14815: 14727: 14639:  6:   <title>SledHEAD</title>
14816: 14728: 14640:  7:   <link rel="stylesheet" href="styles.css">
14817: 14729: 14641:  8:   <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
14818: 14730: 14642:  9: </head>
14819: 14731: 14643: 10: <body>
14820: 14732: 14644: 11:   <!-- UI Elements -->
14821: 14733: 14645: 12:   <div id="cursor-position"
14822: 14734: 14646: 13:        style="position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white;
14823: 14735: 14647: 14:               padding: 5px; border-radius: 3px; font-family: monospace; z-index: 1000;">
14824: 14736: 14648: 15:     Abs: (0, 0) | View: (0, 0)
14825: 14737: 14649: 16:   </div>
14826: 14738: 14650: 17:   <div id="victoryBanner"
14827: 14739: 14651: 18:        style="display: none; position: fixed; top: 50%; left: 50%;
14828: 14740: 14652: 19:               transform: translate(-50%, -50%); background: gold; padding: 20px;
14829: 14741: 14653: 20:               border-radius: 10px; text-align: center; font-size: 24px; font-weight: bold; z-index: 1000;">
14830: 14742: 14654: 21:     🎉 VICTORY! 🎉<br>
14831: 14743: 14655: 22:     You've paid off your loan!
14832: 14744: 14656: 23:   </div>
14833: 14745: 14657: 24:   <h1>SledHEAD</h1>
14834: 14746: 14658: 25:   <div id="moneyDisplay">
14835: 14747: 14659: 26:     <p id="moneyText">Money: $200</p>
14836: 14748: 14660: 27:   </div>
14837: 14749: 14661: 28:   <div id="game-screen"></div>
14838: 14750: 14662: 29:   <!-- Upgrades -->
14839: 14751: 14663: 30:   <div id="upgrade-menu">
14840: 14752: 14664: 31:     <div class="game-controls">
14841: 14753: 14665: 32:       <button id="startGame">Start Sled Run</button>
14842: 14754: 14666: 33:       <button id="payLoan">Pay Loan ($100,000)</button>
14843: 14755: 14667: 34:     </div>
14844: 14756: 14668: 35:     <div id="dynamic-upgrade-columns" class="upgrade-menu-columns">
14845: 14757: 14669: 36:       <!-- Populated dynamically -->
14846: 14758: 14670: 37:     </div>
14847: 14759: 14671: 38:     <p id="bestTimeText">Best Time: N/A</p>
14848: 14760: 14672: 39:   </div>
14849: 14761: 14673: 40:   <!-- JS Includes -->
14850: 14762: 14674: 41:   <script src="js/settings.js"></script>
14851: 14763: 14675: 42:   <script src="js/notify.js"></script>
14852: 14764: 14676: 43:   <script src="js/utils.js"></script>
14853: 14765: 14677: 44:   <script src="js/input.js"></script>
14854: 14766: 14678: 45:   <script src="js/world.js"></script>
14855: 14767: 14679: 46:   <script src="js/player.js"></script>
14856: 14768: 14680: 47:   <script src="js/entities.js"></script>
14857: 14769: 14681: 48:   <script src="js/wildlife.js"></script>
14858: 14770: 14682: 49:   <script src="js/mobs/bear.js"></script>
14859: 14771: 14683: 50:   <script src="js/mobs/mountainlion.js"></script>
14860: 14772: 14684: 51:   <script src="js/mobs/bird.js"></script>
14861: 14773: 14685: 52:   <script src="js/trees.js"></script>
14862: 14774: 14686: 53:   <script src="js/camera.js"></script>
14863: 14775: 14687: 54:   <script src="js/jumpsled.js"></script>
14864: 14776: 14688: 55:   <script src="js/mechanics.js"></script>
14865: 14777: 14689: 56:   <script src="js/render.js"></script>
14866: 14778: 14690: 57:   <script src="js/stamina.js"></script>
14867: 14779: 14691: 58:   <script src="js/loan.js"></script>
14868: 14780: 14692: 59:   <script src="js/uphill.js"></script>
14869: 14781: 14693: 60:   <!-- Modules -->
14870: 14782: 14694: 61:   <script type="module" src="js/registry.js"></script>
14871: 14783: 14695: 62:   <script type="module" src="js/tricks.js"></script>
14872: 14784: 14696: 63:   <script type="module" src="js/downhill.js"></script>
14873: 14785: 14697: 64:   <script type="module" src="js/upgradeData.js"></script>
14874: 14786: 14698: 65:   <script type="module" src="js/upgradeLogic.js"></script>
14875: 14787: 14699: 66:   <script type="module" src="js/upgrades.js"></script>
14876: 14788: 14700: 67:   <script type="module" src="js/game.js"></script>
14877: 14789: 14701: 68: </body>
14878: 14790: 14702: 69: </html>
14879: 14791: 14703: ``````
14880: 14792: 14704: 
14881: 14793: 14705: ## File: js/game.js
14882: 14794: 14706: ``````javascript
14883: 14795: 14707:   1: /* game.js - Core Loop & State Management (Phaserized) */
14884: 14796: 14708:   2: // Import necessary functions and variables
14885: 14797: 14709:   3: import { playerUpgrades, mountainUpgrades, initUpgradeButton, purchaseUpgrade, updateMoneyDisplay } from './upgradeLogic.js';
14886: 14798: 14710:   4: // Keep your globals
14887: 14799: 14711:   5: var downhillStartTime = null;
14888: 14800: 14712:   6: var lastTime = 0;
14889: 14801: 14713:   7: // Local currentState variable removed - we'll use window.currentState exclusively
14890: 14802: 14714:   8: var jumpOsc = null;
14891: 14803: 14715:   9: var jumpGain = null;
14892: 14804: 14716:  10: var loanAmount = 100000;
14893: 14805: 14717:  11: window.floatingTexts = [];  // Make floatingTexts accessible globally
14894: 14806: 14718:  12: var isFirstHouseEntry = true;
14895: 14807: 14719:  13: var houseReEntry = 0;
14896: 14808: 14720:  14: var playerStartAbsY = 0;
14897: 14809: 14721:  15: // We'll access the global canvas object
14898: 14810: 14722:  16: // var ctx is defined later after context creation
14899: 14811: 14723:  17: // Create a Phaser Scene to run your game logic
14900: 14812: 14724:  18: class MainScene extends Phaser.Scene {
14901: 14813: 14725:  19:   constructor() {
14902: 14814: 14726:  20:     super("MainScene");
14903: 14815: 14727:  21:   }
14904: 14816: 14728:  22:   preload() {
14905: 14817: 14729:  23:     // If you had assets, you'd load them here
14906: 14818: 14730:  24:   }
14907: 14819: 14731:  25:   create() {
14908: 14820: 14732:  26:     // Initialize global game state
14909: 14821: 14733:  27:     window.currentState = window.GameState.HOUSE;
14910: 14822: 14734:  28:     // Create a Canvas Texture of the same size as your old canvas
14911: 14823: 14735:  29:     this.rt = this.textures.createCanvas("myCanvas", window.canvas.width, window.canvas.height);
14912: 14824: 14736:  30:     // Get the canvas context with willReadFrequently option
14913: 14825: 14737:  31:     ctx = this.rt.context;
14914: 14826: 14738:  32:     // Set willReadFrequently for better performance with getImageData calls
14915: 14827: 14739:  33:     ctx.canvas.getContext = () => ctx.canvas.getContext('2d', { willReadFrequently: true });
14916: 14828: 14740:  34:     // Add it to the scene as an Image so Phaser will display it
14917: 14829: 14741:  35:     this.image = this.add.image(0, 0, "myCanvas").setOrigin(0, 0);
14918: 14830: 14742:  36:     // Initialize player money now that TWEAK is available
14919: 14831: 14743:  37:     if (typeof window.initializePlayerMoney === 'function') {
14920: 14832: 14744:  38:       window.initializePlayerMoney();
14921: 14833: 14745:  39:     }
14922: 14834: 14746:  40:     // Hook up your DOM event listeners for buttons
14923: 14835: 14747:  41:     document.getElementById("startGame").addEventListener("click", () => {
14924: 14836: 14748:  42:       console.log("Start run clicked.");
14925: 14837: 14749:  43:       unlockAudioContext();
14926: 14838: 14750:  44:       playStartGameSound();
14927: 14839: 14751:  45:       changeState(window.GameState.DOWNHILL);
14928: 14840: 14752:  46:     });
14929: 14841: 14753:  47:     document.getElementById("payLoan").addEventListener("click", () => {
14930: 14842: 14754:  48:       console.log("Paying loan...");
14931: 14843: 14755:  49:       payLoan();
14932: 14844: 14756:  50:     });
14933: 14845: 14757:  51:     // Initialize upgrade buttons
14934: 14846: 14758:  52:     Object.keys(playerUpgrades).forEach(upg => {
14935: 14847: 14759:  53:       initUpgradeButton(upg, playerUpgrades[upg]);
14936: 14848: 14760:  54:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
14937: 14849: 14761:  55:       document.getElementById(btnId).addEventListener("click", () => {
14938: 14850: 14762:  56:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
14939: 14851: 14763:  57:         purchaseUpgrade(playerUpgrades, upg);
14940: 14852: 14764:  58:       });
14941: 14853: 14765:  59:     });
14942: 14854: 14766:  60:     Object.keys(mountainUpgrades).forEach(upg => {
14943: 14855: 14767:  61:       initUpgradeButton(upg, mountainUpgrades[upg]);
14944: 14856: 14768:  62:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
14945: 14857: 14769:  63:       document.getElementById(btnId).addEventListener("click", () => {
14946: 14858: 14770:  64:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
14947: 14859: 14771:  65:         purchaseUpgrade(mountainUpgrades, upg);
14948: 14860: 14772:  66:       });
14949: 14861: 14773:  67:     });
14950: 14862: 14774:  68:     // Set up the world
14951: 14863: 14775:  69:     generateTerrain();
14952: 14864: 14776:  70:     updateLoanButton();
14953: 14865: 14777:  71:     changeState(window.GameState.HOUSE);
14954: 14866: 14778:  72:   }
14955: 14867: 14779:  73:   update(time, delta) {
14956: 14868: 14780:  74:     console.log("MainScene update START");
14957: 14869: 14781:  75:     // Update game mechanics (delta in ms)
14958: 14870: 14782:  76:     updateMechanics(delta);
14959: 14871: 14783:  77:     // Update floating texts
14960: 14872: 14784:  78:     window.floatingTexts = window.floatingTexts.filter(text => text.update(delta));
14961: 14873: 14785:  79:     // Call the render function (draws onto ctx)
14962: 14874: 14786:  80:     render();
14963: 14875: 14787:  81:     // Refresh the Canvas Texture so Phaser displays the new drawing
14964: 14876: 14788:  82:     this.rt.refresh();
14965: 14877: 14789:  83:     console.log("MainScene update END");
14966: 14878: 14790:  84:   }
14967: 14879: 14791:  85: }
14968: 14880: 14792:  86: // Original changeState function (unchanged in logic)
14969: 14881: 14793:  87: function changeState(newState) {
14970: 14882: 14794:  88:   // Guard clause to prevent redundant state changes
14971: 14883: 14795:  89:   if (newState === window.currentState) {
14972: 14884: 14796:  90:     console.log(`State change ignored: already in state ${newState}`);
14973: 14885: 14797:  91:     return;
14974: 14886: 14798:  92:   }
14975: 14887: 14799:  93:   const prevState = window.currentState;
14976: 14888: 14800:  94:   if (player.isJumping && newState !== window.GameState.HOUSE) {
14977: 14889: 14801:  95:     if (player.currentTrick) {
14978: 14890: 14802:  96:       resetTrickState();
14979: 14891: 14803:  97:       playCrashSound();
14980: 14892: 14804:  98:       console.log("State change interrupted trick - counted as crash");
14981: 14893: 14805:  99:     }
14982: 14894: 14806: 100:     lerpPlayerToGround(250, () => {
14983: 14895: 14807: 101:       player.isJumping = false;
14984: 14896: 14808: 102:       onPlayerLand();
14985: 14897: 14809: 103:       completeStateChange(newState, prevState);
14986: 14898: 14810: 104:     });
14987: 14899: 14811: 105:     return;
14988: 14900: 14812: 106:   }
14989: 14901: 14813: 107:   completeStateChange(newState, prevState);
14990: 14902: 14814: 108: }
14991: 14903: 14815: 109: function completeStateChange(newState, prevState) {
14992: 14904: 14816: 110:   window.currentState = newState;
14993: 14905: 14817: 111:   if (window.currentState === window.GameState.HOUSE) {
14994: 14906: 14818: 112:     document.getElementById("upgrade-menu").style.display = "block";
14995: 14907: 14819: 113:     document.getElementById("game-screen").style.display = "none";
14996: 14908: 14820: 114:     const bestTimeText = document.getElementById("bestTimeText");
14997: 14909: 14821: 115:     bestTimeText.textContent = player.bestTime === Infinity ? "Best Time: N/A"
14998: 14910: 14822: 116:                                                            : `Best Time: ${player.bestTime.toFixed(2)}s`;
14999: 14911: 14823: 117:     if (player.sledDamaged > 0) {
15000: 14912: 14824: 118:       player.sledDamaged = 0;
15001: 14913: 14825: 119:       console.log("Sled has been repaired at the house!");
15002: 14914: 14826: 120:       showSledRepairedNotice();
15003: 14915: 14827: 121:     }
15004: 14916: 14828: 122:     if (!isFirstHouseEntry && (prevState === window.GameState.DOWNHILL || prevState === window.GameState.UPHILL)) {
15005: 14917: 14829: 123:       if (typeof despawnAllAnimals === 'function') {
15006: 14918: 14830: 124:         despawnAllAnimals();
15007: 14919: 14831: 125:       }
15008: 14920: 14832: 126:       if (loanAmount > 0) {
15009: 14921: 14833: 127:         const deduction = Math.ceil(loanAmount * TWEAK.houseEntryLoanDeduction);
15010: 14922: 14834: 128:         loanAmount += deduction;
15011: 14923: 14835: 129:         updateLoanButton();
15012: 14924: 14836: 130:         houseReEntry++;
15013: 14925: 14837: 131:         console.log(`House entry fee: -$${deduction} (${TWEAK.houseEntryLoanDeduction * 100}% of $${loanAmount} loan)`);
15014: 14926: 14838: 132:         console.log("House re-entry count:", houseReEntry);
15015: 14927: 14839: 133:       }
15016: 14928: 14840: 134:     }
15017: 14929: 14841: 135:     if (isFirstHouseEntry) {
15018: 14930: 14842: 136:       isFirstHouseEntry = false;
15019: 14931: 14843: 137:     }
15020: 14932: 14844: 138:     updateMoneyDisplay();
15021: 14933: 14845: 139:   }
15022: 14934: 14846: 140:   else if (window.currentState === window.GameState.DOWNHILL) {
15023: 14935: 14847: 141:     document.getElementById("upgrade-menu").style.display = "none";
15024: 14936: 14848: 142:     document.getElementById("game-screen").style.display = "block";
15025: 14937: 14849: 143:     if (prevState === window.GameState.HOUSE) {
15026: 14938: 14850: 144:       earlyFinish = false;
15027: 14939: 14851: 145:       player.collisions = 0;
15028: 14940: 14852: 146:       player.x = window.canvas.width / 2;
15029: 14941: 14853: 147:       player.absY = mountainHeight - (player.height * 3);
15030: 14942: 14854: 148:       player.velocityY = 0;
15031: 14943: 14855: 149:       player.xVel = 0;
15032: 14944: 14856: 150:       downhillStartTime = performance.now();
15033: 14945: 14857: 151:       playerStartAbsY = player.absY;
15034: 14946: 14858: 152:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
15035: 14947: 14859: 153:     }
15036: 14948: 14860: 154:     else if (prevState === window.GameState.UPHILL) {
15037: 14949: 14861: 155:       player.velocityY = 0;
15038: 14950: 14862: 156:       player.xVel = 0;
15039: 14951: 14863: 157:       downhillStartTime = performance.now();
15040: 14952: 14864: 158:       playerStartAbsY = player.absY;
15041: 14953: 14865: 159:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
15042: 14954: 14866: 160:     }
15043: 14955: 14867: 161:   }
15044: 14956: 14868: 162:   else if (window.currentState === window.GameState.UPHILL) {
15045: 14957: 14869: 163:     document.getElementById("upgrade-menu").style.display = "none";
15046: 14958: 14870: 164:     document.getElementById("game-screen").style.display = "block";
15047: 14959: 14871: 165:     if (prevState === window.GameState.DOWNHILL) {
15048: 14960: 14872: 166:       awardMoney();
15049: 14961: 14873: 167:     }
15050: 14962: 14874: 168:     player.xVel = 0;
15051: 14963: 14875: 169:   }
15052: 14964: 14876: 170:   console.log(`Game state changed: ${prevState} -> ${window.currentState}`);
15053: 14965: 14877: 171: }
15054: 14966: 14878: 172: // Create and launch the Phaser game with scale options for responsiveness
15055: 14967: 14879: 173: var config = {
15056: 14968: 14880: 174:   type: Phaser.AUTO,
15057: 14969: 14881: 175:   parent: "game-screen",
15058: 14970: 14882: 176:   width: window.canvas.width,  // Reference from global window.canvas
15059: 14971: 14883: 177:   height: window.canvas.height, // Reference from global window.canvas
15060: 14972: 14884: 178:   scene: MainScene,
15061: 14973: 14885: 179:   backgroundColor: "#000000",
15062: 14974: 14886: 180:   scale: {
15063: 14975: 14887: 181:     mode: Phaser.Scale.FIT,
15064: 14976: 14888: 182:     autoCenter: Phaser.Scale.CENTER_BOTH
15065: 14977: 14889: 183:   }
15066: 14978: 14890: 184: };
15067: 14979: 14891: 185: var phaserGame = new Phaser.Game(config);
15068: 14980: 14892: 186: // Make functions available globally
15069: 14981: 14893: 187: window.changeState = changeState;
15070: 14982: 14894: 188: // Removed redundant global assignment - window.currentState is now managed directly
15071: 14983: 14895: ``````
15072: 14984: ```````
15073: 14985: 
15074: 14986: ## File: docs/CONTRIBUTING.md
15075: 14987: ```````markdown
15076: 14988:   1: How to Contribute to SledHEAD
15077: 14989:   2: =============================
15078: 14990:   3: 
15079: 14991:   4: Thank you for considering contributing to SledHEAD! Community involvement is crucial for making the game the best it can be. Whether you're fixing bugs, adding features, or improving documentation, your efforts are appreciated.
15080: 14992:   5: 
15081: 14993:   6: * * * * *
15082: 14994:   7: 
15083: 14995:   8: Key Resources
15084: 14996:   9: -------------
15085: 14997:  10: 
15086: 14998:  11: -   SledHEAD README -- Learn about the game's core concepts and current features.
15087: 14999:  12: 
15088: 15000:  13: -   SledHEAD License -- Understand the licensing terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets).
15089: 15001:  14: 
15090: 15002:  15: -   Issues & Roadmap -- Check the GitHub Issues section for current tasks and future goals.
15091: 15003:  16: 
15092: 15004:  17: -   Discussions -- Engage with the community, ask questions, and brainstorm ideas.
15093: 15005:  18: 
15094: 15006:  19: * * * * *
15095: 15007:  20: 
15096: 15008:  21: Getting Started
15097: 15009:  22: ---------------
15098: 15010:  23: 
15099: 15011:  24: 1.  Fork the Repository\
15100: 15012:  25:     Create your own fork of the repository and clone it locally.
15101: 15013:  26: 
15102: 15014:  27: 1.  Install Dependencies\
15103: 15015:  28:     SledHEAD is a web-based game built with JavaScript and Phaser.js. You'll just need a local HTTP server to test changes (like Python's http.server or Node's http-server).
15104: 15016:  29: 
15105: 15017:  30: 1.  Create a Branch\
15106: 15018:  31:     Work in a feature-specific branch:
15107: 15019:  32: 
15108: 15020:  33: git  checkout  -b  feature/your-feature-name
15109: 15021:  34: 
15110: 15022:  35: * * * * *
15111: 15023:  36: 
15112: 15024:  37: Testing Your Contributions
15113: 15025:  38: --------------------------
15114: 15026:  39: 
15115: 15027:  40: -   Manually playtest any gameplay changes and check for bugs.
15116: 15028:  41: -   Ensure that UI elements render correctly and gameplay mechanics (like tricks, upgrades, and photography) behave as expected.
15117: 15029:  42: -   Keep console errors to a minimum. Use `console.log` for temporary debugging but clean up before submitting.
15118: 15030:  43: 
15119: 15031:  44: * * * * *
15120: 15032:  45: 
15121: 15033:  46: Submitting Changes
15122: 15034:  47: ------------------
15123: 15035:  48: 
15124: 15036:  49: 1.  **Code Style**
15125: 15037:  50: 
15126: 15038:  51:     -   Use **two spaces for indentation, not tabs**.
15127: 15039:  52:     -   Write clean, readable code with comments where necessary.
15128: 15040:  53:     -   Follow existing naming conventions (camelCase for variables, PascalCase for classes).
15129: 15041:  54:     -   Avoid deeply nested logic---break it into functions for clarity.
15130: 15042:  55: 2.  **Commit Messages**\
15131: 15043:  56:     Write clear commit messages. For example:
15132: 15044:  57: 
15133: 15045:  58:     bash
15134: 15046:  59: 
15135: 15047:  60:     CopyEdit
15136: 15048:  61: 
15137: 15049:  62:     `git commit -m "Fix: Correct collision detection on uphill phase
15138: 15050:  63: 
15139: 15051:  64:     The collision detection logic for obstacles during the uphill phase
15140: 15052:  65:     now accurately accounts for terrain height variations."`
15141: 15053:  66: 
15142: 15054:  67: 3.  **Pull Request (PR)**
15143: 15055:  68: 
15144: 15056:  69:     -   Open a PR against the `main` branch.
15145: 15057:  70:     -   Include a clear description of what you've done and why.
15146: 15058:  71:     -   If your change fixes a bug or closes an issue, reference it in the PR description (e.g., `Closes #42`).
15147: 15059:  72:     -   Include screenshots or screen recordings if the change is visual.
15148: 15060:  73:     -   Be prepared for feedback---collaboration is key!
15149: 15061:  74: 
15150: 15062:  75: * * * * *
15151: 15063:  76: 
15152: 15064:  77: Coding Conventions
15153: 15065:  78: ------------------
15154: 15066:  79: 
15155: 15067:  80: -   **Consistency is key!** When in doubt, follow the style of existing code.
15156: 15068:  81: -   Use **strict equality** (`===` and `!==`).
15157: 15069:  82: -   Prefer `const` and `let` over `var`.
15158: 15070:  83: -   Document functions with comments explaining inputs, outputs, and purpose.
15159: 15071:  84: -   Keep functions focused and concise---single responsibility.
15160: 15072:  85: -   Handle errors gracefully and avoid silent failures.
15161: 15073:  86: -   Clean up `console.log` or temporary debug code before submitting.
15162: 15074:  87: 
15163: 15075:  88: * * * * *
15164: 15076:  89: 
15165: 15077:  90: Licensing of Contributions
15166: 15078:  91: --------------------------
15167: 15079:  92: 
15168: 15080:  93: -   **All contributions become licensed under AGPL 3.0 (for code) and CC BY-NC-SA 4.0 (for assets)**, consistent with the project's dual-license model.
15169: 15081:  94: -   By submitting a PR, you agree that your contributions may be included in SledHEAD and will be publicly available under these licenses.
15170: 15082:  95: 
15171: 15083:  96: * * * * *
15172: 15084:  97: 
15173: 15085:  98: Contributor License Agreement (CLA)
15174: 15086:  99: --------------------------
15175: 15087: 100: 
15176: 15088: 101: By contributing to **SledHEAD**, you agree to the Contributor License Agreement (CLA), granting the project owner the rights to use, modify, and commercialize your contributions. You retain ownership, but your work must be licensed under the project's current terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets) and can be re-licensed for commercial purposes.
15177: 15089: 102: 
15178: 15090: 103: By submitting a pull request, you confirm that you have the right to contribute and agree to these terms. 
15179: 15091: 104: 
15180: 15092: 105: See https://github.com/truevox/SledHEAD/docs/CONTRIBUTOR_LICENSE_AGREEMENT.md for more details.
15181: 15093: 106: 
15182: 15094: 107: 
15183: 15095: 108: * * * * *
15184: 15096: 109: 
15185: 15097: 110: Reporting Bugs & Requesting Features
15186: 15098: 111: ------------------------------------
15187: 15099: 112: 
15188: 15100: 113: -   Open a **GitHub Issue** describing the problem or request.
15189: 15101: 114: -   Be clear and detailed---steps to reproduce bugs, expected behavior, and screenshots help!
15190: 15102: 115: -   Mark issues with appropriate labels (like `bug`, `enhancement`, or `question`).
15191: 15103: 116: 
15192: 15104: 117: * * * * *
15193: 15105: 118: 
15194: 15106: 119: Need Help?
15195: 15107: 120: ----------
15196: 15108: 121: 
15197: 15109: 122: -   Join discussions on the GitHub repo.
15198: 15110: 123: -   Open an issue for technical support or feature questions.
15199: 15111: 124: -   Feedback, ideas, and constructive criticism are welcome!
15200: 15112: 125: 
15201: 15113: 126: * * * * *
15202: 15114: 127: 
15203: 15115: 128: Thank you for helping SledHEAD grow!
15204: 15116: ```````
15205: 15117: 
15206: 15118: ## File: docs/CONTRIBUTOR_LICENSE_AGREEMENT.md
15207: 15119: ```````markdown
15208: 15120:  1: # SledHEAD Contributor License Agreement (CLA)
15209: 15121:  2: 
15210: 15122:  3: Thank you for your interest in contributing to SledHEAD.
15211: 15123:  4: 
15212: 15124:  5: By submitting a contribution, you agree to the following terms:
15213: 15125:  6: 
15214: 15126:  7: 1. **License Grant**  
15215: 15127:  8:    You hereby grant Marvin Bentley II ("Project Owner") an **irrevocable, perpetual, worldwide, royalty-free license** to use, reproduce, modify, adapt, publish, translate, sublicense, distribute, and create derivative works of your contribution, in any medium, for any purpose, including commercial purposes.
15216: 15128:  9: 
15217: 15129: 10: 2. **Ownership**  
15218: 15130: 11:    You retain ownership of your contribution. However, you agree that your contribution is licensed under the project's current open-source licenses (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets), and you grant the Project Owner the right to relicense your contribution for commercial, proprietary, or any other purposes as the Project Owner requres.
15219: 15131: 12: 
15220: 15132: 13: 3. **Warranties**  
15221: 15133: 14:    - You confirm that you are legally entitled to submit the contribution and that it does not violate any third-party rights.  
15222: 15134: 15:    - You confirm that the contribution is your original work, or you have obtained the necessary rights for its use.
15223: 15135: 16: 
15224: 15136: 17: 4. **Contribution Scope**  
15225: 15137: 18:    This agreement applies to any future contributions you make to SledHEAD unless you explicitly state otherwise.
15226: 15138: 19: 
15227: 15139: 20: 5. **No Obligation to Use**  
15228: 15140: 21:    The Project Owner is under no obligation to use, merge, or distribute your contributions.
15229: 15141: 22: 
15230: 15142: 23: ---
15231: 15143: 24: 
15232: 15144: 25: By submitting a contribution, you indicate that you have read, understood, and agree to the terms of this Contributor License Agreement.
15233: 15145: 26: 
15234: 15146: 27: ---
15235: 15147: 28: 
15236: 15148: 29: *Signed electronically via your submission of a Pull Request.*
15237: 15149: ```````
15238: 15150: 
15239: 15151: ## File: docs/LICENSE.md
15240: 15152: ```````markdown
15241: 15153:   1: # SledHEAD Dual License Agreement
15242: 15154:   2: Version 1.2 – March 2025
15243: 15155:   3: 
15244: 15156:   4: This License Agreement applies to SledHEAD (the "Game"), including its source code and assets, created by the original author Marvin Bentley II ("Licensor"). By copying, modifying, distributing, or otherwise using the Game or any of its components, you (the "Licensee") agree to the following terms:
15245: 15157:   5: 
15246: 15158:   6: ## 1. Definitions
15247: 15159:   7: 
15248: 15160:   8: * "Source Code": The software code of the Game, including all scripts, programs, and software files intended to produce the Game’s functionality.
15249: 15161:   9: * "Assets": All non-code content in the Game, including but not limited to artwork, images, textures, models, sprites, music, sound effects, voice, dialogue, level designs, animations, and any other audiovisual or creative works included with the Game.
15250: 15162:  10: * "Mod" or "Modification": Any derivative work that is based on or uses any portion of the Game’s Source Code or Assets, including add-ons, plugins, expansions, or fan-made content that extends or alters the Game.
15251: 15163:  11: * "Commercial Use": Use of the Game or its components that is intended for or directed toward commercial advantage or monetary compensation. (For clarity: selling the Game or Mods, charging money for access to the Game or Mods, or monetizing the Game’s Assets as standalone products are considered Commercial Use. However, monetization of gameplay videos/streams is addressed separately in Section 4.)
15252: 15164:  12: * "You" (or "Licensee"): Any individual or legal entity exercising the rights granted by this License (for example, a player, developer, or modder who uses the Game or its content).
15253: 15165:  13: * "Licensor": The original author and copyright holder of SledHEAD.
15254: 15166:  14: 
15255: 15167:  15: ## 2. Open Source License for Source Code
15256: 15168:  16: 
15257: 15169:  17: The Source Code of SledHEAD is licensed to you under the terms of the GNU Affero General Public License, version 3 (AGPLv3), or (at your option) any later version of the AGPL published by the Free Software Foundation. This means:
15258: 15170:  18: 
15259: 15171:  19: * You may use, study, copy, modify, and distribute the Source Code freely, provided you comply with the AGPLv3 terms. In particular, if you distribute your modified version of the Source Code or if you make it available for use over a network (e.g. running a modified game server for others to play), you must make your Source Code modifications publicly available under the same license (AGPLv3).
15260: 15172:  20: * The full text of the AGPLv3 is provided along with this agreement (usually in a file named AGPL-3.0.txt or similar). By accepting this License, you agree to abide by the conditions of AGPLv3 for the Game’s Source Code.
15261: 15173:  21: * No Additional Restrictions on Source Code: Except as expressly stated in this Agreement, you may not impose any further restrictions on the exercise of the rights granted or affirmed under the AGPLv3 for the Source Code. (In other words, the Source Code remains free and open under AGPLv3 terms whenever it is distributed or deployed, unless a separate Commercial License is obtained as described in Section 6.)
15262: 15174:  22: 
15263: 15175:  23: ## 3. Creative Commons License for Assets
15264: 15176:  24: 
15265: 15177:  25: All Assets of SledHEAD (non-code content) are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). Under this license:
15266: 15178:  26: 
15267: 15179:  27: * You are free to:
15268: 15180:  28:   * Share – copy and redistribute the Assets in any medium or format.
15269: 15181:  29:   * Adapt – remix, transform, and build upon the Assets for any non-commercial purpose.
15270: 15182:  30: * Attribution – You must give appropriate credit to the original author (see Section 5), provide a link to the CC BY-NC-SA 4.0 license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the Licensor endorses you or your use.
15271: 15183:  31: * NonCommercial – You may not use the Assets for commercial purposes. (Using the Assets or any derivative of them to generate revenue or for any commercial advantage is prohibited unless you have obtained a separate Commercial License as per Section 6.)
15272: 15184:  32: * ShareAlike – If you remix, transform, or build upon the Assets, you must distribute your contributions under the same license (CC BY-NC-SA 4.0) or a license that is more permissive. “More permissive” means any license that grants equal or greater rights to the public than CC BY-NC-SA (for example, you may choose to release your own original derivative Assets under CC BY-SA or CC BY, which would allow commercial use or omit the ShareAlike requirement, but you cannot apply a more restrictive license or make the assets wholly proprietary).
15273: 15185:  33: * The full text of the CC BY-NC-SA 4.0 license is provided with this agreement (or accessible via the Creative Commons website). By using the Game’s Assets, you agree to the terms of CC BY-NC-SA 4.0.
15274: 15186:  34: * No Commercial Exploitation of Assets: For clarity, you cannot sell, license, or otherwise commercially exploit the Game’s Assets (original or modified) on their own or as part of a product, except under a separate Commercial License (Section 6). For example, you cannot charge money for a soundtrack that includes the Game’s music, or include the Game’s art in a paid product, without permission.
15275: 15187:  35: 
15276: 15188:  36: ## 4. Permission for Videos, Streaming, and Screenshots
15277: 15189:  37: 
15278: 15190:  38: The Licensor explicitly grants permission to all users to capture, use, and share audiovisual content from the Game (including gameplay videos, streams, screenshots, and similar content), even if monetized, without needing any additional license or permission, as long as such use does not misrepresent the origin of the Game. This means:
15279: 15191:  39: 
15280: 15192:  40: * You may stream or record gameplay on platforms like Twitch, YouTube, etc., and you may monetize these videos/streams (for example, through ads, sponsorships, or donations). This use is allowed and considered non-commercial with respect to the Game’s Assets because it is promotional/fan content by the community. The NonCommercial restriction in Section 3 is waived for this specific type of content creation.
15281: 15193:  41: * You do not need to ask the Licensor for permission to create let’s play videos, reviews, or live streams of SledHEAD. This is encouraged as part of community engagement. Attribution (such as naming the Game) in the video/stream description or verbally is appreciated but not strictly required beyond what the platform norms are, since the content itself usually makes it clear it’s SledHEAD. (However, you still must not claim to be the creator of the Game.)
15282: 15194:  42: * This permission for videos/streams does not grant you the right to extract the Assets and use them separately in other commercial products (Section 3’s NonCommercial rule still applies to the Assets themselves). It only covers the use of recorded or displayed in-game content as part of video/stream content. For example, using a game’s music as background of an unrelated commercial video would not be covered by this clause, but showing the game’s music as it plays during gameplay footage is fine.
15283: 15195:  43: 
15284: 15196:  44: ## 5. Attribution Requirement
15285: 15197:  45: 
15286: 15198:  46: You must give appropriate credit to the original author (Licensor) when you distribute or publicly use the Game (or any substantial portion of it, including Mods). This is a condition of the CC BY-NC-SA license for Assets and is hereby made a condition of this overall license. The attribution should be placed in a manner appropriate to the medium:
15287: 15199:  47: 
15288: 15200:  48: * If you distribute the Game in unmodified form, include the original credits (which should already list the author) and license information. Typically, the Game already contains an in-game credits section or documentation listing the author and contributors — retain that.
15289: 15201:  49: * If you create a Mod or a fork of the Game, you must credit SledHEAD and the original author somewhere in your project. For example, in an “About” menu, “Credits” screen, README file, or documentation for your Mod, include a notice such as: “This project is based on SledHEAD, originally created by Marvin Bentley II. SledHEAD is © 2024 Marvin Bentley II and is licensed under AGPLv3 (code) and CC BY-NC-SA 4.0 (assets).” Adjust the wording as appropriate, but it should be reasonably prominent, as appropriate for the medium.
15290: 15202:  50: * If you use parts of the Source Code in another project, you must keep the copyright and license notices in those source files per AGPL requirements. Additionally, an attribution in your project’s documentation or credits to the SledHEAD project is required.
15291: 15203:  51: * The attribution requirement is not intended to be burdensome: it’s mainly to ensure the original creators are acknowledged. A single mention in a credits section or README is typically sufficient, as long as it's accessible to users of your product or Mod.
15292: 15204:  52: 
15293: 15205:  53: ## 6. Modding and Derivative Works
15294: 15206:  54: 
15295: 15207:  55: SledHEAD is mod-friendly and open to community contributions, under the following conditions:
15296: 15208:  56: 
15297: 15209:  57: * **Mods - Source Code:** If you create a Mod that includes or is based on the Game’s Source Code, the Mod’s source code must be released under the AGPLv3 (same as the Game) or an even more permissive open-source license. More permissive licenses include, for example, GNU GPLv3, MIT, Apache 2.0, etc., which do not impose additional restrictions beyond AGPL. This ensures that anyone who plays or uses your Mod has the same rights to obtain and modify the source. You cannot make a closed-source mod using the Game’s code without a separate Commercial License (see Section 7).
15298: 15210:  58: * **Mods - Assets:** If your Mod includes or modifies any of the Game’s Assets, then all such Assets in your Mod must be licensed under CC BY-NC-SA 4.0 (the same license as the base game assets) or a more permissive license. “More permissive” in this context could be, for example, CC BY-SA 4.0 (which allows commercial use but still requires ShareAlike) or CC BY 4.0 (which allows commercial use and no ShareAlike). You may choose a more permissive license for your original assets if you want to allow broader use, but you must at least allow the same scope of use that CC BY-NC-SA permits. You cannot put additional restrictions on derivatives of the Game’s Assets beyond CC BY-NC-SA.
15299: 15211:  59: * **No circumvention via Mods:** You may not create a Mod or derivative work that is essentially a way to evade the NonCommercial restriction on the original Assets. For example, you can’t repackage a level of SledHEAD as a “mod” and sell it, claiming the new level’s art is under a different license. Any part of a Mod derived from original Assets inherits the NonCommercial restriction.
15300: 15212:  60: * **Paid Mods:** SledHEAD’s open licenses are designed such that Mods are freely shareable and open. While charging money for a Mod is strongly discouraged under this license scheme, we acknowledge it can happen. If you choose to sell or paywall a Mod, you do so at your own risk under the license terms:
15301: 15213:  61:   * The Mod’s source code must still be AGPLv3 (or open-source), meaning anyone who obtains the Mod (even by purchasing it) must have access to the source and the right to redistribute it. Practically, this means once one person has bought your Mod, they have the legal right to share the code with others for free. You cannot revoke that right, so a paywalled open-source mod is of limited enforceability (the “paywall” is more of a donation or early access mechanism, not a true sale of exclusive rights).
15302: 15214:  62:   * Any of the Mod’s assets that derive from SledHEAD Assets carry the NonCommercial clause. This means you technically cannot charge for those assets or any product containing them. If your Mod contains only your own original assets and you license them under a more permissive license (such as CC BY-SA or even a proprietary license you own), you have more leeway to charge for the Mod. However, by including SledHEAD’s original game content or requiring the Game to run, your Mod is still a derivative work of the Game as a whole, and thus selling it without the Licensor’s permission could violate the spirit of the NonCommercial clause.
15303: 15215:  63:   * In summary: If you want to monetize a Mod, you should seek a Commercial License from the Licensor (see Section 7) to cover that, or ensure that your Mod is completely your own independent work and doesn’t include NonCommercial content. Otherwise, anyone is legally free to redistribute your Mod for non-commercial purposes (or as allowed by whatever license you chose) without paying, and the Licensor reserves the right to enforce the NonCommercial clause if needed.
15304: 15216:  64: * **Mods Must Credit Original:** As noted in Section 5, Mods should credit SledHEAD and the original author. Making mods open-source and crediting the base game helps build a healthy community and is a condition of using the Game’s content.
15305: 15217:  65: * **Upstream Contributions:** If you make improvements or fixes to the base Game’s Source Code (as opposed to separate mods), you are encouraged to contribute them back to the main project. You can do this by submitting patches or pull requests to the original repository. Note that by contributing, you agree that your contribution will be licensed under the same terms as this License (so it remains AGPL for code and CC BY-NC-SA for any assets you contribute, unless otherwise agreed). The Licensor may ask you to sign a contributor agreement (see Section 9) to clarify licensing of contributions.
15306: 15218:  66: 
15307: 15219:  67: ## 7. Commercial License Option
15308: 15220:  68: 
15309: 15221:  69: The Licensor offers the possibility of a separate Commercial License for parties interested in using SledHEAD in ways not permitted by the above open licenses (AGPL and CC BY-NC-SA). This could apply if, for example, you want to: distribute the game in a proprietary (closed-source) manner, use the Assets commercially, include SledHEAD in a commercial product, or otherwise not comply with AGPL/CC BY-NC-SA terms. The following terms govern the Commercial License option:
15310: 15222:  70: 
15311: 15223:  71: * **By Request:** You must contact the Licensor to request a Commercial License. Terms (including scope, duration, and fees) are negotiable on a case-by-case basis. For instance, the Licensor may offer a one-time purchase license, a revenue-sharing agreement, or a subscription model, depending on the nature of the use.
15312: 15224:  72: * **No Guaranteed Approval:** The Licensor has sole discretion to decide whether or not to grant a Commercial License to any requesting party. Simply requesting a Commercial License does not guarantee you will receive one. The Licensor may decline for any reason or require certain conditions.
15313: 15225:  73: * **Override of Open Terms:** A duly granted Commercial License will override or modify the AGPL and CC BY-NC-SA terms for the party to whom it is granted, as specified in that license agreement. For example, a Commercial License may allow you to keep your source code modifications proprietary, or to use the Assets in a commercial game, notwithstanding Sections 2 and 3. The exact permissions and exceptions will be written in that separate agreement. Unless and until you have a signed Commercial License, you are bound by the AGPL and CC BY-NC-SA terms described in this document.
15314: 15226:  74: * **Closed Source Allowed with Commercial License:** Under a Commercial License, the Licensor may permit you to create a closed-source derivative or include SledHEAD code in a larger proprietary project. This is an exception to the copyleft requirement, granted only through the Commercial License.
15315: 15227:  75: * **Written Agreement:** Any Commercial License will be provided in writing (which may be a separate contract or license document). It will detail the rights granted, any limitations, and the financial terms. You will likely be required to prominently credit the original author even in commercial use, unless otherwise agreed.
15316: 15228:  76: 
15317: 15229:  77: ## 8. Reservation of Rights and Future Relicensing
15318: 15230:  78: 
15319: 15231:  79: * **Ownership:** The Licensor (original author) retains all rights, title, and interest in SledHEAD and its Source Code and Assets, except for the licenses expressly granted to you under this Agreement. No trademark rights are granted (the name SledHEAD is not necessarily covered by this license—separate permissions may be needed to use the name or logos in commercial contexts).
15320: 15232:  80: * **Right to Relicense:** The Licensor reserves the right to relicense or release parts or all of the Game under different terms in the future, including more permissive open-source licenses. For example, the Licensor may later decide to release certain Assets under a license like CC BY 4.0 (which would allow commercial use) or even dedicate some components to the public domain. Similarly, future versions of the Source Code might be released under a license like MIT or GPL, etc., at the Licensor’s discretion.
15321: 15233:  81: * **Effect on Existing License:** Any such re-licensing by the Licensor in the future will not retroactively revoke the rights you've obtained under this Agreement. (For example, if you received the game under AGPL/CC BY-NC-SA, that specific release is still under those terms for you.) However, the Licensor may offer upgraded license terms for future versions or for specific components, which you can opt to use under those new terms.
15322: 15234:  82: * **Contributions from Others:** If the project receives contributions from other developers (community contributions), the Licensor will ensure that those contributions are either made under a contributor agreement or appropriate terms such that the Licensor can include them in future releases. This is to maintain the ability to relicense if needed. (See Section 9 about contributor agreements.)
15323: 15235:  83: * **No Obligation to Future Licensing:** Nothing in this clause guarantees that the Licensor will release a more permissive version, only that it’s a possibility. Users and contributors should be aware that license terms might be adjusted in future releases, but any such change will be clearly communicated and, if necessary, consent from contributors will be obtained.
15324: 15236:  84: 
15325: 15237:  85: ## 9. Contributor License Agreement (CLA) (for external contributors)
15326: 15238:  86: 
15327: 15239:  87: At present (initial release), all code and assets in SledHEAD are authored by the original Licensor. If you wish to contribute to the project (e.g., by submitting code or asset improvements), the Licensor may ask you to sign a Contributor License Agreement. A CLA typically confirms that: (a) you have the right to contribute what you send, (b) you grant the Licensor permission to use and relicense your contribution under this project’s license and potentially other licenses in the future, and (c) you understand your contribution is provided under the same open license to all users.
15328: 15240:  88: 
15329: 15241:  89: * **Necessity of CLA:** The CLA is intended to make future license changes or commercial licensing of the project smoother, by ensuring all contributors agree on how their contributions can be used. If you do not sign such an agreement, the Licensor might not be able to accept your contribution, especially if it’s significant, because it could complicate the ability to relicense or offer commercial terms later.
15330: 15242:  90: * **Timing:** You generally won’t need to sign a CLA until you are about to make the first contribution that will be merged into the project. Simply using or modding the game doesn’t require a CLA. It’s only for when you contribute code or assets back to the official project. The Licensor may publish the CLA text and a process (e.g., an online sign-off) when the project starts accepting outside contributions.
15331: 15243:  91: * **Contributor Rights:** Even after signing a CLA, you (as a contributor) still retain copyright to your contributions and you can reuse your contributed code elsewhere. The CLA just gives the Licensor a broad right to include your work in SledHEAD and relicense as needed (for instance, if in the future SledHEAD moves to a different license or a commercial dual-license model, your contribution can be included).
15332: 15244:  92: * **No CLA at Initial Release:** If you are simply downloading or using the game, this section doesn’t affect you. It’s informational in case the project grows with community help. The Licensor will announce when a CLA becomes required (likely before accepting the first non-trivial external commit).
15333: 15245:  93: 
15334: 15246:  94: ## 10. Disclaimer of Warranty
15335: 15247:  95: 
15336: 15248:  96: THE GAME (INCLUDING SOURCE CODE AND ASSETS) IS PROVIDED "AS IS" AND WITHOUT WARRANTY OF ANY KIND. To the fullest extent permitted by law, the Licensor disclaims all warranties, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement. You accept all risk as to the quality and performance of the Game. Should the Game prove defective, you assume the cost of all necessary servicing, repair, or correction. No oral or written information or advice provided by the Licensor shall create any warranty. (This disclaimer is in line with Section 15 of the AGPLv3 and Section 5 of CC BY-NC-SA 4.0.)
15337: 15249:  97: 
15338: 15250:  98: ## 11. Limitation of Liability
15339: 15251:  99: 
15340: 15252: 100: Under no circumstances and under no legal theory (including, without limitation, tort (including negligence), contract, or otherwise) shall the Licensor, or anyone who has contributed to the Game, be liable to you for any direct, indirect, incidental, consequential, special, or exemplary damages arising out of or relating to this License or the use of the Game, even if the Licensor has been advised of the possibility of such damages. In jurisdictions that do not allow the exclusion or limitation of certain damages, the Licensor’s liability shall be limited to the minimum extent permitted by law. You acknowledge that the Licensor is not liable for how you use the Game or Mods, or any outcomes of using it (for example, no liability for loss of data, loss of profits, or legal issues you might incur by violating this Agreement).
15341: 15253: 101: 
15342: 15254: 102: ## 12. General
15343: 15255: 103: 
15344: 15256: 104: * **Severability:** If any provision of this License is held to be unenforceable or invalid by a court of competent jurisdiction, that provision will be modified to the minimum extent necessary to make it enforceable (or severed if necessary), and the rest of the License will remain in effect.
15345: 15257: 105: * **No Endorsement:** Nothing in this License gives you rights to use the name, logos, or trademarks of SledHEAD or the Licensor for promotional purposes (aside from factual attribution as required). You cannot imply that your Mod or product is endorsed by the original author without separate permission.
15346: 15258: 106: * **License Acceptance:** By using the Game (or any of its Source Code or Assets), you indicate your acceptance of this License. If you do not agree to these terms, you do not have permission to use the Game or its contents.
15347: 15259: 107: * **Copyright Notice:** © 2024 Marvin Bentley II. All rights reserved, except as explicitly granted by this License.
15348: 15260: ```````
15349: 15261: 
15350: 15262: ## File: js/mobs/mountainlion.js
15351: 15263: ```````javascript
15352: 15264:  1: /* mountainlion.js - Mountain Lion Animal Module
15353: 15265:  2: // This module defines the mountain lion characteristics for the wildlife simulation.
15354: 15266:  3: // It registers itself with wildlife.js by calling registerAnimalType().
15355: 15267:  4: // Drawn in a style consistent with our bear and bird modules, with a pretty kitty flair.
15356: 15268:  5: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
15357: 15269:  6: */
15358: 15270:  7: (function() {
15359: 15271:  8:     // Helper function to draw a rectangle at an angle, centered at (cx, cy)
15360: 15272:  9:     function drawRectAtAngle(ctx, cx, cy, width, height, angleDeg, fillStyle) {
15361: 15273: 10:         let rad = angleDeg * Math.PI / 180;
15362: 15274: 11:         ctx.save();
15363: 15275: 12:         ctx.translate(cx, cy);
15364: 15276: 13:         ctx.rotate(rad);
15365: 15277: 14:         ctx.fillStyle = fillStyle;
15366: 15278: 15:         ctx.fillRect(-width / 2, -height / 2, width, height);
15367: 15279: 16:         ctx.restore();
15368: 15280: 17:     }
15369: 15281: 18:     var mountainLionData = {
15370: 15282: 19:         type: "mountainlion",
15371: 15283: 20:         spawnProbability: 2.0, // Very high spawn chance
15372: 15284: 21:         width: 50,
15373: 15285: 22:         height: 30,
15374: 15286: 23:         detectionRadius: 60,
15375: 15287: 24:         speed: 10,
15376: 15288: 25:         basePhotoBonus: 15, // Good bonus for a pretty kitty
15377: 15289: 26:         color: "#F9E79F",   // A soft golden color
15378: 15290: 27:         spawningBiomes: [
15379: 15291: 28:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
15380: 15292: 29:         ],
15381: 15293: 30:         customUpdate: null,
15382: 15294: 31:         customDraw: function(animal, screenY, ctx) {
15383: 15295: 32:             // Draw the body
15384: 15296: 33:             ctx.fillStyle = animal.color;
15385: 15297: 34:             ctx.fillRect(
15386: 15298: 35:                 animal.x - animal.width / 2,
15387: 15299: 36:                 screenY - animal.height / 2,
15388: 15300: 37:                 animal.width,
15389: 15301: 38:                 animal.height
15390: 15302: 39:             );
15391: 15303: 40:             // Draw left ear as a triangle
15392: 15304: 41:             ctx.beginPath();
15393: 15305: 42:             ctx.moveTo(animal.x - animal.width / 4, screenY - animal.height / 2);
15394: 15306: 43:             ctx.lineTo(animal.x - animal.width / 4 - 10, screenY - animal.height / 2 - 15);
15395: 15307: 44:             ctx.lineTo(animal.x - animal.width / 4 + 10, screenY - animal.height / 2 - 15);
15396: 15308: 45:             ctx.closePath();
15397: 15309: 46:             ctx.fillStyle = "#000000";
15398: 15310: 47:             ctx.fill();
15399: 15311: 48:             // Draw right ear
15400: 15312: 49:             ctx.beginPath();
15401: 15313: 50:             ctx.moveTo(animal.x + animal.width / 4, screenY - animal.height / 2);
15402: 15314: 51:             ctx.lineTo(animal.x + animal.width / 4 - 10, screenY - animal.height / 2 - 15);
15403: 15315: 52:             ctx.lineTo(animal.x + animal.width / 4 + 10, screenY - animal.height / 2 - 15);
15404: 15316: 53:             ctx.closePath();
15405: 15317: 54:             ctx.fill();
15406: 15318: 55:             // Draw a tail using an angled rectangle
15407: 15319: 56:             let tailPivotX = animal.x + animal.width / 2;
15408: 15320: 57:             let tailPivotY = screenY + animal.height / 2;
15409: 15321: 58:             let tailAngle = -45;
15410: 15322: 59:             let tailWidth = 20;
15411: 15323: 60:             let tailHeight = 8;
15412: 15324: 61:             drawRectAtAngle(ctx, 
15413: 15325: 62:                 tailPivotX + (tailWidth / 2) * Math.cos(tailAngle * Math.PI / 180),
15414: 15326: 63:                 tailPivotY + (tailWidth / 2) * Math.sin(tailAngle * Math.PI / 180),
15415: 15327: 64:                 tailWidth, 
15416: 15328: 65:                 tailHeight, 
15417: 15329: 66:                 tailAngle, 
15418: 15330: 67:                 animal.color
15419: 15331: 68:             );
15420: 15332: 69:             // Altitude indicator
15421: 15333: 70:             let t = 1 - (animal.altitude / 100);
15422: 15334: 71:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
15423: 15335: 72:             ctx.fillStyle = altitudeColor;
15424: 15336: 73:             ctx.fillRect(
15425: 15337: 74:                 animal.x + animal.width / 2 + 5,
15426: 15338: 75:                 screenY - 5,
15427: 15339: 76:                 10,
15428: 15340: 77:                 10
15429: 15341: 78:             );
15430: 15342: 79:         }
15431: 15343: 80:     };
15432: 15344: 81:     if (typeof registerAnimalType === 'function') {
15433: 15345: 82:         registerAnimalType(mountainLionData);
15434: 15346: 83:     } else {
15435: 15347: 84:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
15436: 15348: 85:     }
15437: 15349: 86: })();
15438: 15350: ```````
15439: 15351: 
15440: 15352: ## File: js/camera.js
15441: 15353: ```````javascript
15442: 15354:  1: // camera.js
15443: 15355:  2: // This file is responsible for handling the photography
15444: 15356:  3: // mechanics.
15445: 15357:  4: // Global variables for photo system
15446: 15358:  5: var lastPhotoTime = 0;
15447: 15359:  6: // ------------------- Photo (Critter) Minigame Logic -------------------
15448: 15360:  7: // Handles taking a photo of an animal when conditions are met.
15449: 15361:  8: function takePhoto() {
15450: 15362:  9:   let now = Date.now();
15451: 15363: 10:   if (now - lastPhotoTime < TWEAK.photoCooldown) return; // Enforce cooldown
15452: 15364: 11:   if (!activeAnimal || !isAnimalInsideCone(activeAnimal)) return;
15453: 15365: 12:   lastPhotoTime = now;
15454: 15366: 13:   let baseValue = TWEAK.basePhotoValue;
15455: 15367: 14:   // Altitude Bonus: exponential falloff within 50 units.
15456: 15368: 15:   let diffAlt = Math.abs(player.altitudeLine - activeAnimal.altitude);
15457: 15369: 16:   let altitudeMatchBonus;
15458: 15370: 17:   if (diffAlt > 50) {
15459: 15371: 18:     altitudeMatchBonus = 1;
15460: 15372: 19:   } else {
15461: 15373: 20:     altitudeMatchBonus = 1 + (TWEAK.altitudeMatchMultiplier - 1) * Math.exp(-diffAlt / 15);
15462: 15374: 21:   }
15463: 15375: 22:   // Center Bonus: based on the angle difference between camera direction and animal.
15464: 15376: 23:   let animalAngle = Math.atan2(activeAnimal.y - player.absY, activeAnimal.x - player.x) * (180 / Math.PI);
15465: 15377: 24:   if (animalAngle < 0) animalAngle += 360;
15466: 15378: 25:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
15467: 15379: 26:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
15468: 15380: 27:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
15469: 15381: 28:   let sweetSpotPercentage = 0.10 + (playerUpgrades.optimalOptics * 0.01);
15470: 15382: 29:   let sweetSpotAngle = coneAngle * sweetSpotPercentage;
15471: 15383: 30:   let centerBonus;
15472: 15384: 31:   if (diffAngle <= sweetSpotAngle) {
15473: 15385: 32:     centerBonus = TWEAK.centerPOVMultiplier;
15474: 15386: 33:   } else if (diffAngle < coneAngle / 2) {
15475: 15387: 34:     let factor = (diffAngle - sweetSpotAngle) / (coneAngle / 2 - sweetSpotAngle);
15476: 15388: 35:     centerBonus = 1 + (TWEAK.centerPOVMultiplier - 1) * Math.exp(-factor * 3);
15477: 15389: 36:   } else {
15478: 15390: 37:     centerBonus = 1;
15479: 15391: 38:   }
15480: 15392: 39:   // Movement Bonus and Animal Type Multiplier:
15481: 15393: 40:   let movementBonus = activeAnimal.state !== "sitting" ? TWEAK.fleeingAnimalMultiplier : 1;
15482: 15394: 41:   let animalTypeMultiplier = activeAnimal.type === "bear" ? TWEAK.bearMultiplier : TWEAK.birdMultiplier;
15483: 15395: 42:   let repeatPenalty = activeAnimal.hasBeenPhotographed ? TWEAK.repeatPhotoPenalty : 1;
15484: 15396: 43:   let totalMoney = Math.floor(baseValue * altitudeMatchBonus * centerBonus * movementBonus * animalTypeMultiplier * repeatPenalty);
15485: 15397: 44:   player.money += totalMoney;
15486: 15398: 45:   showMoneyGain(totalMoney, `(📸 ${activeAnimal.type})`);
15487: 15399: 46:   addFloatingText(`+$${totalMoney} 📸`, player.x, player.absY);
15488: 15400: 47:   console.log(`Captured ${activeAnimal.type}! Calculation details: Base=$${baseValue}, AltitudeBonus=${altitudeMatchBonus.toFixed(2)}, CenterBonus=${centerBonus.toFixed(2)}, MovementBonus=${movementBonus.toFixed(2)}, AnimalTypeMultiplier=${animalTypeMultiplier}, RepeatPenalty=${repeatPenalty}, Total=$${totalMoney}.`);
15489: 15401: 48:   // After taking a photo, animal should always flee
15490: 15402: 49:   if (activeAnimal.state === "sitting") {
15491: 15403: 50:     console.log(`Animal (${activeAnimal.type}) startled by camera - changing state from sitting to fleeing`);
15492: 15404: 51:     activeAnimal.state = "fleeing";
15493: 15405: 52:     activeAnimal.fleeingLogOnce = false; // Reset so we get the fleeing log message
15494: 15406: 53:   }
15495: 15407: 54:   activeAnimal.hasBeenPhotographed = true;
15496: 15408: 55: }
15497: 15409: 56: // Check if the animal is inside the camera cone
15498: 15410: 57: function isAnimalInsideCone(animal) {
15499: 15411: 58:   // Distance check
15500: 15412: 59:   let dx = animal.x - player.x;
15501: 15413: 60:   let dy = animal.y - player.absY;
15502: 15414: 61:   let distanceSquared = dx * dx + dy * dy;
15503: 15415: 62:   let maxDistance = TWEAK.maxAnimalPhotoDistance;
15504: 15416: 63:   if (distanceSquared > maxDistance * maxDistance) return false;
15505: 15417: 64:   // Angle check
15506: 15418: 65:   let animalAngle = Math.atan2(dy, dx) * (180 / Math.PI);
15507: 15419: 66:   if (animalAngle < 0) animalAngle += 360;
15508: 15420: 67:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
15509: 15421: 68:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
15510: 15422: 69:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
15511: 15423: 70:   return diffAngle <= coneAngle / 2;
15512: 15424: 71: }
15513: 15425: ```````
15514: 15426: 
15515: 15427: ## File: js/jumpsled.js
15516: 15428: ```````javascript
15517: 15429:  1: // jumpsled.js
15518: 15430:  2: // This file contains all jump-related functions for SledHEAD
15519: 15431:  3: function onPlayerJumpStart() {
15520: 15432:  4:   player.jumpStartTime = performance.now();
15521: 15433:  5:   player.jumpStartY = player.absY;
15522: 15434:  6:   player.jumpPeakY = player.absY;
15523: 15435:  7:   console.log("Jump initiated at Y:", player.jumpStartY.toFixed(1));
15524: 15436:  8:   unlockAudioContext();
15525: 15437:  9:   jumpOsc = audioCtx.createOscillator();
15526: 15438: 10:   jumpGain = audioCtx.createGain();
15527: 15439: 11:   jumpOsc.type = "sine";
15528: 15440: 12:   jumpGain.gain.setValueAtTime(0.3, audioCtx.currentTime);
15529: 15441: 13:   jumpOsc.connect(jumpGain);
15530: 15442: 14:   jumpGain.connect(audioCtx.destination);
15531: 15443: 15:   jumpOsc.start();
15532: 15444: 16:   // Drain stamina on jump initiation
15533: 15445: 17:   stamina.drainJump();
15534: 15446: 18: }
15535: 15447: 19: function onPlayerJumpPeak() {
15536: 15448: 20:   console.log("Reached peak of jump.");
15537: 15449: 21:   // Optionally add a sound effect here.
15538: 15450: 22: }
15539: 15451: 23: function cleanupJumpSound() {
15540: 15452: 24:   if (jumpOsc) {
15541: 15453: 25:     jumpOsc.stop();
15542: 15454: 26:     jumpOsc.disconnect();
15543: 15455: 27:     jumpOsc = null;
15544: 15456: 28:   }
15545: 15457: 29:   if (jumpGain) {
15546: 15458: 30:     jumpGain.disconnect();
15547: 15459: 31:     jumpGain = null;
15548: 15460: 32:   }
15549: 15461: 33: }
15550: 15462: 34: function onPlayerLand() {
15551: 15463: 35:   const jumpTime = (performance.now() - player.jumpStartTime) / 1000;
15552: 15464: 36:   const jumpHeight = player.jumpPeakY - player.jumpStartY;
15553: 15465: 37:   const totalDistance = player.absY - player.jumpStartY;
15554: 15466: 38:   console.log(`Jump complete! Time: ${jumpTime.toFixed(2)}s, Peak Height: ${jumpHeight.toFixed(1)}, Distance: ${totalDistance.toFixed(1)}`);
15555: 15467: 39:   cleanupJumpSound();
15556: 15468: 40:   stamina.resetJumpTrigger();
15557: 15469: 41: }
15558: 15470: ```````
15559: 15471: 
15560: 15472: ## File: js/loan.js
15561: 15473: ```````javascript
15562: 15474:  1: /* loan.js - Loan Management & Victory Condition */
15563: 15475:  2: // Loan System
15564: 15476:  3: var loanAmount = 100000; // Initial loan amount
15565: 15477:  4: function updateLoanButton() {
15566: 15478:  5:   const loanButton = document.getElementById("payLoan");
15567: 15479:  6:   if (loanButton) {
15568: 15480:  7:     if (loanAmount <= 0) {
15569: 15481:  8:       loanButton.textContent = "LOAN PAID OFF!";
15570: 15482:  9:       loanButton.disabled = true;
15571: 15483: 10:       // Show victory banner
15572: 15484: 11:       document.getElementById("victoryBanner").style.display = "block";
15573: 15485: 12:     } else {
15574: 15486: 13:       loanButton.textContent = `Pay Loan ($${loanAmount.toLocaleString()})`;
15575: 15487: 14:       loanButton.disabled = false;
15576: 15488: 15:     }
15577: 15489: 16:   }
15578: 15490: 17: }
15579: 15491: 18: function payLoan() {
15580: 15492: 19:   if (player.money > 0) {
15581: 15493: 20:     const payment = Math.min(player.money, loanAmount);
15582: 15494: 21:     loanAmount -= payment;
15583: 15495: 22:     player.money -= payment;
15584: 15496: 23:     updateMoneyDisplay(); // This function should update the on-screen money (see below)
15585: 15497: 24:     updateLoanButton();
15586: 15498: 25:     if (loanAmount <= 0) {
15587: 15499: 26:       console.log("🎉 Loan paid off! Victory!");
15588: 15500: 27:       playTone(800, "sine", 0.3, 0.5); // Victory sound
15589: 15501: 28:     } else {
15590: 15502: 29:       console.log(`💰 Loan payment: $${payment}. Remaining: $${loanAmount}`);
15591: 15503: 30:       playTone(600, "sine", 0.1, 0.2); // Payment sound
15592: 15504: 31:     }
15593: 15505: 32:   }
15594: 15506: 33: }
15595: 15507: ```````
15596: 15508: 
15597: 15509: ## File: js/notify.js
15598: 15510: ```````javascript
15599: 15511:  1: /* notify.js */
15600: 15512:  2: // Generic notification framework for SledHEAD
15601: 15513:  3: // Base function to show notifications
15602: 15514:  4: function showNotification(message, colorRGBA = [255, 255, 0, 0.8], duration = 1000) {
15603: 15515:  5:   // Generate a unique ID based on the message
15604: 15516:  6:   const notificationId = 'notification-' + message.replace(/\s+/g, '-').toLowerCase();
15605: 15517:  7:   // Create or get the notification element
15606: 15518:  8:   let notification = document.getElementById(notificationId);
15607: 15519:  9:   if (!notification) {
15608: 15520: 10:     notification = document.createElement('div');
15609: 15521: 11:     notification.id = notificationId;
15610: 15522: 12:     notification.style.position = 'fixed';
15611: 15523: 13:     notification.style.top = '50%';
15612: 15524: 14:     notification.style.left = '50%';
15613: 15525: 15:     notification.style.transform = 'translate(-50%, -50%)';
15614: 15526: 16:     notification.style.backgroundColor = `rgba(${colorRGBA[0]}, ${colorRGBA[1]}, ${colorRGBA[2]}, ${colorRGBA[3]})`;
15615: 15527: 17:     notification.style.color = 'white';
15616: 15528: 18:     notification.style.padding = '20px';
15617: 15529: 19:     notification.style.borderRadius = '10px';
15618: 15530: 20:     notification.style.fontWeight = 'bold';
15619: 15531: 21:     notification.style.fontSize = '24px';
15620: 15532: 22:     notification.style.textAlign = 'center';
15621: 15533: 23:     notification.style.zIndex = '1000';
15622: 15534: 24:     notification.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.7)';
15623: 15535: 25:     document.body.appendChild(notification);
15624: 15536: 26:   }
15625: 15537: 27:   // Set content and make visible
15626: 15538: 28:   notification.textContent = message;
15627: 15539: 29:   notification.style.display = 'block';
15628: 15540: 30:   // Fade out after specified duration
15629: 15541: 31:   setTimeout(() => {
15630: 15542: 32:     notification.style.transition = 'opacity 0.5s';
15631: 15543: 33:     notification.style.opacity = '0';
15632: 15544: 34:     setTimeout(() => {
15633: 15545: 35:       notification.style.display = 'none';
15634: 15546: 36:       notification.style.opacity = '1';
15635: 15547: 37:       notification.style.transition = '';
15636: 15548: 38:     }, 500);
15637: 15549: 39:   }, duration);
15638: 15550: 40: }
15639: 15551: 41: // Specific notification types with predefined colors
15640: 15552: 42: function showErrorNotification(message, duration = 1000) {
15641: 15553: 43:   // Red background for errors
15642: 15554: 44:   showNotification(message, [255, 0, 0, 0.8], duration);
15643: 15555: 45:   // Play an error sound if available
15644: 15556: 46:   if (typeof playTone === 'function') {
15645: 15557: 47:     playTone(200, "square", 0.3, 0.4);
15646: 15558: 48:   }
15647: 15559: 49: }
15648: 15560: 50: function showSuccessNotification(message, duration = 1000) {
15649: 15561: 51:   // Green background for success
15650: 15562: 52:   showNotification(message, [0, 128, 0, 0.8], duration);
15651: 15563: 53:   // Play a positive sound if available
15652: 15564: 54:   if (typeof playTone === 'function') {
15653: 15565: 55:     playTone(600, "sine", 0.3, 0.4);
15654: 15566: 56:   }
15655: 15567: 57: }
15656: 15568: 58: function showWarningNotification(message, duration = 1000) {
15657: 15569: 59:   // Yellow background for warnings
15658: 15570: 60:   showNotification(message, [255, 255, 0, 0.8], duration);
15659: 15571: 61:   // Play a warning sound if available
15660: 15572: 62:   if (typeof playTone === 'function') {
15661: 15573: 63:     playTone(400, "triangle", 0.3, 0.4);
15662: 15574: 64:   }
15663: 15575: 65: }
15664: 15576: 66: function showInfoNotification(message, duration = 1000) {
15665: 15577: 67:   // Blue background for info
15666: 15578: 68:   showNotification(message, [0, 0, 255, 0.8], duration);
15667: 15579: 69: }
15668: 15580: 70: // Export functions for use in other modules
15669: 15581: 71: if (typeof module !== 'undefined' && module.exports) {
15670: 15582: 72:   module.exports = {
15671: 15583: 73:     showNotification,
15672: 15584: 74:     showErrorNotification,
15673: 15585: 75:     showSuccessNotification,
15674: 15586: 76:     showWarningNotification,
15675: 15587: 77:     showInfoNotification
15676: 15588: 78:   };
15677: 15589: 79: }
15678: 15590: ```````
15679: 15591: 
15680: 15592: ## File: js/registry.js
15681: 15593: ```````javascript
15682: 15594:  1: /*
15683: 15595:  2: // registry.js
15684: 15596:  3: export const functionRegistry = {};
15685: 15597:  4: export function register(name) {
15686: 15598:  5:   return function(target, key, descriptor) {
15687: 15599:  6:     const fnName = name || key;
15688: 15600:  7:     functionRegistry[fnName] = descriptor.value;
15689: 15601:  8:     return descriptor;
15690: 15602:  9:   };
15691: 15603: 10: }
15692: 15604: 11: */
15693: 15605: 12: // registry.js
15694: 15606: 13: export const functionRegistry = {};
15695: 15607: 14: export function register(name, fn) {
15696: 15608: 15:   functionRegistry[name] = fn;
15697: 15609: 16: }
15698: 15610: ```````
15699: 15611: 
15700: 15612: ## File: js/trees.js
15701: 15613: ```````javascript
15702: 15614:  1: /* trees.js - Tree Generation and Rendering */
15703: 15615:  2: /**
15704: 15616:  3:  * Generates clusters of trees across the terrain
15705: 15617:  4:  * @param {Object} options Configuration options
15706: 15618:  5:  * @param {number} options.count Number of tree clusters to generate
15707: 15619:  6:  * @param {Object} options.terrainBounds Bounds for placing trees {xMin, xMax, yMin, yMax}
15708: 15620:  7:  * @param {number} options.playerSize Reference size to scale trees relative to player
15709: 15621:  8:  * @returns {Array} Array of tree objects with positions and dimensions
15710: 15622:  9:  */
15711: 15623: 10: function generateTreeClumps(options) {
15712: 15624: 11:   const { count, terrainBounds, playerSize } = options;
15713: 15625: 12:   const clumps = [];
15714: 15626: 13:   for (let i = 0; i < count; i++) {
15715: 15627: 14:     const clump = [];
15716: 15628: 15:     const clumpSize = 2 + Math.floor(Math.random() * 3); // 2-4 trees per clump
15717: 15629: 16:     const clumpX = terrainBounds.xMin + Math.random() * (terrainBounds.xMax - terrainBounds.xMin);
15718: 15630: 17:     const clumpY = terrainBounds.yMin + Math.random() * (terrainBounds.yMax - terrainBounds.yMin);
15719: 15631: 18:     for (let j = 0; j < clumpSize; j++) {
15720: 15632: 19:       const sizeFactor = 0.5 + Math.random() * 1.5; // 50–200%
15721: 15633: 20:       const squareSize = playerSize * sizeFactor;
15722: 15634: 21:       const offsetX = (Math.random() - 0.5) * playerSize * 2;
15723: 15635: 22:       const offsetY = (Math.random() - 0.5) * playerSize * 2;
15724: 15636: 23:       clump.push({
15725: 15637: 24:         x: clumpX + offsetX,
15726: 15638: 25:         y: clumpY + offsetY,
15727: 15639: 26:         width: squareSize,
15728: 15640: 27:         height: squareSize,
15729: 15641: 28:         type: 'tree'
15730: 15642: 29:       });
15731: 15643: 30:     }
15732: 15644: 31:     clumps.push(...clump);
15733: 15645: 32:   }
15734: 15646: 33:   return clumps;
15735: 15647: 34: }
15736: 15648: 35: /**
15737: 15649: 36:  * Helper function to draw a more visually interesting tree
15738: 15650: 37:  * @param {CanvasRenderingContext2D} ctx Canvas context to draw on
15739: 15651: 38:  * @param {Object} tree Tree object with position and size information
15740: 15652: 39:  */
15741: 15653: 40: function drawTree(ctx, tree) {
15742: 15654: 41:   // Tree trunk (brown rectangle)
15743: 15655: 42:   const trunkWidth = tree.width * 0.3;
15744: 15656: 43:   const trunkHeight = tree.height * 0.6;
15745: 15657: 44:   const trunkX = tree.x + (tree.width - trunkWidth) / 2;
15746: 15658: 45:   const trunkY = tree.y + tree.height - trunkHeight;
15747: 15659: 46:   ctx.fillStyle = "#8B4513"; // saddle brown for trunk
15748: 15660: 47:   ctx.fillRect(trunkX, trunkY, trunkWidth, trunkHeight);
15749: 15661: 48:   // Tree canopy (green circle)
15750: 15662: 49:   const canopyRadius = tree.width * 0.6;
15751: 15663: 50:   const canopyCenterX = tree.x + tree.width / 2;
15752: 15664: 51:   const canopyCenterY = tree.y + tree.height * 0.4;
15753: 15665: 52:   ctx.fillStyle = "#228B22"; // forest green
15754: 15666: 53:   ctx.beginPath();
15755: 15667: 54:   ctx.arc(canopyCenterX, canopyCenterY, canopyRadius, 0, Math.PI * 2);
15756: 15668: 55:   ctx.fill();
15757: 15669: 56: }
15758: 15670: ```````
15759: 15671: 
15760: 15672: ## File: js/upgradeData.js
15761: 15673: ```````javascript
15762: 15674:   1: // js/upgradeData.js
15763: 15675:   2: export const upgradeCategories = [
15764: 15676:   3:     {
15765: 15677:   4:       name: "Personal Upgrades",
15766: 15678:   5:       type: "player",
15767: 15679:   6:       upgrades: [
15768: 15680:   7:         {
15769: 15681:   8:           key: "rocketSurgery",
15770: 15682:   9:           label: "Rocket Surgery",
15771: 15683:  10:           desc: "Boosts top speed & acceleration for faster downhill runs.",
15772: 15684:  11:           max: 10,
15773: 15685:  12:           icon: "🚀"
15774: 15686:  13:         },
15775: 15687:  14:         {
15776: 15688:  15:           key: "optimalOptics",
15777: 15689:  16:           label: "Optimal Optics",
15778: 15690:  17:           desc: "Frees focus & boosts fan engagement for easier weaving.",
15779: 15691:  18:           max: 10,
15780: 15692:  19:           icon: "📸"
15781: 15693:  20:         },
15782: 15694:  21:         {
15783: 15695:  22:           key: "sledDurability",
15784: 15696:  23:           label: "Sled Durability",
15785: 15697:  24:           desc: "Reinforce your sled to withstand bigger impacts.",
15786: 15698:  25:           max: 10,
15787: 15699:  26:           icon: "🛷"
15788: 15700:  27:         },
15789: 15701:  28:         {
15790: 15702:  29:           key: "fancierFootwear",
15791: 15703:  30:           label: "Fancier Footwear",
15792: 15704:  31:           desc: "Less time climbing, more time sledding.",
15793: 15705:  32:           max: 10,
15794: 15706:  33:           icon: "👢"
15795: 15707:  34:         },
15796: 15708:  35:         {
15797: 15709:  36:           key: "grapplingAnchor",
15798: 15710:  37:           label: "Grappling Anchor",
15799: 15711:  38:           desc: "Hook onto terrain to swing into tricky spots.",
15800: 15712:  39:           max: 0,
15801: 15713:  40:           icon: "🪝"
15802: 15714:  41:         },
15803: 15715:  42:         {
15804: 15716:  43:           key: "attendLegDay",
15805: 15717:  44:           label: "Attend Leg Day",
15806: 15718:  45:           desc: "Reduce stamina cost for climbing back up.",
15807: 15719:  46:           max: 0,
15808: 15720:  47:           icon: "🏋️"
15809: 15721:  48:         },
15810: 15722:  49:         {
15811: 15723:  50:           key: "shortcutAwareness",
15812: 15724:  51:           label: "Shortcut Awareness",
15813: 15725:  52:           desc: "Reveal hidden shortcuts & groomed trails.",
15814: 15726:  53:           max: 0,
15815: 15727:  54:           icon: "🗺️"
15816: 15728:  55:         },
15817: 15729:  56:         {
15818: 15730:  57:           key: "crowdHypeman",
15819: 15731:  58:           label: "Crowd Hypeman",
15820: 15732:  59:           desc: "Perform tricks near fans for boosts.",
15821: 15733:  60:           max: 0,
15822: 15734:  61:           icon: "📣"
15823: 15735:  62:         },
15824: 15736:  63:         {
15825: 15737:  64:           key: "crowdWeaver",
15826: 15738:  65:           label: "Crowd Weaver",
15827: 15739:  66:           desc: "Crowds move aside more often.",
15828: 15740:  67:           max: 0,
15829: 15741:  68:           icon: "🧍‍♂️"
15830: 15742:  69:         },
15831: 15743:  70:         {
15832: 15744:  71:           key: "weatherWarrior",
15833: 15745:  72:           label: "Weather Warrior",
15834: 15746:  73:           desc: "Storms & blizzards barely slow you down.",
15835: 15747:  74:           max: 0,
15836: 15748:  75:           icon: "🌨️"
15837: 15749:  76:         }
15838: 15750:  77:       ]
15839: 15751:  78:     },
15840: 15752:  79:     {
15841: 15753:  80:       name: "Mountain Upgrades",
15842: 15754:  81:       type: "mountain",
15843: 15755:  82:       upgrades: [
15844: 15756:  83:         {
15845: 15757:  84:           key: "skiLifts",
15846: 15758:  85:           label: "High-Speed Ski Lift Expansion",
15847: 15759:  86:           desc: "Ride lifts faster & attract more visitors.",
15848: 15760:  87:           max: 0,
15849: 15761:  88:           icon: "🎿"
15850: 15762:  89:         },
15851: 15763:  90:         {
15852: 15764:  91:           key: "snowmobileRentals",
15853: 15765:  92:           label: "Snowmobile Rentals",
15854: 15766:  93:           desc: "Rent them out or ride them yourself.",
15855: 15767:  94:           max: 0,
15856: 15768:  95:           icon: "🏍️"
15857: 15769:  96:         },
15858: 15770:  97:         {
15859: 15771:  98:           key: "eateries",
15860: 15772:  99:           label: "Eateries & Snack Bars",
15861: 15773: 100:           desc: "Restore stamina and make money.",
15862: 15774: 101:           max: 0,
15863: 15775: 102:           icon: "🍔"
15864: 15776: 103:         },
15865: 15777: 104:         {
15866: 15778: 105:           key: "groomedTrails",
15867: 15779: 106:           label: "Groomed Trails",
15868: 15780: 107:           desc: "Smoothed paths with boosty sections.",
15869: 15781: 108:           max: 0,
15870: 15782: 109:           icon: "🥾"
15871: 15783: 110:         },
15872: 15784: 111:         {
15873: 15785: 112:           key: "firstAidStations",
15874: 15786: 113:           label: "Safety & First-Aid Stations",
15875: 15787: 114:           desc: "Heal and reduce collision penalties.",
15876: 15788: 115:           max: 0,
15877: 15789: 116:           icon: "⛑️"
15878: 15790: 117:         },
15879: 15791: 118:         {
15880: 15792: 119:           key: "scenicOverlooks",
15881: 15793: 120:           label: "Scenic Overlook Platforms",
15882: 15794: 121:           desc: "Lure tourists or use as shortcuts.",
15883: 15795: 122:           max: 0,
15884: 15796: 123:           icon: "📷"
15885: 15797: 124:         },
15886: 15798: 125:         {
15887: 15799: 126:           key: "advertisingRamps",
15888: 15800: 127:           label: "Advertising Ramp-Billboards",
15889: 15801: 128:           desc: "Sponsor revenue and epic trick ramps.",
15890: 15802: 129:           max: 0,
15891: 15803: 130:           icon: "📢"
15892: 15804: 131:         },
15893: 15805: 132:         {
15894: 15806: 133:           key: "resortLodges",
15895: 15807: 134:           label: "Resort Amenities & Lodges",
15896: 15808: 135:           desc: "Start from fancy remote lodges.",
15897: 15809: 136:           max: 0,
15898: 15810: 137:           icon: "🏨"
15899: 15811: 138:         },
15900: 15812: 139:         {
15901: 15813: 140:           key: "nightLighting",
15902: 15814: 141:           label: "Night Lighting Upgrades",
15903: 15815: 142:           desc: "Unlock night sledding.",
15904: 15816: 143:           max: 0,
15905: 15817: 144:           icon: "🌙"
15906: 15818: 145:         },
15907: 15819: 146:         {
15908: 15820: 147:           key: "weatherControl",
15909: 15821: 148:           label: "Weather Control Systems",
15910: 15822: 149:           desc: "Control the challenge for higher rewards.",
15911: 15823: 150:           max: 0,
15912: 15824: 151:           icon: "🌦️"
15913: 15825: 152:         }
15914: 15826: 153:       ]
15915: 15827: 154:     }
15916: 15828: 155:   ];
15917: 15829: ```````
15918: 15830: 
15919: 15831: ## File: js/upgradeLogic.js
15920: 15832: ```````javascript
15921: 15833:   1: // js/upgradeLogic.js
15922: 15834:   2: // Using global utility functions instead of imports
15923: 15835:   3: // Track upgrade levels
15924: 15836:   4: let playerUpgrades = {
15925: 15837:   5:   rocketSurgery: 0,
15926: 15838:   6:   optimalOptics: 0,
15927: 15839:   7:   sledDurability: 0,
15928: 15840:   8:   fancierFootwear: 0,
15929: 15841:   9:   grapplingAnchor: 0,
15930: 15842:  10:   attendLegDay: 0,
15931: 15843:  11:   shortcutAwareness: 0,
15932: 15844:  12:   crowdHypeman: 0,
15933: 15845:  13:   crowdWeaver: 0,
15934: 15846:  14:   weatherWarrior: 0
15935: 15847:  15: };
15936: 15848:  16: let mountainUpgrades = {
15937: 15849:  17:   skiLifts: 0,
15938: 15850:  18:   snowmobileRentals: 0,
15939: 15851:  19:   eateries: 0,
15940: 15852:  20:   groomedTrails: 0,
15941: 15853:  21:   firstAidStations: 0,
15942: 15854:  22:   scenicOverlooks: 0,
15943: 15855:  23:   advertisingRamps: 0,
15944: 15856:  24:   resortLodges: 0,
15945: 15857:  25:   nightLighting: 0,
15946: 15858:  26:   weatherControl: 0
15947: 15859:  27: };
15948: 15860:  28: const upgradeMaxLevel = {
15949: 15861:  29:   rocketSurgery: 10,
15950: 15862:  30:   optimalOptics: 10,
15951: 15863:  31:   sledDurability: 10,
15952: 15864:  32:   fancierFootwear: 10,
15953: 15865:  33:   grapplingAnchor: 0,
15954: 15866:  34:   attendLegDay: 0,
15955: 15867:  35:   shortcutAwareness: 0,
15956: 15868:  36:   crowdHypeman: 0,
15957: 15869:  37:   crowdWeaver: 0,
15958: 15870:  38:   weatherWarrior: 0,
15959: 15871:  39:   skiLifts: 0,
15960: 15872:  40:   snowmobileRentals: 0,
15961: 15873:  41:   eateries: 0,
15962: 15874:  42:   groomedTrails: 0,
15963: 15875:  43:   firstAidStations: 0,
15964: 15876:  44:   scenicOverlooks: 0,
15965: 15877:  45:   advertisingRamps: 0,
15966: 15878:  46:   resortLodges: 0,
15967: 15879:  47:   nightLighting: 0,
15968: 15880:  48:   weatherControl: 0
15969: 15881:  49: };
15970: 15882:  50: function getUpgradeCost(upgradeKey, currentLevel) {
15971: 15883:  51:   return Math.floor(100 * Math.pow(1.1, currentLevel + 1));
15972: 15884:  52: }
15973: 15885:  53: function updateMoneyDisplay() {
15974: 15886:  54:   const moneyText = document.getElementById("moneyText");
15975: 15887:  55:   if (moneyText) {
15976: 15888:  56:     moneyText.textContent = "Money: $" + player.money;
15977: 15889:  57:   }
15978: 15890:  58: }
15979: 15891:  59: function getUpgradeDisplayText(upgradeKey, currentLevel, maxLevel) {
15980: 15892:  60:   let text = formatUpgradeName(upgradeKey) + ` (Lv ${currentLevel}/${maxLevel})`;
15981: 15893:  61:   if (maxLevel > 0 && currentLevel < maxLevel) {
15982: 15894:  62:     let cost = getUpgradeCost(upgradeKey, currentLevel);
15983: 15895:  63:     text += " – Cost: $" + cost;
15984: 15896:  64:   }
15985: 15897:  65:   return text;
15986: 15898:  66: }
15987: 15899:  67: function initUpgradeButton(upgradeKey, upgradeValue) {
15988: 15900:  68:   const maxLevel = upgradeMaxLevel[upgradeKey];
15989: 15901:  69:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
15990: 15902:  70:   const button = document.getElementById(btnId);
15991: 15903:  71:   button.innerText = getUpgradeDisplayText(upgradeKey, upgradeValue, maxLevel);
15992: 15904:  72:   if (maxLevel === 0 || upgradeValue >= maxLevel) {
15993: 15905:  73:     button.disabled = true;
15994: 15906:  74:   }
15995: 15907:  75: }
15996: 15908:  76: function purchaseUpgrade(upgradeType, upgradeKey) {
15997: 15909:  77:   const currentLevel = upgradeType[upgradeKey];
15998: 15910:  78:   const maxLevel = upgradeMaxLevel[upgradeKey];
15999: 15911:  79:   if (maxLevel === 0 || currentLevel >= maxLevel) {
16000: 15912:  80:     console.log("Upgrade", upgradeKey, "is locked or already maxed.");
16001: 15913:  81:     return;
16002: 15914:  82:   }
16003: 15915:  83:   const cost = getUpgradeCost(upgradeKey, currentLevel);
16004: 15916:  84:   if (player.money < cost) {
16005: 15917:  85:     console.log("Not enough money to purchase", upgradeKey, ". Cost:", cost, "Money:", player.money);
16006: 15918:  86:     return;
16007: 15919:  87:   }
16008: 15920:  88:   player.money -= cost;
16009: 15921:  89:   upgradeType[upgradeKey]++;
16010: 15922:  90:   const newLevel = upgradeType[upgradeKey];
16011: 15923:  91:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
16012: 15924:  92:   document.getElementById(btnId).innerText = getUpgradeDisplayText(upgradeKey, newLevel, maxLevel);
16013: 15925:  93:   if (newLevel >= maxLevel) {
16014: 15926:  94:     document.getElementById(btnId).disabled = true;
16015: 15927:  95:   }
16016: 15928:  96:   updateMoneyDisplay();
16017: 15929:  97:   console.log("Purchased upgrade", upgradeKey, "New level:", newLevel, "Remaining money:", player.money);
16018: 15930:  98: }
16019: 15931:  99: // Export all necessary variables and functions
16020: 15932: 100: export {
16021: 15933: 101:   playerUpgrades,
16022: 15934: 102:   mountainUpgrades,
16023: 15935: 103:   upgradeMaxLevel,
16024: 15936: 104:   getUpgradeCost,
16025: 15937: 105:   getUpgradeDisplayText,
16026: 15938: 106:   initUpgradeButton,
16027: 15939: 107:   updateMoneyDisplay,
16028: 15940: 108:   purchaseUpgrade
16029: 15941: 109: };
16030: 15942: ```````
16031: 15943: 
16032: 15944: ## File: js/upgrades.js
16033: 15945: ```````javascript
16034: 15946:  1: // js/upgrades.js
16035: 15947:  2: import { upgradeCategories } from './upgradeData.js';
16036: 15948:  3: import { 
16037: 15949:  4:   playerUpgrades, 
16038: 15950:  5:   mountainUpgrades, 
16039: 15951:  6:   upgradeMaxLevel, 
16040: 15952:  7:   purchaseUpgrade, 
16041: 15953:  8:   getUpgradeCost,
16042: 15954:  9:   getUpgradeDisplayText 
16043: 15955: 10: } from './upgradeLogic.js';
16044: 15956: 11: // Using global capitalizeFirstLetter instead of importing it
16045: 15957: 12: function createUpgradeElement(upgrade, isPlayerUpgrade = true) {
16046: 15958: 13:   const upgradeType = isPlayerUpgrade ? playerUpgrades : mountainUpgrades;
16047: 15959: 14:   const currentLevel = upgradeType[upgrade.key];
16048: 15960: 15:   const maxLevel = upgradeMaxLevel[upgrade.key];
16049: 15961: 16:   const cost = getUpgradeCost(upgrade.key, currentLevel);
16050: 15962: 17:   const entry = document.createElement('div');
16051: 15963: 18:   entry.className = 'upgrade-entry';
16052: 15964: 19:   const button = document.createElement('button');
16053: 15965: 20:   const btnId = `upgrade${capitalizeFirstLetter(upgrade.key)}`;
16054: 15966: 21:   button.id = btnId;
16055: 15967: 22:   button.innerText = getUpgradeDisplayText(upgrade.key, currentLevel, maxLevel);
16056: 15968: 23:   // Disable if maxed or locked
16057: 15969: 24:   if (maxLevel === 0 || currentLevel >= maxLevel) {
16058: 15970: 25:     button.disabled = true;
16059: 15971: 26:   }
16060: 15972: 27:   button.addEventListener('click', () => {
16061: 15973: 28:     purchaseUpgrade(upgradeType, upgrade.key);
16062: 15974: 29:   });
16063: 15975: 30:   const desc = document.createElement('p');
16064: 15976: 31:   desc.className = 'upgrade-desc';
16065: 15977: 32:   desc.textContent = upgrade.desc;
16066: 15978: 33:   entry.appendChild(button);
16067: 15979: 34:   entry.appendChild(desc);
16068: 15980: 35:   return entry;
16069: 15981: 36: }
16070: 15982: 37: function renderUpgradeMenu() {
16071: 15983: 38:   const container = document.getElementById('dynamic-upgrade-columns');
16072: 15984: 39:   if (!container) return;
16073: 15985: 40:   upgradeCategories.forEach(category => {
16074: 15986: 41:     const column = document.createElement('div');
16075: 15987: 42:     column.className = 'upgrade-column';
16076: 15988: 43:     const header = document.createElement('h2');
16077: 15989: 44:     header.textContent = category.name;
16078: 15990: 45:     column.appendChild(header);
16079: 15991: 46:     const isPlayerUpgrade = category.type === "player";
16080: 15992: 47:     category.upgrades.forEach(upgrade => {
16081: 15993: 48:       const element = createUpgradeElement(upgrade, isPlayerUpgrade);
16082: 15994: 49:       column.appendChild(element);
16083: 15995: 50:     });
16084: 15996: 51:     container.appendChild(column);
16085: 15997: 52:   });
16086: 15998: 53: }
16087: 15999: 54: renderUpgradeMenu();
16088: 16000: ```````
16089: 16001: 
16090: 16002: ## File: js/uphill.js
16091: 16003: ```````javascript
16092: 16004:  1: /* uphill.js - Uphill Movement & Camera Control */
16093: 16005:  2: // Handle all uphill movement, camera controls, and related mechanics
16094: 16006:  3: function updateUphill(deltaTime) {
16095: 16007:  4:   let upSpeed = TWEAK.baseUpSpeed + (playerUpgrades.fancierFootwear * TWEAK.fancierFootwearUpSpeedPerLevel);
16096: 16008:  5:   // Vertical movement
16097: 16009:  6:   if (keysDown["w"]) { player.absY -= upSpeed; }
16098: 16010:  7:   if (keysDown["s"]) { player.absY += upSpeed; }
16099: 16011:  8:   // Horizontal movement with bounds checking
16100: 16012:  9:   let newXUphill = player.x;
16101: 16013: 10:   if (keysDown["a"]) { newXUphill -= upSpeed; }
16102: 16014: 11:   if (keysDown["d"]) { newXUphill += upSpeed; }
16103: 16015: 12:   player.x = clamp(newXUphill, player.width/2, canvas.width - player.width/2);
16104: 16016: 13:   // Prevent going beyond mountain bounds vertically
16105: 16017: 14:   player.absY = clamp(player.absY, 0, mountainHeight);
16106: 16018: 15:   // Camera and altitude control
16107: 16019: 16:   if (keysDown["ArrowLeft"]) { player.cameraAngle -= 2; }
16108: 16020: 17:   if (keysDown["ArrowRight"]) { player.cameraAngle += 2; }
16109: 16021: 18:   if (keysDown["ArrowUp"]) { player.altitudeLine = Math.max(0, player.altitudeLine - 2); }
16110: 16022: 19:   if (keysDown["ArrowDown"]) { player.altitudeLine = Math.min(100, player.altitudeLine + 2); }
16111: 16023: 20:   // Normalize camera angle
16112: 16024: 21:   if (player.cameraAngle < 0) player.cameraAngle += 360;
16113: 16025: 22:   if (player.cameraAngle >= 360) player.cameraAngle -= 360;
16114: 16026: 23:   // Reset horizontal velocity in uphill mode
16115: 16027: 24:   player.xVel = 0;
16116: 16028: 25:   // Check for collisions with terrain
16117: 16029: 26:   terrain.forEach(obstacle => {
16118: 16030: 27:     if (checkCollision(
16119: 16031: 28:         player.x - player.width / 2, player.absY - player.height / 2,
16120: 16032: 29:         player.width, player.height,
16121: 16033: 30:         obstacle.x, obstacle.y,
16122: 16034: 31:         obstacle.width, obstacle.height
16123: 16035: 32:     )) {
16124: 16036: 33:       console.log("Collision on uphill.");
16125: 16037: 34:       resolveCollision(player, obstacle);
16126: 16038: 35:     }
16127: 16039: 36:   });
16128: 16040: 37:   // Call animal update from wildlife.js
16129: 16041: 38:   updateAnimal();
16130: 16042: 39:   // Return to house if player reaches bottom of mountain
16131: 16043: 40:   if (player.absY >= mountainHeight) {
16132: 16044: 41:     player.absY = mountainHeight;
16133: 16045: 42:     console.log("Reached bottom. Returning to house.");
16134: 16046: 43:     changeState(GameState.HOUSE);
16135: 16047: 44:   }
16136: 16048: 45: }
16137: 16049: ```````
16138: 16050: 
16139: 16051: ## File: styles.css
16140: 16052: ```````css
16141: 16053:   1: /* gameplay.css */
16142: 16054:   2: /* Styles for the gameplay phase (canvas-based) */
16143: 16055:   3: #game-screen {
16144: 16056:   4:   position: absolute;
16145: 16057:   5:   top: 50px;
16146: 16058:   6:   left: 0;
16147: 16059:   7:   width: 100%;
16148: 16060:   8:   height: calc(100% - 50px);
16149: 16061:   9:   /* No fixed width/height here—the Phaser Scale Manager will resize the canvas */
16150: 16062:  10: }
16151: 16063:  11: #gameCanvas {
16152: 16064:  12:   width: 100%;
16153: 16065:  13:   height: 100%;
16154: 16066:  14:   display: block;
16155: 16067:  15:   background-color: #87CEEB;
16156: 16068:  16:   border: none;
16157: 16069:  17: }
16158: 16070:  18: /* house.css */
16159: 16071:  19: /* Styles for the house phase & upgrade menu */
16160: 16072:  20: #upgrade-menu {
16161: 16073:  21:   position: absolute;
16162: 16074:  22:   top: 50px;
16163: 16075:  23:   left: 0;
16164: 16076:  24:   width: 100%;
16165: 16077:  25:   height: calc(100% - 50px);
16166: 16078:  26:   background-color: rgba(0, 0, 0, 0.9);
16167: 16079:  27:   padding: 20px;
16168: 16080:  28:   box-sizing: border-box;
16169: 16081:  29:   display: block;
16170: 16082:  30:   overflow-y: auto;
16171: 16083:  31: }
16172: 16084:  32: .upgrade-menu-columns {
16173: 16085:  33:   display: flex;
16174: 16086:  34:   justify-content: space-around;
16175: 16087:  35:   align-items: flex-start;
16176: 16088:  36:   flex-wrap: wrap;
16177: 16089:  37: }
16178: 16090:  38: .upgrade-column {
16179: 16091:  39:   width: 45%;
16180: 16092:  40:   margin: 10px 0;
16181: 16093:  41: }
16182: 16094:  42: .upgrade-column h2 {
16183: 16095:  43:   text-align: center;
16184: 16096:  44:   margin-bottom: 10px;
16185: 16097:  45: }
16186: 16098:  46: .upgrade-entry {
16187: 16099:  47:   margin-bottom: 15px;
16188: 16100:  48: }
16189: 16101:  49: .upgrade-entry button {
16190: 16102:  50:   width: 100%;
16191: 16103:  51:   margin: 5px 0 2px 0;
16192: 16104:  52:   padding: 10px;
16193: 16105:  53:   font-size: 16px;
16194: 16106:  54:   background-color: #007bff;
16195: 16107:  55:   color: white;
16196: 16108:  56:   border: none;
16197: 16109:  57:   border-radius: 5px;
16198: 16110:  58:   cursor: pointer;
16199: 16111:  59:   transition: background-color 0.2s ease;
16200: 16112:  60: }
16201: 16113:  61: .upgrade-entry button:hover {
16202: 16114:  62:   background-color: #0056b3;
16203: 16115:  63: }
16204: 16116:  64: .upgrade-entry button:disabled {
16205: 16117:  65:   background-color: #555;
16206: 16118:  66:   cursor: not-allowed;
16207: 16119:  67: }
16208: 16120:  68: .upgrade-desc {
16209: 16121:  69:   font-size: 14px;
16210: 16122:  70:   line-height: 1.2;
16211: 16123:  71:   margin: 0;
16212: 16124:  72:   color: #ccc;
16213: 16125:  73: }
16214: 16126:  74: #bestTimeText {
16215: 16127:  75:   margin-top: 20px;
16216: 16128:  76:   text-align: center;
16217: 16129:  77:   color: #fff;
16218: 16130:  78: }
16219: 16131:  79: #startGame {
16220: 16132:  80:   display: block;
16221: 16133:  81:   margin: 10px auto;
16222: 16134:  82:   font-size: 16px;
16223: 16135:  83:   padding: 8px 16px;
16224: 16136:  84:   cursor: pointer;
16225: 16137:  85:   background-color: #28a745;
16226: 16138:  86:   border: none;
16227: 16139:  87:   border-radius: 5px;
16228: 16140:  88:   transition: background-color 0.2s ease;
16229: 16141:  89: }
16230: 16142:  90: #startGame:hover {
16231: 16143:  91:   background-color: #218838;
16232: 16144:  92: }
16233: 16145:  93: /* Global UI elements (title, money display) */
16234: 16146:  94: h1 {
16235: 16147:  95:   text-align: center;
16236: 16148:  96:   margin-top: 10px;
16237: 16149:  97:   color: #000;
16238: 16150:  98:   font-size: 36px;
16239: 16151:  99:   font-weight: bold;
16240: 16152: 100: }
16241: 16153: 101: /* Improved money display */
16242: 16154: 102: #moneyDisplay {
16243: 16155: 103:   position: fixed;
16244: 16156: 104:   top: 10px;
16245: 16157: 105:   right: 10px;
16246: 16158: 106:   font-size: 20px;
16247: 16159: 107:   background-color: rgba(0, 0, 0, 0.9);
16248: 16160: 108:   padding: 12px 16px;
16249: 16161: 109:   border-radius: 10px;
16250: 16162: 110:   color: #FFD700;
16251: 16163: 111:   font-weight: bold;
16252: 16164: 112:   z-index: 1000;
16253: 16165: 113: }
16254: 16166: 114: /* Live money updates should stand out */
16255: 16167: 115: #moneyText {
16256: 16168: 116:   font-size: 22px;
16257: 16169: 117:   font-weight: bold;
16258: 16170: 118:   color: #FFD700;
16259: 16171: 119:   transition: transform 0.1s ease-in-out, color 0.2s ease-in-out;
16260: 16172: 120: }
16261: 16173: 121: /* Bounce effect when money updates */
16262: 16174: 122: .money-increase {
16263: 16175: 123:   transform: scale(1.2);
16264: 16176: 124:   color: #FFFFFF;
16265: 16177: 125: }
16266: 16178: ```````
16267: 16179: 
16268: 16180: ## File: docs/1.0_README.md
16269: 16181: ```````markdown
16270: 16182:   1: # **SledHEAD**
16271: 16183:   2: **Genre:** Roguelike | Trick & Time Trial Racer | Adventure  
16272: 16184:   3: **Platform:** Web-based (PC, potentially mobile)  
16273: 16185:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
16274: 16186:   5: 
16275: 16187:   6: ---
16276: 16188:   7: 
16277: 16189:   8: ## Table of Contents
16278: 16190:   9: 1. [Core Concept](#core-concept)
16279: 16191:  10: 2. [Procedural World & Persistence](#procedural-world--persistence)
16280: 16192:  11: 3. [Gameplay Loops](#gameplay-loops)
16281: 16193:  12:    - [Sledding Phase (Downhill)](#1-sledding-phase-downhill)
16282: 16194:  13:    - [Climbing Phase (Uphill)](#2-climbing-phase-uphill)
16283: 16195:  14:    - [Management Phase (House & Upgrades)](#3-management-phase-house--upgrades)
16284: 16196:  15: 4. [Trick System (For Extra Cash & Fan Engagement)](#trick-system-for-extra-cash--fan-engagement)
16285: 16197:  16: 5. [Upgrade System](#upgrade-system)
16286: 16198:  17:    - [Personal Upgrades](#personal-upgrades-character-enhancements)
16287: 16199:  18:    - [Mountain Upgrades](#mountain-upgrades-resort-expansion)
16288: 16200:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)
16289: 16201:  20: 7. [Mountain Themes & Progression](#mountain-themes--progression)
16290: 16202:  21: 8. [Mini-Games in SledHEAD](#mini-games-in-sledhead)
16291: 16203:  22: 9. [NPCs & Mountain Town Ecosystem](#npcs--mountain-town-ecosystem)
16292: 16204:  23: 
16293: 16205:  24: 
16294: 16206:  25: ---
16295: 16207:  26: 
16296: 16208:  27: ## 🎯 **Core Concept**
16297: 16209:  28: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
16298: 16210:  29: 
16299: 16211:  30: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
16300: 16212:  31: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
16301: 16213:  32: 
16302: 16214:  33: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
16303: 16215:  34: 
16304: 16216:  35: ---
16305: 16217:  36: 
16306: 16218:  37: ## 🎮 **Controls & Gameplay Mechanics**
16307: 16219:  38: 
16308: 16220:  39: ### **⬇️ Downhill Phase: Fast-Paced Sledding**
16309: 16221:  40: In the **downhill phase**, you’re controlling your sled as it races down procedurally generated slopes, dodging obstacles, pulling off tricks, and aiming for the fastest times.
16310: 16222:  41: 
16311: 16223:  42: #### **Basic Movement:**
16312: 16224:  43: - **Left / Right Arrow Keys (← →)** – Steer your sled left or right.  
16313: 16225:  44: - **Down Arrow (↓)** – Crouch for extra speed on straightaways.  
16314: 16226:  45: - **Up Arrow (↑)** – Prepare for a jump off a ramp.  
16315: 16227:  46: 
16316: 16228:  47: #### **Trick System:**
16317: 16229:  48: - Tricks are executed using combinations of **Up, Down, Left, and Right Arrows**.
16318: 16230:  49: - Landing tricks successfully grants extra money and fan engagement.
16319: 16231:  50: - Be mindful of your timing - land while doing a trick, and you could crash!
16320: 16232:  51: 
16321: 16233:  52: #### **Hazards & Interactions:**
16322: 16234:  53: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
16323: 16235:  54: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
16324: 16236:  55: - **Ice Patches:** Reduce control and make turns trickier.
16325: 16237:  56: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
16326: 16238:  57: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
16327: 16239:  58: 
16328: 16240:  59: ---
16329: 16241:  60: 
16330: 16242:  61: ### **⬆️ Uphill Phase: Climbing & Exploration**
16331: 16243:  62: Once you reach the bottom, it’s time to **make your way back up**. The mountain doesn’t regenerate, so you’ll be retracing paths and discovering new shortcuts.
16332: 16244:  63: 
16333: 16245:  64: #### **Basic Movement & Stamina:**
16334: 16246:  65: - **Left / Right Arrow Keys (← →)** – Move horizontally across the mountain.
16335: 16247:  66: - **Up Arrow (↑)** – Hike uphill, consuming stamina.
16336: 16248:  67: - **Down Arrow (↓)** – Rest momentarily to recover stamina.
16337: 16249:  68: 
16338: 16250:  69: #### **Navigation & Assistance:**
16339: 16251:  70: - If you've **unlocked ski lifts or snowmobiles**, you can use them for a quicker return.
16340: 16252:  71: - **Shortcut Awareness** upgrades help you find hidden paths to make the climb easier.
16341: 16253:  72: - **Food Stalls & Rest Areas** restore stamina—plan your route accordingly!
16342: 16254:  73: 
16343: 16255:  74: #### **Wildlife Photography Mini-Game 📸**
16344: 16256:  75: - While hiking, **animals appear every few seconds**.
16345: 16257:  76: - Aim the camera using **Arrow Keys**, and take a shot with **Spacebar**.
16346: 16258:  77: - Align your camera with the **altitude line** for a perfect photo.
16347: 16259:  78: - **Moving animals give higher rewards** but are harder to capture.
16348: 16260:  79: 
16349: 16261:  80: ---
16350: 16262:  81: 
16351: 16263:  82: **Next Steps:**  
16352: 16264:  83: - **If you want to make money:** Optimize your tricks and time trials.  
16353: 16265:  84: - **If you want to upgrade:** Invest in stamina, sled durability, and trick enhancements.  
16354: 16266:  85: - **If you want to explore:** Look for wildlife, hidden shortcuts, and fan hotspots!  
16355: 16267:  86: 
16356: 16268:  87: ---
16357: 16269:  88: 
16358: 16270:  89: ## 🌎 **Procedural World & Persistence**
16359: 16271:  90: - The mountain remains consistent during a playthrough.  
16360: 16272:  91: - **New terrain is only generated when starting a new game.**  
16361: 16273:  92: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
16362: 16274:  93: - **Changes per run:**
16363: 16275:  94:   - Tourists & fans shift positions.  
16364: 16276:  95:   - Weather may change dynamically.  
16365: 16277:  96:   - Wildlife encounters vary.
16366: 16278:  97: 
16367: 16279:  98: ---
16368: 16280:  99: 
16369: 16281: 100: ## 🎮 **Gameplay Loops**
16370: 16282: 101: 
16371: 16283: 102: ### 1️⃣ **Sledding Phase (Downhill) ⬇️**
16372: 16284: 103: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
16373: 16285: 104: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
16374: 16286: 105: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
16375: 16287: 106: - **Obstacles:**
16376: 16288: 107:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
16377: 16289: 108:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
16378: 16290: 109:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
16379: 16291: 110: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
16380: 16292: 111: - **Time Trials:**  
16381: 16293: 112:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
16382: 16294: 113:   - **Your time between activators determines your bonus.**  
16383: 16295: 114:   - **Faster times = more money!**  
16384: 16296: 115:   - Not all runs are timed; only those where you activate a trial.  
16385: 16297: 116: 
16386: 16298: 117: ---
16387: 16299: 118: 
16388: 16300: 119: ### 2️⃣ **Climbing Phase (Uphill) ⬆️**
16389: 16301: 120: 🚶 **Top-down adventure traversal with stamina management and exploration.**  
16390: 16302: 121: - **Goal:** Return to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
16391: 16303: 122: - **Terrain:** The same generated world as the downhill run (no regenerating between runs).  
16392: 16304: 123: - **Stamina System:**  
16393: 16305: 124:   - Stamina drains when hiking.  
16394: 16306: 125:   - Replenished by **food stands, resting points, or upgrades**.  
16395: 16307: 126: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
16396: 16308: 127:   - **Random animals appear every 5–10 seconds (TWEAK variable).**  
16397: 16309: 128:   - Animals either **stay still (1–20 seconds) or move (making them harder to photograph).**  
16398: 16310: 129:   - **Use the Arrow Keys to aim the camera cone** around your character.  
16399: 16311: 130:   - **Align the altitude line** with the animal’s altitude for a perfect shot.  
16400: 16312: 131:   - **Photos earn money, with multipliers for:**  
16401: 16313: 132:     - Accuracy (center of POV cone).  
16402: 16314: 133:     - Altitude match precision.  
16403: 16315: 134:     - Moving vs. stationary targets (moving = 3x value).  
16404: 16316: 135: 
16405: 16317: 136: ---
16406: 16318: 137: 
16407: 16319: 138: ### 3️⃣ **Management Phase (House & Upgrades) 🏠**
16408: 16320: 139: 🏡 **Upgrade your gear, mountain, and social media presence.**  
16409: 16321: 140: - **Spend earned money on:**
16410: 16322: 141:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
16411: 16323: 142:   - **Sled Upgrades:** Speed, handling, trick potential.  
16412: 16324: 143:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
16413: 16325: 144: - **New Game Start:**  
16414: 16326: 145:   - Mountain **ONLY regenerates when starting a completely new game.**  
16415: 16327: 146:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
16416: 16328: 147:   - **Current seed is displayed at home.**  
16417: 16329: 148: 
16418: 16330: 149: ---
16419: 16331: 150: 
16420: 16332: 151: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
16421: 16333: 152: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
16422: 16334: 153: 
16423: 16335: 154: 1. **☁️🪂 Parachute (Up, Down)**  
16424: 16336: 155:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
16425: 16337: 156:    **Pixel Art Representation:**  
16426: 16338: 157:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
16427: 16339: 158: 
16428: 16340: 159: 2. **🛑🎿 Air Brake (Up, Up)**  
16429: 16341: 160:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
16430: 16342: 161:    **Pixel Art Representation:**  
16431: 16343: 162:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
16432: 16344: 163: 
16433: 16345: 164: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
16434: 16346: 165:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
16435: 16347: 166:    **Pixel Art Representation:**  
16436: 16348: 167:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
16437: 16349: 168: 
16438: 16350: 169: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
16439: 16351: 170:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
16440: 16352: 171:    **Pixel Art Representation:**  
16441: 16353: 172:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
16442: 16354: 173: 
16443: 16355: 174: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
16444: 16356: 175:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
16445: 16357: 176:    **Pixel Art Representation:**  
16446: 16358: 177:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
16447: 16359: 178: 
16448: 16360: 179: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
16449: 16361: 180:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
16450: 16362: 181:    **Pixel Art Representation:**  
16451: 16363: 182:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
16452: 16364: 183: 
16453: 16365: 184: 7. **🦸‍♂️✨ Superman (Down, Down)**  
16454: 16366: 185:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
16455: 16367: 186:    **Pixel Art Representation:**  
16456: 16368: 187:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
16457: 16369: 188: 
16458: 16370: 189: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
16459: 16371: 190:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
16460: 16372: 191:    **Pixel Art Representation:**  
16461: 16373: 192:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
16462: 16374: 193: 
16463: 16375: 194: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
16464: 16376: 195:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
16465: 16377: 196:    **Pixel Art Representation:**  
16466: 16378: 197:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
16467: 16379: 198: 
16468: 16380: 199: 10. **👻🔥 Ghost Rider (Left, Right)**  
16469: 16381: 200:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
16470: 16382: 201:     **Pixel Art Representation:**  
16471: 16383: 202:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
16472: 16384: 203: 
16473: 16385: 204: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
16474: 16386: 205:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
16475: 16387: 206:     **Pixel Art Representation:**  
16476: 16388: 207:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
16477: 16389: 208: 
16478: 16390: 209: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
16479: 16391: 210:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
16480: 16392: 211:     **Pixel Art Representation:**  
16481: 16393: 212:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
16482: 16394: 213: 
16483: 16395: 214: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
16484: 16396: 215:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
16485: 16397: 216:     **Pixel Art Representation:**  
16486: 16398: 217:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
16487: 16399: 218: 
16488: 16400: 219: 14. **✨⬆️ Falling Star (Down, Up)**  
16489: 16401: 220:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
16490: 16402: 221:     **Pixel Art Representation:**  
16491: 16403: 222:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
16492: 16404: 223: 
16493: 16405: 224: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
16494: 16406: 225:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
16495: 16407: 226:     **Pixel Art Representation:**  
16496: 16408: 227:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
16497: 16409: 228: 
16498: 16410: 229: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
16499: 16411: 230:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
16500: 16412: 231:     **Pixel Art Representation:**  
16501: 16413: 232:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
16502: 16414: 233: 
16503: 16415: 234: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
16504: 16416: 235: 
16505: 16417: 236: ---
16506: 16418: 237: 
16507: 16419: 238: ## 🔧 **Upgrade System**
16508: 16420: 239: 
16509: 16421: 240: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
16510: 16422: 241: | Upgrade                    | Effect                                             |
16511: 16423: 242: |----------------------------|----------------------------------------------------|
16512: 16424: 243: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
16513: 16425: 244: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
16514: 16426: 245: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
16515: 16427: 246: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
16516: 16428: 247: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
16517: 16429: 248: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
16518: 16430: 249: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
16519: 16431: 250: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
16520: 16432: 251: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
16521: 16433: 252: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
16522: 16434: 253: 
16523: 16435: 254: ---
16524: 16436: 255: 
16525: 16437: 256: ### 🏔️ Mountain Upgrades (Resort Expansion)
16526: 16438: 257: | Upgrade                        | Effect                                                         |
16527: 16439: 258: |--------------------------------|----------------------------------------------------------------|
16528: 16440: 259: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
16529: 16441: 260: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
16530: 16442: 261: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
16531: 16443: 262: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
16532: 16444: 263: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
16533: 16445: 264: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
16534: 16446: 265: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
16535: 16447: 266: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
16536: 16448: 267: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
16537: 16449: 268: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
16538: 16450: 269: 
16539: 16451: 270: ---
16540: 16452: 271: 
16541: 16453: 272: ## ⚖️ **Game Balance & Tweakable Variables**
16542: 16454: 273: All these are stored in the **TWEAK object** for easy adjustments:
16543: 16455: 274: - Wildlife spawn times (min/max).
16544: 16456: 275: - Wildlife **sit duration** (min/max).
16545: 16457: 276: - Moving animal multiplier.
16546: 16458: 277: - Camera **POV cone size**.
16547: 16459: 278: - **Time trial activator frequency** & bonuses.
16548: 16460: 279: - **Stamina drain rates**.
16549: 16461: 280: - **Mountain regeneration rules**.
16550: 16462: 281: - **Trick scoring multipliers**.
16551: 16463: 282: - **Photograph accuracy bonuses**. 
16552: 16464: 283: 
16553: 16465: 284: **Progression Goals:**  
16554: 16466: 285: - **Prototype:** Repay the cost of the mountain.  
16555: 16467: 286: - **Full Game:**  
16556: 16468: 287:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
16557: 16469: 288:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
16558: 16470: 289:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
16559: 16471: 290:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
16560: 16472: 291: 
16561: 16473: 292: ---
16562: 16474: 293: 
16563: 16475: 294: ## 🏔️ **Mountain Themes & Progression**
16564: 16476: 295: 
16565: 16477: 296: ### Lava Mountain 🌋
16566: 16478: 297: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
16567: 16479: 298: - **Mechanics:**  
16568: 16480: 299:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
16569: 16481: 300:   - **Ash Clouds:** Temporarily block visibility.
16570: 16482: 301: - **Power-Up:** **Heat Shielding Sled Coating**  
16571: 16483: 302:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
16572: 16484: 303: 
16573: 16485: 304: ---
16574: 16486: 305: 
16575: 16487: 306: ### Space Mountain 🌌
16576: 16488: 307: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
16577: 16489: 308: - **Mechanics:**  
16578: 16490: 309:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
16579: 16491: 310:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
16580: 16492: 311: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
16581: 16493: 312:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
16582: 16494: 313: 
16583: 16495: 314: ---
16584: 16496: 315: 
16585: 16497: 316: ### Underwater Mountain 🌊
16586: 16498: 317: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
16587: 16499: 318: - **Mechanics:**  
16588: 16500: 319:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
16589: 16501: 320: - **Power-Up:** **Aqua-Lung Mittens**  
16590: 16502: 321:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
16591: 16503: 322: 
16592: 16504: 323: ---
16593: 16505: 324: 
16594: 16506: 325: ### Garbage Dump Glacier 🗑️❄️
16595: 16507: 326: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
16596: 16508: 327: - **Mechanics:**  
16597: 16509: 328:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
16598: 16510: 329: - **Power-Up:** **Slick Wax Spray**  
16599: 16511: 330:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
16600: 16512: 331: 
16601: 16513: 332: ---
16602: 16514: 333: 
16603: 16515: 334: ### Micro Mountain 🐜🌱
16604: 16516: 335: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
16605: 16517: 336: - **Mechanics:**  
16606: 16518: 337:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
16607: 16519: 338: - **Power-Up:** **Antigrav Wax**  
16608: 16520: 339:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
16609: 16521: 340: 
16610: 16522: 341: ---
16611: 16523: 342: 
16612: 16524: 343: ### Candy Cane Canyon 🍭
16613: 16525: 344: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
16614: 16526: 345: - **Mechanics:**  
16615: 16527: 346:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
16616: 16528: 347: - **Power-Up:** **Sweet-Tooth Coating**  
16617: 16529: 348:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
16618: 16530: 349: 
16619: 16531: 350: ---
16620: 16532: 351: 
16621: 16533: 352: ### Crystal Cave Cavern 🔮
16622: 16534: 353: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
16623: 16535: 354: - **Mechanics:**  
16624: 16536: 355:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
16625: 16537: 356: - **Power-Up:** **Crystal Clear Goggles**  
16626: 16538: 357:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
16627: 16539: 358: 
16628: 16540: 359: ---
16629: 16541: 360: 
16630: 16542: 361: ### Haunted Graveyard Hill 👻
16631: 16543: 362: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
16632: 16544: 363: - **Mechanics:**  
16633: 16545: 364:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
16634: 16546: 365: - **Power-Up:** **Spirit Lantern**  
16635: 16547: 366:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
16636: 16548: 367: 
16637: 16549: 368: ---
16638: 16550: 369: 
16639: 16551: 370: ### Sky Jellyfish Mountain ☁️🪼
16640: 16552: 371: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
16641: 16553: 372: - **Mechanics:**  
16642: 16554: 373:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
16643: 16555: 374: - **Power-Up:** **Stabilizer Sled Rails**  
16644: 16556: 375:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
16645: 16557: 376: 
16646: 16558: 377: ---
16647: 16559: 378: 
16648: 16560: 379: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
16649: 16561: 380: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
16650: 16562: 381: - **Mechanics:**  
16651: 16563: 382:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
16652: 16564: 383: - **Power-Up:** **Clockwork Treads**  
16653: 16565: 384:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
16654: 16566: 385: 
16655: 16567: 386: ---
16656: 16568: 387: 
16657: 16569: 388: ### Pyramid Peak 🐫🏜️
16658: 16570: 389: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
16659: 16571: 390: - **Mechanics:**  
16660: 16572: 391:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
16661: 16573: 392: - **Power-Up:** **Sandrunner Skis**  
16662: 16574: 393:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
16663: 16575: 394: 
16664: 16576: 395: ---
16665: 16577: 396: 
16666: 16578: 397: ### Digital Mountain (Cyber Slopes) 💻🔮
16667: 16579: 398: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
16668: 16580: 399: - **Mechanics:**  
16669: 16581: 400:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
16670: 16582: 401: - **Power-Up:** **Data Shielding**  
16671: 16583: 402:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
16672: 16584: 403: 
16673: 16585: 404: ---
16674: 16586: 405: 
16675: 16587: 406: ## 🎮 **Mini-Games in SledHEAD**
16676: 16588: 407: 
16677: 16589: 408: ### 1. **Animal Photography** 📸🐾
16678: 16590: 409: - **Objective:**  
16679: 16591: 410:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
16680: 16592: 411: - **Mechanics:**  
16681: 16593: 412:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
16682: 16594: 413:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
16683: 16595: 414:   - **Scoring Bonuses:**  
16684: 16596: 415:     - **Altitude Match Multiplier**  
16685: 16597: 416:     - **POV Centering Bonus**  
16686: 16598: 417:     - **Speed Capture Bonus**  
16687: 16599: 418: - **Upgrades:**  
16688: 16600: 419:   - **Optimal Optics:** Increases the camera’s POV cone.  
16689: 16601: 420:   - **Steady Hands:** Reduces camera sway.  
16690: 16602: 421:   - **Animal Baiting:** Increases rare animal appearance.
16691: 16603: 422: - **Special Events:**  
16692: 16604: 423:   - **Rare Animal Sightings** and **Storm Photography**.
16693: 16605: 424: - **Risk/Challenge:**  
16694: 16606: 425:   - **Repeat Photo Penalty** and aggressive animal disruptions.
16695: 16607: 426: 
16696: 16608: 427: ---
16697: 16609: 428: 
16698: 16610: 429: ### 2. **Fishing** 🎣🐟  
16699: 16611: 430: - **Objective:**  
16700: 16612: 431:   Catch fish using various techniques and bait types.
16701: 16613: 432: - **Mechanics:**  
16702: 16614: 433:   - Dynamic water simulation with varied fish behaviors.  
16703: 16615: 434:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
16704: 16616: 435:   - Legendary fish yield major rewards.
16705: 16617: 436: - **Upgrades:**  
16706: 16618: 437:   - Stronger fishing lines, advanced lures, and sonar detection.
16707: 16619: 438: - **Special Events:**  
16708: 16620: 439:   - Fishing tournaments and rare migration patterns.
16709: 16621: 440: - **Risk/Challenge:**  
16710: 16622: 441:   - Line snapping and predator interference.
16711: 16623: 442: 
16712: 16624: 443: ---
16713: 16625: 444: 
16714: 16626: 445: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
16715: 16627: 446: - **Objective:**  
16716: 16628: 447:   Unlock doors, safes, and hidden compartments.
16717: 16629: 448: - **Mechanics:**  
16718: 16630: 449:   - Use tools like **rakes, hooks, and tension wrenches**.  
16719: 16631: 450:   - Navigate traps such as alarms and rusted internals.
16720: 16632: 451: - **Upgrades:**  
16721: 16633: 452:   - High-quality picks, electronic bypass tools, and vibration sensors.
16722: 16634: 453: - **Special Events:**  
16723: 16635: 454:   - Timed heists and races with rival scavengers.
16724: 16636: 455: - **Risk/Challenge:**  
16725: 16637: 456:   - Unstable buildings and hazards that may alert authorities.
16726: 16638: 457: 
16727: 16639: 458: ---
16728: 16640: 459: 
16729: 16641: 460: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
16730: 16642: 461: - **Objective:**  
16731: 16643: 462:   Find buried treasure using maps, clues, and metal detectors.
16732: 16644: 463: - **Mechanics:**  
16733: 16645: 464:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
16734: 16646: 465:   - Digging requires stamina management and upgraded tools.
16735: 16647: 466: - **Upgrades:**  
16736: 16648: 467:   - Advanced metal detectors, excavation tools, and digging drones.
16737: 16649: 468: - **Special Events:**  
16738: 16650: 469:   - NPC treasure races and secret cache discoveries.
16739: 16651: 470: - **Risk/Challenge:**  
16740: 16652: 471:   - Booby traps, hostile environments, and law enforcement risks.
16741: 16653: 472: 
16742: 16654: 473: ---
16743: 16655: 474: 
16744: 16656: 475: ### 5. **Kite Flying** 🪁🌬️  
16745: 16657: 476: - **Objective:**  
16746: 16658: 477:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
16747: 16659: 478: - **Mechanics:**  
16748: 16660: 479:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
16749: 16661: 480:   - **Downhill:** Kites extend air time and grant special bonuses.
16750: 16662: 481: - **Upgrades:**  
16751: 16663: 482:   - **Glide Boost, Speed Stream, and Aero Control.**
16752: 16664: 483: - **Special Events:**  
16753: 16665: 484:   - **Storm Riding** with higher boosts but riskier winds.
16754: 16666: 485: - **Risk/Challenge:**  
16755: 16667: 486:   - Strong gusts may destabilize your kite.
16756: 16668: 487: 
16757: 16669: 488: ---
16758: 16670: 489: 
16759: 16671: 490: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
16760: 16672: 491: - **Objective:**  
16761: 16673: 492:   Search for valuable minerals, gems, and gold.
16762: 16674: 493: - **Mechanics:**  
16763: 16675: 494:   - Explore rivers, caves, and rock formations.  
16764: 16676: 495:   - **Panning:** Swirl water to separate gold.  
16765: 16677: 496:   - **Pickaxe Mining:** Break rocks for hidden gems.
16766: 16678: 497: - **Upgrades:**  
16767: 16679: 498:   - High-tech panning kits, seismic scanners, precision drills.
16768: 16680: 499: - **Special Events:**  
16769: 16681: 500:   - Gold rush hotspots, rare mineral finds, and cave-ins.
16770: 16682: 501: - **Risk/Challenge:**  
16771: 16683: 502:   - Unstable ground and rival prospectors.
16772: 16684: 503: 
16773: 16685: 504: ---
16774: 16686: 505: 
16775: 16687: 506: ### 7. **Cryptid Fossil Digging** 🦴🔍  
16776: 16688: 507: - **Objective:**  
16777: 16689: 508:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
16778: 16690: 509: - **Mechanics:**  
16779: 16691: 510:   - Use brushes, chisels, and excavation tools to reveal fossils.  
16780: 16692: 511:   - Transport fossils to the museum at the base of the first mountain.
16781: 16693: 512: - **Upgrades:**  
16782: 16694: 513:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
16783: 16695: 514: - **Special Events:**  
16784: 16696: 515:   - Competing paleontologists and hidden dig sites.
16785: 16697: 516: - **Risk/Challenge:**  
16786: 16698: 517:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
16787: 16699: 518: 
16788: 16700: 519: ---
16789: 16701: 520: 
16790: 16702: 521: ### 8. **Sled Tricking** 🛷✨  
16791: 16703: 522: - **Objective:**  
16792: 16704: 523:   Chain together aerial sled tricks to earn cash and boost fan engagement.
16793: 16705: 524: - **Mechanics:**  
16794: 16706: 525:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
16795: 16707: 526:   - Chain tricks for higher multipliers.
16796: 16708: 527: - **Upgrades:**  
16797: 16709: 528:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
16798: 16710: 529: - **Special Events:**  
16799: 16711: 530:   - Trick challenges and fan-requested stunt competitions.
16800: 16712: 531: - **Risk/Challenge:**  
16801: 16713: 532:   - Mistimed tricks can cause crashes and loss of earnings.
16802: 16714: 533: 
16803: 16715: 534: ---
16804: 16716: 535: 
16805: 16717: 536: ### 9. **Time Trial Racing** 🏁🛷  
16806: 16718: 537: - **Objective:**  
16807: 16719: 538:   Trigger time trial races by hitting gates while sledding for money rewards.
16808: 16720: 539: - **Mechanics:**  
16809: 16721: 540:   - Crossing a time trial gate starts a timer.  
16810: 16722: 541:   - The faster and further you go, the more money you earn.
16811: 16723: 542: - **Why It Fits:**  
16812: 16724: 543:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
16813: 16725: 544: 
16814: 16726: 545: ---
16815: 16727: 546: 
16816: 16728: 547: ### 10. **RC Motor Sled** ❄️🏎️  
16817: 16729: 548: - **Objective:**  
16818: 16730: 549:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
16819: 16731: 550: - **Mechanics:**  
16820: 16732: 551:   - Maneuver nimble RC sleds across frozen tundra.  
16821: 16733: 552:   - Nitro boosts and mid-air tricks enhance performance.  
16822: 16734: 553:   - Customization options include different sled bodies, engines, and handling upgrades.
16823: 16735: 554: - **Special Events:**  
16824: 16736: 555:   - Avalanche races, night rides, and hazard runs.
16825: 16737: 556: - **Risk/Challenge:**  
16826: 16738: 557:   - Limited battery life, high winds, and signal loss in deep snow.
16827: 16739: 558: 
16828: 16740: 559: ## 🏔️ **NPCs & Mountain Town Ecosystem**
16829: 16741: 560: SledHEAD’s world is filled with **unique characters** who contribute to your journey as a **trick-riding, fan-growing, upgrade-building, sled-stunting** legend. Some run the town, some enhance your sledding skills, and others add depth to the **roguelike adventure**.
16830: 16742: 561: 
16831: 16743: 562: ---
16832: 16744: 563: 
16833: 16745: 564: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
16834: 16746: 565: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
16835: 16747: 566: 
16836: 16748: 567: #### 🏂 **The Sled Tech (Sled Repairs & Mods)**
16837: 16749: 568: - **Purpose:** Repairs damage, sells sled mods.
16838: 16750: 569: - **Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
16839: 16751: 570: - **Best Quote:** “What’d ya do, run into a moose? I can fix it… for a price.”
16840: 16752: 571: 
16841: 16753: 572: #### 🍔 **The Food Vendor (Buffs & Endurance Recovery)**
16842: 16754: 573: - **Purpose:** Sells food that restores stamina and gives **temporary buffs** for sledding.
16843: 16755: 574: - **Best Quote:** “Hot cocoa makes you go faster, I swear. Try it.”
16844: 16756: 575: 
16845: 16757: 576: #### 🎥 **The Stream Manager (Audience Growth & Sponsorships)**
16846: 16758: 577: - **Purpose:** Manages your in-game audience; unlocks **sponsorship deals**.
16847: 16759: 578: - **Best Quote:** “If you don’t clip the trick, did you even land it?”
16848: 16760: 579: 
16849: 16761: 580: #### 🏁 **The Race Commissioner (Tournaments & Time Trials)**
16850: 16762: 581: - **Purpose:** Hosts **time trials, speedrun events, and competitive circuits**.
16851: 16763: 582: - **Best Quote:** “Half a second off the record? C’mon, I thought you were good.”
16852: 16764: 583: 
16853: 16765: 584: #### 🚠 **The Lift Operator (Ski Lift & Shortcut Unlocks)**
16854: 16766: 585: - **Purpose:** Lets you **unlock ski lifts** for quicker uphill trips.
16855: 16767: 586: - **Upgrades Unlocked:** **Gondola expansions, VIP lift passes.**
16856: 16768: 587: - **Best Quote:** “Sure, you could walk… or you could bribe me.”
16857: 16769: 588: 
16858: 16770: 589: ---
16859: 16771: 590: 
16860: 16772: 591: ### 💨 **Trick & Racing-Oriented NPCs (For Stunts, Style, & Money)**
16861: 16773: 592: These folks help you **push your limits**, pull off **sick tricks**, and **maximize profits**.
16862: 16774: 593: 
16863: 16775: 594: #### 🎿 **The Trick Trainer (Advanced Trick Lessons)**
16864: 16776: 595: - **Purpose:** Unlocks **trick combos & advanced air control.**
16865: 16777: 596: - **Best Quote:** “No guts, no glory. You wanna spin faster? Listen up.”
16866: 16778: 597: 
16867: 16779: 598: #### 📸 **The Hype Photographer (Proof-Based Challenges & Bonus Money)**
16868: 16780: 599: - **Purpose:** **Trick verification & photography mini-games**.
16869: 16781: 600: - **Upgrades Unlocked:** **Slow-mo replays, sponsorship boosts for sick shots.**
16870: 16782: 601: - **Best Quote:** “A trick’s only worth money if people see it.”
16871: 16783: 602: 
16872: 16784: 603: #### 💰 **The Black Market Gear Dealer (Risky Upgrades & Illegal Mods)**
16873: 16785: 604: - **Purpose:** Sells **risky sled tech** (illegal nitro boosts, magnetized rails for grinds).
16874: 16786: 605: - **Upgrades Unlocked:** **Unstable overclocked sled parts**.
16875: 16787: 606: - **Best Quote:** “No refunds. Don’t ask what’s in it.”
16876: 16788: 607: 
16877: 16789: 608: #### 🤡 **The Stunt Organizer (Jackass-Style Events & Side Hustles)**
16878: 16790: 609: - **Purpose:** Hosts **insane trick challenges** with **huge risk & reward**.
16879: 16791: 610: - **Best Quote:** “Land a quadruple flip, and I’ll give you something real nice.”
16880: 16792: 611: 
16881: 16793: 612: ---
16882: 16794: 613: 
16883: 16795: 614: ### 🌎 **Worldbuilding NPCs (Exploration, Hidden Routes, & Fan Engagement)**
16884: 16796: 615: These folks **expand the world** and **give reasons to explore**.
16885: 16797: 616: 
16886: 16798: 617: #### ⛷️ **The Retired Pro (Hidden Sledding Routes & Legend Quests)**
16887: 16799: 618: - **Purpose:** Tells **lore, hidden trails, and backstory of previous champions.**
16888: 16800: 619: - **Upgrades Unlocked:** **Secret mountain shortcuts & sled blueprints.**
16889: 16801: 620: - **Best Quote:** “Before you, there was someone else. And he disappeared.”
16890: 16802: 621: 
16891: 16803: 622: #### 🦊 **The Wildlife Researcher (Animal Photography & Rare Fan Unlocks)**
16892: 16804: 623: - **Purpose:** Ties into **wildlife photography mini-games**.
16893: 16805: 624: - **Upgrades Unlocked:** **Animal-based sled skins & rare sponsor deals.**
16894: 16806: 625: - **Best Quote:** “Snow leopards? They’re watching you, too.”
16895: 16807: 626: 
16896: 16808: 627: #### 📡 **The Event Broadcaster (Commentary & Competitive Meta)**
16897: 16809: 628: - **Purpose:** Gives **updates on leaderboards, rival NPCs, and changing conditions**.
16898: 16810: 629: - **Upgrades Unlocked:** **"Breaking News" reports on your achievements.**
16899: 16811: 630: - **Best Quote:** “The fans are watching, buddy. Make it count.”
16900: 16812: 631: 
16901: 16813: 632: ---
16902: 16814: 633: 
16903: 16815: 634: ### 🛤️ **The Travel-Ready NPCs (Appear Across Multiple Mountains)**
16904: 16816: 635: They **don’t just stay in one place**—you’ll run into them as you unlock new peaks.
16905: 16817: 636: 
16906: 16818: 637: #### 🎭 **The Rival (Dynamic Trick & Time Trial Duels)**
16907: 16819: 638: - **Purpose:** Appears on any unlocked mountain to **challenge your records**.
16908: 16820: 639: - **Best Quote:** “Your best time? That’s cute.”
16909: 16821: 640: 
16910: 16822: 641: #### 🛠️ **The Tinkerer (Experimental Sled Mods)**
16911: 16823: 642: - **Purpose:** Sells **unstable, high-risk sled modifications**.
16912: 16824: 643: - **Upgrades Unlocked:** **Prototype sled tech.**
16913: 16825: 644: - **Best Quote:** “This is 50% science and 50% dumb luck.”
16914: 16826: 645: 
16915: 16827: 646: #### 🎩 **The Mysterious Merchant (Random Legendary Gear)**
16916: 16828: 647: - **Purpose:** Appears randomly, selling **rare sleds & gear**.
16917: 16829: 648: - **Best Quote:** “You don’t know what you need… until you see it.”
16918: 16830: 649: 
16919: 16831: 650: ---
16920: 16832: 651: 
16921: 16833: 652: ### 🎭 **The Wild Cards (Weird & Legendary NPCs)**
16922: 16834: 653: These folks are **just strange**, but they add **flavor, mystery, and unpredictability**.
16923: 16835: 654: 
16924: 16836: 655: #### 👻 **The Ghost of the Mountain (Phantom Races & Haunted Challenges)**
16925: 16837: 656: - **Purpose:** Unlocks **ghost time trials & haunted trick courses**.
16926: 16838: 657: - **Best Quote:** “You ride my path, you race my shadow.”
16927: 16839: 658: 
16928: 16840: 659: #### 🧙‍♂️ **The Winter Shaman (Weather Manipulation & Magic Sleds)**
16929: 16841: 660: - **Purpose:** **Controls mountain weather** for harder/easier runs.
16930: 16842: 661: - **Best Quote:** “Blizzards make legends.”
16931: 16843: 662: 
16932: 16844: 663: #### 🐻 **The Bear Whisperer (Bear Sled Racing Mini-Game)**
16933: 16845: 664: - **Purpose:** Lets you **race against trained bears** for money.
16934: 16846: 665: - **Best Quote:** “You sled. They sled. Only one wins.”
16935: 16847: 666: 
16936: 16848: 667: #### 🥶 **The Ice Sculptor (Sled Cosmetics & Customization)**
16937: 16849: 668: - **Purpose:** Crafts **one-of-a-kind sled designs**.
16938: 16850: 669: - **Best Quote:** “Your ride should be a masterpiece.”
16939: 16851: 670: 
16940: 16852: 671: #### 🔮 **The Time Traveler (Future & Past Sled Tech)**
16941: 16853: 672: - **Purpose:** Unlocks **anachronistic sled models** (steampunk, cyberpunk, caveman logs).
16942: 16854: 673: - **Best Quote:** “The future’s fast. The past is brutal.”
16943: 16855: 674: 
16944: 16856: 675: ---
16945: 16857: 676: 
16946: 16858: 677: ## **🏔️ Final Thoughts**
16947: 16859: 678: This crew **perfectly balances**:
16948: 16860: 679: ✅ **Core game economy & upgrades**  
16949: 16861: 680: ✅ **High-speed trick-focused gameplay**  
16950: 16862: 681: ✅ **Exploration & hidden content**  
16951: 16863: 682: ✅ **Hilarious but valuable side NPCs**  
16952: 16864: 683: 
16953: 16865: 684: These **NPCs make the town feel alive, push competitive play, and add world depth**. Get ready to **build, race, trick, and explore** with this **cast of unforgettable characters**.
16954: 16866: ```````
16955: 16867: 
16956: 16868: ## File: docs/CONTROLS.md
16957: 16869: ```````markdown
16958: 16870:   1: # SledHEAD Game Controls
16959: 16871:   2: 
16960: 16872:   3: ## 🎯 Game Overview
16961: 16873:   4: 
16962: 16874:   5: SledHEAD is an **arcade-style sledding game** where you play as an **aspiring sledding champion & content creator** who has purchased an entire procedurally generated mountain. Your goal is to master the mountain through optimized sled runs, perform spectacular aerial tricks, photograph elusive wildlife, and earn money to upgrade your equipment and pay off your mountain loan.
16963: 16875:   6: 
16964: 16876:   7: The game consists of three distinct phases:
16965: 16877:   8: 
16966: 16878:   9: 1. **⬆️ Uphill/Climbing Phase** - Navigate uphill to find the perfect starting position, manage your stamina, and photograph wildlife
16967: 16879:  10: 2. **⬇️ Downhill/Sledding Phase** - Race down the mountain, performing tricks and avoiding obstacles
16968: 16880:  11: 3. **🏠 Management Phase** - Spend your earnings on upgrades for your equipment and mountain infrastructure
16969: 16881:  12: 
16970: 16882:  13: ---
16971: 16883:  14: 
16972: 16884:  15: ## 🎮 Core Controls
16973: 16885:  16: 
16974: 16886:  17: ### ⬆️ Uphill/Climbing Phase Controls
16975: 16887:  18: 
16976: 16888:  19: | Input | Action |
16977: 16889:  20: |-------|--------|
16978: 16890:  21: | **W/A/S/D** | Move the player up/left/down/right across the mountain |
16979: 16891:  22: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line for photography |
16980: 16892:  23: | **Spacebar** | Take a photograph when an animal is in view & the altitude line is rapidly flashing|
16981: 16893:  24: | **E** | [Debug] Manually spawn an animal for testing |
16982: 16894:  25: 
16983: 16895:  26: During the uphill phase, you'll:
16984: 16896:  27: - Navigate the mountain terrain to find optimal starting points
16985: 16897:  28: - Manage your stamina (which depletes while climbing)
16986: 16898:  29: - Photograph wildlife to earn additional money
16987: 16899:  30: - Look for shortcuts and strategic positions for your downhill run
16988: 16900:  31: 
16989: 16901:  32: ### ⬇️ Downhill/Sledding Phase Controls
16990: 16902:  33: 
16991: 16903:  34: | Input | Action |
16992: 16904:  35: |-------|--------|
16993: 16905:  36: | **Arrow Keys ←→** | Steer your sled left or right |
16994: 16906:  37: | **Spacebar** | Initiate jumps |
16995: 16907:  38: | **Arrow Keys** (during jumps) | Perform tricks (specific combinations detailed below) |
16996: 16908:  39: 
16997: 16909:  40: During downhill sledding, you'll:
16998: 16910:  41: - Build momentum and navigate the fastest route down
16999: 16911:  42: - Avoid obstacles like rocks, trees, and tourists
17000: 16912:  43: - Find and hit jumps to perform tricks
17001: 16913:  44: - Chain tricks together for bonus rewards
17002: 16914:  45: 
17003: 16915:  46: ### 🏠 Management (House & Upgrades) Controls
17004: 16916:  47: 
17005: 16917:  48: Navigate menus using mouse/keyboard to:
17006: 16918:  49: - Purchase equipment upgrades
17007: 16919:  50: - Expand mountain infrastructure 
17008: 16920:  51: - Track your earnings and loan payments
17009: 16921:  52: - Check your current mountain seed (for sharing great mountains!)
17010: 16922:  53: 
17011: 16923:  54: ---
17012: 16924:  55: 
17013: 16925:  56: ## ✨ Trick System
17014: 16926:  57: 
17015: 16927:  58: Perform these trick combinations during jumps to earn additional cash:
17016: 16928:  59: 
17017: 16929:  60: | Trick Name | Input Combination | Description |
17018: 16930:  61: |------------|-------------------|-------------|
17019: 16931:  62: | **🚁⬅️ Helicopter Spin Left** | Left, Left | Spin horizontally like a helicopter twirling left |
17020: 16932:  63: | **🚁➡️ Helicopter Spin Right** | Right, Right | Spin horizontally like a helicopter twirling right |
17021: 16933:  64: | **🪂 Parachute** | Up, Down | Hold sled overhead to slow descent and extend air time |
17022: 16934:  65: | **🛑 Air Brake** | Up, Up | Use sled as air brake to slow lateral speed |
17023: 16935:  66: 
17024: 16936:  67: **Trick Tips:**
17025: 16937:  68: - Successfully landing tricks earns money
17026: 16938:  69: - Chain tricks for bonus multipliers
17027: 16939:  70: - Be careful - attempting tricks without enough air time can result in crashes!
17028: 16940:  71: - Re-hitting jumps can extend combo chains
17029: 16941:  72: 
17030: 16942:  73: ---
17031: 16943:  74: 
17032: 16944:  75: ## 📸 Photography System Controls
17033: 16945:  76: 
17034: 16946:  77: | Control | Action |
17035: 16947:  78: |---------|--------|
17036: 16948:  79: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line |
17037: 16949:  80: | **Spacebar** | Take photo |
17038: 16950:  81: 
17039: 16951:  82: **Photography Tips:**
17040: 16952:  83: - Match the altitude line with the animal for maximum reward
17041: 16953:  84: - Animals that are moving yield higher rewards
17042: 16954:  85: - Each repeated photo of the same animal gives diminishing returns
17043: 16955:  86: - Upgrade your camera equipment to improve your photography income
17044: 16956:  87: 
17045: 16957:  88: ---
17046: 16958:  89: 
17047: 16959:  90: ## ⚙️ Advanced Mechanics
17048: 16960:  91: 
17049: 16961:  92: ### Stamina Management
17050: 16962:  93: - Stamina depletes during uphill climbing
17051: 16963:  94: - Return to the house to end your day and restore stamina
17052: 16964:  95: - Each day you will be charged 0.5% of your loan
17053: 16965:  96: - If you run out of stamina, you are immediately returned to the house, and charged 100*(houseReEntry*0.1)
17054: 16966:  97: - Upgrade your equipment to reduce stamina consumption
17055: 16967:  98: 
17056: 16968:  99: ### Collision Handling
17057: 16969: 100: - Collisions with obstacles slow you down and may cause crashes
17058: 16970: 101: - Upgrade sled durability to withstand more collisions
17059: 16971: 102: - Each crash reduces your potential earnings
17060: 16972: 103: 
17061: 16973: 104: ### Upgrade System
17062: 16974: 105: Spend your earnings on:
17063: 16975: 106: - **Rocket Surgery**: Increases speed and jump dynamics
17064: 16976: 107: - **Optimal Optics**: Improves camera angle and accuracy
17065: 16977: 108: - **Sled Durability**: Increases collision tolerance
17066: 16978: 109: - **Fancier Footwear**: Improves uphill movement speed
17067: 16979: 110: 
17068: 16980: 111: ### Win Condition
17069: 16981: 112: - Pay off your mountain loan to trigger the victory state
17070: 16982: 113: - Challenge yourself to complete this with fewer runs!
17071: 16983: ```````
17072: 16984: 
17073: 16985: ## File: docs/README.md
17074: 16986: ```````markdown
17075: 16987:   1: # **SledHEAD**  
17076: 16988:   2: **Genre:** Trick & Time Trial Racer | Adventure  
17077: 16989:   3: **Platform:** Web-based (PC)  
17078: 16990:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
17079: 16991:   5: 
17080: 16992:   6: > 🎮 **[Game Controls Guide](CONTROLS.md)** - Detailed explanation of all game controls and mechanics
17081: 16993:   7: 
17082: 16994:   8: ---
17083: 16995:   9: 
17084: 16996:  10: ## Table of Contents  
17085: 16997:  11: 1. [Core Concept](#core-concept)  
17086: 16998:  12: 2. [Gameplay Loops](#gameplay-loops)  
17087: 16999:  13:    - [Sledding Phase (Downhill)](#sledding-phase-downhill)  
17088: 17000:  14:    - [Climbing Phase (Uphill)](#climbing-phase-uphill)  
17089: 17001:  15:    - [Management Phase (House & Upgrades)](#management-phase-house--upgrades)  
17090: 17002:  16: 3. [Trick System](#trick-system)  
17091: 17003:  17: 4. [Upgrade System](#upgrade-system)  
17092: 17004:  18: 5. [Photo System](#photo-system)  
17093: 17005:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)  
17094: 17006:  20: 
17095: 17007:  21: ---
17096: 17008:  22: 
17097: 17009:  23: ## 🎯 **Core Concept**  
17098: 17010:  24: You are an **aspiring sledding champion & content creator**, challenging yourself to master an enormous mountain. Your goal is to optimize sled runs, perform aerial tricks, and earn money by completing daring stunts and photographing wildlife.
17099: 17011:  25: 
17100: 17012:  26: ---
17101: 17013:  27: 
17102: 17014:  28: ## 🎮 **Gameplay Loops**  
17103: 17015:  29: 
17104: 17016:  30: ### ⬇️ **Sledding Phase (Downhill)**  
17105: 17017:  31: - **Speed & Gravity:** Race down the mountain, using gravity and momentum to your advantage.  
17106: 17018:  32: - **Perform Tricks:** Execute tricks mid-air to earn extra cash.  
17107: 17019:  33: - **Avoid Obstacles:** Rocks and other hazards can slow you down and increase collision counts.  
17108: 17020:  34: 
17109: 17021:  35: ### ⬆️ **Climbing Phase (Uphill)**  
17110: 17022:  36: - **Manual Return:** Use simple directional controls to climb back up the mountain.  
17111: 17023:  37: - **Camera Controls:** Rotate your camera and adjust the altitude line to prepare for wildlife photography.  
17112: 17024:  38: 
17113: 17025:  39: ### 🏠 **Management Phase (House & Upgrades)**  
17114: 17026:  40: - **Upgrade Equipment:** Use your earnings to purchase upgrades that improve your sledding, camera, and movement capabilities.  
17115: 17027:  41: - **Pay Off Loan:** Reduce your initial loan with the money you earn. Once it's fully repaid, you win!
17116: 17028:  42: 
17117: 17029:  43: ---
17118: 17030:  44: 
17119: 17031:  45: ## ✨ **Trick System**  
17120: 17032:  46: - Perform tricks during jumps to earn additional cash.  
17121: 17033:  47: - Tricks include:  
17122: 17034:  48:   - **Left Helicopter** (Rotate left mid-air)  
17123: 17035:  49:   - **Right Helicopter** (Rotate right mid-air)  
17124: 17036:  50:   - **Air Brake** (Apply aerial braking)  
17125: 17037:  51:   - **Parachute** (Deploy for controlled descent)  
17126: 17038:  52: - Tricks can be chained for bonus rewards, and re-hit jumps can extend combo chains.  
17127: 17039:  53: 
17128: 17040:  54: ---
17129: 17041:  55: 
17130: 17042:  56: ## 🔧 **Upgrade System**  
17131: 17043:  57: Upgrades enhance gameplay and include:
17132: 17044:  58: 
17133: 17045:  59: ### 🛷 **Personal Upgrades:**  
17134: 17046:  60: - **Rocket Surgery:** Increases speed and jump dynamics.  
17135: 17047:  61: - **Optimal Optics:** Improves camera angle and accuracy for better wildlife photography.  
17136: 17048:  62: - **Sled Durability:** Increases the number of collisions you can survive.  
17137: 17049:  63: - **Fancier Footwear:** Improves uphill movement speed.  
17138: 17050:  64: 
17139: 17051:  65: ### 🏔️ **Mountain Upgrades:**  
17140: 17052:  66: - **Ski Lifts:** (Planned but not yet implemented)  
17141: 17053:  67: - **Snowmobile Rentals:** (Planned but not yet implemented)  
17142: 17054:  68: - **Groomed Trails:** (Planned but not yet implemented)  
17143: 17055:  69: 
17144: 17056:  70: ---
17145: 17057:  71: 
17146: 17058:  72: ## 📸 **Photo System**  
17147: 17059:  73: - **Wildlife Spawning:** Bears and birds spawn during the uphill phase.  
17148: 17060:  74: - **Camera Use:** Adjust the camera angle and altitude line to capture the perfect shot.  
17149: 17061:  75: - **Scoring Factors:**  
17150: 17062:  76:   - **Altitude Matching:** Better alignment with animal altitude increases reward.  
17151: 17063:  77:   - **Centering:** Well-centered shots provide bonus payouts.  
17152: 17064:  78:   - **Movement Bonus:** Photographing moving animals yields more cash.  
17153: 17065:  79:   - **Repeat Penalty:** Avoid photographing the same animal multiple times for reduced penalties.  
17154: 17066:  80: 
17155: 17067:  81: ---
17156: 17068:  82: 
17157: 17069:  83: ## ⚙️ **Game Balance & Tweakable Variables**  
17158: 17070:  84: Key variables that control game mechanics and can be adjusted include:  
17159: 17071:  85: - **Jump Mechanics:** Height, duration, and zoom bonuses.  
17160: 17072:  86: - **Animal Behavior:** Spawn times, movement speed, and flee mechanics.  
17161: 17073:  87: - **Upgrade Costs & Effects:** Each upgrade scales in cost and effectiveness.  
17162: 17074:  88: - **Collision Handling:** How collisions are managed and penalized.  
17163: 17075:  89: 
17164: 17076:  90: ---
17165: 17077:  91: 
17166: 17078:  92: ## 🎮 **Controls**  
17167: 17079:  93: - **W/A/S/D:** Move the player during the uphill phase.  
17168: 17080:  94: - **Arrow Keys:** Adjust the camera angle and altitude line.  
17169: 17081:  95: - **Spacebar:**  
17170: 17082:  96:   - **Downhill Phase:** Initiates jumps.  
17171: 17083:  97:   - **Uphill Phase:** Takes a photo.  
17172: 17084:  98: - **E:** Manually spawn an animal (for testing purposes).  
17173: 17085:  99: 
17174: 17086: 100: ---
17175: 17087: 101: 
17176: 17088: 102: ## ✅ **Win Condition**  
17177: 17089: 103: - Pay off the initial loan to trigger the victory state.
17178: 17090: ```````
17179: 17091: 
17180: 17092: ## File: js/mobs/bear.js
17181: 17093: ```````javascript
17182: 17094:  1: /* bear.js - Bear Animal Module
17183: 17095:  2: // This module defines the bear characteristics for the wildlife simulation.
17184: 17096:  3: // It registers itself with wildlife.js by calling registerAnimalType().
17185: 17097:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
17186: 17098:  5: */
17187: 17099:  6: (function() {
17188: 17100:  7:     var bearData = {
17189: 17101:  8:         type: "bear",
17190: 17102:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.bearSpawnProbability) || 0.5,
17191: 17103: 10:         width: 40,
17192: 17104: 11:         height: 60,
17193: 17105: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.bearDetectionRadius) || 50,
17194: 17106: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.bearSpeed) || 8,
17195: 17107: 14:         basePhotoBonus: 10, // Bears yield a higher photo bonus
17196: 17108: 15:         color: "#8B4513",
17197: 17109: 16:         spawningBiomes: [
17198: 17110: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
17199: 17111: 18:         ],
17200: 17112: 19:         customUpdate: null,
17201: 17113: 20:         customDraw: function(animal, screenY, ctx) {
17202: 17114: 21:             // Draw the bear's body
17203: 17115: 22:             ctx.fillStyle = "#8B4513";
17204: 17116: 23:             ctx.fillRect(
17205: 17117: 24:                 animal.x - animal.width / 2,
17206: 17118: 25:                 screenY - animal.height / 2,
17207: 17119: 26:                 animal.width,
17208: 17120: 27:                 animal.height
17209: 17121: 28:             );
17210: 17122: 29:             // Draw bear ears as simple rectangles
17211: 17123: 30:             ctx.fillStyle = "#000000";
17212: 17124: 31:             ctx.fillRect(
17213: 17125: 32:                 animal.x - animal.width / 3,
17214: 17126: 33:                 screenY - animal.height / 2 - 10,
17215: 17127: 34:                 10,
17216: 17128: 35:                 10
17217: 17129: 36:             );
17218: 17130: 37:             ctx.fillRect(
17219: 17131: 38:                 animal.x + animal.width / 3 - 10,
17220: 17132: 39:                 screenY - animal.height / 2 - 10,
17221: 17133: 40:                 10,
17222: 17134: 41:                 10
17223: 17135: 42:             );
17224: 17136: 43:             // Altitude indicator
17225: 17137: 44:             let t = 1 - (animal.altitude / 100);
17226: 17138: 45:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
17227: 17139: 46:             ctx.fillStyle = altitudeColor;
17228: 17140: 47:             ctx.fillRect(
17229: 17141: 48:                 animal.x + animal.width / 2 + 5,
17230: 17142: 49:                 screenY - 5,
17231: 17143: 50:                 10,
17232: 17144: 51:                 10
17233: 17145: 52:             );
17234: 17146: 53:         }
17235: 17147: 54:     };
17236: 17148: 55:     if (typeof registerAnimalType === 'function') {
17237: 17149: 56:         registerAnimalType(bearData);
17238: 17150: 57:     } else {
17239: 17151: 58:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
17240: 17152: 59:     }
17241: 17153: 60: })();
17242: 17154: ```````
17243: 17155: 
17244: 17156: ## File: js/mobs/bird.js
17245: 17157: ```````javascript
17246: 17158:  1: /* bird.js - Bird Animal Module
17247: 17159:  2: // This module defines the bird characteristics for the wildlife simulation.
17248: 17160:  3: // It registers itself with wildlife.js by calling registerAnimalType().
17249: 17161:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
17250: 17162:  5: */
17251: 17163:  6: (function() {
17252: 17164:  7:     var birdData = {
17253: 17165:  8:         type: "bird",
17254: 17166:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.birdSpawnProbability) || 0.5,
17255: 17167: 10:         width: 20,
17256: 17168: 11:         height: 20,
17257: 17169: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.birdDetectionRadius) || 50,
17258: 17170: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.birdSpeed) || 12,
17259: 17171: 14:         basePhotoBonus: 5, // Birds yield a lower photo bonus
17260: 17172: 15:         color: "#1E90FF",
17261: 17173: 16:         spawningBiomes: [
17262: 17174: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
17263: 17175: 18:         ],
17264: 17176: 19:         customUpdate: null,
17265: 17177: 20:         customDraw: function(animal, screenY, ctx) {
17266: 17178: 21:             // Draw the bird's body
17267: 17179: 22:             ctx.fillStyle = "#1E90FF";
17268: 17180: 23:             ctx.fillRect(
17269: 17181: 24:                 animal.x - animal.width / 2,
17270: 17182: 25:                 screenY - animal.height / 2,
17271: 17183: 26:                 animal.width,
17272: 17184: 27:                 animal.height
17273: 17185: 28:             );
17274: 17186: 29:             // Draw bird wings with a simple flapping effect
17275: 17187: 30:             ctx.fillStyle = "#000000";
17276: 17188: 31:             if (Math.floor(Date.now() / 200) % 2 === 0) {
17277: 17189: 32:                 ctx.beginPath();
17278: 17190: 33:                 ctx.moveTo(animal.x, screenY);
17279: 17191: 34:                 ctx.lineTo(animal.x - 20, screenY - 10);
17280: 17192: 35:                 ctx.lineTo(animal.x + 20, screenY - 10);
17281: 17193: 36:                 ctx.closePath();
17282: 17194: 37:                 ctx.fill();
17283: 17195: 38:             } else {
17284: 17196: 39:                 ctx.beginPath();
17285: 17197: 40:                 ctx.moveTo(animal.x, screenY);
17286: 17198: 41:                 ctx.lineTo(animal.x - 20, screenY + 5);
17287: 17199: 42:                 ctx.lineTo(animal.x + 20, screenY + 5);
17288: 17200: 43:                 ctx.closePath();
17289: 17201: 44:                 ctx.fill();
17290: 17202: 45:             }
17291: 17203: 46:             // Altitude indicator
17292: 17204: 47:             let t = 1 - (animal.altitude / 100);
17293: 17205: 48:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
17294: 17206: 49:             ctx.fillStyle = altitudeColor;
17295: 17207: 50:             ctx.fillRect(
17296: 17208: 51:                 animal.x + animal.width / 2 + 5,
17297: 17209: 52:                 screenY - 5,
17298: 17210: 53:                 10,
17299: 17211: 54:                 10
17300: 17212: 55:             );
17301: 17213: 56:         }
17302: 17214: 57:     };
17303: 17215: 58:     if (typeof registerAnimalType === 'function') {
17304: 17216: 59:         registerAnimalType(birdData);
17305: 17217: 60:     } else {
17306: 17218: 61:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
17307: 17219: 62:     }
17308: 17220: 63: })();
17309: 17221: ```````
17310: 17222: 
17311: 17223: ## File: js/input.js
17312: 17224: ```````javascript
17313: 17225:  1: /* input.js - Keyboard Input Handling */
17314: 17226:  2: // Global keyboard input tracking
17315: 17227:  3: var keysDown = {};
17316: 17228:  4: // Global cursor position tracking
17317: 17229:  5: var cursorPosition = {
17318: 17230:  6:   absoluteX: 0,
17319: 17231:  7:   absoluteY: 0,
17320: 17232:  8:   viewportX: 0,
17321: 17233:  9:   viewportY: 0,
17322: 17234: 10:   lastUpdateTime: 0
17323: 17235: 11: };
17324: 17236: 12: // Set up event listeners for keyboard input
17325: 17237: 13: window.addEventListener("keydown", function(e) {
17326: 17238: 14:   keysDown[e.key] = true;
17327: 17239: 15: });
17328: 17240: 16: window.addEventListener("keyup", function(e) {
17329: 17241: 17:   keysDown[e.key] = false;
17330: 17242: 18: });
17331: 17243: 19: // Set up event listener for mouse movement
17332: 17244: 20: window.addEventListener("mousemove", function(e) {
17333: 17245: 21:   // Store both absolute and viewport coordinates
17334: 17246: 22:   cursorPosition.absoluteX = e.pageX;
17335: 17247: 23:   cursorPosition.absoluteY = e.pageY;
17336: 17248: 24:   cursorPosition.viewportX = e.clientX;
17337: 17249: 25:   cursorPosition.viewportY = e.clientY;
17338: 17250: 26: });
17339: 17251: 27: // Update the cursor position display
17340: 17252: 28: function updateCursorPositionDisplay() {
17341: 17253: 29:   const cursorPositionElement = document.getElementById("cursor-position");
17342: 17254: 30:   if (cursorPositionElement) {
17343: 17255: 31:     cursorPositionElement.textContent = `Abs-xy: (${cursorPosition.absoluteX}, ${cursorPosition.absoluteY}) | View: (${cursorPosition.viewportX}, ${cursorPosition.viewportY})`;
17344: 17256: 32:   }
17345: 17257: 33: }
17346: 17258: 34: // Set up interval to update cursor position display once per second
17347: 17259: 35: setInterval(updateCursorPositionDisplay, 1000);
17348: 17260: 36: // Helper function to check if a key is currently pressed
17349: 17261: 37: function isKeyDown(key) {
17350: 17262: 38:   return keysDown[key] === true;
17351: 17263: 39: }
17352: 17264: ```````
17353: 17265: 
17354: 17266: ## File: js/tricks.js
17355: 17267: ```````javascript
17356: 17268:  1: /* tricks.js - Trick System & Logic */
17357: 17269:  2: import { register } from './registry.js';
17358: 17270:  3: function startTrick(trickName) {
17359: 17271:  4:   if (player.currentTrick) return;
17360: 17272:  5:   player.currentTrick = trickName;
17361: 17273:  6:   player.trickTimer = 0;
17362: 17274:  7:   player.trickRotation = 0;
17363: 17275:  8:   player.trickOffset = 0;
17364: 17276:  9:   let now = Date.now();
17365: 17277: 10:   let cooldownEnd = player.trickCooldowns[trickName] || 0;
17366: 17278: 11:   let timeLeft = Math.max(0, cooldownEnd - now);
17367: 17279: 12:   player.currentTrickValueMultiplier = timeLeft > 0 ? Math.max(0.1, 1 - (timeLeft / TWEAK._trickCooldown)) : 1;
17368: 17280: 13:   player.trickCooldowns[trickName] = now + TWEAK._trickCooldown;
17369: 17281: 14:   console.log(`Starting ${trickName} (Value: ${(player.currentTrickValueMultiplier * 100).toFixed(0)}%)`);
17370: 17282: 15: }
17371: 17283: 16: register("startTrick", startTrick);
17372: 17284: 17: function checkTrickInputs() {
17373: 17285: 18:   if (!player.currentTrick && player.isJumping) {
17374: 17286: 19:     if (keysDown["ArrowLeft"]) startTrick("leftHelicopter");
17375: 17287: 20:     else if (keysDown["ArrowRight"]) startTrick("rightHelicopter");
17376: 17288: 21:     else if (keysDown["ArrowUp"]) startTrick("airBrake");
17377: 17289: 22:     else if (keysDown["ArrowDown"]) startTrick("parachute");
17378: 17290: 23:   }
17379: 17291: 24: }
17380: 17292: 25: register("checkTrickInputs", checkTrickInputs);
17381: 17293: 26: function processTrick(deltaTime) {
17382: 17294: 27:   if (player.currentTrick) {
17383: 17295: 28:     player.trickTimer += deltaTime;
17384: 17296: 29:     let trickProgress = player.trickTimer / (TWEAK._trickBaseDuration * TWEAK._trickTimeMultiplier + TWEAK._trickTimeAdder);
17385: 17297: 30:     switch (player.currentTrick) {
17386: 17298: 31:       case "leftHelicopter":
17387: 17299: 32:         player.trickRotation -= TWEAK._trickRotationSpeed * (deltaTime / 1000);
17388: 17300: 33:         break;
17389: 17301: 34:       case "rightHelicopter":
17390: 17302: 35:         player.trickRotation += TWEAK._trickRotationSpeed * (deltaTime / 1000);
17391: 17303: 36:         break;
17392: 17304: 37:       case "airBrake":
17393: 17305: 38:       case "parachute":
17394: 17306: 39:         player.trickOffset = TWEAK._trickOffsetDistance * Math.sin(Math.PI * trickProgress);
17395: 17307: 40:         break;
17396: 17308: 41:     }
17397: 17309: 42:     if (trickProgress >= 1) {
17398: 17310: 43:       completeTrick();
17399: 17311: 44:     }
17400: 17312: 45:   }
17401: 17313: 46: }
17402: 17314: 47: register("processTrick", processTrick);
17403: 17315: 48: function completeTrick() {
17404: 17316: 49:   let trickMoney = TWEAK._trickMoneyBase;
17405: 17317: 50:   let chainBonus = 1;
17406: 17318: 51:   if (player.lastTrick && player.lastTrick !== player.currentTrick) {
17407: 17319: 52:     player.trickChainCount++;
17408: 17320: 53:     chainBonus = Math.pow(TWEAK._trickChainMultiplier, player.trickChainCount);
17409: 17321: 54:     trickMoney *= chainBonus;
17410: 17322: 55:   } else {
17411: 17323: 56:     player.trickChainCount = 0;
17412: 17324: 57:   }
17413: 17325: 58:   trickMoney *= player.currentTrickValueMultiplier;
17414: 17326: 59:   let finalMoney = Math.floor(trickMoney);
17415: 17327: 60:   player.money += finalMoney;
17416: 17328: 61:   showMoneyGain(finalMoney, `(${player.currentTrick})`);
17417: 17329: 62:   addFloatingText(`+$${finalMoney} ${player.currentTrick}`, player.x, player.absY);
17418: 17330: 63:   console.log(`Completed ${player.currentTrick}! +$${finalMoney}`);
17419: 17331: 64:   player.lastTrick = player.currentTrick;
17420: 17332: 65:   player.currentTrick = null;
17421: 17333: 66:   player.trickTimer = 0;
17422: 17334: 67:   player.trickRotation = 0;
17423: 17335: 68:   player.trickOffset = 0;
17424: 17336: 69:   playTrickCompleteSound();
17425: 17337: 70: }
17426: 17338: 71: register("completeTrick", completeTrick);
17427: 17339: 72: function resetTrickState() {
17428: 17340: 73:   player.currentTrick = null;
17429: 17341: 74:   player.trickTimer = 0;
17430: 17342: 75:   player.trickRotation = 0;
17431: 17343: 76:   player.trickOffset = 0;
17432: 17344: 77:   player.lastTrick = null;
17433: 17345: 78:   player.trickChainCount = 0;
17434: 17346: 79: }
17435: 17347: 80: register("resetTrickState", resetTrickState);
17436: 17348: 81: function playTrickCompleteSound() {
17437: 17349: 82:   playTone(600, "sine", 0.1, 0.2);
17438: 17350: 83: }
17439: 17351: 84: register("playTrickCompleteSound", playTrickCompleteSound);
17440: 17352: 85: // Expose checkTrickInputs globally so that other modules (like downhill.js) can call it.
17441: 17353: 86: window.checkTrickInputs = checkTrickInputs;
17442: 17354: 87: export {
17443: 17355: 88:   startTrick,
17444: 17356: 89:   checkTrickInputs,
17445: 17357: 90:   processTrick,
17446: 17358: 91:   completeTrick,
17447: 17359: 92:   resetTrickState,
17448: 17360: 93:   playTrickCompleteSound,
17449: 17361: 94: };
17450: 17362: ```````
17451: 17363: 
17452: 17364: ## File: js/settings.js
17453: 17365: ```````javascript
17454: 17366:   1: // settings.js - various TWEAK settings and their
17455: 17367:   2: // knob-turnings go here
17456: 17368:   3: /* Global Configuration & Shared Globals */
17457: 17369:   4: // Define our current mountain biome and layer defaults.
17458: 17370:   5: var currentBiome = "starterMountain";  // We're on the Starter Mountain by default.
17459: 17371:   6: var currentMountainLayer = 1;          // Default layer (if you're using numeric layers)
17460: 17372:   7: var currentLayerPercent = 25;          // Or if you're using percentages (0-100)
17461: 17373:   8: var TWEAK = {
17462: 17374:   9:     tweakNob: 1,
17463: 17375:  10:     // Animal spawning and movement
17464: 17376:  11:     minSpawnTime: 5000, // Minimum delay between spawns (5 sec)
17465: 17377:  12:     maxSpawnTime: 10000, // Maximum delay between spawns (10 sec)
17466: 17378:  13:     minIdleTime: 3000, // Minimum time an animal sits still (1 sec)
17467: 17379:  14:     maxIdleTime: 8000, // Maximum time an animal sits still (20 sec)
17468: 17380:  15:     minMoveSpeed: 5, // Slowest movement speed for animals
17469: 17381:  16:     maxMoveSpeed: 11.2, // Fastest movement speed for animals
17470: 17382:  17:     fleeAngle: 45, // This may be obsolete - confirm before removing
17471: 17383:  18:     photoCooldown: 1000, // Must wait 1 second between photos
17472: 17384:  19:     repeatPhotoPenalty: 0.5, // 50% less money if the same animal is photographed again
17473: 17385:  20:     minAnimalSpawnDistance: 400,
17474: 17386:  21:     maxAnimalSpawnDistance: 500,
17475: 17387:  22:     bearSpawnProbability: 0.3, // 30% chance of a bear
17476: 17388:  23:     bearSpeed: 6, // Bears move a bit slower
17477: 17389:  24:     birdSpeed: 9, // Birds move faster
17478: 17390:  25:     bearDetectionRadius: 150, // Bears detect player from farther away
17479: 17391:  26:     birdDetectionRadius: 50, // Birds have smaller detection radius
17480: 17392:  27:     maxAnimalPhotoDistance: 600, // Maximum distance for taking photos
17481: 17393:  28:     // Jumping stuff
17482: 17394:  29:     jumpType: "immediate",               // "immediate" or "charge" - DO NOT REMOVE
17483: 17395:  30:     jumpCollisionMultiplier: 3,
17484: 17396:  31:     jumpBaseAscent: 1000,                 // Base ascent time (ms)
17485: 17397:  32:     jumpMaxHoldTime: 1000,               // Maximum charge duration (1 sec)
17486: 17398:  33:     jumpPeakScale: 2,                    // Base peak visual jump scale
17487: 17399:  34:     jumpHeightPerRocketSurgery: 0.05,    // Each level adds 5% to jump height
17488: 17400:  35:     jumpTimePerRocketSurgery: 0.05,      // Each level adds 5% to jump duration
17489: 17401:  36:     jumpZoomPerHeightIncrease: 0.5,      // For every 100% height increase, add 50% more zoom
17490: 17402:  37:     // Re-Hit Jump System
17491: 17403:  38:     reHitWindowStart: 0.70,              // When re-hit window opens (70% through jump)
17492: 17404:  39:     reHitIndicatorScale: 2.5,            // Size multiplier for indicator circle
17493: 17405:  40:     reHitIndicatorColor: "rgba(255, 0, 255, 0.4)",  // Bright magenta with more opacity
17494: 17406:  41:     reHitIndicatorOutlineColor: "#FF00FF", // Solid magenta outline
17495: 17407:  42:     reHitBonusDuration: 1.2,             // Duration multiplier for re-hit jumps
17496: 17408:  43:     // Trick Physics Adjustments
17497: 17409:  44:     parachuteGravityFactor: 0.8,         // Gravity reduction during parachute
17498: 17410:  45:     airBrakeFrictionMultiplier: 0.85,    // Speed reduction during air brake
17499: 17411:  46:     // Camera and aiming
17500: 17412:  47:     basePOVAngle: 30,
17501: 17413:  48:     optimalOpticsPOVIncrease: 5,
17502: 17414:  49:     altitudeFlashMinSpeed: 200,
17503: 17415:  50:     altitudeFlashMaxSpeed: 10,
17504: 17416:  51:     altitudeGradientStart: "blue",
17505: 17417:  52:     altitudeGradientEnd: "red",
17506: 17418:  53:     // Photo scoring
17507: 17419:  54:     basePhotoValue: 50, // Base money earned from a photo
17508: 17420:  55:     altitudeMatchMultiplier: 2,
17509: 17421:  56:     centerPOVMultiplier: 1.5,
17510: 17422:  57:     fleeingAnimalMultiplier: 3,
17511: 17423:  58:     // Animal multipliers
17512: 17424:  59:     bearMultiplier: 1.5,
17513: 17425:  60:     birdMultiplier: 1,
17514: 17426:  61:     // House entry costs
17515: 17427:  62:     houseEntryLoanDeduction: 0.005, // 0.5% loan deduction when entering house
17516: 17428:  63:     // Underlying base values
17517: 17429:  64:     _sledMass: 1.0,
17518: 17430:  65:     _baseGravity: 0.1,
17519: 17431:  66:     _baseHorizontalAccel: 0.25,
17520: 17432:  67:     _baseFriction: 0.95,
17521: 17433:  68:     _baseMaxXVel: 3,
17522: 17434:  69:     _rocketSurgeryFactorPerLevel: 0.1,
17523: 17435:  70:     _optimalOpticsAccelFactorPerLevel: 0.02,
17524: 17436:  71:     _optimalOpticsFrictionFactorPerLevel: 0.005,
17525: 17437:  72:     _fancierFootwearUpSpeedPerLevel: 0.3,
17526: 17438:  73:     _baseUpSpeed: 2,
17527: 17439:  74:     _baseCollisionsAllowed: 3,
17528: 17440:  75:     _starterCash: 200, // Jacked up for testing
17529: 17441:  76:     _bounceImpulse: 3,  // New bounce impulse value
17530: 17442:  77:     // Trick system configuration
17531: 17443:  78:     _trickCooldown: 5000,          // Base cooldown per trick (5 sec)
17532: 17444:  79:     _trickTimeMultiplier: 1.0,     // Global trick duration multiplier
17533: 17445:  80:     _trickTimeAdder: 0,            // Global trick duration additive time
17534: 17446:  81:     _trickBaseDuration: 250,       // Base duration for tricks (ms)
17535: 17447:  82:     _trickRotationSpeed: 720,     // Degrees per second for helicopter tricks (3 full spins)
17536: 17448:  83:     _trickOffsetDistance: 40,      // Pixels to offset sled for air brake/parachute
17537: 17449:  84:     _trickMoneyBase: 50,           // Base money earned per trick
17538: 17450:  85:     _trickChainMultiplier: 1.5,    // Multiplier for chaining different tricks
17539: 17451:  86:     // Getters to apply tweakNob multiplier
17540: 17452:  87:     get sledMass() { return this._sledMass * this.tweakNob; },
17541: 17453:  88:     set sledMass(val) { this._sledMass = val; },
17542: 17454:  89:     get baseGravity() { return this._baseGravity * this.tweakNob; },
17543: 17455:  90:     set baseGravity(val) { this._baseGravity = val; },
17544: 17456:  91:     get baseHorizontalAccel() { return this._baseHorizontalAccel; },
17545: 17457:  92:     set baseHorizontalAccel(val) { this._baseHorizontalAccel = val; },
17546: 17458:  93:     get baseFriction() { return this._baseFriction; }, // * this.tweakNob
17547: 17459:  94:     set baseFriction(val) { this._baseFriction = val; },
17548: 17460:  95:     get baseMaxXVel() { return this._baseMaxXVel * this.tweakNob; },
17549: 17461:  96:     set baseMaxXVel(val) { this._baseMaxXVel = val; },
17550: 17462:  97:     get rocketSurgeryFactorPerLevel() { return this._rocketSurgeryFactorPerLevel * this.tweakNob; },
17551: 17463:  98:     set rocketSurgeryFactorPerLevel(val) { this._rocketSurgeryFactorPerLevel = val; },
17552: 17464:  99:     get optimalOpticsAccelFactorPerLevel() { return this._optimalOpticsAccelFactorPerLevel * this.tweakNob; },
17553: 17465: 100:     set optimalOpticsAccelFactorPerLevel(val) { this._optimalOpticsAccelFactorPerLevel = val; },
17554: 17466: 101:     get optimalOpticsFrictionFactorPerLevel() { return this._optimalOpticsFrictionFactorPerLevel * this.tweakNob; },
17555: 17467: 102:     set optimalOpticsFrictionFactorPerLevel(val) { this._optimalOpticsFrictionFactorPerLevel = val; },
17556: 17468: 103:     get fancierFootwearUpSpeedPerLevel() { return this._fancierFootwearUpSpeedPerLevel * this.tweakNob; },
17557: 17469: 104:     set fancierFootwearUpSpeedPerLevel(val) { this._fancierFootwearUpSpeedPerLevel = val; },
17558: 17470: 105:     get baseUpSpeed() { return this._baseUpSpeed * this.tweakNob; },
17559: 17471: 106:     set baseUpSpeed(val) { this._baseUpSpeed = val; },
17560: 17472: 107:     get baseCollisionsAllowed() { return this._baseCollisionsAllowed * this.tweakNob; },
17561: 17473: 108:     set baseCollisionsAllowed(val) { this._baseCollisionsAllowed = val; },
17562: 17474: 109:     get starterCash() { return this._starterCash * this.tweakNob; },
17563: 17475: 110:     set starterCash(val) { this._starterCash = val; },
17564: 17476: 111:     // New dynamic bounceImpulse getter/setter
17565: 17477: 112:     get bounceImpulse() { return this._bounceImpulse * this.tweakNob; },
17566: 17478: 113:     set bounceImpulse(val) { this._bounceImpulse = val; }
17567: 17479: 114: };
17568: 17480: 115: // New: function to compute max collisions
17569: 17481: 116: TWEAK.getMaxCollisions = function() {
17570: 17482: 117:     // Ensure playerUpgrades exists before accessing it
17571: 17483: 118:     return TWEAK.baseCollisionsAllowed + (typeof playerUpgrades !== "undefined" && playerUpgrades.sledDurability ? playerUpgrades.sledDurability : 0);
17572: 17484: 119: };
17573: 17485: ```````
17574: 17486: 
17575: 17487: ## File: !READ_FIRST-FILE_SUMMARY.txt
17576: 17488: ```````
17577: 17489:  1: ## JavaScript Files:
17578: 17490:  2: 
17579: 17491:  3: - **js/entities.js**: Manages collision detection, camera overlay rendering, and animal spawning/behavior mechanics, including drawing animal entities and handling animal fleeing behavior.
17580: 17492:  4: - **js/game.js**: Controls the core game loop and state transitions, including initializing gameplay, managing UI elements, and handling game start and loan payment logic.
17581: 17493:  5: - **js/input.js**: Handles global keyboard input tracking, including setting up event listeners for keydown and keyup events, and provides helper functions for checking key states.
17582: 17494:  6: - **js/mechanics.js**: Manages core gameplay mechanics such as loan repayment, jump and trick systems, collision detection, and movement handling for downhill and uphill phases.
17583: 17495:  7: - **js/player.js**: Defines the player object with all state variables, including position, velocity, camera angles, trick tracking, and jump state properties.
17584: 17496:  8: - **js/render.js**: Contains the rendering logic for drawing the player, terrain, floating texts, camera overlays, and animals. Manages visual effects like trick animations and the Re-Hit indicator.
17585: 17497:  9: - **js/upgrades.js**: Manages player and mountain upgrades, including upgrade costs, UI display logic, and purchase mechanics.
17586: 17498: 10: - **js/utils.js**: Provides utility functions and configurations, including game tweak parameters, audio functions, collision detection, mathematical helpers, and color interpolation utilities.
17587: 17499: 11: - **js/wildlifephotos.js**: Contains logic for the wildlife photography mini-game, including animal spawning, photo scoring, and managing animal behaviors like fleeing.
17588: 17500: 12: - **js/world.js**: Manages the generation of terrain and the awarding of money based on the player's distance traveled.
17589: 17501: 13: 
17590: 17502: 14: ## Project Files:
17591: 17503: 15: 
17592: 17504: 16: - **index.html**: Main HTML file linking JavaScript and CSS files, defines the game UI structure.
17593: 17505: 17: - **styles.css**: Contains the game's styling, including layout and visual styles for UI elements.
17594: 17506: 18: - **1.0_README.md**: Likely an initial readme or changelog document for version 1.0.
17595: 17507: 19: - **README.md**: Primary documentation file for the project, describing setup and usage instructions.
17596: 17508: 20: - **ROADMAP.md**: Outlines planned features and future development directions.
17597: 17509: 21: - **LICENSE.md**: Contains the licensing terms for the project.
17598: 17510: 22: - **.gitignore**: Specifies which files and directories should be ignored by version control.
17599: 17511: 23: - **todo.txt**: Simple text file listing tasks and development priorities.
17600: 17512: 24: - **!READ_FIRST-FILE_SUMMARY.txt**: Possibly an initial overview or summary of the project.
17601: 17513: ```````
17602: 17514: 
17603: 17515: ## File: docs/ROADMAP.md
17604: 17516: ```````markdown
17605: 17517:   1: # 📍 **SledHEAD Comprehensive Development Roadmap**
17606: 17518:   2: 
17607: 17519:   3: This document outlines the detailed path from the current implementation to the complete "1.0" version of **SledHEAD**, including the critical gameplay shift to an **Up-Then-Down** stamina-based mechanic.
17608: 17520:   4: 
17609: 17521:   5: ---
17610: 17522:   6: 
17611: 17523:   7: ## 🎯 **Core Concept**
17612: 17524:   8: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
17613: 17525:   9: 
17614: 17526:  10: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
17615: 17527:  11: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
17616: 17528:  12: 
17617: 17529:  13: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
17618: 17530:  14: 
17619: 17531:  15: ## 🎯 **Gameplay Loop Overview**
17620: 17532:  16: - Players start at the mountain's base, managing stamina as they climb upward.
17621: 17533:  17: - Strategic decision-making to sled down for rewards before stamina depletion.
17622: 17534:  18: - Higher altitudes host rare wildlife, higher rewards, and greater risks.
17623: 17535:  19: 
17624: 17536:  20: ---
17625: 17537:  21: 
17626: 17538:  22: ## 🌄 **Segmented Cylinder Wrapping (Layered Mountain Structure)**  
17627: 17539:  23: **Handling Horizontal Wrapping at Different Elevations**
17628: 17540:  24: 
17629: 17541:  25: To create the effect of a **finite mountain with wraparound sides**, SledHEAD uses a **layered cylindrical system** instead of a continuous cone. The mountain is divided into **stacked segments**, each with its own **fixed circumference** that gets **smaller as you go higher**. This allows for a **consistent wraparound mechanic** while keeping movement predictable.
17630: 17542:  26: 
17631: 17543:  27: ### 🏔️ **How It Works:**
17632: 17544:  28: - Each **layer** is a separate horizontal zone, like a **floating ring** around the mountain.  
17633: 17545:  29: - If a player **crosses the left or right boundary** of a layer, they seamlessly wrap around to the other side.  
17634: 17546:  30: - **Lower layers are wider**, giving more horizontal space.  
17635: 17547:  31: - **Upper layers are narrower**, meaning wraparound happens sooner.  
17636: 17548:  32: 
17637: 17549:  33: ### ⬆️⬇️ **Moving Between Layers**
17638: 17550:  34: When transitioning **between vertical segments**:
17639: 17551:  35: 1. If the player **moves downward** past the bottom boundary of a layer:
17640: 17552:  36:    - They **teleport to the top boundary** of the layer below.  
17641: 17553:  37:    - Their **horizontal position scales** based on the new circumference to maintain a proportional location.  
17642: 17554:  38:    
17643: 17555:  39:    ```pseudocode
17644: 17556:  40:    scale_factor = new_layer.circumference / old_layer.circumference
17645: 17557:  41:    x_new = x_old * scale_factor
17646: 17558:  42: 
17647: 17559:  43: 2. If the player **moves upward** past the top boundary of a layer:
17648: 17560:  44:    - They **appear at the bottom** of the next layer up with **their horizontal position **scaled.
17649: 17561:  45: 
17650: 17562:  46: ### 🏁 **Gameplay Implications**
17651: 17563:  47:    - Predictable & Manageable: Keeps wraparound and movement feeling natural while allowing for different gameplay per layer.
17652: 17564:  48: 
17653: 17565:  49: ### **Layer-Specific Challenges**:
17654: 17566:  50:    - Broader paths at lower levels = more open sledding.
17655: 17567:  51:    - Tighter paths at higher levels = more technical, precision-based gameplay.
17656: 17568:  52:    - Performance-Friendly: Each layer is an isolated map segment, simplifying collision checks and procedural generation.
17657: 17569:  53: 
17658: 17570:  54: ---
17659: 17571:  55: 
17660: 17572:  56: ## 🌄 **Light/Dark Gradient Altitude System**
17661: 17573:  57: 
17662: 17574:  58: - Introduce a dynamic visual gradient where snow and terrain visually shift, with the snow at higher altitudes lighter due to being cleaner, and the snow downhill from you appears darker (due to the dirt and debres that flows down hill). 🚀
17663: 17575:  59: - The gradient will provide a dynamic natural visual guide for players to intuitively gauge altitude and plan their climbs and descents. 🎯
17664: 17576:  60: 
17665: 17577:  61: ---
17666: 17578:  62: 
17667: 17579:  63: ## 🌎 **Procedural World & Persistence**
17668: 17580:  64: 
17669: 17581:  65: - The mountain remains consistent during a playthrough.  
17670: 17582:  66: - **New terrain is only generated when starting a new game.**  
17671: 17583:  67: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
17672: 17584:  68: - **Changes per run:**
17673: 17585:  69:   - Tourists & fans shift positions.  
17674: 17586:  70:   - Weather may change dynamically.  
17675: 17587:  71:   - Wildlife encounters vary.
17676: 17588:  72: 
17677: 17589:  73: ---
17678: 17590:  74: 
17679: 17591:  75: ## 🎢 Gameplay Loops
17680: 17592:  76: **Progression Goals:**  
17681: 17593:  77: - **Prototype:** Repay the cost of the mountain.  
17682: 17594:  78: - **Full Game:**  
17683: 17595:  79:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
17684: 17596:  80:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
17685: 17597:  81:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
17686: 17598:  82:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
17687: 17599:  83: ### **⬆️1️⃣ Uphill Phase: Climbing & Exploration**
17688: 17600:  84: #### 🚶 **Top-down adventure traversal with stamina management and exploration.**  
17689: 17601:  85: - **Goal:** Ascend to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
17690: 17602:  86: - **Stamina System:**  
17691: 17603:  87:   - Stamina drains when moving.  
17692: 17604:  88:   - Replenished by **food stands, resting points, or upgrades**.  
17693: 17605:  89: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
17694: 17606:  90:   - **Random animals appear every few seconds (TWEAK variable).**  
17695: 17607:  91:   - Animals either **stay still and will run if you get too close.** Eventually they will **wander off**.  
17696: 17608:  92:   - **Use the Left & Right Arrow Keys to aim the camera cone** around your character.  
17697: 17609:  93:   - **Align the altitude line (using the Up & Down Arrow Keys)** with the animal’s altitude for a perfect shot.  
17698: 17610:  94:   - **Photos earn money, with multipliers for:**  
17699: 17611:  95:     - Accuracy (center of POV cone).  
17700: 17612:  96:     - Altitude match precision.  
17701: 17613:  97:     - Moving vs. stationary targets (moving = 3x value).
17702: 17614:  98:     - Animal Rarity (more exotic animals the further up the mountain you are).
17703: 17615:  99: 
17704: 17616: 100: ### **⬇️2️⃣ Sledding Phase (Downhill)**
17705: 17617: 101: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
17706: 17618: 102: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
17707: 17619: 103: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
17708: 17620: 104: - **Obstacles:**
17709: 17621: 105:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
17710: 17622: 106:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
17711: 17623: 107:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
17712: 17624: 108: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
17713: 17625: 109: - **Time Trials:**  
17714: 17626: 110:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
17715: 17627: 111:   - **Your time between activators determines your bonus.**  
17716: 17628: 112:   - **Faster times = more money!**  
17717: 17629: 113:   - Not all runs are timed; only those where you activate a trial.
17718: 17630: 114: 
17719: 17631: 115: ### 🏠3️⃣ **Management Phase (House & Upgrades)**
17720: 17632: 116: 🏡 **Upgrade your gear, mountain, and social media presence.**  
17721: 17633: 117: - **Spend earned money on:**
17722: 17634: 118:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
17723: 17635: 119:   - **Sled Upgrades:** Speed, handling, trick potential.  
17724: 17636: 120:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
17725: 17637: 121: - **New Game Start:**  
17726: 17638: 122:   - Mountain **ONLY regenerates when starting a completely new game.**  
17727: 17639: 123:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
17728: 17640: 124:   - **Current seed is displayed at home.** 
17729: 17641: 125: 
17730: 17642: 126: ---
17731: 17643: 127: 
17732: 17644: 128: ## 🏡 **Tutorial Level: Childhood Memories on Grandpa’s Hill**  
17733: 17645: 129: **Learning the Basics in a Cozy, Story-Driven Introduction**
17734: 17646: 130: 
17735: 17647: 131: Before tackling the **massive procedural mountains** of SledHEAD, players start with a heartwarming **tutorial level**, set in a **quiet rural winter landscape**. This **flashback sequence** lets players experience sledding as a **young child**, learning the fundamental mechanics under the guidance of their **grandfather**.
17736: 17648: 132: 
17737: 17649: 133: ### 📜 **Narrative Setup**
17738: 17650: 134: The game opens on a **small, snow-covered hill** just outside a **cozy cabin**, where the protagonist—**a child version of themselves**—is spending time with their **grandfather** on a crisp winter afternoon. Grandpa is **wrapped up in a warm coat, standing at the base of the hill after sledding down himself**, watching proudly as the player **takes their maiden toboggan run, learning to sled**. The sky glows with the **soft oranges and purples of a winter sunset**, setting a nostalgic and peaceful mood.
17739: 17651: 135: 
17740: 17652: 136: Before long, Grandpa gives a gentle laugh:  
17741: 17653: 137: > **"Ahh, y'know, I used to be the best sledder on this hill... but these ol' legs don’t have the stamina they used to! You go on, get a few more runs in—I’ll watch and cheer ya on from here! And remember - the snow's always whiter above you, and dirtier below!"**  
17742: 17654: 138: 
17743: 17655: 139: With that, the tutorial **fully hands control to the player**, reinforcing the **stamina system** and setting up a meaningful reason to **manage energy wisely**.
17744: 17656: 140: 
17745: 17657: 141: ---
17746: 17658: 142: 
17747: 17659: 143: ## 🎮 **Tutorial Mechanics Introduced**
17748: 17660: 144: The tutorial unfolds organically through **simple, playful challenges**, without heavy UI elements. Players **learn by doing**, with Grandpa offering **gentle, supportive guidance**.
17749: 17661: 145: 
17750: 17662: 146: ### **⬆️ Walking Uphill (Basic Movement & Stamina)**
17751: 17663: 147: - Players move **uphill by walking**, learning that **whiter snow = uphill, darker snow = downhill**.  
17752: 17664: 148: - Moving uphill **drains stamina** gradually.  
17753: 17665: 149: - Grandpa occasionally calls out:
17754: 17666: 150:   > **"You’re strong, kid! But ya gotta pace yourself—harder climbs mean ya gotta rest up after!"**
17755: 17667: 151: 
17756: 17668: 152: ### **🛷 Sledding Downhill (Turning & Speed Control)**
17757: 17669: 153: - Players start **at the top of the small hill** and practice their **first sled run**.  
17758: 17670: 154: - **Turning left/right** is introduced, along with simple speed adjustments.  
17759: 17671: 155: - Grandpa **cheers when the player makes a smooth turn**:
17760: 17672: 156:   > **"Look at that! You’re a natural! Sleddin’s all about balance—lean just right and the hill will do the rest!"**
17761: 17673: 157: 
17762: 17674: 158: ### **🔄 Climbing & Repeating Runs**
17763: 17675: 159: - After a few runs, Grandpa suggests:
17764: 17676: 160:   > **"Why don’t ya take a few more runs? See if ya can get all the way to the bottom without wipin’ out!"**  
17765: 17677: 161: - The player is **free to keep practicing**, reinforcing that **sledding is about trial and improvement**.  
17766: 17678: 162: - The game subtly **introduces self-motivated play**, rewarding experimentation.
17767: 17679: 163: 
17768: 17680: 164: ### **🏁 Tutorial Completion**
17769: 17681: 165: - Once the player **feels confident**, a final sled run **transitions seamlessly into the present day**, cutting to the **modern protagonist** standing atop their massive new mountain.
17770: 17682: 166: - **Grandpa’s words echo**, setting the tone for the adventure ahead:
17771: 17683: 167:   > **"One day, you’ll take on bigger mountains than this… but no matter how high you go, never forget the joy of the ride."**  
17772: 17684: 168: - The camera pulls back, revealing the **full mountain**, and gameplay transitions into the **core SledHEAD experience**.
17773: 17685: 169: 
17774: 17686: 170: ---
17775: 17687: 171: 
17776: 17688: 172: ## ✨ **Why This Works**
17777: 17689: 173: - **Emotionally Engaging** – Connects the player to their childhood roots and motivation.  
17778: 17690: 174: - **Smooth Learning Curve** – Teaches fundamental mechanics **without forced tutorials**.  
17779: 17691: 175: - **Worldbuilding & Nostalgia** – Grandpa’s wisdom adds charm and meaning to the stamina system.  
17780: 17692: 176: - **Seamless Transition to Main Game** – Keeps momentum going without feeling like a "tutorial level."  
17781: 17693: 177: 
17782: 17694: 178: This opening ensures that **players feel connected to their journey**—from childhood sledding to **becoming a sledding legend**. 🎿🔥  
17783: 17695: 179: 
17784: 17696: 180: ---
17785: 17697: 181: 
17786: 17698: 182: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
17787: 17699: 183: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
17788: 17700: 184: 
17789: 17701: 185: 1. **☁️🪂 Parachute (Up, Down)**  
17790: 17702: 186:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
17791: 17703: 187:    **Pixel Art Representation:**  
17792: 17704: 188:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
17793: 17705: 189: 
17794: 17706: 190: 2. **🛑🎿 Air Brake (Up, Up)**  
17795: 17707: 191:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
17796: 17708: 192:    **Pixel Art Representation:**  
17797: 17709: 193:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
17798: 17710: 194: 
17799: 17711: 195: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
17800: 17712: 196:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
17801: 17713: 197:    **Pixel Art Representation:**  
17802: 17714: 198:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
17803: 17715: 199: 
17804: 17716: 200: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
17805: 17717: 201:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
17806: 17718: 202:    **Pixel Art Representation:**  
17807: 17719: 203:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
17808: 17720: 204: 
17809: 17721: 205: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
17810: 17722: 206:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
17811: 17723: 207:    **Pixel Art Representation:**  
17812: 17724: 208:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
17813: 17725: 209: 
17814: 17726: 210: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
17815: 17727: 211:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
17816: 17728: 212:    **Pixel Art Representation:**  
17817: 17729: 213:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
17818: 17730: 214: 
17819: 17731: 215: 7. **🦸‍♂️✨ Superman (Down, Down)**  
17820: 17732: 216:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
17821: 17733: 217:    **Pixel Art Representation:**  
17822: 17734: 218:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
17823: 17735: 219: 
17824: 17736: 220: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
17825: 17737: 221:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
17826: 17738: 222:    **Pixel Art Representation:**  
17827: 17739: 223:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
17828: 17740: 224: 
17829: 17741: 225: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
17830: 17742: 226:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
17831: 17743: 227:    **Pixel Art Representation:**  
17832: 17744: 228:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
17833: 17745: 229: 
17834: 17746: 230: 10. **👻🔥 Ghost Rider (Left, Right)**  
17835: 17747: 231:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
17836: 17748: 232:     **Pixel Art Representation:**  
17837: 17749: 233:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
17838: 17750: 234: 
17839: 17751: 235: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
17840: 17752: 236:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
17841: 17753: 237:     **Pixel Art Representation:**  
17842: 17754: 238:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
17843: 17755: 239: 
17844: 17756: 240: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
17845: 17757: 241:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
17846: 17758: 242:     **Pixel Art Representation:**  
17847: 17759: 243:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
17848: 17760: 244: 
17849: 17761: 245: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
17850: 17762: 246:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
17851: 17763: 247:     **Pixel Art Representation:**  
17852: 17764: 248:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
17853: 17765: 249: 
17854: 17766: 250: 14. **✨⬆️ Falling Star (Down, Up)**  
17855: 17767: 251:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
17856: 17768: 252:     **Pixel Art Representation:**  
17857: 17769: 253:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
17858: 17770: 254: 
17859: 17771: 255: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
17860: 17772: 256:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
17861: 17773: 257:     **Pixel Art Representation:**  
17862: 17774: 258:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
17863: 17775: 259: 
17864: 17776: 260: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
17865: 17777: 261:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
17866: 17778: 262:     **Pixel Art Representation:**  
17867: 17779: 263:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
17868: 17780: 264: 
17869: 17781: 265: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
17870: 17782: 266: 
17871: 17783: 267: ### **Hazards & Interactions:**
17872: 17784: 268: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
17873: 17785: 269: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
17874: 17786: 270: - **Ice Patches:** Reduce control and make turns trickier.
17875: 17787: 271: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
17876: 17788: 272: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
17877: 17789: 273: 
17878: 17790: 274: ---
17879: 17791: 275: 
17880: 17792: 276: ## 🔧 **Upgrade System**
17881: 17793: 277: 
17882: 17794: 278: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
17883: 17795: 279: | Upgrade                    | Effect                                             |
17884: 17796: 280: |----------------------------|----------------------------------------------------|
17885: 17797: 281: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
17886: 17798: 282: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
17887: 17799: 283: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
17888: 17800: 284: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
17889: 17801: 285: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
17890: 17802: 286: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
17891: 17803: 287: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
17892: 17804: 288: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
17893: 17805: 289: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
17894: 17806: 290: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
17895: 17807: 291: 
17896: 17808: 292: ### 🏔️ Mountain Upgrades (Resort Expansion)
17897: 17809: 293: | Upgrade                        | Effect                                                         |
17898: 17810: 294: |--------------------------------|----------------------------------------------------------------|
17899: 17811: 295: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
17900: 17812: 296: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
17901: 17813: 297: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
17902: 17814: 298: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
17903: 17815: 299: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
17904: 17816: 300: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
17905: 17817: 301: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
17906: 17818: 302: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
17907: 17819: 303: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
17908: 17820: 304: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
17909: 17821: 305: 
17910: 17822: 306: ---
17911: 17823: 307: 
17912: 17824: 308: ## 🎮 **Mini-Games in SledHEAD**
17913: 17825: 309: 
17914: 17826: 310: ### 1. **Animal Photography** 📸🐾
17915: 17827: 311: - **Objective:**  
17916: 17828: 312:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
17917: 17829: 313: - **Mechanics:**  
17918: 17830: 314:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
17919: 17831: 315:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
17920: 17832: 316:   - **Scoring Bonuses:**  
17921: 17833: 317:     - **Altitude Match Multiplier**  
17922: 17834: 318:     - **POV Centering Bonus**  
17923: 17835: 319:     - **Speed Capture Bonus**  
17924: 17836: 320: - **Upgrades:**  
17925: 17837: 321:   - **Optimal Optics:** Increases the camera’s POV cone.  
17926: 17838: 322:   - **Steady Hands:** Reduces camera sway.  
17927: 17839: 323:   - **Animal Baiting:** Increases rare animal appearance.
17928: 17840: 324: - **Special Events:**  
17929: 17841: 325:   - **Rare Animal Sightings** and **Storm Photography**.
17930: 17842: 326: - **Risk/Challenge:**  
17931: 17843: 327:   - **Repeat Photo Penalty** and aggressive animal disruptions.
17932: 17844: 328: 
17933: 17845: 329: ---
17934: 17846: 330: 
17935: 17847: 331: ### 2. **Fishing** 🎣🐟  
17936: 17848: 332: - **Objective:**  
17937: 17849: 333:   Catch fish using various techniques and bait types.
17938: 17850: 334: - **Mechanics:**  
17939: 17851: 335:   - Dynamic water simulation with varied fish behaviors.  
17940: 17852: 336:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
17941: 17853: 337:   - Legendary fish yield major rewards.
17942: 17854: 338: - **Upgrades:**  
17943: 17855: 339:   - Stronger fishing lines, advanced lures, and sonar detection.
17944: 17856: 340: - **Special Events:**  
17945: 17857: 341:   - Fishing tournaments and rare migration patterns.
17946: 17858: 342: - **Risk/Challenge:**  
17947: 17859: 343:   - Line snapping and predator interference.
17948: 17860: 344: 
17949: 17861: 345: ---
17950: 17862: 346: 
17951: 17863: 347: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
17952: 17864: 348: - **Objective:**  
17953: 17865: 349:   Unlock doors, safes, and hidden compartments.
17954: 17866: 350: - **Mechanics:**  
17955: 17867: 351:   - Use tools like **rakes, hooks, and tension wrenches**.  
17956: 17868: 352:   - Navigate traps such as alarms and rusted internals.
17957: 17869: 353: - **Upgrades:**  
17958: 17870: 354:   - High-quality picks, electronic bypass tools, and vibration sensors.
17959: 17871: 355: - **Special Events:**  
17960: 17872: 356:   - Timed heists and races with rival scavengers.
17961: 17873: 357: - **Risk/Challenge:**  
17962: 17874: 358:   - Unstable buildings and hazards that may alert authorities.
17963: 17875: 359: 
17964: 17876: 360: ---
17965: 17877: 361: 
17966: 17878: 362: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
17967: 17879: 363: - **Objective:**  
17968: 17880: 364:   Find buried treasure using maps, clues, and metal detectors.
17969: 17881: 365: - **Mechanics:**  
17970: 17882: 366:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
17971: 17883: 367:   - Digging requires stamina management and upgraded tools.
17972: 17884: 368: - **Upgrades:**  
17973: 17885: 369:   - Advanced metal detectors, excavation tools, and digging drones.
17974: 17886: 370: - **Special Events:**  
17975: 17887: 371:   - NPC treasure races and secret cache discoveries.
17976: 17888: 372: - **Risk/Challenge:**  
17977: 17889: 373:   - Booby traps, hostile environments, and law enforcement risks.
17978: 17890: 374: 
17979: 17891: 375: ---
17980: 17892: 376: 
17981: 17893: 377: ### 5. **Kite Flying** 🪁🌬️  
17982: 17894: 378: - **Objective:**  
17983: 17895: 379:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
17984: 17896: 380: - **Mechanics:**  
17985: 17897: 381:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
17986: 17898: 382:   - **Downhill:** Kites extend air time and grant special bonuses.
17987: 17899: 383: - **Upgrades:**  
17988: 17900: 384:   - **Glide Boost, Speed Stream, and Aero Control.**
17989: 17901: 385: - **Special Events:**  
17990: 17902: 386:   - **Storm Riding** with higher boosts but riskier winds.
17991: 17903: 387: - **Risk/Challenge:**  
17992: 17904: 388:   - Strong gusts may destabilize your kite.
17993: 17905: 389: 
17994: 17906: 390: ---
17995: 17907: 391: 
17996: 17908: 392: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
17997: 17909: 393: - **Objective:**  
17998: 17910: 394:   Search for valuable minerals, gems, and gold.
17999: 17911: 395: - **Mechanics:**  
18000: 17912: 396:   - Explore rivers, caves, and rock formations.  
18001: 17913: 397:   - **Panning:** Swirl water to separate gold.  
18002: 17914: 398:   - **Pickaxe Mining:** Break rocks for hidden gems.
18003: 17915: 399: - **Upgrades:**  
18004: 17916: 400:   - High-tech panning kits, seismic scanners, precision drills.
18005: 17917: 401: - **Special Events:**  
18006: 17918: 402:   - Gold rush hotspots, rare mineral finds, and cave-ins.
18007: 17919: 403: - **Risk/Challenge:**  
18008: 17920: 404:   - Unstable ground and rival prospectors.
18009: 17921: 405: 
18010: 17922: 406: ---
18011: 17923: 407: 
18012: 17924: 408: ### 7. **Cryptid Fossil Digging** 🦴🔍  
18013: 17925: 409: - **Objective:**  
18014: 17926: 410:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
18015: 17927: 411: - **Mechanics:**  
18016: 17928: 412:   - Use brushes, chisels, and excavation tools to reveal fossils.  
18017: 17929: 413:   - Transport fossils to the museum at the base of the first mountain.
18018: 17930: 414: - **Upgrades:**  
18019: 17931: 415:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
18020: 17932: 416: - **Special Events:**  
18021: 17933: 417:   - Competing paleontologists and hidden dig sites.
18022: 17934: 418: - **Risk/Challenge:**  
18023: 17935: 419:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
18024: 17936: 420: 
18025: 17937: 421: ---
18026: 17938: 422: 
18027: 17939: 423: ### 8. **Sled Tricking** 🛷✨  
18028: 17940: 424: - **Objective:**  
18029: 17941: 425:   Chain together aerial sled tricks to earn cash and boost fan engagement.
18030: 17942: 426: - **Mechanics:**  
18031: 17943: 427:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
18032: 17944: 428:   - Chain tricks for higher multipliers.
18033: 17945: 429: - **Upgrades:**  
18034: 17946: 430:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
18035: 17947: 431: - **Special Events:**  
18036: 17948: 432:   - Trick challenges and fan-requested stunt competitions.
18037: 17949: 433: - **Risk/Challenge:**  
18038: 17950: 434:   - Mistimed tricks can cause crashes and loss of earnings.
18039: 17951: 435: 
18040: 17952: 436: ---
18041: 17953: 437: 
18042: 17954: 438: ### 9. **Time Trial Racing** 🏁🛷  
18043: 17955: 439: - **Objective:**  
18044: 17956: 440:   Trigger time trial races by hitting gates while sledding for money rewards.
18045: 17957: 441: - **Mechanics:**  
18046: 17958: 442:   - Crossing a time trial gate starts a timer.  
18047: 17959: 443:   - The faster and further you go, the more money you earn.
18048: 17960: 444: - **Why It Fits:**  
18049: 17961: 445:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
18050: 17962: 446: 
18051: 17963: 447: ---
18052: 17964: 448: 
18053: 17965: 449: ### 10. **RC Motor Sled** ❄️🏎️  
18054: 17966: 450: - **Objective:**  
18055: 17967: 451:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
18056: 17968: 452: - **Mechanics:**  
18057: 17969: 453:   - Maneuver nimble RC sleds across frozen tundra.  
18058: 17970: 454:   - Nitro boosts and mid-air tricks enhance performance.  
18059: 17971: 455:   - Customization options include different sled bodies, engines, and handling upgrades.
18060: 17972: 456: - **Special Events:**  
18061: 17973: 457:   - Avalanche races, night rides, and hazard runs.
18062: 17974: 458: - **Risk/Challenge:**  
18063: 17975: 459:   - Limited battery life, high winds, and signal loss in deep snow.
18064: 17976: 460: 
18065: 17977: 461: ---
18066: 17978: 462: 
18067: 17979: 463: ### 11. **Sap Sugaring** 🍁🔥  
18068: 17980: 464: - **Objective:**  
18069: 17981: 465:   Tap into nature’s sweetest resource—maple syrup! Harvest sap from trees to create energy-restoring treats and valuable trade goods.  
18070: 17982: 466: - **Mechanics:**  
18071: 17983: 467:   - Start by tapping maple trees on the starter mountain.  
18072: 17984: 468:   - Explore new regions to discover exotic trees like the **Cinderwillow** on Volcano Mountain, producing rare and powerful saps.  
18073: 17985: 469:   - Upgrade your tapping tools and storage tanks to increase yield and quality.  
18074: 17986: 470: - **Upgrades:**  
18075: 17987: 471:   - **Precision Taps:** Extract sap faster with reduced waste.  
18076: 17988: 472:   - **Insulated Buckets:** Prevent spoilage and maximize collection.  
18077: 17989: 473:   - **Sap Refinery:** Process sap into premium syrup with added benefits.  
18078: 17990: 474: 
18079: 17991: 475: ---
18080: 17992: 476: 
18081: 17993: 477: ### 12. **Beekeeping** 🐝🍯  
18082: 17994: 478: - **Objective:**  
18083: 17995: 479:   Raise and breed bees to produce high-quality honey and wax, each offering unique benefits for sledding, income, and buffs.  
18084: 17996: 480: - **Mechanics:**  
18085: 17997: 481:   - Manage beehives and optimize honey production.  
18086: 17998: 482:   - Crossbreed bees to develop specialized traits.  
18087: 17999: 483:   - Explore forests to find and capture new queen bees.  
18088: 18000: 484:   - Maintain hive conditions to ensure steady honey and wax yields.  
18089: 18001: 485: - **Upgrades:**  
18090: 18002: 486:   - **Deluxe Hives:** Improve bee happiness and productivity.  
18091: 18003: 487:   - **Queen Breeding Chambers:** Unlock advanced genetic traits for custom honey effects.  
18092: 18004: 488:   - **Protective Suits & Smokers:** Handle bees safely and reduce swarm risks.  
18093: 18005: 489: - **Special Events:**  
18094: 18006: 490:   - **Swarm Rescues:** Save lost colonies for rare genetic lines.  
18095: 18007: 491:   - **Beekeeper Pete’s Challenges:** Complete tricky hive management tasks for rewards.  
18096: 18008: 492: 
18097: 18009: 493: ---
18098: 18010: 494: 
18099: 18011: 495: ## 🌆 **NPCs & Mountain Ecosystem**
18100: 18012: 496: A thriving **mountain resort** needs a mix of **essential services, skilled specialists, and quirky legends**. These NPCs **enhance gameplay, create dynamic events, and unlock hidden mechanics**.
18101: 18013: 497: 
18102: 18014: 498: ---
18103: 18015: 499: 
18104: 18016: 500: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
18105: 18017: 501: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
18106: 18018: 502: 
18107: 18019: 503: #### 🏂 **Sled Tech Steve**
18108: 18020: 504: - **Purpose:** Repairs damage, sells sled mods.
18109: 18021: 505: - **Example Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
18110: 18022: 506: - **Best Quote:** *"What’d ya do, run into a bear during a race? I can fix it… for a price."*
18111: 18023: 507: 
18112: 18024: 508: #### 🍔 **Food Vendor**
18113: 18025: 509: - **Purpose:** Sells food that provides **stamina buffs & temporary performance boosts**.
18114: 18026: 510: - **Example Menu:** **Hot cocoa (warmth boost), Protein bars (stamina regen), Energy drinks (speed burst).**
18115: 18027: 511: - **Best Quote:** *"You can't land tricks on an empty stomach!"*
18116: 18028: 512: 
18117: 18029: 513: #### 🎈 **Lift Operator Jay** *(kite enthusiast)*
18118: 18030: 514: - **Purpose:** Manages lifts, introduces **kite mechanics** for gliding shortcuts.
18119: 18031: 515: - **Example Unlocks:** **Kite rentals, lift season passes, wind path hints.**
18120: 18032: 516: - **Best Quote:** *"Ever thought about catching air... without your sled?"*
18121: 18033: 517: 
18122: 18034: 518: #### 🏨 **The Hotel Hostess**
18123: 18035: 519: - **Purpose:** Offers accommodations & **passive income based on popularity**.
18124: 18036: 520: - **Example Unlocks:** **Penthouse suites, reputation perks, tourism boosts.**
18125: 18037: 521: - **Best Quote:** *"The more people love this place, the more we all win."*
18126: 18038: 522: 
18127: 18039: 523: #### 🏪 **Convenience Store Owner Tilly**
18128: 18040: 524: - **Purpose:** Sells consumables, **prospecting gear**, and utility tools.
18129: 18041: 525: - **Example Stock:** **Batteries, flares, bait, shovels.**
18130: 18042: 526: - **Best Quote:** *"You never know when you’ll need an extra pack of hand warmers."*
18131: 18043: 527: 
18132: 18044: 528: #### 🏔️ **Resort Manager Montana Snow**
18133: 18045: 529: - **Purpose:** Oversees **mountain upgrades & expansion.**
18134: 18046: 530: - **Example Unlocks:** **New trails, safety patrols, winter festivals.**
18135: 18047: 531: - **Best Quote:** *"A bigger, better mountain keeps ‘em coming back!"*
18136: 18048: 532: 
18137: 18049: 533: ---
18138: 18050: 534: 
18139: 18051: 535: ### 🏆 **Trick & Racing-Oriented NPCs**
18140: 18052: 536: These **drive skill progression**—unlocking **better tricks, harder competitions, and high-stakes challenges**.
18141: 18053: 537: 
18142: 18054: 538: #### 📸 **Hype Photographer Darlene**
18143: 18055: 539: - **Purpose:** **Photo verification & bonus earnings** for sick tricks.
18144: 18056: 540: - **Example Unlocks:** **Sponsor deals, cinematic trick replays.**
18145: 18057: 541: - **Best Quote:** *"If it ain't on camera, did it even happen?"*
18146: 18058: 542: 
18147: 18059: 543: #### 🏅 **Stunt Organizer Whistler**
18148: 18060: 544: - **Purpose:** Hosts **extreme challenge events**—big air, freestyle sessions.
18149: 18061: 545: - **Example Unlocks:** **Timed trick courses, skydiving sled events.**
18150: 18062: 546: - **Best Quote:** *"I wanna see something so crazy I forget my own name!"*
18151: 18063: 547: 
18152: 18064: 548: #### 🏁 **Race Commissioner Cannon**
18153: 18065: 549: - **Purpose:** Runs **competitions & time trials**.
18154: 18066: 550: - **Example Unlocks:** **Speed sleds, racing circuits, timed event boards.**
18155: 18067: 551: - **Best Quote:** *"Fastest run gets the trophy—simple as that."*
18156: 18068: 552: 
18157: 18069: 553: #### 🏂 **Retired Pro Burton**
18158: 18070: 554: - **Purpose:** **Teaches advanced tricks & unlocks sledboarding**.
18159: 18071: 555: - **Example Unlocks:** **Sled-to-board transitions, trick combos.**
18160: 18072: 556: - **Best Quote:** *"Back in my day, we landed tricks with style. I can show ya how."*
18161: 18073: 557: 
18162: 18074: 558: ---
18163: 18075: 559: 
18164: 18076: 560: ### 🏔️ **World-Building & Exploration NPCs**
18165: 18077: 561: These **add depth, side quests, and hidden mechanics** to the world.
18166: 18078: 562: 
18167: 18079: 563: #### 🐾 **Wildlife Researcher**
18168: 18080: 564: - **Purpose:** Tracks **rare animal spawns, photographic missions, fishing spots.**
18169: 18081: 565: - **Example Unlocks:** **Bear sightings, falcon partner, eco-tourism quests.**
18170: 18082: 566: - **Best Quote:** *"You ever seen a snow leopard up close? Neither have I… yet."*
18171: 18083: 567: 
18172: 18084: 568: #### 🚑 **Sled Patrol Captain**
18173: 18085: 569: - **Purpose:** Leads **rescue missions & avalanche drills.**
18174: 18086: 570: - **Example Unlocks:** **Emergency sled deployment, survival training.**
18175: 18087: 571: - **Best Quote:** *"We save people, we don’t just watch ‘em wipe out."*
18176: 18088: 572: 
18177: 18089: 573: ---
18178: 18090: 574: 
18179: 18091: 575: ### 🎭 **Traveling & Recurring NPCs**
18180: 18092: 576: They **come and go**, bringing **special challenges, rare gear, and unpredictable encounters**.
18181: 18093: 577: 
18182: 18094: 578: #### 🔥 **Rival**
18183: 18095: 579: - **Purpose:** **Dynamic trick/time trial duels.**
18184: 18096: 580: - **Example Unlocks:** **Personalized callouts, grudge matches, rare sled decals.**
18185: 18097: 581: - **Best Quote:** *"You think you’re better than me? Prove it."*
18186: 18098: 582: 
18187: 18099: 583: #### 🎩 **Mysterious Merchant**
18188: 18100: 584: - **Purpose:** **Sells rare & high-risk tech**—limited stock, always random.
18189: 18101: 585: - **Example Stock:** **Prototype sled engines, cloaking wax, ghost sled.**
18190: 18102: 586: - **Best Quote:** *"I sell only to those who dare."*
18191: 18103: 587: 
18192: 18104: 588: #### 🔧 **Tinkerer**
18193: 18105: 589: - **Purpose:** **Experimental tech**—RC sleds, lock-picking, custom builds.
18194: 18106: 590: - **Example Unlocks:** **Remote sleds, grappling hooks, hacking upgrades.**
18195: 18107: 591: - **Best Quote:** *"You didn’t hear this from me, but I might’ve… *enhanced* a sled or two."*
18196: 18108: 592: 
18197: 18109: 593: ---
18198: 18110: 594: 
18199: 18111: 595: ### ❄️ **Legendary NPCs**
18200: 18112: 596: These are **mythic figures**, unlocking **wild game mechanics, hidden areas, and secret challenges**.
18201: 18113: 597: 
18202: 18114: 598: #### 🌨️ **Winter Shaman Bromley**
18203: 18115: 599: - **Purpose:** **Controls weather effects**—snowstorms, icy terrain, wind boosts.
18204: 18116: 600: - **Example Unlocks:** **Weather manipulation quests, legendary snowboards.**
18205: 18117: 601: - **Best Quote:** *"The mountain speaks… and I listen."*
18206: 18118: 602: 
18207: 18119: 603: #### 🐻 **Bear Whisperer Carrie**
18208: 18120: 604: - **Purpose:** Unlocks **bear-racing.**
18209: 18121: 605: - **Example Unlocks:** **Bear races, such as Time Trials and Elimination.**
18210: 18122: 606: - **Best Quote:** *"Bears don’t bite... if you know how to ask nicely."*
18211: 18123: 607: 
18212: 18124: 608: #### 🐝 **Beekeeper Pete**
18213: 18125: 609: - **Purpose:** Sells **beekeeping upgrades**.
18214: 18126: 610: - **Example Unlocks:** **Speed honey, frost-resistant sled wax.**
18215: 18127: 611: - **Best Quote:** *"Snow bees? Oh yeah, they’re real… and fast."*
18216: 18128: 612: 
18217: 18129: 613: #### ⏳ **The Time Traveler**
18218: 18130: 614: - **Purpose:** Unlocks **cryptid fossil digging & timeline anomalies.**
18219: 18131: 615: - **Example Unlocks:** **Ancient sleds, legendary trails, prehistoric snowboard challenges.**
18220: 18132: 616: - **Best Quote:** *"The past isn’t gone—it’s just buried under the snow."*
18221: 18133: 617: 
18222: 18134: 618: ---
18223: 18135: 619: 
18224: 18136: 620: ## 🎮 Enhanced Controls & UI Improvements
18225: 18137: 621: - Fully customizable control remapping
18226: 18138: 622: - Comprehensive tutorial and onboarding systems
18227: 18139: 623: - Improved HUD clarity (stamina, trick scoring, wildlife photography)
18228: 18140: 624: 
18229: 18141: 625: ---
18230: 18142: 626: 
18231: 18143: 627: ## 🏔️ **Mountain Themes & Progression**
18232: 18144: 628: 
18233: 18145: 629: ### Lava Mountain 🌋
18234: 18146: 630: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
18235: 18147: 631: - **Mechanics:**  
18236: 18148: 632:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
18237: 18149: 633:   - **Ash Clouds:** Temporarily block visibility.
18238: 18150: 634: - **Power-Up:** **Heat Shielding Sled Coating**  
18239: 18151: 635:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
18240: 18152: 636: 
18241: 18153: 637: ---
18242: 18154: 638: 
18243: 18155: 639: ### Space Mountain 🌌
18244: 18156: 640: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
18245: 18157: 641: - **Mechanics:**  
18246: 18158: 642:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
18247: 18159: 643:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
18248: 18160: 644: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
18249: 18161: 645:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
18250: 18162: 646: 
18251: 18163: 647: ---
18252: 18164: 648: 
18253: 18165: 649: ### Underwater Mountain 🌊
18254: 18166: 650: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
18255: 18167: 651: - **Mechanics:**  
18256: 18168: 652:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
18257: 18169: 653: - **Power-Up:** **Aqua-Lung Mittens**  
18258: 18170: 654:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
18259: 18171: 655: 
18260: 18172: 656: ---
18261: 18173: 657: 
18262: 18174: 658: ### Garbage Dump Glacier 🗑️❄️
18263: 18175: 659: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
18264: 18176: 660: - **Mechanics:**  
18265: 18177: 661:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
18266: 18178: 662: - **Power-Up:** **Slick Wax Spray**  
18267: 18179: 663:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
18268: 18180: 664: 
18269: 18181: 665: ---
18270: 18182: 666: 
18271: 18183: 667: ### Micro Mountain 🐜🌱
18272: 18184: 668: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
18273: 18185: 669: - **Mechanics:**  
18274: 18186: 670:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
18275: 18187: 671: - **Power-Up:** **Antigrav Wax**  
18276: 18188: 672:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
18277: 18189: 673: 
18278: 18190: 674: ---
18279: 18191: 675: 
18280: 18192: 676: ### Candy Cane Canyon 🍭
18281: 18193: 677: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
18282: 18194: 678: - **Mechanics:**  
18283: 18195: 679:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
18284: 18196: 680: - **Power-Up:** **Sweet-Tooth Coating**  
18285: 18197: 681:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
18286: 18198: 682: 
18287: 18199: 683: ---
18288: 18200: 684: 
18289: 18201: 685: ### Crystal Cave Cavern 🔮
18290: 18202: 686: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
18291: 18203: 687: - **Mechanics:**  
18292: 18204: 688:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
18293: 18205: 689: - **Power-Up:** **Crystal Clear Goggles**  
18294: 18206: 690:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
18295: 18207: 691: 
18296: 18208: 692: ---
18297: 18209: 693: 
18298: 18210: 694: ### Haunted Graveyard Hill 👻
18299: 18211: 695: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
18300: 18212: 696: - **Mechanics:**  
18301: 18213: 697:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
18302: 18214: 698: - **Power-Up:** **Spirit Lantern**  
18303: 18215: 699:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
18304: 18216: 700: 
18305: 18217: 701: ---
18306: 18218: 702: 
18307: 18219: 703: ### Sky Jellyfish Mountain ☁️🪼
18308: 18220: 704: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
18309: 18221: 705: - **Mechanics:**  
18310: 18222: 706:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
18311: 18223: 707: - **Power-Up:** **Stabilizer Sled Rails**  
18312: 18224: 708:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
18313: 18225: 709: 
18314: 18226: 710: ---
18315: 18227: 711: 
18316: 18228: 712: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
18317: 18229: 713: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
18318: 18230: 714: - **Mechanics:**  
18319: 18231: 715:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
18320: 18232: 716: - **Power-Up:** **Clockwork Treads**  
18321: 18233: 717:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
18322: 18234: 718: 
18323: 18235: 719: ---
18324: 18236: 720: 
18325: 18237: 721: ### Pyramid Peak 🐫🏜️
18326: 18238: 722: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
18327: 18239: 723: - **Mechanics:**  
18328: 18240: 724:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
18329: 18241: 725: - **Power-Up:** **Sandrunner Skis**  
18330: 18242: 726:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
18331: 18243: 727: 
18332: 18244: 728: ---
18333: 18245: 729: 
18334: 18246: 730: ### Digital Mountain (Cyber Slopes) 💻🔮
18335: 18247: 731: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
18336: 18248: 732: - **Mechanics:**  
18337: 18249: 733:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
18338: 18250: 734: - **Power-Up:** **Data Shielding**  
18339: 18251: 735:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
18340: 18252: 736: 
18341: 18253: 737: ---
18342: 18254: 738: 
18343: 18255: 739: 🔄 Infinite Upgrades with Soft Caps
18344: 18256: 740: ===================================
18345: 18257: 741: 
18346: 18258: 742: **Expanding Progression Without Breaking Balance**
18347: 18259: 743: 
18348: 18260: 744: Currently, upgrades in **SledHEAD** have **hard caps**, limiting how many times they can be purchased. While this provides structure, it **restricts long-term progression** and prevents **emergent playstyles** from evolving over multiple runs. To keep **each run fresh and engaging**, we're shifting to an **infinite upgrade system** with **diminishing returns** beyond a **soft cap** for
18349: 18261: 745: **Personal Upgrades**. **Mountain Upgrades** will
18350: 18262: 746: need to be rebought for each new mountain purchased, and
18351: 18263: 747: may or may not be infinite as appropriate to the upgrade.
18352: 18264: 748: 
18353: 18265: 749: 🎯 Proposed Solution
18354: 18266: 750: --------------------
18355: 18267: 751: 
18356: 18268: 752: -   **All upgrades become infinitely upgradable.**
18357: 18269: 753: -   Each upgrade **retains its effectiveness early on** but **scales down gradually** beyond a set level.
18358: 18270: 754: -   **Soft caps vary** depending on the upgrade type:
18359: 18271: 755:     -   **Speed upgrades** could start diminishing at **Level 10**.
18360: 18272: 756:     -   **Trick bonuses** could scale freely until **Level 20** before slowing down.
18361: 18273: 757: -   **Mathematical balancing** ensures that upgrades remain **meaningful** but **don't become overpowered**.
18362: 18274: 758: 
18363: 18275: 759: 📊 Scaling Formula: Exponential & Logarithmic Decay
18364: 18276: 760: ---------------------------------------------------
18365: 18277: 761: 
18366: 18278: 762: Instead of **linear scaling** (e.g., "+1 Speed per level"), we use **diminishing returns** to keep upgrades valuable without breaking balance.
18367: 18279: 763: 
18368: 18280: 764: ### ✏ Formula Example:
18369: 18281: 765: 
18370: 18282: 766: newValue = baseValue + (scalingFactor * sqrt(level))
18371: 18283: 767: 
18372: 18284: 768: -   **Early levels feel impactful**, allowing noticeable improvements.
18373: 18285: 769: -   **Later levels slow down naturally**, preventing infinite stacking from making players overpowered.
18374: 18286: 770: -   Works across **various upgrade types**, from **speed boosts to trick multipliers**.
18375: 18287: 771: 
18376: 18288: 772: 🔎 **Alternative Approach: Logarithmic Scaling**\
18377: 18289: 773: For upgrades that should scale *aggressively early on* but taper off smoothly:
18378: 18290: 774: 
18379: 18291: 775: newValue = baseValue * (1 + (scalingFactor * log(level + 1)))
18380: 18292: 776: 
18381: 18293: 777: -   Great for upgrades like **boost charge rates or sled handling**, where a **big early impact** makes sense but **total mastery should be gradual**.
18382: 18294: 778: 
18383: 18295: 779: ✅ Benefits of Infinite Upgrades with Soft Caps
18384: 18296: 780: ----------------------------------------------
18385: 18297: 781: 
18386: 18298: 782: ✔ **Keeps long-term progression engaging** -- No artificial "max level" bottleneck.\
18387: 18299: 783: ✔ **Encourages specialized strategies** -- Players can **focus on speed, tricks, or economy-based builds**.\
18388: 18300: 784: ✔ **Prevents upgrade obsolescence** -- Players **always have something meaningful to invest in**.\
18389: 18301: 785: ✔ **Maintains challenge balance** -- Runs become **progressively stronger**, but not infinitely easy.
18390: 18302: 786: 
18391: 18303: 787: 📌 Tasks & Implementation Plan
18392: 18304: 788: ------------------------------
18393: 18305: 789: 
18394: 18306: 790: -   [ ]  **Remove hard upgrade caps** for all current upgrades.
18395: 18307: 791: -   [ ]  **Implement soft cap mechanics** using **square root or logarithmic scaling**.
18396: 18308: 792: -   [ ]  **Fine-tune soft cap levels** for different upgrade categories (e.g., Speed vs. Trick Boosts).
18397: 18309: 793: -   [ ]  **Balance test progression** to ensure **long-term upgrades stay meaningful but not overpowered**.
18398: 18310: 794: 
18399: 18311: 795: This system ensures **players always have room to grow**, while keeping **SledHEAD's challenge intact**. 🚀🔥
18400: 18312: 796: 
18401: 18313: 797: ---
18402: 18314: 798: 
18403: 18315: 799: ## 🏆 Endgame & Prestige Content
18404: 18316: 800: - Prestige system for continued replayability
18405: 18317: 801: - Elite sled runs with intensified challenges
18406: 18318: 802: - Legendary animal photo hunts for ultimate rewards
18407: 18319: 803: 
18408: 18320: 804: ---
18409: 18321: 805: 
18410: 18322: 806: ## 📅 Development Milestones & Timeline
18411: 18323: 807: ### Short-Term:
18412: 18324: 808: - Implement stamina system, basic uphill-downhill gameplay
18413: 18325: 809: - Expand wildlife photography with rare animals at altitude
18414: 18326: 810: - Basic personal and mountain upgrades functionality
18415: 18327: 811: 
18416: 18328: 812: ### Mid-Term:
18417: 18329: 813: - Integrate the light/dark gradient altitude system to enhance visual depth and player navigation
18418: 18330: 814: - Introduce NPCs and interactive infrastructure
18419: 18331: 815: - Initial mini-games integration
18420: 18332: 816: 
18421: 18333: 817: ### Long-Term:
18422: 18334: 818: - Add mountain biomes and unique thematic mechanics
18423: 18335: 819: - Fully expand trick system
18424: 18336: 820: - Complete mini-games and endgame challenges
18425: 18337: 821: - Polish UI/UX and refine progression systems
18426: 18338: 822: 
18427: 18339: 823: ---
18428: 18340: 824: 
18429: 18341: 825: This comprehensive roadmap encapsulates all planned features and mechanics, clearly outlines the development trajectory, and integrates your newly defined gameplay mechanic. Use this as your foundational documentation moving forward to guide development clearly and effectively.
18430: 18342: ```````
18431: 18343: 
18432: 18344: ## File: js/stamina.js
18433: 18345: ```````javascript
18434: 18346:   1: // Global counter for stamina depletion re-entries
18435: 18347:   2: let reentryCount = 0;
18436: 18348:   3: // In stamina.js
18437: 18349:   4: class Stamina {
18438: 18350:   5:     constructor() {
18439: 18351:   6:       this.maxStamina = 100;
18440: 18352:   7:       this.currentStamina = this.maxStamina;
18441: 18353:   8:       this.staminaDrainWalking = 0.1;  // Drains steadily when walking uphill
18442: 18354:   9:       this.staminaDrainJumping = 2.0;    // Drains once on jump launch
18443: 18355:  10:       this.staminaDrainSledding = 0.01;  // Drains very slowly when sledding
18444: 18356:  11:       this.isVisible = false;
18445: 18357:  12:       this.jumpTriggered = false;        // Initialize jump flag
18446: 18358:  13:       this.previousState = null;         // Track previous game state
18447: 18359:  14:       this.lastLogTime = 0;              // Timestamp for throttling log messages
18448: 18360:  15:       this.canvas = document.createElement("canvas");
18449: 18361:  16:       this.ctx = this.canvas.getContext("2d");
18450: 18362:  17:       this.canvas.width = 200;
18451: 18363:  18:       this.canvas.height = 20;
18452: 18364:  19:       this.canvas.style.position = "fixed";
18453: 18365:  20:       this.canvas.style.top = "40px";
18454: 18366:  21:       this.canvas.style.left = "40px";
18455: 18367:  22:       this.canvas.style.zIndex = "1000";
18456: 18368:  23:       document.body.appendChild(this.canvas);
18457: 18369:  24:     }
18458: 18370:  25:     // New method to drain stamina on jump initiation
18459: 18371:  26:     drainJump() {
18460: 18372:  27:       if (!this.jumpTriggered) {
18461: 18373:  28:         this.currentStamina -= this.staminaDrainJumping;
18462: 18374:  29:         this.jumpTriggered = true;
18463: 18375:  30:         this.throttledLog("Jump drain: stamina reduced by " + this.staminaDrainJumping + " New stamina: " + this.currentStamina);
18464: 18376:  31:       }
18465: 18377:  32:     }
18466: 18378:  33:     // Reset jump flag (to be called on landing)
18467: 18379:  34:     resetJumpTrigger() {
18468: 18380:  35:       this.jumpTriggered = false;
18469: 18381:  36:       this.throttledLog("Jump trigger reset");
18470: 18382:  37:     }
18471: 18383:  38:     // Throttled logging function to limit messages to once per second
18472: 18384:  39:     throttledLog(message) {
18473: 18385:  40:       const currentTime = Date.now();
18474: 18386:  41:       if (currentTime - this.lastLogTime >= 1000) { // Only log once per second
18475: 18387:  42:         console.log(message);
18476: 18388:  43:         this.lastLogTime = currentTime;
18477: 18389:  44:       }
18478: 18390:  45:     }
18479: 18391:  46:     handleStaminaDepletion() {
18480: 18392:  47:         this.throttledLog("Stamina depleted - returning to house");
18481: 18393:  48:         // Move player to house
18482: 18394:  49:         changeState(window.GameState.HOUSE);
18483: 18395:  50:         // Refill stamina
18484: 18396:  51:         this.currentStamina = this.maxStamina;
18485: 18397:  52:         this.throttledLog("Stamina refilled to maximum");
18486: 18398:  53:         // Despawn all animals
18487: 18399:  54:         despawnAllAnimals();
18488: 18400:  55:         this.throttledLog("All animals despawned");
18489: 18401:  56:         // Calculate and charge re-entry fee
18490: 18402:  57:         const fee = 100 * (reentryCount + 1);
18491: 18403:  58:         player.money = Math.max(0, player.money - fee);
18492: 18404:  59:         this.throttledLog(`Charged re-entry fee: $${fee}`);
18493: 18405:  60:         // Increment re-entry counter
18494: 18406:  61:         reentryCount++;
18495: 18407:  62:         this.throttledLog(`Re-entry count increased to: ${reentryCount}`);
18496: 18408:  63:     }
18497: 18409:  64:     update() {
18498: 18410:  65:       // Check for entering house state (state transition)
18499: 18411:  66:       const enteringHouse = this.previousState !== window.GameState.HOUSE && window.currentState === window.GameState.HOUSE;
18500: 18412:  67:       // Only show stamina bar if the player is NOT at home
18501: 18413:  68:       this.isVisible = (window.currentState !== window.GameState.HOUSE);
18502: 18414:  69:       if (!this.isVisible) {
18503: 18415:  70:         if (enteringHouse) {
18504: 18416:  71:           this.currentStamina = this.maxStamina; // Reset stamina only when entering the house
18505: 18417:  72:           this.throttledLog("At home - resetting stamina");
18506: 18418:  73:         }
18507: 18419:  74:         this.canvas.style.display = "none";
18508: 18420:  75:         this.previousState = window.currentState; // Update previous state
18509: 18421:  76:         return;
18510: 18422:  77:       }
18511: 18423:  78:       this.canvas.style.display = "block";
18512: 18424:  79:       // Drain stamina when moving uphill
18513: 18425:  80:       if (window.currentState === window.GameState.UPHILL) {
18514: 18426:  81:         if (keysDown["w"] || keysDown["a"] || keysDown["s"] || keysDown["d"]) {
18515: 18427:  82:           this.currentStamina -= this.staminaDrainWalking;
18516: 18428:  83:           this.throttledLog("UPHILL movement: draining stamina by " + this.staminaDrainWalking + " Current stamina: " + this.currentStamina);
18517: 18429:  84:         }
18518: 18430:  85:       }
18519: 18431:  86:       // (No jump drain logic here now—it's moved to mechanics.js)
18520: 18432:  87:       // Drain stamina very slowly when sledding
18521: 18433:  88:       if (player.isSliding) {
18522: 18434:  89:         this.currentStamina -= this.staminaDrainSledding;
18523: 18435:  90:         this.throttledLog("Sledding: draining stamina by " + this.staminaDrainSledding + " Current stamina: " + this.currentStamina);
18524: 18436:  91:       }
18525: 18437:  92:       // Check for stamina depletion
18526: 18438:  93:       if (this.currentStamina <= 0 && window.currentState !== window.GameState.HOUSE) {
18527: 18439:  94:         this.handleStaminaDepletion();
18528: 18440:  95:       }
18529: 18441:  96:       // Clamp stamina value between 0 and max
18530: 18442:  97:       this.currentStamina = Math.max(0, Math.min(this.currentStamina, this.maxStamina));
18531: 18443:  98:       // Render the stamina bar
18532: 18444:  99:       this.render();
18533: 18445: 100:       // Update previous state
18534: 18446: 101:       this.previousState = window.currentState;
18535: 18447: 102:     }
18536: 18448: 103:     render() {
18537: 18449: 104:       this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
18538: 18450: 105:       // Determine stamina bar color based on stamina percentage
18539: 18451: 106:       let staminaRatio = this.currentStamina / this.maxStamina;
18540: 18452: 107:       let color = "#00FF00"; // Green (full stamina)
18541: 18453: 108:       if (staminaRatio < 0.5) color = "#FFA500"; // Orange (moderate stamina)
18542: 18454: 109:       if (staminaRatio < 0.2) color = "#FF0000"; // Red (critical stamina)
18543: 18455: 110:       // Draw the bar background
18544: 18456: 111:       this.ctx.fillStyle = "#333";
18545: 18457: 112:       this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
18546: 18458: 113:       // Draw the stamina portion
18547: 18459: 114:       this.ctx.fillStyle = color;
18548: 18460: 115:       this.ctx.fillRect(0, 0, this.canvas.width * staminaRatio, this.canvas.height);
18549: 18461: 116:     }
18550: 18462: 117:   }
18551: 18463: 118:   // Initialize stamina system
18552: 18464: 119:   const stamina = new Stamina();
18553: 18465: 120:   // Hook into the game's update loop
18554: 18466: 121:   function updateStamina() {
18555: 18467: 122:     stamina.update();
18556: 18468: 123:     requestAnimationFrame(updateStamina);
18557: 18469: 124:   }
18558: 18470: 125:   updateStamina();
18559: 18471: 126: // Make stamina available globally
18560: 18472: 127: window.stamina = stamina;
18561: 18473: ```````
18562: 18474: 
18563: 18475: ## File: js/wildlife.js
18564: 18476: ```````javascript
18565: 18477:   1: /* wildlife.js - Wildlife Simulation (Refactored with Spawning Biomes and Fallback)
18566: 18478:   2: // This file handles the overall wildlife simulation logic using a registration system.
18567: 18479:   3: // Each animal module (e.g., bear.js, bird.js, mountainlion.js) registers itself by calling registerAnimalType().
18568: 18480:   4: // Animals have a "spawningBiomes" property that defines in which biomes and mountain layers they spawn.
18569: 18481:   5: // If currentBiome is not defined or unrecognized, the system assumes every mountain is valid.
18570: 18482:   6: */
18571: 18483:   7: // Global registry for animal types
18572: 18484:   8: var animalRegistry = [];
18573: 18485:   9: // Function for animal modules to register themselves
18574: 18486:  10: function registerAnimalType(animalData) {
18575: 18487:  11:     animalRegistry.push(animalData);
18576: 18488:  12:     console.log("Registered animal type: " + animalData.type);
18577: 18489:  13: }
18578: 18490:  14: // Global variables for the animal system
18579: 18491:  15: var activeAnimal = null;
18580: 18492:  16: var animalStateCheckInterval = null;
18581: 18493:  17: // ------------------- Animal (Critter) Update Logic -------------------
18582: 18494:  18: function updateAnimal() {
18583: 18495:  19:   if (!activeAnimal) return;
18584: 18496:  20:   // Call custom update if provided
18585: 18497:  21:   if (activeAnimal.customUpdate && typeof activeAnimal.customUpdate === 'function') {
18586: 18498:  22:       activeAnimal.customUpdate(activeAnimal);
18587: 18499:  23:   }
18588: 18500:  24:   checkPlayerProximity();
18589: 18501:  25:   if (activeAnimal.state === "fleeing") {
18590: 18502:  26:     if (!activeAnimal.fleeingLogOnce) {
18591: 18503:  27:       console.log(`Animal fleeing - Type: ${activeAnimal.type}, Angle: ${activeAnimal.fleeAngleActual.toFixed(2)}°, Speed: ${activeAnimal.speed}`);
18592: 18504:  28:       activeAnimal.fleeingLogOnce = true;
18593: 18505:  29:     }
18594: 18506:  30:     let rad = activeAnimal.fleeAngleActual * Math.PI / 180;
18595: 18507:  31:     activeAnimal.x += Math.cos(rad) * activeAnimal.speed * 0.5;
18596: 18508:  32:     activeAnimal.y += Math.sin(rad) * activeAnimal.speed * 0.5;
18597: 18509:  33:     let dx = activeAnimal.x - player.x;
18598: 18510:  34:     let dy = activeAnimal.y - player.absY;
18599: 18511:  35:     let distance = Math.sqrt(dx * dx + dy * dy);
18600: 18512:  36:     if (distance > 1000 && !activeAnimal.despawnScheduled) {
18601: 18513:  37:       activeAnimal.despawnScheduled = true;
18602: 18514:  38:       console.log(`Animal is more than 1000 away. Scheduling despawn in 500ms.`);
18603: 18515:  39:       setTimeout(() => {
18604: 18516:  40:         if (activeAnimal) {
18605: 18517:  41:           console.log(`Animal despawned after 500ms out of range`);
18606: 18518:  42:           activeAnimal = null;
18607: 18519:  43:           spawnAnimal();
18608: 18520:  44:         }
18609: 18521:  45:       }, 5000);
18610: 18522:  46:     }
18611: 18523:  47:   } else if (activeAnimal.state === "sitting") {
18612: 18524:  48:     if (Math.random() < 0.0001) {
18613: 18525:  49:       console.log(`Animal (${activeAnimal.type}) spontaneously changing state from sitting to fleeing`);
18614: 18526:  50:       activeAnimal.state = "fleeing";
18615: 18527:  51:       activeAnimal.fleeingLogOnce = false;
18616: 18528:  52:     }
18617: 18529:  53:   }
18618: 18530:  54: }
18619: 18531:  55: function checkPlayerProximity() {
18620: 18532:  56:   if (!activeAnimal || activeAnimal.state === "fleeing") return;
18621: 18533:  57:   let dx = activeAnimal.x - player.x;
18622: 18534:  58:   let dy = activeAnimal.y - player.absY;
18623: 18535:  59:   let distanceSquared = dx * dx + dy * dy;
18624: 18536:  60:   if (distanceSquared < activeAnimal.detectionRadius * activeAnimal.detectionRadius) {
18625: 18537:  61:     console.log(`Player too close to animal (${Math.sqrt(distanceSquared).toFixed(1)} < ${activeAnimal.detectionRadius}) - animal fleeing`);
18626: 18538:  62:     activeAnimal.state = "fleeing";
18627: 18539:  63:     activeAnimal.fleeingLogOnce = false;
18628: 18540:  64:     activeAnimal.fleeAngleActual = Math.atan2(dy, dx) * (180 / Math.PI);
18629: 18541:  65:     activeAnimal.fleeAngleActual += (Math.random() - 0.5) * 30;
18630: 18542:  66:   }
18631: 18543:  67: }
18632: 18544:  68: // Spawn a new animal using the registered types, with biome filtering and fallback.
18633: 18545:  69: function spawnAnimal() {
18634: 18546:  70:   if (currentState !== GameState.UPHILL || activeAnimal !== null) return;
18635: 18547:  71:   // Define recognized mountain biomes.
18636: 18548:  72:   var recognizedBiomes = ["starterMountain", "spaceMountain", "volcanoMountain"];
18637: 18549:  73:   let availableAnimals;
18638: 18550:  74:   // If currentBiome is not defined or unrecognized, allow all animals.
18639: 18551:  75:   if (!currentBiome || recognizedBiomes.indexOf(currentBiome) === -1) {
18640: 18552:  76:       availableAnimals = animalRegistry;
18641: 18553:  77:   } else {
18642: 18554:  78:       availableAnimals = animalRegistry.filter(animal => {
18643: 18555:  79:           // If spawningBiomes is not specified, default to spawning only on the Starter Mountain.
18644: 18556:  80:           if (!animal.spawningBiomes || animal.spawningBiomes.length === 0) {
18645: 18557:  81:               return currentBiome === "starterMountain";
18646: 18558:  82:           }
18647: 18559:  83:           return animal.spawningBiomes.some(rule => {
18648: 18560:  84:               if (rule.biome !== currentBiome) return false;
18649: 18561:  85:               if (rule.layers && Array.isArray(rule.layers)) {
18650: 18562:  86:                   return rule.layers.includes(currentMountainLayer);
18651: 18563:  87:               }
18652: 18564:  88:               if (rule.layerRange && typeof rule.layerRange.min === 'number' && typeof rule.layerRange.max === 'number') {
18653: 18565:  89:                   return currentLayerPercent >= rule.layerRange.min && currentLayerPercent <= rule.layerRange.max;
18654: 18566:  90:               }
18655: 18567:  91:               return true;
18656: 18568:  92:           });
18657: 18569:  93:       });
18658: 18570:  94:   }
18659: 18571:  95:   if (availableAnimals.length === 0) {
18660: 18572:  96:       console.error("No animal types available for current biome and layer!");
18661: 18573:  97:       return;
18662: 18574:  98:   }
18663: 18575:  99:   let spawnX = (window.innerWidth * 0.1) + (Math.random() * window.innerWidth * 0.9);
18664: 18576: 100:   let spawnY = player.absY - (window.innerHeight / 2);
18665: 18577: 101:   let altitude = Math.floor(Math.random() * 100);
18666: 18578: 102:   let initialState = "sitting";
18667: 18579: 103:   let baseAngle = spawnX > window.innerWidth / 2 ?
18668: 18580: 104:                   Math.random() * (170 - 135) + 135 :
18669: 18581: 105:                   Math.random() * (55 - 20) + 20;
18670: 18582: 106:   let angleOffset = Math.random() * 15;
18671: 18583: 107:   let fleeAngleActual = baseAngle + (Math.random() < 0.5 ? -angleOffset : angleOffset);
18672: 18584: 108:   let totalWeight = availableAnimals.reduce((sum, animal) => sum + animal.spawnProbability, 0);
18673: 18585: 109:   let r = Math.random() * totalWeight;
18674: 18586: 110:   let chosenAnimalType = null;
18675: 18587: 111:   for (let animal of availableAnimals) {
18676: 18588: 112:     r -= animal.spawnProbability;
18677: 18589: 113:     if (r <= 0) {
18678: 18590: 114:       chosenAnimalType = animal;
18679: 18591: 115:       break;
18680: 18592: 116:     }
18681: 18593: 117:   }
18682: 18594: 118:   if (!chosenAnimalType) chosenAnimalType = availableAnimals[0];
18683: 18595: 119:   activeAnimal = {
18684: 18596: 120:     type: chosenAnimalType.type,
18685: 18597: 121:     x: spawnX,
18686: 18598: 122:     y: spawnY,
18687: 18599: 123:     width: chosenAnimalType.width,
18688: 18600: 124:     height: chosenAnimalType.height,
18689: 18601: 125:     state: initialState,
18690: 18602: 126:     speed: chosenAnimalType.speed,
18691: 18603: 127:     altitude: altitude,
18692: 18604: 128:     hasBeenPhotographed: false,
18693: 18605: 129:     detectionRadius: chosenAnimalType.detectionRadius,
18694: 18606: 130:     fleeAngleActual: fleeAngleActual,
18695: 18607: 131:     fleeingLogOnce: false,
18696: 18608: 132:     lastStateChange: Date.now(),
18697: 18609: 133:     stateChangeCount: 0,
18698: 18610: 134:     basePhotoBonus: chosenAnimalType.basePhotoBonus || 0,
18699: 18611: 135:     customUpdate: chosenAnimalType.customUpdate || null,
18700: 18612: 136:     customDraw: chosenAnimalType.customDraw || null,
18701: 18613: 137:   };
18702: 18614: 138:   console.log(`Spawned ${activeAnimal.type} at (${spawnX.toFixed(1)}, ${spawnY.toFixed(1)}), altitude: ${altitude}, state: ${initialState}, speed: ${activeAnimal.speed}, detectionRadius: ${activeAnimal.detectionRadius}`);
18703: 18615: 139:   if (!animalStateCheckInterval) {
18704: 18616: 140:     animalStateCheckInterval = setInterval(logAnimalState, 3000);
18705: 18617: 141:   }
18706: 18618: 142: }
18707: 18619: 143: function despawnAllAnimals() {
18708: 18620: 144:     activeAnimal = null;
18709: 18621: 145:     console.log('All animals despawned');
18710: 18622: 146: }
18711: 18623: 147: function logAnimalState() {
18712: 18624: 148:   if (!activeAnimal) {
18713: 18625: 149:     console.log("No active animal right now");
18714: 18626: 150:     clearInterval(animalStateCheckInterval);
18715: 18627: 151:     animalStateCheckInterval = null;
18716: 18628: 152:     return;
18717: 18629: 153:   }
18718: 18630: 154:   let playerDist = Math.sqrt(
18719: 18631: 155:     Math.pow(activeAnimal.x - player.x, 2) + 
18720: 18632: 156:     Math.pow(activeAnimal.y - player.absY, 2)
18721: 18633: 157:   );
18722: 18634: 158:   console.log(`Animal status: ${activeAnimal.type}, state: ${activeAnimal.state}, position: (${activeAnimal.x.toFixed(1)}, ${activeAnimal.y.toFixed(1)}), distance to player: ${playerDist.toFixed(1)}`);
18723: 18635: 159: }
18724: 18636: 160: function drawAnimal() {
18725: 18637: 161:   if (!activeAnimal || currentState !== GameState.UPHILL) return;
18726: 18638: 162:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
18727: 18639: 163:   let animalScreenY = activeAnimal.y - cameraOffset;
18728: 18640: 164:   if (activeAnimal.customDraw && typeof activeAnimal.customDraw === 'function') {
18729: 18641: 165:       activeAnimal.customDraw(activeAnimal, animalScreenY, ctx);
18730: 18642: 166:   } else {
18731: 18643: 167:       ctx.fillStyle = activeAnimal.color || "#888888";
18732: 18644: 168:       ctx.fillRect(
18733: 18645: 169:         activeAnimal.x - activeAnimal.width / 2,
18734: 18646: 170:         animalScreenY - activeAnimal.height / 2,
18735: 18647: 171:         activeAnimal.width,
18736: 18648: 172:         activeAnimal.height
18737: 18649: 173:       );
18738: 18650: 174:   }
18739: 18651: 175: }
18740: 18652: 176: window.registerAnimalType = registerAnimalType;
18741: 18653: 177: window.updateAnimal = updateAnimal;
18742: 18654: 178: window.spawnAnimal = spawnAnimal;
18743: 18655: 179: window.despawnAllAnimals = despawnAllAnimals;
18744: 18656: 180: window.drawAnimal = drawAnimal;
18745: 18657: ```````
18746: 18658: 
18747: 18659: ## File: todo.txt
18748: 18660: ```````
18749: 18661:  1: Feat: Swap from down-to-up to up-to-down.
18750: 18662:  2: 
18751: 18663:  3: Docs: Find some NPC to cover prospecting, treasure hunting, and rescue missions
18752: 18664:  4: 
18753: 18665:  5: Refactor: Refactor mechanics.js & utils.js
18754: 18666:  6: 
18755: 18667:  7: Refactor: Switch tricks from press to hold (so you choose if you do a 180 or a 1080)
18756: 18668:  8: (more advanced tricks can still be some sort of combo press)
18757: 18669:  9: 
18758: 18670: 10: Feat: Nerf jumping, buff ramps, attend leg day affects jump height
18759: 18671: ```````
18760: 18672: 
18761: 18673: ## File: js/downhill.js
18762: 18674: ```````javascript
18763: 18675:   1: /* downhill.js - Downhill Mechanics & Physics */
18764: 18676:   2: import {
18765: 18677:   3:   processTrick,
18766: 18678:   4:   checkTrickInputs,
18767: 18679:   5:   resetTrickState
18768: 18680:   6: } from './tricks.js';
18769: 18681:   7: // Update all downhill-specific physics and mechanics
18770: 18682:   8: function updateDownhill(deltaTime) {
18771: 18683:   9:   let rocketFactor = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.rocketSurgeryFactorPerLevel);
18772: 18684:  10:   let gravity = TWEAK.baseGravity * rocketFactor;
18773: 18685:  11:   let maxXVel = TWEAK.baseMaxXVel * (rocketFactor - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel));
18774: 18686:  12:   maxXVel = Math.max(0, maxXVel);
18775: 18687:  13:   let opticsFactor = 1 + (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsAccelFactorPerLevel);
18776: 18688:  14:   let horizontalAccel = TWEAK.baseHorizontalAccel * opticsFactor;
18777: 18689:  15:   let friction = TWEAK.baseFriction - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel);
18778: 18690:  16:   if (friction < 0.8) friction = 0.8;
18779: 18691:  17:   // Horizontal movement handling with bounds checking
18780: 18692:  18:   if (window.keysDown["a"]) { player.xVel -= horizontalAccel; }
18781: 18693:  19:   if (window.keysDown["d"]) { player.xVel += horizontalAccel; }
18782: 18694:  20:   player.xVel *= friction;
18783: 18695:  21:   player.xVel = clamp(player.xVel, -maxXVel, maxXVel);
18784: 18696:  22:   let newX = player.x + player.xVel;
18785: 18697:  23:   // Prevent going off screen horizontally
18786: 18698:  24:   player.x = clamp(newX, player.width/2, window.canvas.width - player.width/2);
18787: 18699:  25:   // --- Jump Input Handling ---
18788: 18700:  26:   // Immediate Mode:
18789: 18701:  27:   if (TWEAK.jumpType === "immediate") {
18790: 18702:  28:     if (window.keysDown[" "] && !player.isJumping && player.canJump) {
18791: 18703:  29:       player.isJumping = true;
18792: 18704:  30:       player.canJump = false;
18793: 18705:  31:       player.isCharging = false;
18794: 18706:  32:       let heightBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpHeightPerRocketSurgery);
18795: 18707:  33:       let timeBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpTimePerRocketSurgery);
18796: 18708:  34:       let heightIncrease = heightBonus - 1;
18797: 18709:  35:       let extraZoom = heightIncrease * TWEAK.jumpZoomPerHeightIncrease;
18798: 18710:  36:       player.jumpHeightFactor = heightBonus;
18799: 18711:  37:       player.jumpDuration = TWEAK.jumpBaseAscent * timeBonus;
18800: 18712:  38:       player.jumpZoomBonus = extraZoom;
18801: 18713:  39:       player.jumpTimer = 0;
18802: 18714:  40:       player.hasReachedJumpPeak = false;
18803: 18715:  41:       if (window.playerUpgrades.rocketSurgery > 0) {
18804: 18716:  42:         console.log(`Jump boosted by Rocket Surgery ${window.playerUpgrades.rocketSurgery}: Height x${heightBonus.toFixed(2)}, Time x${timeBonus.toFixed(2)}, Zoom +${(extraZoom*100).toFixed(0)}%`);
18805: 18717:  43:       }
18806: 18718:  44:       onPlayerJumpStart();
18807: 18719:  45:     }
18808: 18720:  46:   }
18809: 18721:  47:   // Charge Mode:
18810: 18722:  48:   else if (TWEAK.jumpType === "charge") {
18811: 18723:  49:     if (window.keysDown[" "] && !player.isJumping && !player.isCharging && player.canJump) {
18812: 18724:  50:       player.isCharging = true;
18813: 18725:  51:       player.canJump = false;
18814: 18726:  52:       player.jumpChargeTime = 0;
18815: 18727:  53:     }
18816: 18728:  54:     if (player.isCharging) {
18817: 18729:  55:       player.jumpChargeTime += deltaTime;
18818: 18730:  56:       if (!window.keysDown[" "]) {
18819: 18731:  57:         let chargeRatio = Math.min(1, player.jumpChargeTime / TWEAK.jumpMaxHoldTime);
18820: 18732:  58:         player.isCharging = false;
18821: 18733:  59:         player.isJumping = true;
18822: 18734:  60:         player.jumpHeightFactor = chargeRatio;
18823: 18735:  61:         player.jumpDuration = 500 + 500 * chargeRatio;
18824: 18736:  62:         player.jumpTimer = 0;
18825: 18737:  63:         player.hasReachedJumpPeak = false;
18826: 18738:  64:         onPlayerJumpStart();
18827: 18739:  65:       } else if (player.jumpChargeTime >= TWEAK.jumpMaxHoldTime) {
18828: 18740:  66:         player.isCharging = false;
18829: 18741:  67:         player.isJumping = true;
18830: 18742:  68:         player.jumpHeightFactor = 1;
18831: 18743:  69:         player.jumpDuration = 1000;
18832: 18744:  70:         player.jumpTimer = 0;
18833: 18745:  71:         player.hasReachedJumpPeak = false;
18834: 18746:  72:         onPlayerJumpStart();
18835: 18747:  73:       }
18836: 18748:  74:     }
18837: 18749:  75:   }
18838: 18750:  76:   // Jump Animation & Trick Handling:
18839: 18751:  77:   if (player.isJumping) {
18840: 18752:  78:     player.jumpTimer += deltaTime;
18841: 18753:  79:     let progress = player.jumpTimer / player.jumpDuration;
18842: 18754:  80:     // Re-hit window handling:
18843: 18755:  81:     if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
18844: 18756:  82:       if (window.keysDown[" "] && !player.reHitActivated && !player.isCharging) {
18845: 18757:  83:         console.log("Re-hit jump activated!");
18846: 18758:  84:         player.reHitActivated = true;
18847: 18759:  85:         player.jumpTimer = 0;
18848: 18760:  86:         player.jumpDuration *= TWEAK.reHitBonusDuration;
18849: 18761:  87:         player.jumpHeightFactor = 1;
18850: 18762:  88:         playTone(600, "sine", 0.1, 0.3);
18851: 18763:  89:         return;
18852: 18764:  90:       }
18853: 18765:  91:     }
18854: 18766:  92:     if (player.isJumping && jumpOsc) {
18855: 18767:  93:       let f_start = 300, f_peak = 800, f_end = 300, freq;
18856: 18768:  94:       if (progress < 0.5) {
18857: 18769:  95:         let t = progress / 0.5;
18858: 18770:  96:         freq = f_start + (f_peak - f_start) * (t * t);
18859: 18771:  97:       } else {
18860: 18772:  98:         let t = (progress - 0.5) / 0.5;
18861: 18773:  99:         freq = f_peak - (f_peak - f_end) * (t * t);
18862: 18774: 100:       }
18863: 18775: 101:       jumpOsc.frequency.setValueAtTime(freq, audioCtx.currentTime);
18864: 18776: 102:     }
18865: 18777: 103:     // Check for trick inputs and process any active tricks
18866: 18778: 104:     checkTrickInputs();
18867: 18779: 105:     processTrick(deltaTime);
18868: 18780: 106:     if (!player.hasReachedJumpPeak && progress >= 0.5) {
18869: 18781: 107:       player.hasReachedJumpPeak = true;
18870: 18782: 108:       onPlayerJumpPeak();
18871: 18783: 109:     }
18872: 18784: 110:     if (progress >= 1) {
18873: 18785: 111:       // End jump: reset jump/trick state and restore scale
18874: 18786: 112:       player.isJumping = false;
18875: 18787: 113:       player.jumpTimer = 0;
18876: 18788: 114:       player.hasReachedJumpPeak = false;
18877: 18789: 115:       resetTrickState();
18878: 18790: 116:       player.width = player.baseWidth;
18879: 18791: 117:       player.height = player.baseHeight;
18880: 18792: 118:       onPlayerLand();
18881: 18793: 119:       // Check for landing collisions
18882: 18794: 120:       for (let i = 0; i < terrain.length; i++) {
18883: 18795: 121:         let obstacle = terrain[i];
18884: 18796: 122:         if (checkCollision(
18885: 18797: 123:             player.x - player.width / 2, player.absY - player.height / 2,
18886: 18798: 124:             player.width, player.height,
18887: 18799: 125:             obstacle.x, obstacle.y,
18888: 18800: 126:             obstacle.width, obstacle.height
18889: 18801: 127:         )) {
18890: 18802: 128:           console.log("Collision on landing.");
18891: 18803: 129:           player.velocityY = -TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
18892: 18804: 130:           player.absY -= TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
18893: 18805: 131:           player.collisions++;
18894: 18806: 132:           terrain.splice(i, 1);
18895: 18807: 133:           if (player.collisions >= TWEAK.getMaxCollisions()) {
18896: 18808: 134:             console.log("Max collisions reached.");
18897: 18809: 135:             player.sledDamaged = 1; // Mark sled as damaged
18898: 18810: 136:             console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
18899: 18811: 137:             playCrashSound();
18900: 18812: 138:             changeState(GameState.UPHILL);
18901: 18813: 139:             return;
18902: 18814: 140:           } else {
18903: 18815: 141:             playRockHitSound();
18904: 18816: 142:           }
18905: 18817: 143:           break;
18906: 18818: 144:         }
18907: 18819: 145:       }
18908: 18820: 146:     } else {
18909: 18821: 147:       // Scale player sprite for jump arc effect
18910: 18822: 148:       let baseScale = TWEAK.jumpPeakScale + player.jumpZoomBonus;
18911: 18823: 149:       let scale = 1 + (baseScale - 1) * Math.sin(Math.PI * progress) * player.jumpHeightFactor;
18912: 18824: 150:       player.width = player.baseWidth * scale;
18913: 18825: 151:       player.height = player.baseHeight * scale;
18914: 18826: 152:     }
18915: 18827: 153:   }
18916: 18828: 154:   // Allow jump restart when space is released
18917: 18829: 155:   if (!window.keysDown[" "]) {
18918: 18830: 156:     player.canJump = true;
18919: 18831: 157:   }
18920: 18832: 158:   // Normal downhill physics & collision handling (skip during jump)
18921: 18833: 159:   let prevAbsY = player.absY;
18922: 18834: 160:   if (!player.isJumping) {
18923: 18835: 161:     for (let i = 0; i < terrain.length; i++) {
18924: 18836: 162:       let obstacle = terrain[i];
18925: 18837: 163:       if (checkCollision(
18926: 18838: 164:           player.x - player.width / 2, player.absY - player.height / 2,
18927: 18839: 165:           player.width, player.height,
18928: 18840: 166:           obstacle.x, obstacle.y,
18929: 18841: 167:           obstacle.width, obstacle.height
18930: 18842: 168:       )) {
18931: 18843: 169:         console.log("Collision on downhill.");
18932: 18844: 170:         player.velocityY = -TWEAK.bounceImpulse;
18933: 18845: 171:         player.absY = prevAbsY - TWEAK.bounceImpulse;
18934: 18846: 172:         player.collisions++;
18935: 18847: 173:         terrain.splice(i, 1);
18936: 18848: 174:         if (player.collisions >= TWEAK.getMaxCollisions()) {
18937: 18849: 175:           console.log("Max collisions reached. Ending run.");
18938: 18850: 176:           player.sledDamaged = 1; // Mark sled as damaged
18939: 18851: 177:           console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
18940: 18852: 178:           awardMoney();
18941: 18853: 179:           playCrashSound();
18942: 18854: 180:           changeState(GameState.UPHILL);
18943: 18855: 181:           return;
18944: 18856: 182:         } else {
18945: 18857: 183:           playRockHitSound();
18946: 18858: 184:         }
18947: 18859: 185:       }
18948: 18860: 186:     }
18949: 18861: 187:   }
18950: 18862: 188:   player.velocityY += player.isJumping ? TWEAK.baseGravity : gravity;
18951: 18863: 189:   player.absY += player.velocityY;
18952: 18864: 190:   updateLiveMoney();
18953: 18865: 191:   // Check for transition to UPHILL mode near bottom
18954: 18866: 192:   if (player.absY >= mountainHeight - (player.height * 4)) {
18955: 18867: 193:     player.absY = mountainHeight - (player.height * 4);
18956: 18868: 194:     player.velocityY = 0;
18957: 18869: 195:     console.log("Reached transition point. Switching to uphill mode.");
18958: 18870: 196:     // Fix for jumping transition - handle jump state before changing modes
18959: 18871: 197:     if (player.isJumping) {
18960: 18872: 198:       // Smoothly reset jump zoom and finalize landing
18961: 18873: 199:       lerpJumpZoomToZero(() => {
18962: 18874: 200:         onPlayerJumpLand(); // handles trick cleanup, sound, etc.
18963: 18875: 201:       });
18964: 18876: 202:     }
18965: 18877: 203:     changeState(GameState.UPHILL);
18966: 18878: 204:     return;
18967: 18879: 205:   }
18968: 18880: 206:   // Check for actual bottom
18969: 18881: 207:   if (player.absY >= mountainHeight) {
18970: 18882: 208:     player.absY = mountainHeight;
18971: 18883: 209:     console.log("Reached bottom. Returning to house.");
18972: 18884: 210:     awardMoney();
18973: 18885: 211:     changeState(GameState.HOUSE);
18974: 18886: 212:   }
18975: 18887: 213: }
18976: 18888: 214: // Helper function for smooth jump transition
18977: 18889: 215: function lerpJumpZoomToZero(callback) {
18978: 18890: 216:   const startZoom = player.jumpZoomBonus;
18979: 18891: 217:   const duration = 250; // ms
18980: 18892: 218:   const startTime = performance.now();
18981: 18893: 219:   function animate(time) {
18982: 18894: 220:     const elapsed = time - startTime;
18983: 18895: 221:     const t = Math.min(1, elapsed / duration);
18984: 18896: 222:     player.jumpZoomBonus = startZoom * (1 - t);
18985: 18897: 223:     if (t < 1) {
18986: 18898: 224:       requestAnimationFrame(animate);
18987: 18899: 225:     } else {
18988: 18900: 226:       player.jumpZoomBonus = 0;
18989: 18901: 227:       player.isJumping = false;
18990: 18902: 228:       player.jumpTimer = 0;
18991: 18903: 229:       player.hasReachedJumpPeak = false;
18992: 18904: 230:       resetTrickState();
18993: 18905: 231:       player.width = player.baseWidth;
18994: 18906: 232:       player.height = player.baseHeight;
18995: 18907: 233:       if (callback) callback();
18996: 18908: 234:     }
18997: 18909: 235:   }
18998: 18910: 236:   requestAnimationFrame(animate);
18999: 18911: 237: }
19000: 18912: 238: // Make functions available globally
19001: 18913: 239: window.updateDownhill = updateDownhill;
19002: 18914: 240: window.lerpJumpZoomToZero = lerpJumpZoomToZero;
19003: 18915: 241: // Export necessary functions for module imports
19004: 18916: 242: export { updateDownhill, lerpJumpZoomToZero };
19005: 18917: ```````
19006: 18918: 
19007: 18919: ## File: js/player.js
19008: 18920: ```````javascript
19009: 18921:  1: /* player.js */
19010: 18922:  2: let player = {
19011: 18923:  3:   x: window.canvas.width / 2,  // Use global canvas reference
19012: 18924:  4:   absY: 0,
19013: 18925:  5:   width: 20,
19014: 18926:  6:   height: 20,
19015: 18927:  7:   velocityY: 0,
19016: 18928:  8:   xVel: 0,
19017: 18929:  9:   collisions: 0,
19018: 18930: 10:   bestTime: Infinity,
19019: 18931: 11:   money: 200, // Default initial value instead of directly accessing TWEAK.starterCash
19020: 18932: 12:   sledDamaged: 0,  // Track if sled is damaged: 0 = not damaged, >0 = damaged
19021: 18933: 13:   // Camera aim properties
19022: 18934: 14:   cameraAngle: 270,  // Camera rotation in degrees
19023: 18935: 15:   altitudeLine: 50,  // Starts at 50% of the view range
19024: 18936: 16:   // Trick system properties
19025: 18937: 17:   currentTrick: null,        // Currently active trick
19026: 18938: 18:   trickTimer: 0,            // Time elapsed in current trick
19027: 18939: 19:   trickRotation: 0,         // Current rotation angle for helicopter tricks
19028: 18940: 20:   trickOffset: 0,           // Current offset for air brake/parachute
19029: 18941: 21:   lastTrick: null,          // Last completed trick for chain tracking
19030: 18942: 22:   trickChainCount: 0,       // Number of different tricks chained
19031: 18943: 23:   trickCooldowns: {         // Individual cooldown timers for each trick
19032: 18944: 24:     leftHelicopter: 0,
19033: 18945: 25:     rightHelicopter: 0,
19034: 18946: 26:     airBrake: 0,
19035: 18947: 27:     parachute: 0
19036: 18948: 28:   },
19037: 18949: 29:   // *** NEW: Jump State Properties ***
19038: 18950: 30:   isJumping: false,          // Are we in a jump?
19039: 18951: 31:   isCharging: false,         // For "charge" mode to accumulate jump time
19040: 18952: 32:   canJump: true,             // Ensures jump is triggered only once per key press
19041: 18953: 33:   reHitActivated: false,     // Prevents multiple re-hits during one key press
19042: 18954: 34:   jumpTimer: 0,              // Elapsed time since jump started (ms)
19043: 18955: 35:   jumpDuration: 0,           // Total duration of the jump (ascent + descent)
19044: 18956: 36:   jumpChargeTime: 0,         // Accumulated hold time for charge mode
19045: 18957: 37:   hasReachedJumpPeak: false, // Flag to trigger the peak hook only once per jump
19046: 18958: 38:   jumpHeightFactor: 0,       // Height multiplier from Rocket Surgery (1.0 = normal)
19047: 18959: 39:   jumpZoomBonus: 0,         // Extra zoom from increased jump height
19048: 18960: 40:   baseWidth: 20,             // Original sprite width (for scaling)
19049: 18961: 41:   baseHeight: 20             // Original sprite height (for scaling)
19050: 18962: 42: };
19051: 18963: 43: // Initialize player money from TWEAK settings once they're available
19052: 18964: 44: function initializePlayerMoney() {
19053: 18965: 45:   if (window.TWEAK && typeof window.TWEAK.starterCash !== 'undefined') {
19054: 18966: 46:     player.money = window.TWEAK.starterCash;
19055: 18967: 47:     console.log("Player money initialized to:", player.money);
19056: 18968: 48:   }
19057: 18969: 49: }
19058: 18970: 50: // Call this function after TWEAK is initialized (e.g., from game.js)
19059: 18971: 51: window.initializePlayerMoney = initializePlayerMoney;
19060: 18972: ```````
19061: 18973: 
19062: 18974: ## File: .gitignore
19063: 18975: ```````
19064: 18976: 1: repomix-output.txt
19065: 18977: 2: repomix-output.txt.xml
19066: 18978: 3: .repomix/bundles.json
19067: 18979: 4: OLD Codebase.xml
19068: 18980: 5: repomix-output.txt.md
19069: 18981: 6: complete-condensed-codebase-for-reference.md
19070: 18982: ```````
19071: 18983: 
19072: 18984: ## File: js/entities.js
19073: 18985: ```````javascript
19074: 18986:   1: /* entities.js - Pruned version to avoid overlap with wildlifephotos.js */
19075: 18987:   2: // Resolves collisions between the player and obstacles.
19076: 18988:   3: function resolveCollision(player, obstacle) {
19077: 18989:   4:   let playerCenterX = player.x;
19078: 18990:   5:   let playerCenterY = player.absY;
19079: 18991:   6:   let obstacleCenterX = obstacle.x + obstacle.width / 2;
19080: 18992:   7:   let obstacleCenterY = obstacle.y + obstacle.height / 2;
19081: 18993:   8:   let halfWidthPlayer = player.width / 2;
19082: 18994:   9:   let halfWidthObstacle = obstacle.width / 2;
19083: 18995:  10:   let halfHeightPlayer = player.height / 2;
19084: 18996:  11:   let halfHeightObstacle = obstacle.height / 2;
19085: 18997:  12:   let dx = playerCenterX - obstacleCenterX;
19086: 18998:  13:   let dy = playerCenterY - obstacleCenterY;
19087: 18999:  14:   let overlapX = halfWidthPlayer + halfWidthObstacle - Math.abs(dx);
19088: 19000:  15:   let overlapY = halfHeightPlayer + halfHeightObstacle - Math.abs(dy);
19089: 19001:  16:   if (overlapX < 0 || overlapY < 0) return;
19090: 19002:  17:   if (overlapX < overlapY) {
19091: 19003:  18:     if (dx > 0) {
19092: 19004:  19:       player.x += overlapX * 0.3;
19093: 19005:  20:     } else {
19094: 19006:  21:       player.x -= overlapX * 0.3;
19095: 19007:  22:     }
19096: 19008:  23:   } else {
19097: 19009:  24:     if (dy > 0) {
19098: 19010:  25:       player.absY += overlapY * 0.3;
19099: 19011:  26:     } else {
19100: 19012:  27:       player.absY -= overlapY * 0.3;
19101: 19013:  28:     }
19102: 19014:  29:   }
19103: 19015:  30: }
19104: 19016:  31: // Draws the camera overlay with the POV cone and a steady altitude line.
19105: 19017:  32: function drawCameraOverlay() {
19106: 19018:  33:   // Only display the overlay when in UPHILL mode.
19107: 19019:  34:   if (window.currentState !== window.GameState.UPHILL) return;
19108: 19020:  35:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
19109: 19021:  36:   let centerX = player.x;
19110: 19022:  37:   let centerY = player.absY - cameraOffset;
19111: 19023:  38:   let coneLength = 300; // Length of the camera cone
19112: 19024:  39:   // Draw the camera POV Cone.
19113: 19025:  40:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
19114: 19026:  41:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
19115: 19027:  42:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
19116: 19028:  43:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
19117: 19029:  44:   ctx.beginPath();
19118: 19030:  45:   ctx.moveTo(centerX, centerY);
19119: 19031:  46:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
19120: 19032:  47:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
19121: 19033:  48:   ctx.closePath();
19122: 19034:  49:   ctx.fill();
19123: 19035:  50:   // Draw the altitude line.
19124: 19036:  51:   // Map altitudeLine [0,100] to an offset along the camera's central axis:
19125: 19037:  52:   // 0 aligns with the player sprite’s bottom, 100 with its top.
19126: 19038:  53:   let offsetTop = ((coneLength / 2) + player.height);
19127: 19039:  54:   let offsetBottom = player.height / 2;
19128: 19040:  55:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
19129: 19041:  56:   let rad = player.cameraAngle * Math.PI / 180;
19130: 19042:  57:   let lineCenterX = centerX + offset * Math.cos(rad);
19131: 19043:  58:   let lineCenterY = centerY + offset * Math.sin(rad);
19132: 19044:  59:   // Draw altitude line perpendicular to camera direction.
19133: 19045:  60:   let lineLength = 100;
19134: 19046:  61:   let perpX = -Math.sin(rad);
19135: 19047:  62:   let perpY = Math.cos(rad);
19136: 19048:  63:   let x1 = lineCenterX - (lineLength / 2) * perpX;
19137: 19049:  64:   let y1 = lineCenterY - (lineLength / 2) * perpY;
19138: 19050:  65:   let x2 = lineCenterX + (lineLength / 2) * perpX;
19139: 19051:  66:   let y2 = lineCenterY + (lineLength / 2) * perpY;
19140: 19052:  67:   // Steady color gradient from red (bottom) to blue (top)
19141: 19053:  68:   let t = 1 - (player.altitudeLine / 100);
19142: 19054:  69:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
19143: 19055:  70:   ctx.strokeStyle = altitudeColor;
19144: 19056:  71:   ctx.lineWidth = 3;
19145: 19057:  72:   // Draw the altitude line without any flashing.
19146: 19058:  73:   ctx.beginPath();
19147: 19059:  74:   ctx.moveTo(x1, y1);
19148: 19060:  75:   ctx.lineTo(x2, y2);
19149: 19061:  76:   ctx.stroke();
19150: 19062:  77: }
19151: 19063:  78: // Draws the game entities such as the background, terrain, player, and sled.
19152: 19064:  79: function drawEntities() {
19153: 19065:  80:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
19154: 19066:  81:   ctx.clearRect(0, 0, canvas.width, canvas.height);
19155: 19067:  82:   // Draw background.
19156: 19068:  83:   ctx.fillStyle = window.currentState === window.GameState.DOWNHILL ? "#ADD8E6" : "#98FB98";
19157: 19069:  84:   ctx.fillRect(0, 0, canvas.width, canvas.height);
19158: 19070:  85:   // Draw terrain obstacles.
19159: 19071:  86:   terrain.forEach(obstacle => {
19160: 19072:  87:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
19161: 19073:  88:       ctx.fillStyle = "#808080"; // Obstacles are drawn in grey.
19162: 19074:  89:       ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
19163: 19075:  90:     }
19164: 19076:  91:   });
19165: 19077:  92:   let playerDrawY = player.absY - cameraOffset;
19166: 19078:  93:   ctx.save(); // Save the current context state
19167: 19079:  94:   // Apply trick-specific transformations.
19168: 19080:  95:   if (player.currentTrick) {
19169: 19081:  96:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
19170: 19082:  97:       // Rotate around the player's center for helicopter tricks.
19171: 19083:  98:       ctx.translate(player.x, playerDrawY);
19172: 19084:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
19173: 19085: 100:       ctx.translate(-player.x, -playerDrawY);
19174: 19086: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
19175: 19087: 102:       // Offset for air brake/parachute tricks.
19176: 19088: 103:       if (player.currentTrick === "airBrake") {
19177: 19089: 104:         playerDrawY += player.trickOffset;  // Move sled behind the player.
19178: 19090: 105:       } else {
19179: 19091: 106:         playerDrawY -= player.trickOffset;  // Move player above the sled for parachute.
19180: 19092: 107:       }
19181: 19093: 108:     }
19182: 19094: 109:   }
19183: 19095: 110:   // Draw the sled (as a red square).
19184: 19096: 111:   ctx.fillStyle = "#FF0000";
19185: 19097: 112:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
19186: 19098: 113:   // Draw the player (as a yellow circle) when applicable.
19187: 19099: 114:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
19188: 19100: 115:     ctx.fillStyle = "#FFFF00";
19189: 19101: 116:     ctx.beginPath();
19190: 19102: 117:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
19191: 19103: 118:     ctx.fill();
19192: 19104: 119:   }
19193: 19105: 120:   ctx.restore(); // Restore the context state
19194: 19106: 121:   // Draw the camera overlay.
19195: 19107: 122:   drawCameraOverlay();
19196: 19108: 123: }
19197: 19109: ```````
19198: 19110: 
19199: 19111: ## File: js/render.js
19200: 19112: ```````javascript
19201: 19113:   1: /* render.js - Rendering Logic */
19202: 19114:   2: // Floating Text System (unchanged)
19203: 19115:   3: class FloatingText {
19204: 19116:   4:   constructor(text, x, y) {
19205: 19117:   5:     this.text = text;
19206: 19118:   6:     this.x = x;
19207: 19119:   7:     this.initialY = y;
19208: 19120:   8:     this.age = 0;
19209: 19121:   9:     this.lifetime = 1000;
19210: 19122:  10:     this.visualOffsetY = -30;
19211: 19123:  11:   }
19212: 19124:  12:   update(deltaTime) {
19213: 19125:  13:     this.age += deltaTime;
19214: 19126:  14:     this.visualOffsetY -= deltaTime * 0.25;
19215: 19127:  15:     return this.age < this.lifetime;
19216: 19128:  16:   }
19217: 19129:  17:   draw(ctx, cameraY) {
19218: 19130:  18:     const alpha = 1 - (this.age / this.lifetime);
19219: 19131:  19:     ctx.fillStyle = `rgba(0, 0, 0, ${alpha})`;
19220: 19132:  20:     ctx.font = "bold 24px Arial";
19221: 19133:  21:     ctx.textAlign = "center";
19222: 19134:  22:     const screenY = player.absY - cameraY + this.visualOffsetY;
19223: 19135:  23:     ctx.fillText(this.text, this.x, screenY);
19224: 19136:  24:   }
19225: 19137:  25: }
19226: 19138:  26: function addFloatingText(text, x, y) {
19227: 19139:  27:   window.floatingTexts.push(new FloatingText(text, x, y - 30));
19228: 19140:  28: }
19229: 19141:  29: // No changes to money display logic
19230: 19142:  30: function updateLiveMoney() {
19231: 19143:  31:   let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
19232: 19144:  32:   distanceTraveled = Math.max(1, distanceTraveled);
19233: 19145:  33:   let moneyEarned = Math.floor(distanceTraveled / 100);
19234: 19146:  34:   moneyEarned = Math.max(1, moneyEarned);
19235: 19147:  35:   let moneyText = document.getElementById("moneyText");
19236: 19148:  36:   if (moneyText) {
19237: 19149:  37:     moneyText.textContent = `Money: $${player.money} (+$${moneyEarned})`;
19238: 19150:  38:   }
19239: 19151:  39: }
19240: 19152:  40: function showMoneyGain(amount, source = "") {
19241: 19153:  41:   let moneyText = document.getElementById("moneyText");
19242: 19154:  42:   if (moneyText) {
19243: 19155:  43:     if (source) {
19244: 19156:  44:       moneyText.textContent = `Money: $${player.money} (+$${amount} ${source})`;
19245: 19157:  45:     } else {
19246: 19158:  46:       moneyText.textContent = `Money: $${player.money} (+$${amount})`;
19247: 19159:  47:     }
19248: 19160:  48:     moneyText.classList.add("money-increase");
19249: 19161:  49:     setTimeout(() => {
19250: 19162:  50:       moneyText.classList.remove("money-increase");
19251: 19163:  51:     }, 100);
19252: 19164:  52:   }
19253: 19165:  53: }
19254: 19166:  54: function updateMoneyDisplay() {
19255: 19167:  55:   let moneyText = document.getElementById("moneyText");
19256: 19168:  56:   if (moneyText) {
19257: 19169:  57:     moneyText.textContent = `Money: $${player.money}`;
19258: 19170:  58:   }
19259: 19171:  59: }
19260: 19172:  60: // MAIN RENDER
19261: 19173:  61: function render() {
19262: 19174:  62:   console.log("render START");
19263: 19175:  63:   // Clear the canvas each frame
19264: 19176:  64:   ctx.clearRect(0, 0, canvas.width, canvas.height);
19265: 19177:  65:   // Background color depends on state
19266: 19178:  66:   ctx.fillStyle = (window.currentState === window.GameState.DOWNHILL) ? "#ADD8E6" : "#98FB98";
19267: 19179:  67:   ctx.fillRect(0, 0, canvas.width, canvas.height);
19268: 19180:  68:   drawEntities();
19269: 19181:  69:   ctx.save();
19270: 19182:  70:   window.floatingTexts.forEach(text => text.draw(ctx, player.absY - canvas.height / 2));
19271: 19183:  71:   ctx.restore();
19272: 19184:  72:   drawReHitIndicator();
19273: 19185:  73:   console.log("render END");
19274: 19186:  74: }
19275: 19187:  75: function drawEntities() {
19276: 19188:  76:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
19277: 19189:  77:   // Terrain
19278: 19190:  78:   terrain.forEach(obstacle => {
19279: 19191:  79:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
19280: 19192:  80:       if (obstacle.type === 'tree') {
19281: 19193:  81:         drawTree(ctx, {
19282: 19194:  82:           x: obstacle.x,
19283: 19195:  83:           y: obstacle.y - cameraOffset,
19284: 19196:  84:           width: obstacle.width,
19285: 19197:  85:           height: obstacle.height
19286: 19198:  86:         });
19287: 19199:  87:       } else {
19288: 19200:  88:         ctx.fillStyle = "#808080";
19289: 19201:  89:         ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
19290: 19202:  90:       }
19291: 19203:  91:     }
19292: 19204:  92:   });
19293: 19205:  93:   // Player
19294: 19206:  94:   let playerDrawY = player.absY - cameraOffset;
19295: 19207:  95:   ctx.save();
19296: 19208:  96:   if (player.currentTrick) {
19297: 19209:  97:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
19298: 19210:  98:       ctx.translate(player.x, playerDrawY);
19299: 19211:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
19300: 19212: 100:       ctx.translate(-player.x, -playerDrawY);
19301: 19213: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
19302: 19214: 102:       playerDrawY += (player.currentTrick === "airBrake") ? player.trickOffset : -player.trickOffset;
19303: 19215: 103:     }
19304: 19216: 104:   }
19305: 19217: 105:   ctx.fillStyle = "#FF0000";
19306: 19218: 106:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
19307: 19219: 107:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
19308: 19220: 108:     ctx.fillStyle = "#FFFF00";
19309: 19221: 109:     ctx.beginPath();
19310: 19222: 110:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
19311: 19223: 111:     ctx.fill();
19312: 19224: 112:   }
19313: 19225: 113:   ctx.restore();
19314: 19226: 114:   drawCameraOverlay();
19315: 19227: 115:   drawAnimal();
19316: 19228: 116: }
19317: 19229: 117: function drawCameraOverlay() {
19318: 19230: 118:   if (window.currentState !== window.GameState.UPHILL) return;
19319: 19231: 119:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
19320: 19232: 120:   let centerX = player.x;
19321: 19233: 121:   let centerY = player.absY - cameraOffset;
19322: 19234: 122:   let coneLength = 300;
19323: 19235: 123:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
19324: 19236: 124:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
19325: 19237: 125:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
19326: 19238: 126:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
19327: 19239: 127:   ctx.beginPath();
19328: 19240: 128:   ctx.moveTo(centerX, centerY);
19329: 19241: 129:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
19330: 19242: 130:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
19331: 19243: 131:   ctx.closePath();
19332: 19244: 132:   ctx.fill();
19333: 19245: 133:   let offsetTop = (coneLength / 2) + player.height;
19334: 19246: 134:   let offsetBottom = player.height / 2;
19335: 19247: 135:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
19336: 19248: 136:   let rad = player.cameraAngle * Math.PI / 180;
19337: 19249: 137:   let lineCenterX = centerX + offset * Math.cos(rad);
19338: 19250: 138:   let lineCenterY = centerY + offset * Math.sin(rad);
19339: 19251: 139:   let lineLength = 100;
19340: 19252: 140:   let perpX = -Math.sin(rad);
19341: 19253: 141:   let perpY = Math.cos(rad);
19342: 19254: 142:   let x1 = lineCenterX - (lineLength / 2) * perpX;
19343: 19255: 143:   let y1 = lineCenterY - (lineLength / 2) * perpY;
19344: 19256: 144:   let x2 = lineCenterX + (lineLength / 2) * perpX;
19345: 19257: 145:   let y2 = lineCenterY + (lineLength / 2) * perpY;
19346: 19258: 146:   let t = 1 - (player.altitudeLine / 100);
19347: 19259: 147:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
19348: 19260: 148:   ctx.strokeStyle = altitudeColor;
19349: 19261: 149:   ctx.lineWidth = 3;
19350: 19262: 150:   if (activeAnimal && isAnimalInsideCone(activeAnimal)) {
19351: 19263: 151:     let flashSpeed = mapRange(Math.abs(player.altitudeLine - activeAnimal.altitude), 0, 100, TWEAK.altitudeFlashMaxSpeed, TWEAK.altitudeFlashMinSpeed);
19352: 19264: 152:     if (Math.floor(Date.now() / flashSpeed) % 2 === 0) {
19353: 19265: 153:       ctx.beginPath();
19354: 19266: 154:       ctx.moveTo(x1, y1);
19355: 19267: 155:       ctx.lineTo(x2, y2);
19356: 19268: 156:       ctx.stroke();
19357: 19269: 157:     }
19358: 19270: 158:   } else {
19359: 19271: 159:     ctx.beginPath();
19360: 19272: 160:     ctx.moveTo(x1, y1);
19361: 19273: 161:     ctx.lineTo(x2, y2);
19362: 19274: 162:     ctx.stroke();
19363: 19275: 163:   }
19364: 19276: 164: }
19365: 19277: 165: function drawReHitIndicator() {
19366: 19278: 166:   if (!player.isJumping) return;
19367: 19279: 167:   const progress = player.jumpTimer / player.jumpDuration;
19368: 19280: 168:   if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
19369: 19281: 169:     ctx.save();
19370: 19282: 170:     ctx.beginPath();
19371: 19283: 171:     const radius = (player.baseWidth * TWEAK.reHitIndicatorScale) / 2;
19372: 19284: 172:     const cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
19373: 19285: 173:     const screenY = canvas.height / 2 + (player.absY - cameraOffset - canvas.height / 2);
19374: 19286: 174:     ctx.shadowColor = TWEAK.reHitIndicatorOutlineColor;
19375: 19287: 175:     ctx.shadowBlur = 20;
19376: 19288: 176:     ctx.lineWidth = 3;
19377: 19289: 177:     const pulseScale = 1 + Math.sin(Date.now() / 100) * 0.1;
19378: 19290: 178:     ctx.arc(player.x, screenY, radius * pulseScale, 0, Math.PI * 2);
19379: 19291: 179:     ctx.fillStyle = TWEAK.reHitIndicatorColor;
19380: 19292: 180:     ctx.fill();
19381: 19293: 181:     ctx.strokeStyle = TWEAK.reHitIndicatorOutlineColor;
19382: 19294: 182:     ctx.stroke();
19383: 19295: 183:     ctx.closePath();
19384: 19296: 184:     ctx.restore();
19385: 19297: 185:   }
19386: 19298: 186: }
19387: 19299: ```````
19388: 19300: 
19389: 19301: ## File: js/world.js
19390: 19302: ```````javascript
19391: 19303:  1: /* world.js */
19392: 19304:  2: const mountainHeight = 200000; // Mountain is now 100x bigger!
19393: 19305:  3: let terrain = [];
19394: 19306:  4: const obstacleCount = 1500; // Reduced rock count to make room for trees
19395: 19307:  5: const treeClusterCount = 3000; // Number of tree clusters to generate
19396: 19308:  6: let earlyFinish = false;
19397: 19309:  7: const heightMultiplierBase = 1; // Base value for height multiplier - can be adjusted later
19398: 19310:  8: const distanceMultiplierBase = 1; // Base value for distance multiplier - can be adjusted later
19399: 19311:  9: const speedMultiplierBase = 1; // Base value for speed multiplier - can be adjusted later
19400: 19312: 10: function generateTerrain() {
19401: 19313: 11:   terrain = [];
19402: 19314: 12:   // Generate rock obstacles
19403: 19315: 13:   for (let i = 0; i < obstacleCount; i++) {
19404: 19316: 14:     let obstacle = {
19405: 19317: 15:       x: Math.random() * (canvas.width - 70) + 10,
19406: 19318: 16:       y: Math.random() * mountainHeight,
19407: 19319: 17:       width: 30 + Math.random() * 40,
19408: 19320: 18:       height: 10 + Math.random() * 20,
19409: 19321: 19:       type: 'rock' // Explicitly mark as rock
19410: 19322: 20:     };
19411: 19323: 21:     terrain.push(obstacle);
19412: 19324: 22:   }
19413: 19325: 23:   // Generate tree clusters
19414: 19326: 24:   const terrainBounds = { 
19415: 19327: 25:     xMin: 0, 
19416: 19328: 26:     xMax: canvas.width, 
19417: 19329: 27:     yMin: 0, 
19418: 19330: 28:     yMax: mountainHeight 
19419: 19331: 29:   };
19420: 19332: 30:   // Assume player size reference (can be adjusted based on actual player dimensions)
19421: 19333: 31:   const playerSize = 30; // Estimate based on what's visible in the game
19422: 19334: 32:   const treeObstacles = generateTreeClumps({ 
19423: 19335: 33:     count: treeClusterCount, 
19424: 19336: 34:     terrainBounds, 
19425: 19337: 35:     playerSize 
19426: 19338: 36:   });
19427: 19339: 37:   // Add trees to terrain array
19428: 19340: 38:   terrain.push(...treeObstacles);
19429: 19341: 39:   // Sort all obstacles by Y position for rendering order
19430: 19342: 40:   terrain.sort((a, b) => a.y - b.y);
19431: 19343: 41: }
19432: 19344: 42: function awardMoney() {
19433: 19345: 43:     // Calculate real distance traveled based on starting and ending Y positions
19434: 19346: 44:     // Note: In this game's coordinate system, higher Y values mean lower on the mountain
19435: 19347: 45:     // So the distance traveled downhill is player.absY - playerStartAbsY
19436: 19348: 46:     let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
19437: 19349: 47:     // Ensure at least 1 unit
19438: 19350: 48:     distanceTraveled = Math.max(1, distanceTraveled);
19439: 19351: 49:     // Calculate the height multiplier based on starting position
19440: 19352: 50:     // Higher up the mountain (lower playerStartAbsY value) gives better multiplier
19441: 19353: 51:     // This will make a run from the top worth 3x more than from the bottom
19442: 19354: 52:     const startHeightRatio = 1 - (playerStartAbsY / mountainHeight); // 0 at bottom, 1 at top
19443: 19355: 53:     const startHeightMultiplier = 1 + (startHeightRatio * 2 * heightMultiplierBase); // Range: 1-3x
19444: 19356: 54:     // Calculate the distance multiplier based on how much of the mountain was traversed
19445: 19357: 55:     // This makes longer runs more valuable (e.g., a full mountain run worth 3x more than 10 runs of 10% each)
19446: 19358: 56:     const distanceRatio = distanceTraveled / mountainHeight; // What fraction of the mountain was traversed
19447: 19359: 57:     const distanceMultiplier = 1 + (Math.min(1, distanceRatio * 10) * 2 * distanceMultiplierBase); // Range: 1-3x
19448: 19360: 58:     // The formula ensures a full mountain run (10% of mountain = 1.2x, 20% = 1.4x, ... 100% = 3x)
19449: 19361: 59:     // Calculate speed multiplier based on the time taken to complete the run
19450: 19362: 60:     let speedMultiplier = 1;
19451: 19363: 61:     if (downhillStartTime !== null) {
19452: 19364: 62:         const runDuration = (performance.now() - downhillStartTime) / 1000; // Convert to seconds
19453: 19365: 63:         // Calculate expected time based on distance
19454: 19366: 64:         // Assuming an "average" speed would be covering the entire mountain in the below number of seconds
19455: 19367: 65:         const expectedTime = (distanceTraveled / mountainHeight) * 500;
19456: 19368: 66:         // Calculate speed ratio: lower than 1 means faster than expected
19457: 19369: 67:         // We want lower times to give higher multipliers
19458: 19370: 68:         const speedRatio = Math.max(0.1, Math.min(2, runDuration / Math.max(1, expectedTime)));
19459: 19371: 69:         // Invert the ratio: 1/speedRatio, so faster runs (lower speedRatio) get higher multipliers
19460: 19372: 70:         // Adjust the curve to get 1x for average speed, up to 3x for twice as fast
19461: 19373: 71:         speedMultiplier = 1 + (Math.max(0, (1 - speedRatio)) * 3 * speedMultiplierBase); // Range: 1-3x
19462: 19374: 72:         console.log(`Run duration: ${runDuration.toFixed(2)}s, Expected: ${expectedTime.toFixed(2)}s, Speed ratio: ${speedRatio.toFixed(2)}, Multiplier: ${speedMultiplier.toFixed(2)}x`);
19463: 19375: 73:     }
19464: 19376: 74:     // Apply all multipliers to the money calculation
19465: 19377: 75:     let moneyEarned = Math.floor((distanceTraveled / 100) * startHeightMultiplier * distanceMultiplier * speedMultiplier);
19466: 19378: 76:     moneyEarned = Math.max(0, moneyEarned); // Guarantee no negative values
19467: 19379: 77:     console.log(`Awarding money: $${moneyEarned} (Distance: ${distanceTraveled}, Height multiplier: ${startHeightMultiplier.toFixed(2)}, Distance multiplier: ${distanceMultiplier.toFixed(2)}, Speed multiplier: ${speedMultiplier.toFixed(2)})`);
19468: 19380: 78:     player.money += moneyEarned;
19469: 19381: 79:     updateMoneyDisplay();
19470: 19382: 80: }
19471: 19383: ```````
19472: 19384: 
19473: 19385: ## File: js/mechanics.js
19474: 19386: ```````javascript
19475: 19387:  1: /* mechanics.js - Gameplay Mechanics & Interactions */
19476: 19388:  2: // Update all gameplay state and physics – including jump/trick handling and collision updates.
19477: 19389:  3: function updateMechanics(deltaTime) {
19478: 19390:  4:     deltaTime *= 1;
19479: 19391:  5:     if (window.currentState === window.GameState.DOWNHILL) {
19480: 19392:  6:       // Call the refactored downhill function from downhill.js
19481: 19393:  7:       updateDownhill(deltaTime);
19482: 19394:  8:     } else if (window.currentState === window.GameState.UPHILL) {
19483: 19395:  9:       // Call the refactored uphill function from uphill.js
19484: 19396: 10:       updateUphill(deltaTime);
19485: 19397: 11:     }
19486: 19398: 12:   }
19487: 19399: 13:   // Note: Jump-related functions moved to jumpsled.js
19488: 19400: 14: function lerpPlayerToGround(duration, onComplete) {
19489: 19401: 15:   const startY = player.absY;
19490: 19402: 16:   const endY = mountainHeight - (player.height * 3); // Safe landing height
19491: 19403: 17:   const startTime = performance.now();
19492: 19404: 18:   function animate() {
19493: 19405: 19:     const now = performance.now();
19494: 19406: 20:     const t = Math.min(1, (now - startTime) / duration);
19495: 19407: 21:     // Use smooth easing
19496: 19408: 22:     const easedT = t * t * (3 - 2 * t);
19497: 19409: 23:     player.absY = startY + (endY - startY) * easedT;
19498: 19410: 24:     if (t < 1) {
19499: 19411: 25:       requestAnimationFrame(animate);
19500: 19412: 26:     } else {
19501: 19413: 27:       player.absY = endY;
19502: 19414: 28:       if (onComplete) onComplete();
19503: 19415: 29:     }
19504: 19416: 30:   }
19505: 19417: 31:   animate();
19506: 19418: 32: }
19507: 19419: ```````
19508: 19420: 
19509: 19421: ## File: js/utils.js
19510: 19422: ```````javascript
19511: 19423:   1: /* utils.js */
19512: 19424:   2: // Global Configuration & Shared Globals moved to settings.js
19513: 19425:   3: window.GameState = {
19514: 19426:   4:     HOUSE: 'house',
19515: 19427:   5:     DOWNHILL: 'downhill',
19516: 19428:   6:     UPHILL: 'uphill'
19517: 19429:   7: };
19518: 19430:   8: // Instead of getting the canvas element (which no longer exists),
19519: 19431:   9: // we define a dummy canvas object for width/height references.
19520: 19432:  10: var canvas = { width: 800, height: 450 };
19521: 19433:  11: // We'll expose canvas globally for other scripts to access
19522: 19434:  12: window.canvas = canvas;
19523: 19435:  13: // We'll set ctx in game.js once the Phaser Canvas Texture is created.
19524: 19436:  14: var ctx = null;
19525: 19437:  15: /* NEW: Global keysDown object and event listeners */
19526: 19438:  16: var keysDown = {};
19527: 19439:  17: var spacePressed = false;
19528: 19440:  18: window.addEventListener("keydown", function (e) {
19529: 19441:  19:     // Prevent default behavior for arrow keys, space, and tab to ensure correct capture
19530: 19442:  20:     if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", " ", "Tab"].includes(e.key)) {
19531: 19443:  21:         e.preventDefault();
19532: 19444:  22:     }
19533: 19445:  23:     keysDown[e.key] = true;
19534: 19446:  24:     // Track space in HOUSE state
19535: 19447:  25:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
19536: 19448:  26:         spacePressed = true;
19537: 19449:  27:     }
19538: 19450:  28:     // Take a photo in UPHILL state when space is pressed
19539: 19451:  29:     if (e.key === " " && window.currentState === window.GameState.UPHILL) {
19540: 19452:  30:         takePhoto();
19541: 19453:  31:     }
19542: 19454:  32:     // Press "E" to manually spawn an animal in UPHILL mode (DEBUG)
19543: 19455:  33:     if (e.key.toLowerCase() === 'e' && window.currentState === window.GameState.UPHILL) {
19544: 19456:  34:         spawnAnimal();
19545: 19457:  35:     }
19546: 19458:  36:     // Handle Tab key to toggle between UPHILL and DOWNHILL
19547: 19459:  37:     if (e.key === "Tab" && window.currentState !== window.GameState.HOUSE) {
19548: 19460:  38:         if (window.currentState === window.GameState.UPHILL && player.sledDamaged === 1) {
19549: 19461:  39:             console.log("Cannot switch to DOWNHILL mode - Sled is damaged and needs repair");
19550: 19462:  40:             showSledDamageNotice();
19551: 19463:  41:             return;
19552: 19464:  42:         }
19553: 19465:  43:         const newState = window.currentState === window.GameState.UPHILL ? window.GameState.DOWNHILL : window.GameState.UPHILL;
19554: 19466:  44:         changeState(newState);
19555: 19467:  45:     }
19556: 19468:  46: });
19557: 19469:  47: window.addEventListener("keyup", function (e) {
19558: 19470:  48:     delete keysDown[e.key];
19559: 19471:  49:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
19560: 19472:  50:         spacePressed = false;
19561: 19473:  51:         console.log("Space released, starting sled run.");
19562: 19474:  52:         unlockAudioContext();
19563: 19475:  53:         playStartGameSound();
19564: 19476:  54:         changeState(window.GameState.DOWNHILL);
19565: 19477:  55:     }
19566: 19478:  56: });
19567: 19479:  57: /* Utility functions */
19568: 19480:  58: function formatUpgradeName(name) {
19569: 19481:  59:     let formattedName = name.replace(/([A-Z])/g, ' $1').trim();
19570: 19482:  60:     return formattedName.charAt(0).toUpperCase() + formattedName.slice(1);
19571: 19483:  61: }
19572: 19484:  62: function capitalizeFirstLetter(string) {
19573: 19485:  63:     return string.charAt(0).toUpperCase() + string.slice(1);
19574: 19486:  64: }
19575: 19487:  65: function checkCollision(ax, ay, aw, ah, bx, by, bw, bh) {
19576: 19488:  66:     return ax < bx + bw && ax + aw > bx && ay < by + bh && ay + ah > by;
19577: 19489:  67: }
19578: 19490:  68: function clamp(val, min, max) {
19579: 19491:  69:     return Math.max(min, Math.min(max, val));
19580: 19492:  70: }
19581: 19493:  71: function getCameraOffset(playerAbsY, canvasHeight, mountainHeight) {
19582: 19494:  72:     let offset = playerAbsY - canvasHeight / 2;
19583: 19495:  73:     return clamp(offset, 0, mountainHeight - canvasHeight);
19584: 19496:  74: }
19585: 19497:  75: // Make utility functions available globally for both normal scripts and modules
19586: 19498:  76: window.formatUpgradeName = formatUpgradeName;
19587: 19499:  77: window.capitalizeFirstLetter = capitalizeFirstLetter;
19588: 19500:  78: window.checkCollision = checkCollision;
19589: 19501:  79: window.clamp = clamp;
19590: 19502:  80: window.getCameraOffset = getCameraOffset;
19591: 19503:  81: /* Ensure Web Audio API is unlocked */
19592: 19504:  82: let audioCtx;
19593: 19505:  83: function unlockAudioContext() {
19594: 19506:  84:     if (!audioCtx) {
19595: 19507:  85:         audioCtx = new (window.AudioContext || window.webkitAudioContext)();
19596: 19508:  86:     }
19597: 19509:  87: }
19598: 19510:  88: /* Audio Utility Functions */
19599: 19511:  89: function playTone(frequency = 440, type = "sine", duration = 0.5, volume = 0.3) {
19600: 19512:  90:     unlockAudioContext(); // Ensure audio context is unlocked
19601: 19513:  91:     const oscillator = audioCtx.createOscillator();
19602: 19514:  92:     const gainNode = audioCtx.createGain();
19603: 19515:  93:     oscillator.type = type;
19604: 19516:  94:     oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);
19605: 19517:  95:     gainNode.gain.setValueAtTime(volume, audioCtx.currentTime);
19606: 19518:  96:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);
19607: 19519:  97:     oscillator.connect(gainNode);
19608: 19520:  98:     gainNode.connect(audioCtx.destination);
19609: 19521:  99:     oscillator.start();
19610: 19522: 100:     oscillator.stop(audioCtx.currentTime + duration);
19611: 19523: 101: }
19612: 19524: 102: /* Sound Effects */
19613: 19525: 103: function playStartGameSound() {
19614: 19526: 104:     playTone(440, "triangle", 0.5);
19615: 19527: 105: }
19616: 19528: 106: function playCrashSound() {
19617: 19529: 107:     unlockAudioContext();
19618: 19530: 108:     const oscillator = audioCtx.createOscillator();
19619: 19531: 109:     const gainNode = audioCtx.createGain();
19620: 19532: 110:     oscillator.type = "sawtooth";
19621: 19533: 111:     oscillator.frequency.setValueAtTime(800, audioCtx.currentTime);
19622: 19534: 112:     oscillator.frequency.exponentialRampToValueAtTime(100, audioCtx.currentTime + 0.5);
19623: 19535: 113:     gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
19624: 19536: 114:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.5);
19625: 19537: 115:     oscillator.connect(gainNode);
19626: 19538: 116:     gainNode.connect(audioCtx.destination);
19627: 19539: 117:     oscillator.start();
19628: 19540: 118:     oscillator.stop(audioCtx.currentTime + 0.5);
19629: 19541: 119: }
19630: 19542: 120: function playRockHitSound() {
19631: 19543: 121:     playTone(200, "square", 0.2);
19632: 19544: 122: }
19633: 19545: 123: function playMoneyGainSound() {
19634: 19546: 124:     playTone(1000, "sine", 0.15, 0.2);
19635: 19547: 125: }
19636: 19548: 126: function mapRange(value, inMin, inMax, outMin, outMax) {
19637: 19549: 127:     return outMin + ((value - inMin) * (outMax - outMin)) / (inMax - inMin);
19638: 19550: 128: }
19639: 19551: 129: // Helper functions for color conversion and interpolation
19640: 19552: 130: function hexToRgb(hex) {
19641: 19553: 131:     hex = hex.replace(/^#/, '');
19642: 19554: 132:     if (hex.length === 3) {
19643: 19555: 133:       hex = hex.split('').map(c => c + c).join('');
19644: 19556: 134:     }
19645: 19557: 135:     let bigint = parseInt(hex, 16);
19646: 19558: 136:     let r = (bigint >> 16) & 255;
19647: 19559: 137:     let g = (bigint >> 8) & 255;
19648: 19560: 138:     let b = (bigint & 255) & 255;
19649: 19561: 139:     return { r, g, b };
19650: 19562: 140: }
19651: 19563: 141: function rgbToHex(r, g, b) {
19652: 19564: 142:     return "#" + ((1 << 24) + (r << 16) + (g << 8) + b)
19653: 19565: 143:       .toString(16)
19654: 19566: 144:       .slice(1)
19655: 19567: 145:       .toUpperCase();
19656: 19568: 146: }
19657: 19569: 147: function lerpColor(color1, color2, t) {
19658: 19570: 148:     let c1 = hexToRgb(color1);
19659: 19571: 149:     let c2 = hexToRgb(color2);
19660: 19572: 150:     let r = Math.round(c1.r + (c2.r - c1.r) * t);
19661: 19573: 151:     let g = Math.round(c1.g + (c2.g - c1.g) * t);
19662: 19574: 152:     let b = Math.round(c1.b + (c2.b - c1.b) * t);
19663: 19575: 153:     return rgbToHex(r, g, b);
19664: 19576: 154: }
19665: 19577: 155: // Notification helpers
19666: 19578: 156: function showSledDamageNotice() {
19667: 19579: 157:   showErrorNotification('Sled Damaged! Please Repair');
19668: 19580: 158: }
19669: 19581: 159: function showSledRepairedNotice() {
19670: 19582: 160:   showSuccessNotification('Sled Repaired!');
19671: 19583: 161: }
19672: 19584: 162: // Add additional utility functions to window object
19673: 19585: 163: window.mapRange = mapRange;
19674: 19586: 164: window.hexToRgb = hexToRgb;
19675: 19587: 165: window.rgbToHex = rgbToHex;
19676: 19588: 166: window.lerpColor = lerpColor;
19677: 19589: 167: window.showSledDamageNotice = showSledDamageNotice;
19678: 19590: 168: window.showSledRepairedNotice = showSledRepairedNotice;
19679: 19591: 169: window.playTone = playTone;
19680: 19592: 170: window.playStartGameSound = playStartGameSound;
19681: 19593: 171: window.playCrashSound = playCrashSound;
19682: 19594: 172: window.playRockHitSound = playRockHitSound;
19683: 19595: 173: window.playMoneyGainSound = playMoneyGainSound;
19684: 19596: 174: window.unlockAudioContext = unlockAudioContext;
19685: 19597: 175: // Note: export statement has been removed and all functions are now attached to window
19686: 19598: ```````
19687: 19599: 
19688: 19600: ## File: index.html
19689: 19601: ```````html
19690: 19602:  1: <!DOCTYPE html>
19691: 19603:  2: <html lang="en">
19692: 19604:  3: <head>
19693: 19605:  4:   <meta charset="UTF-8" />
19694: 19606:  5:   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
19695: 19607:  6:   <title>SledHEAD</title>
19696: 19608:  7:   <link rel="stylesheet" href="styles.css">
19697: 19609:  8:   <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
19698: 19610:  9: </head>
19699: 19611: 10: <body>
19700: 19612: 11:   <!-- UI Elements -->
19701: 19613: 12:   <div id="cursor-position"
19702: 19614: 13:        style="position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white;
19703: 19615: 14:               padding: 5px; border-radius: 3px; font-family: monospace; z-index: 1000;">
19704: 19616: 15:     Abs: (0, 0) | View: (0, 0)
19705: 19617: 16:   </div>
19706: 19618: 17:   <div id="victoryBanner"
19707: 19619: 18:        style="display: none; position: fixed; top: 50%; left: 50%;
19708: 19620: 19:               transform: translate(-50%, -50%); background: gold; padding: 20px;
19709: 19621: 20:               border-radius: 10px; text-align: center; font-size: 24px; font-weight: bold; z-index: 1000;">
19710: 19622: 21:     🎉 VICTORY! 🎉<br>
19711: 19623: 22:     You've paid off your loan!
19712: 19624: 23:   </div>
19713: 19625: 24:   <h1>SledHEAD</h1>
19714: 19626: 25:   <div id="moneyDisplay">
19715: 19627: 26:     <p id="moneyText">Money: $200</p>
19716: 19628: 27:   </div>
19717: 19629: 28:   <div id="game-screen"></div>
19718: 19630: 29:   <!-- Upgrades -->
19719: 19631: 30:   <div id="upgrade-menu">
19720: 19632: 31:     <div class="game-controls">
19721: 19633: 32:       <button id="startGame">Start Sled Run</button>
19722: 19634: 33:       <button id="payLoan">Pay Loan ($100,000)</button>
19723: 19635: 34:     </div>
19724: 19636: 35:     <div id="dynamic-upgrade-columns" class="upgrade-menu-columns">
19725: 19637: 36:       <!-- Populated dynamically -->
19726: 19638: 37:     </div>
19727: 19639: 38:     <p id="bestTimeText">Best Time: N/A</p>
19728: 19640: 39:   </div>
19729: 19641: 40:   <!-- JS Includes -->
19730: 19642: 41:   <script src="js/settings.js"></script>
19731: 19643: 42:   <script src="js/notify.js"></script>
19732: 19644: 43:   <script src="js/utils.js"></script>
19733: 19645: 44:   <script src="js/input.js"></script>
19734: 19646: 45:   <script src="js/world.js"></script>
19735: 19647: 46:   <script src="js/player.js"></script>
19736: 19648: 47:   <script src="js/entities.js"></script>
19737: 19649: 48:   <script src="js/wildlife.js"></script>
19738: 19650: 49:   <script src="js/mobs/bear.js"></script>
19739: 19651: 50:   <script src="js/mobs/mountainlion.js"></script>
19740: 19652: 51:   <script src="js/mobs/bird.js"></script>
19741: 19653: 52:   <script src="js/trees.js"></script>
19742: 19654: 53:   <script src="js/camera.js"></script>
19743: 19655: 54:   <script src="js/jumpsled.js"></script>
19744: 19656: 55:   <script src="js/mechanics.js"></script>
19745: 19657: 56:   <script src="js/render.js"></script>
19746: 19658: 57:   <script src="js/stamina.js"></script>
19747: 19659: 58:   <script src="js/loan.js"></script>
19748: 19660: 59:   <script src="js/uphill.js"></script>
19749: 19661: 60:   <!-- Modules -->
19750: 19662: 61:   <script type="module" src="js/registry.js"></script>
19751: 19663: 62:   <script type="module" src="js/tricks.js"></script>
19752: 19664: 63:   <script type="module" src="js/downhill.js"></script>
19753: 19665: 64:   <script type="module" src="js/upgradeData.js"></script>
19754: 19666: 65:   <script type="module" src="js/upgradeLogic.js"></script>
19755: 19667: 66:   <script type="module" src="js/upgrades.js"></script>
19756: 19668: 67:   <script type="module" src="js/game.js"></script>
19757: 19669: 68: </body>
19758: 19670: 69: </html>
19759: 19671: ```````
19760: 19672: 
19761: 19673: ## File: js/game.js
19762: 19674: ```````javascript
19763: 19675:   1: /* game.js - Core Loop & State Management (Phaserized) */
19764: 19676:   2: // Import necessary functions and variables
19765: 19677:   3: import { playerUpgrades, mountainUpgrades, initUpgradeButton, purchaseUpgrade, updateMoneyDisplay } from './upgradeLogic.js';
19766: 19678:   4: // Keep your globals
19767: 19679:   5: var downhillStartTime = null;
19768: 19680:   6: var lastTime = 0;
19769: 19681:   7: // Local currentState variable removed - we'll use window.currentState exclusively
19770: 19682:   8: var jumpOsc = null;
19771: 19683:   9: var jumpGain = null;
19772: 19684:  10: var loanAmount = 100000;
19773: 19685:  11: window.floatingTexts = [];  // Make floatingTexts accessible globally
19774: 19686:  12: var isFirstHouseEntry = true;
19775: 19687:  13: var houseReEntry = 0;
19776: 19688:  14: var playerStartAbsY = 0;
19777: 19689:  15: // We'll access the global canvas object
19778: 19690:  16: // var ctx is defined later after context creation
19779: 19691:  17: // Create a Phaser Scene to run your game logic
19780: 19692:  18: class MainScene extends Phaser.Scene {
19781: 19693:  19:   constructor() {
19782: 19694:  20:     super("MainScene");
19783: 19695:  21:   }
19784: 19696:  22:   preload() {
19785: 19697:  23:     // If you had assets, you'd load them here
19786: 19698:  24:   }
19787: 19699:  25:   create() {
19788: 19700:  26:     // Initialize global game state
19789: 19701:  27:     window.currentState = window.GameState.HOUSE;
19790: 19702:  28:     // Create a Canvas Texture of the same size as your old canvas
19791: 19703:  29:     this.rt = this.textures.createCanvas("myCanvas", window.canvas.width, window.canvas.height);
19792: 19704:  30:     // Get the canvas context with willReadFrequently option
19793: 19705:  31:     ctx = this.rt.context;
19794: 19706:  32:     // Set willReadFrequently for better performance with getImageData calls
19795: 19707:  33:     ctx.canvas.getContext = () => ctx.canvas.getContext('2d', { willReadFrequently: true });
19796: 19708:  34:     // Add it to the scene as an Image so Phaser will display it
19797: 19709:  35:     this.image = this.add.image(0, 0, "myCanvas").setOrigin(0, 0);
19798: 19710:  36:     // Initialize player money now that TWEAK is available
19799: 19711:  37:     if (typeof window.initializePlayerMoney === 'function') {
19800: 19712:  38:       window.initializePlayerMoney();
19801: 19713:  39:     }
19802: 19714:  40:     // Hook up your DOM event listeners for buttons
19803: 19715:  41:     document.getElementById("startGame").addEventListener("click", () => {
19804: 19716:  42:       console.log("Start run clicked.");
19805: 19717:  43:       unlockAudioContext();
19806: 19718:  44:       playStartGameSound();
19807: 19719:  45:       changeState(window.GameState.DOWNHILL);
19808: 19720:  46:     });
19809: 19721:  47:     document.getElementById("payLoan").addEventListener("click", () => {
19810: 19722:  48:       console.log("Paying loan...");
19811: 19723:  49:       payLoan();
19812: 19724:  50:     });
19813: 19725:  51:     // Initialize upgrade buttons
19814: 19726:  52:     Object.keys(playerUpgrades).forEach(upg => {
19815: 19727:  53:       initUpgradeButton(upg, playerUpgrades[upg]);
19816: 19728:  54:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
19817: 19729:  55:       document.getElementById(btnId).addEventListener("click", () => {
19818: 19730:  56:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
19819: 19731:  57:         purchaseUpgrade(playerUpgrades, upg);
19820: 19732:  58:       });
19821: 19733:  59:     });
19822: 19734:  60:     Object.keys(mountainUpgrades).forEach(upg => {
19823: 19735:  61:       initUpgradeButton(upg, mountainUpgrades[upg]);
19824: 19736:  62:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
19825: 19737:  63:       document.getElementById(btnId).addEventListener("click", () => {
19826: 19738:  64:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
19827: 19739:  65:         purchaseUpgrade(mountainUpgrades, upg);
19828: 19740:  66:       });
19829: 19741:  67:     });
19830: 19742:  68:     // Set up the world
19831: 19743:  69:     generateTerrain();
19832: 19744:  70:     updateLoanButton();
19833: 19745:  71:     changeState(window.GameState.HOUSE);
19834: 19746:  72:   }
19835: 19747:  73:   update(time, delta) {
19836: 19748:  74:     console.log("MainScene update START");
19837: 19749:  75:     // Update game mechanics (delta in ms)
19838: 19750:  76:     updateMechanics(delta);
19839: 19751:  77:     // Update floating texts
19840: 19752:  78:     window.floatingTexts = window.floatingTexts.filter(text => text.update(delta));
19841: 19753:  79:     // Call the render function (draws onto ctx)
19842: 19754:  80:     render();
19843: 19755:  81:     // Refresh the Canvas Texture so Phaser displays the new drawing
19844: 19756:  82:     this.rt.refresh();
19845: 19757:  83:     console.log("MainScene update END");
19846: 19758:  84:   }
19847: 19759:  85: }
19848: 19760:  86: // Original changeState function (unchanged in logic)
19849: 19761:  87: function changeState(newState) {
19850: 19762:  88:   // Guard clause to prevent redundant state changes
19851: 19763:  89:   if (newState === window.currentState) {
19852: 19764:  90:     console.log(`State change ignored: already in state ${newState}`);
19853: 19765:  91:     return;
19854: 19766:  92:   }
19855: 19767:  93:   const prevState = window.currentState;
19856: 19768:  94:   if (player.isJumping && newState !== window.GameState.HOUSE) {
19857: 19769:  95:     if (player.currentTrick) {
19858: 19770:  96:       resetTrickState();
19859: 19771:  97:       playCrashSound();
19860: 19772:  98:       console.log("State change interrupted trick - counted as crash");
19861: 19773:  99:     }
19862: 19774: 100:     lerpPlayerToGround(250, () => {
19863: 19775: 101:       player.isJumping = false;
19864: 19776: 102:       onPlayerLand();
19865: 19777: 103:       completeStateChange(newState, prevState);
19866: 19778: 104:     });
19867: 19779: 105:     return;
19868: 19780: 106:   }
19869: 19781: 107:   completeStateChange(newState, prevState);
19870: 19782: 108: }
19871: 19783: 109: function completeStateChange(newState, prevState) {
19872: 19784: 110:   window.currentState = newState;
19873: 19785: 111:   if (window.currentState === window.GameState.HOUSE) {
19874: 19786: 112:     document.getElementById("upgrade-menu").style.display = "block";
19875: 19787: 113:     document.getElementById("game-screen").style.display = "none";
19876: 19788: 114:     const bestTimeText = document.getElementById("bestTimeText");
19877: 19789: 115:     bestTimeText.textContent = player.bestTime === Infinity ? "Best Time: N/A"
19878: 19790: 116:                                                            : `Best Time: ${player.bestTime.toFixed(2)}s`;
19879: 19791: 117:     if (player.sledDamaged > 0) {
19880: 19792: 118:       player.sledDamaged = 0;
19881: 19793: 119:       console.log("Sled has been repaired at the house!");
19882: 19794: 120:       showSledRepairedNotice();
19883: 19795: 121:     }
19884: 19796: 122:     if (!isFirstHouseEntry && (prevState === window.GameState.DOWNHILL || prevState === window.GameState.UPHILL)) {
19885: 19797: 123:       if (typeof despawnAllAnimals === 'function') {
19886: 19798: 124:         despawnAllAnimals();
19887: 19799: 125:       }
19888: 19800: 126:       if (loanAmount > 0) {
19889: 19801: 127:         const deduction = Math.ceil(loanAmount * TWEAK.houseEntryLoanDeduction);
19890: 19802: 128:         loanAmount += deduction;
19891: 19803: 129:         updateLoanButton();
19892: 19804: 130:         houseReEntry++;
19893: 19805: 131:         console.log(`House entry fee: -$${deduction} (${TWEAK.houseEntryLoanDeduction * 100}% of $${loanAmount} loan)`);
19894: 19806: 132:         console.log("House re-entry count:", houseReEntry);
19895: 19807: 133:       }
19896: 19808: 134:     }
19897: 19809: 135:     if (isFirstHouseEntry) {
19898: 19810: 136:       isFirstHouseEntry = false;
19899: 19811: 137:     }
19900: 19812: 138:     updateMoneyDisplay();
19901: 19813: 139:   }
19902: 19814: 140:   else if (window.currentState === window.GameState.DOWNHILL) {
19903: 19815: 141:     document.getElementById("upgrade-menu").style.display = "none";
19904: 19816: 142:     document.getElementById("game-screen").style.display = "block";
19905: 19817: 143:     if (prevState === window.GameState.HOUSE) {
19906: 19818: 144:       earlyFinish = false;
19907: 19819: 145:       player.collisions = 0;
19908: 19820: 146:       player.x = window.canvas.width / 2;
19909: 19821: 147:       player.absY = mountainHeight - (player.height * 3);
19910: 19822: 148:       player.velocityY = 0;
19911: 19823: 149:       player.xVel = 0;
19912: 19824: 150:       downhillStartTime = performance.now();
19913: 19825: 151:       playerStartAbsY = player.absY;
19914: 19826: 152:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
19915: 19827: 153:     }
19916: 19828: 154:     else if (prevState === window.GameState.UPHILL) {
19917: 19829: 155:       player.velocityY = 0;
19918: 19830: 156:       player.xVel = 0;
19919: 19831: 157:       downhillStartTime = performance.now();
19920: 19832: 158:       playerStartAbsY = player.absY;
19921: 19833: 159:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
19922: 19834: 160:     }
19923: 19835: 161:   }
19924: 19836: 162:   else if (window.currentState === window.GameState.UPHILL) {
19925: 19837: 163:     document.getElementById("upgrade-menu").style.display = "none";
19926: 19838: 164:     document.getElementById("game-screen").style.display = "block";
19927: 19839: 165:     if (prevState === window.GameState.DOWNHILL) {
19928: 19840: 166:       awardMoney();
19929: 19841: 167:     }
19930: 19842: 168:     player.xVel = 0;
19931: 19843: 169:   }
19932: 19844: 170:   console.log(`Game state changed: ${prevState} -> ${window.currentState}`);
19933: 19845: 171: }
19934: 19846: 172: // Create and launch the Phaser game with scale options for responsiveness
19935: 19847: 173: var config = {
19936: 19848: 174:   type: Phaser.AUTO,
19937: 19849: 175:   parent: "game-screen",
19938: 19850: 176:   width: window.canvas.width,  // Reference from global window.canvas
19939: 19851: 177:   height: window.canvas.height, // Reference from global window.canvas
19940: 19852: 178:   scene: MainScene,
19941: 19853: 179:   backgroundColor: "#000000",
19942: 19854: 180:   scale: {
19943: 19855: 181:     mode: Phaser.Scale.FIT,
19944: 19856: 182:     autoCenter: Phaser.Scale.CENTER_BOTH
19945: 19857: 183:   }
19946: 19858: 184: };
19947: 19859: 185: var phaserGame = new Phaser.Game(config);
19948: 19860: 186: // Make functions available globally
19949: 19861: 187: window.changeState = changeState;
19950: 19862: 188: // Removed redundant global assignment - window.currentState is now managed directly
19951: 19863: ```````
19952: ````````
19953: 
19954: ## File: docs/CONTRIBUTING.md
19955: ````````markdown
19956:   1: How to Contribute to SledHEAD
19957:   2: =============================
19958:   3: 
19959:   4: Thank you for considering contributing to SledHEAD! Community involvement is crucial for making the game the best it can be. Whether you're fixing bugs, adding features, or improving documentation, your efforts are appreciated.
19960:   5: 
19961:   6: * * * * *
19962:   7: 
19963:   8: Key Resources
19964:   9: -------------
19965:  10: 
19966:  11: -   SledHEAD README -- Learn about the game's core concepts and current features.
19967:  12: 
19968:  13: -   SledHEAD License -- Understand the licensing terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets).
19969:  14: 
19970:  15: -   Issues & Roadmap -- Check the GitHub Issues section for current tasks and future goals.
19971:  16: 
19972:  17: -   Discussions -- Engage with the community, ask questions, and brainstorm ideas.
19973:  18: 
19974:  19: * * * * *
19975:  20: 
19976:  21: Getting Started
19977:  22: ---------------
19978:  23: 
19979:  24: 1.  Fork the Repository\
19980:  25:     Create your own fork of the repository and clone it locally.
19981:  26: 
19982:  27: 1.  Install Dependencies\
19983:  28:     SledHEAD is a web-based game built with JavaScript and Phaser.js. You'll just need a local HTTP server to test changes (like Python's http.server or Node's http-server).
19984:  29: 
19985:  30: 1.  Create a Branch\
19986:  31:     Work in a feature-specific branch:
19987:  32: 
19988:  33: git  checkout  -b  feature/your-feature-name
19989:  34: 
19990:  35: * * * * *
19991:  36: 
19992:  37: Testing Your Contributions
19993:  38: --------------------------
19994:  39: 
19995:  40: -   Manually playtest any gameplay changes and check for bugs.
19996:  41: -   Ensure that UI elements render correctly and gameplay mechanics (like tricks, upgrades, and photography) behave as expected.
19997:  42: -   Keep console errors to a minimum. Use `console.log` for temporary debugging but clean up before submitting.
19998:  43: 
19999:  44: * * * * *
20000:  45: 
20001:  46: Submitting Changes
20002:  47: ------------------
20003:  48: 
20004:  49: 1.  **Code Style**
20005:  50: 
20006:  51:     -   Use **two spaces for indentation, not tabs**.
20007:  52:     -   Write clean, readable code with comments where necessary.
20008:  53:     -   Follow existing naming conventions (camelCase for variables, PascalCase for classes).
20009:  54:     -   Avoid deeply nested logic---break it into functions for clarity.
20010:  55: 2.  **Commit Messages**\
20011:  56:     Write clear commit messages. For example:
20012:  57: 
20013:  58:     bash
20014:  59: 
20015:  60:     CopyEdit
20016:  61: 
20017:  62:     `git commit -m "Fix: Correct collision detection on uphill phase
20018:  63: 
20019:  64:     The collision detection logic for obstacles during the uphill phase
20020:  65:     now accurately accounts for terrain height variations."`
20021:  66: 
20022:  67: 3.  **Pull Request (PR)**
20023:  68: 
20024:  69:     -   Open a PR against the `main` branch.
20025:  70:     -   Include a clear description of what you've done and why.
20026:  71:     -   If your change fixes a bug or closes an issue, reference it in the PR description (e.g., `Closes #42`).
20027:  72:     -   Include screenshots or screen recordings if the change is visual.
20028:  73:     -   Be prepared for feedback---collaboration is key!
20029:  74: 
20030:  75: * * * * *
20031:  76: 
20032:  77: Coding Conventions
20033:  78: ------------------
20034:  79: 
20035:  80: -   **Consistency is key!** When in doubt, follow the style of existing code.
20036:  81: -   Use **strict equality** (`===` and `!==`).
20037:  82: -   Prefer `const` and `let` over `var`.
20038:  83: -   Document functions with comments explaining inputs, outputs, and purpose.
20039:  84: -   Keep functions focused and concise---single responsibility.
20040:  85: -   Handle errors gracefully and avoid silent failures.
20041:  86: -   Clean up `console.log` or temporary debug code before submitting.
20042:  87: 
20043:  88: * * * * *
20044:  89: 
20045:  90: Licensing of Contributions
20046:  91: --------------------------
20047:  92: 
20048:  93: -   **All contributions become licensed under AGPL 3.0 (for code) and CC BY-NC-SA 4.0 (for assets)**, consistent with the project's dual-license model.
20049:  94: -   By submitting a PR, you agree that your contributions may be included in SledHEAD and will be publicly available under these licenses.
20050:  95: 
20051:  96: * * * * *
20052:  97: 
20053:  98: Contributor License Agreement (CLA)
20054:  99: --------------------------
20055: 100: 
20056: 101: By contributing to **SledHEAD**, you agree to the Contributor License Agreement (CLA), granting the project owner the rights to use, modify, and commercialize your contributions. You retain ownership, but your work must be licensed under the project's current terms (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets) and can be re-licensed for commercial purposes.
20057: 102: 
20058: 103: By submitting a pull request, you confirm that you have the right to contribute and agree to these terms. 
20059: 104: 
20060: 105: See https://github.com/truevox/SledHEAD/docs/CONTRIBUTOR_LICENSE_AGREEMENT.md for more details.
20061: 106: 
20062: 107: 
20063: 108: * * * * *
20064: 109: 
20065: 110: Reporting Bugs & Requesting Features
20066: 111: ------------------------------------
20067: 112: 
20068: 113: -   Open a **GitHub Issue** describing the problem or request.
20069: 114: -   Be clear and detailed---steps to reproduce bugs, expected behavior, and screenshots help!
20070: 115: -   Mark issues with appropriate labels (like `bug`, `enhancement`, or `question`).
20071: 116: 
20072: 117: * * * * *
20073: 118: 
20074: 119: Need Help?
20075: 120: ----------
20076: 121: 
20077: 122: -   Join discussions on the GitHub repo.
20078: 123: -   Open an issue for technical support or feature questions.
20079: 124: -   Feedback, ideas, and constructive criticism are welcome!
20080: 125: 
20081: 126: * * * * *
20082: 127: 
20083: 128: Thank you for helping SledHEAD grow!
20084: ````````
20085: 
20086: ## File: docs/CONTRIBUTOR_LICENSE_AGREEMENT.md
20087: ````````markdown
20088:  1: # SledHEAD Contributor License Agreement (CLA)
20089:  2: 
20090:  3: Thank you for your interest in contributing to SledHEAD.
20091:  4: 
20092:  5: By submitting a contribution, you agree to the following terms:
20093:  6: 
20094:  7: 1. **License Grant**  
20095:  8:    You hereby grant Marvin Bentley II ("Project Owner") an **irrevocable, perpetual, worldwide, royalty-free license** to use, reproduce, modify, adapt, publish, translate, sublicense, distribute, and create derivative works of your contribution, in any medium, for any purpose, including commercial purposes.
20096:  9: 
20097: 10: 2. **Ownership**  
20098: 11:    You retain ownership of your contribution. However, you agree that your contribution is licensed under the project's current open-source licenses (AGPL 3.0 for code, CC BY-NC-SA 4.0 for assets), and you grant the Project Owner the right to relicense your contribution for commercial, proprietary, or any other purposes as the Project Owner requres.
20099: 12: 
20100: 13: 3. **Warranties**  
20101: 14:    - You confirm that you are legally entitled to submit the contribution and that it does not violate any third-party rights.  
20102: 15:    - You confirm that the contribution is your original work, or you have obtained the necessary rights for its use.
20103: 16: 
20104: 17: 4. **Contribution Scope**  
20105: 18:    This agreement applies to any future contributions you make to SledHEAD unless you explicitly state otherwise.
20106: 19: 
20107: 20: 5. **No Obligation to Use**  
20108: 21:    The Project Owner is under no obligation to use, merge, or distribute your contributions.
20109: 22: 
20110: 23: ---
20111: 24: 
20112: 25: By submitting a contribution, you indicate that you have read, understood, and agree to the terms of this Contributor License Agreement.
20113: 26: 
20114: 27: ---
20115: 28: 
20116: 29: *Signed electronically via your submission of a Pull Request.*
20117: ````````
20118: 
20119: ## File: docs/LICENSE.md
20120: ````````markdown
20121:   1: # SledHEAD Dual License Agreement
20122:   2: Version 1.2 – March 2025
20123:   3: 
20124:   4: This License Agreement applies to SledHEAD (the "Game"), including its source code and assets, created by the original author Marvin Bentley II ("Licensor"). By copying, modifying, distributing, or otherwise using the Game or any of its components, you (the "Licensee") agree to the following terms:
20125:   5: 
20126:   6: ## 1. Definitions
20127:   7: 
20128:   8: * "Source Code": The software code of the Game, including all scripts, programs, and software files intended to produce the Game’s functionality.
20129:   9: * "Assets": All non-code content in the Game, including but not limited to artwork, images, textures, models, sprites, music, sound effects, voice, dialogue, level designs, animations, and any other audiovisual or creative works included with the Game.
20130:  10: * "Mod" or "Modification": Any derivative work that is based on or uses any portion of the Game’s Source Code or Assets, including add-ons, plugins, expansions, or fan-made content that extends or alters the Game.
20131:  11: * "Commercial Use": Use of the Game or its components that is intended for or directed toward commercial advantage or monetary compensation. (For clarity: selling the Game or Mods, charging money for access to the Game or Mods, or monetizing the Game’s Assets as standalone products are considered Commercial Use. However, monetization of gameplay videos/streams is addressed separately in Section 4.)
20132:  12: * "You" (or "Licensee"): Any individual or legal entity exercising the rights granted by this License (for example, a player, developer, or modder who uses the Game or its content).
20133:  13: * "Licensor": The original author and copyright holder of SledHEAD.
20134:  14: 
20135:  15: ## 2. Open Source License for Source Code
20136:  16: 
20137:  17: The Source Code of SledHEAD is licensed to you under the terms of the GNU Affero General Public License, version 3 (AGPLv3), or (at your option) any later version of the AGPL published by the Free Software Foundation. This means:
20138:  18: 
20139:  19: * You may use, study, copy, modify, and distribute the Source Code freely, provided you comply with the AGPLv3 terms. In particular, if you distribute your modified version of the Source Code or if you make it available for use over a network (e.g. running a modified game server for others to play), you must make your Source Code modifications publicly available under the same license (AGPLv3).
20140:  20: * The full text of the AGPLv3 is provided along with this agreement (usually in a file named AGPL-3.0.txt or similar). By accepting this License, you agree to abide by the conditions of AGPLv3 for the Game’s Source Code.
20141:  21: * No Additional Restrictions on Source Code: Except as expressly stated in this Agreement, you may not impose any further restrictions on the exercise of the rights granted or affirmed under the AGPLv3 for the Source Code. (In other words, the Source Code remains free and open under AGPLv3 terms whenever it is distributed or deployed, unless a separate Commercial License is obtained as described in Section 6.)
20142:  22: 
20143:  23: ## 3. Creative Commons License for Assets
20144:  24: 
20145:  25: All Assets of SledHEAD (non-code content) are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). Under this license:
20146:  26: 
20147:  27: * You are free to:
20148:  28:   * Share – copy and redistribute the Assets in any medium or format.
20149:  29:   * Adapt – remix, transform, and build upon the Assets for any non-commercial purpose.
20150:  30: * Attribution – You must give appropriate credit to the original author (see Section 5), provide a link to the CC BY-NC-SA 4.0 license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the Licensor endorses you or your use.
20151:  31: * NonCommercial – You may not use the Assets for commercial purposes. (Using the Assets or any derivative of them to generate revenue or for any commercial advantage is prohibited unless you have obtained a separate Commercial License as per Section 6.)
20152:  32: * ShareAlike – If you remix, transform, or build upon the Assets, you must distribute your contributions under the same license (CC BY-NC-SA 4.0) or a license that is more permissive. “More permissive” means any license that grants equal or greater rights to the public than CC BY-NC-SA (for example, you may choose to release your own original derivative Assets under CC BY-SA or CC BY, which would allow commercial use or omit the ShareAlike requirement, but you cannot apply a more restrictive license or make the assets wholly proprietary).
20153:  33: * The full text of the CC BY-NC-SA 4.0 license is provided with this agreement (or accessible via the Creative Commons website). By using the Game’s Assets, you agree to the terms of CC BY-NC-SA 4.0.
20154:  34: * No Commercial Exploitation of Assets: For clarity, you cannot sell, license, or otherwise commercially exploit the Game’s Assets (original or modified) on their own or as part of a product, except under a separate Commercial License (Section 6). For example, you cannot charge money for a soundtrack that includes the Game’s music, or include the Game’s art in a paid product, without permission.
20155:  35: 
20156:  36: ## 4. Permission for Videos, Streaming, and Screenshots
20157:  37: 
20158:  38: The Licensor explicitly grants permission to all users to capture, use, and share audiovisual content from the Game (including gameplay videos, streams, screenshots, and similar content), even if monetized, without needing any additional license or permission, as long as such use does not misrepresent the origin of the Game. This means:
20159:  39: 
20160:  40: * You may stream or record gameplay on platforms like Twitch, YouTube, etc., and you may monetize these videos/streams (for example, through ads, sponsorships, or donations). This use is allowed and considered non-commercial with respect to the Game’s Assets because it is promotional/fan content by the community. The NonCommercial restriction in Section 3 is waived for this specific type of content creation.
20161:  41: * You do not need to ask the Licensor for permission to create let’s play videos, reviews, or live streams of SledHEAD. This is encouraged as part of community engagement. Attribution (such as naming the Game) in the video/stream description or verbally is appreciated but not strictly required beyond what the platform norms are, since the content itself usually makes it clear it’s SledHEAD. (However, you still must not claim to be the creator of the Game.)
20162:  42: * This permission for videos/streams does not grant you the right to extract the Assets and use them separately in other commercial products (Section 3’s NonCommercial rule still applies to the Assets themselves). It only covers the use of recorded or displayed in-game content as part of video/stream content. For example, using a game’s music as background of an unrelated commercial video would not be covered by this clause, but showing the game’s music as it plays during gameplay footage is fine.
20163:  43: 
20164:  44: ## 5. Attribution Requirement
20165:  45: 
20166:  46: You must give appropriate credit to the original author (Licensor) when you distribute or publicly use the Game (or any substantial portion of it, including Mods). This is a condition of the CC BY-NC-SA license for Assets and is hereby made a condition of this overall license. The attribution should be placed in a manner appropriate to the medium:
20167:  47: 
20168:  48: * If you distribute the Game in unmodified form, include the original credits (which should already list the author) and license information. Typically, the Game already contains an in-game credits section or documentation listing the author and contributors — retain that.
20169:  49: * If you create a Mod or a fork of the Game, you must credit SledHEAD and the original author somewhere in your project. For example, in an “About” menu, “Credits” screen, README file, or documentation for your Mod, include a notice such as: “This project is based on SledHEAD, originally created by Marvin Bentley II. SledHEAD is © 2024 Marvin Bentley II and is licensed under AGPLv3 (code) and CC BY-NC-SA 4.0 (assets).” Adjust the wording as appropriate, but it should be reasonably prominent, as appropriate for the medium.
20170:  50: * If you use parts of the Source Code in another project, you must keep the copyright and license notices in those source files per AGPL requirements. Additionally, an attribution in your project’s documentation or credits to the SledHEAD project is required.
20171:  51: * The attribution requirement is not intended to be burdensome: it’s mainly to ensure the original creators are acknowledged. A single mention in a credits section or README is typically sufficient, as long as it's accessible to users of your product or Mod.
20172:  52: 
20173:  53: ## 6. Modding and Derivative Works
20174:  54: 
20175:  55: SledHEAD is mod-friendly and open to community contributions, under the following conditions:
20176:  56: 
20177:  57: * **Mods - Source Code:** If you create a Mod that includes or is based on the Game’s Source Code, the Mod’s source code must be released under the AGPLv3 (same as the Game) or an even more permissive open-source license. More permissive licenses include, for example, GNU GPLv3, MIT, Apache 2.0, etc., which do not impose additional restrictions beyond AGPL. This ensures that anyone who plays or uses your Mod has the same rights to obtain and modify the source. You cannot make a closed-source mod using the Game’s code without a separate Commercial License (see Section 7).
20178:  58: * **Mods - Assets:** If your Mod includes or modifies any of the Game’s Assets, then all such Assets in your Mod must be licensed under CC BY-NC-SA 4.0 (the same license as the base game assets) or a more permissive license. “More permissive” in this context could be, for example, CC BY-SA 4.0 (which allows commercial use but still requires ShareAlike) or CC BY 4.0 (which allows commercial use and no ShareAlike). You may choose a more permissive license for your original assets if you want to allow broader use, but you must at least allow the same scope of use that CC BY-NC-SA permits. You cannot put additional restrictions on derivatives of the Game’s Assets beyond CC BY-NC-SA.
20179:  59: * **No circumvention via Mods:** You may not create a Mod or derivative work that is essentially a way to evade the NonCommercial restriction on the original Assets. For example, you can’t repackage a level of SledHEAD as a “mod” and sell it, claiming the new level’s art is under a different license. Any part of a Mod derived from original Assets inherits the NonCommercial restriction.
20180:  60: * **Paid Mods:** SledHEAD’s open licenses are designed such that Mods are freely shareable and open. While charging money for a Mod is strongly discouraged under this license scheme, we acknowledge it can happen. If you choose to sell or paywall a Mod, you do so at your own risk under the license terms:
20181:  61:   * The Mod’s source code must still be AGPLv3 (or open-source), meaning anyone who obtains the Mod (even by purchasing it) must have access to the source and the right to redistribute it. Practically, this means once one person has bought your Mod, they have the legal right to share the code with others for free. You cannot revoke that right, so a paywalled open-source mod is of limited enforceability (the “paywall” is more of a donation or early access mechanism, not a true sale of exclusive rights).
20182:  62:   * Any of the Mod’s assets that derive from SledHEAD Assets carry the NonCommercial clause. This means you technically cannot charge for those assets or any product containing them. If your Mod contains only your own original assets and you license them under a more permissive license (such as CC BY-SA or even a proprietary license you own), you have more leeway to charge for the Mod. However, by including SledHEAD’s original game content or requiring the Game to run, your Mod is still a derivative work of the Game as a whole, and thus selling it without the Licensor’s permission could violate the spirit of the NonCommercial clause.
20183:  63:   * In summary: If you want to monetize a Mod, you should seek a Commercial License from the Licensor (see Section 7) to cover that, or ensure that your Mod is completely your own independent work and doesn’t include NonCommercial content. Otherwise, anyone is legally free to redistribute your Mod for non-commercial purposes (or as allowed by whatever license you chose) without paying, and the Licensor reserves the right to enforce the NonCommercial clause if needed.
20184:  64: * **Mods Must Credit Original:** As noted in Section 5, Mods should credit SledHEAD and the original author. Making mods open-source and crediting the base game helps build a healthy community and is a condition of using the Game’s content.
20185:  65: * **Upstream Contributions:** If you make improvements or fixes to the base Game’s Source Code (as opposed to separate mods), you are encouraged to contribute them back to the main project. You can do this by submitting patches or pull requests to the original repository. Note that by contributing, you agree that your contribution will be licensed under the same terms as this License (so it remains AGPL for code and CC BY-NC-SA for any assets you contribute, unless otherwise agreed). The Licensor may ask you to sign a contributor agreement (see Section 9) to clarify licensing of contributions.
20186:  66: 
20187:  67: ## 7. Commercial License Option
20188:  68: 
20189:  69: The Licensor offers the possibility of a separate Commercial License for parties interested in using SledHEAD in ways not permitted by the above open licenses (AGPL and CC BY-NC-SA). This could apply if, for example, you want to: distribute the game in a proprietary (closed-source) manner, use the Assets commercially, include SledHEAD in a commercial product, or otherwise not comply with AGPL/CC BY-NC-SA terms. The following terms govern the Commercial License option:
20190:  70: 
20191:  71: * **By Request:** You must contact the Licensor to request a Commercial License. Terms (including scope, duration, and fees) are negotiable on a case-by-case basis. For instance, the Licensor may offer a one-time purchase license, a revenue-sharing agreement, or a subscription model, depending on the nature of the use.
20192:  72: * **No Guaranteed Approval:** The Licensor has sole discretion to decide whether or not to grant a Commercial License to any requesting party. Simply requesting a Commercial License does not guarantee you will receive one. The Licensor may decline for any reason or require certain conditions.
20193:  73: * **Override of Open Terms:** A duly granted Commercial License will override or modify the AGPL and CC BY-NC-SA terms for the party to whom it is granted, as specified in that license agreement. For example, a Commercial License may allow you to keep your source code modifications proprietary, or to use the Assets in a commercial game, notwithstanding Sections 2 and 3. The exact permissions and exceptions will be written in that separate agreement. Unless and until you have a signed Commercial License, you are bound by the AGPL and CC BY-NC-SA terms described in this document.
20194:  74: * **Closed Source Allowed with Commercial License:** Under a Commercial License, the Licensor may permit you to create a closed-source derivative or include SledHEAD code in a larger proprietary project. This is an exception to the copyleft requirement, granted only through the Commercial License.
20195:  75: * **Written Agreement:** Any Commercial License will be provided in writing (which may be a separate contract or license document). It will detail the rights granted, any limitations, and the financial terms. You will likely be required to prominently credit the original author even in commercial use, unless otherwise agreed.
20196:  76: 
20197:  77: ## 8. Reservation of Rights and Future Relicensing
20198:  78: 
20199:  79: * **Ownership:** The Licensor (original author) retains all rights, title, and interest in SledHEAD and its Source Code and Assets, except for the licenses expressly granted to you under this Agreement. No trademark rights are granted (the name SledHEAD is not necessarily covered by this license—separate permissions may be needed to use the name or logos in commercial contexts).
20200:  80: * **Right to Relicense:** The Licensor reserves the right to relicense or release parts or all of the Game under different terms in the future, including more permissive open-source licenses. For example, the Licensor may later decide to release certain Assets under a license like CC BY 4.0 (which would allow commercial use) or even dedicate some components to the public domain. Similarly, future versions of the Source Code might be released under a license like MIT or GPL, etc., at the Licensor’s discretion.
20201:  81: * **Effect on Existing License:** Any such re-licensing by the Licensor in the future will not retroactively revoke the rights you've obtained under this Agreement. (For example, if you received the game under AGPL/CC BY-NC-SA, that specific release is still under those terms for you.) However, the Licensor may offer upgraded license terms for future versions or for specific components, which you can opt to use under those new terms.
20202:  82: * **Contributions from Others:** If the project receives contributions from other developers (community contributions), the Licensor will ensure that those contributions are either made under a contributor agreement or appropriate terms such that the Licensor can include them in future releases. This is to maintain the ability to relicense if needed. (See Section 9 about contributor agreements.)
20203:  83: * **No Obligation to Future Licensing:** Nothing in this clause guarantees that the Licensor will release a more permissive version, only that it’s a possibility. Users and contributors should be aware that license terms might be adjusted in future releases, but any such change will be clearly communicated and, if necessary, consent from contributors will be obtained.
20204:  84: 
20205:  85: ## 9. Contributor License Agreement (CLA) (for external contributors)
20206:  86: 
20207:  87: At present (initial release), all code and assets in SledHEAD are authored by the original Licensor. If you wish to contribute to the project (e.g., by submitting code or asset improvements), the Licensor may ask you to sign a Contributor License Agreement. A CLA typically confirms that: (a) you have the right to contribute what you send, (b) you grant the Licensor permission to use and relicense your contribution under this project’s license and potentially other licenses in the future, and (c) you understand your contribution is provided under the same open license to all users.
20208:  88: 
20209:  89: * **Necessity of CLA:** The CLA is intended to make future license changes or commercial licensing of the project smoother, by ensuring all contributors agree on how their contributions can be used. If you do not sign such an agreement, the Licensor might not be able to accept your contribution, especially if it’s significant, because it could complicate the ability to relicense or offer commercial terms later.
20210:  90: * **Timing:** You generally won’t need to sign a CLA until you are about to make the first contribution that will be merged into the project. Simply using or modding the game doesn’t require a CLA. It’s only for when you contribute code or assets back to the official project. The Licensor may publish the CLA text and a process (e.g., an online sign-off) when the project starts accepting outside contributions.
20211:  91: * **Contributor Rights:** Even after signing a CLA, you (as a contributor) still retain copyright to your contributions and you can reuse your contributed code elsewhere. The CLA just gives the Licensor a broad right to include your work in SledHEAD and relicense as needed (for instance, if in the future SledHEAD moves to a different license or a commercial dual-license model, your contribution can be included).
20212:  92: * **No CLA at Initial Release:** If you are simply downloading or using the game, this section doesn’t affect you. It’s informational in case the project grows with community help. The Licensor will announce when a CLA becomes required (likely before accepting the first non-trivial external commit).
20213:  93: 
20214:  94: ## 10. Disclaimer of Warranty
20215:  95: 
20216:  96: THE GAME (INCLUDING SOURCE CODE AND ASSETS) IS PROVIDED "AS IS" AND WITHOUT WARRANTY OF ANY KIND. To the fullest extent permitted by law, the Licensor disclaims all warranties, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement. You accept all risk as to the quality and performance of the Game. Should the Game prove defective, you assume the cost of all necessary servicing, repair, or correction. No oral or written information or advice provided by the Licensor shall create any warranty. (This disclaimer is in line with Section 15 of the AGPLv3 and Section 5 of CC BY-NC-SA 4.0.)
20217:  97: 
20218:  98: ## 11. Limitation of Liability
20219:  99: 
20220: 100: Under no circumstances and under no legal theory (including, without limitation, tort (including negligence), contract, or otherwise) shall the Licensor, or anyone who has contributed to the Game, be liable to you for any direct, indirect, incidental, consequential, special, or exemplary damages arising out of or relating to this License or the use of the Game, even if the Licensor has been advised of the possibility of such damages. In jurisdictions that do not allow the exclusion or limitation of certain damages, the Licensor’s liability shall be limited to the minimum extent permitted by law. You acknowledge that the Licensor is not liable for how you use the Game or Mods, or any outcomes of using it (for example, no liability for loss of data, loss of profits, or legal issues you might incur by violating this Agreement).
20221: 101: 
20222: 102: ## 12. General
20223: 103: 
20224: 104: * **Severability:** If any provision of this License is held to be unenforceable or invalid by a court of competent jurisdiction, that provision will be modified to the minimum extent necessary to make it enforceable (or severed if necessary), and the rest of the License will remain in effect.
20225: 105: * **No Endorsement:** Nothing in this License gives you rights to use the name, logos, or trademarks of SledHEAD or the Licensor for promotional purposes (aside from factual attribution as required). You cannot imply that your Mod or product is endorsed by the original author without separate permission.
20226: 106: * **License Acceptance:** By using the Game (or any of its Source Code or Assets), you indicate your acceptance of this License. If you do not agree to these terms, you do not have permission to use the Game or its contents.
20227: 107: * **Copyright Notice:** © 2024 Marvin Bentley II. All rights reserved, except as explicitly granted by this License.
20228: ````````
20229: 
20230: ## File: js/mobs/mountainlion.js
20231: ````````javascript
20232:  1: /* mountainlion.js - Mountain Lion Animal Module
20233:  2: // This module defines the mountain lion characteristics for the wildlife simulation.
20234:  3: // It registers itself with wildlife.js by calling registerAnimalType().
20235:  4: // Drawn in a style consistent with our bear and bird modules, with a pretty kitty flair.
20236:  5: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
20237:  6: */
20238:  7: (function() {
20239:  8:     // Helper function to draw a rectangle at an angle, centered at (cx, cy)
20240:  9:     function drawRectAtAngle(ctx, cx, cy, width, height, angleDeg, fillStyle) {
20241: 10:         let rad = angleDeg * Math.PI / 180;
20242: 11:         ctx.save();
20243: 12:         ctx.translate(cx, cy);
20244: 13:         ctx.rotate(rad);
20245: 14:         ctx.fillStyle = fillStyle;
20246: 15:         ctx.fillRect(-width / 2, -height / 2, width, height);
20247: 16:         ctx.restore();
20248: 17:     }
20249: 18:     var mountainLionData = {
20250: 19:         type: "mountainlion",
20251: 20:         spawnProbability: 2.0, // Very high spawn chance
20252: 21:         width: 50,
20253: 22:         height: 30,
20254: 23:         detectionRadius: 60,
20255: 24:         speed: 10,
20256: 25:         basePhotoBonus: 15, // Good bonus for a pretty kitty
20257: 26:         color: "#F9E79F",   // A soft golden color
20258: 27:         spawningBiomes: [
20259: 28:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
20260: 29:         ],
20261: 30:         customUpdate: null,
20262: 31:         customDraw: function(animal, screenY, ctx) {
20263: 32:             // Draw the body
20264: 33:             ctx.fillStyle = animal.color;
20265: 34:             ctx.fillRect(
20266: 35:                 animal.x - animal.width / 2,
20267: 36:                 screenY - animal.height / 2,
20268: 37:                 animal.width,
20269: 38:                 animal.height
20270: 39:             );
20271: 40:             // Draw left ear as a triangle
20272: 41:             ctx.beginPath();
20273: 42:             ctx.moveTo(animal.x - animal.width / 4, screenY - animal.height / 2);
20274: 43:             ctx.lineTo(animal.x - animal.width / 4 - 10, screenY - animal.height / 2 - 15);
20275: 44:             ctx.lineTo(animal.x - animal.width / 4 + 10, screenY - animal.height / 2 - 15);
20276: 45:             ctx.closePath();
20277: 46:             ctx.fillStyle = "#000000";
20278: 47:             ctx.fill();
20279: 48:             // Draw right ear
20280: 49:             ctx.beginPath();
20281: 50:             ctx.moveTo(animal.x + animal.width / 4, screenY - animal.height / 2);
20282: 51:             ctx.lineTo(animal.x + animal.width / 4 - 10, screenY - animal.height / 2 - 15);
20283: 52:             ctx.lineTo(animal.x + animal.width / 4 + 10, screenY - animal.height / 2 - 15);
20284: 53:             ctx.closePath();
20285: 54:             ctx.fill();
20286: 55:             // Draw a tail using an angled rectangle
20287: 56:             let tailPivotX = animal.x + animal.width / 2;
20288: 57:             let tailPivotY = screenY + animal.height / 2;
20289: 58:             let tailAngle = -45;
20290: 59:             let tailWidth = 20;
20291: 60:             let tailHeight = 8;
20292: 61:             drawRectAtAngle(ctx, 
20293: 62:                 tailPivotX + (tailWidth / 2) * Math.cos(tailAngle * Math.PI / 180),
20294: 63:                 tailPivotY + (tailWidth / 2) * Math.sin(tailAngle * Math.PI / 180),
20295: 64:                 tailWidth, 
20296: 65:                 tailHeight, 
20297: 66:                 tailAngle, 
20298: 67:                 animal.color
20299: 68:             );
20300: 69:             // Altitude indicator
20301: 70:             let t = 1 - (animal.altitude / 100);
20302: 71:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
20303: 72:             ctx.fillStyle = altitudeColor;
20304: 73:             ctx.fillRect(
20305: 74:                 animal.x + animal.width / 2 + 5,
20306: 75:                 screenY - 5,
20307: 76:                 10,
20308: 77:                 10
20309: 78:             );
20310: 79:         }
20311: 80:     };
20312: 81:     if (typeof registerAnimalType === 'function') {
20313: 82:         registerAnimalType(mountainLionData);
20314: 83:     } else {
20315: 84:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
20316: 85:     }
20317: 86: })();
20318: ````````
20319: 
20320: ## File: js/camera.js
20321: ````````javascript
20322:  1: // camera.js
20323:  2: // This file is responsible for handling the photography
20324:  3: // mechanics.
20325:  4: // Global variables for photo system
20326:  5: var lastPhotoTime = 0;
20327:  6: // ------------------- Photo (Critter) Minigame Logic -------------------
20328:  7: // Handles taking a photo of an animal when conditions are met.
20329:  8: function takePhoto() {
20330:  9:   let now = Date.now();
20331: 10:   if (now - lastPhotoTime < TWEAK.photoCooldown) return; // Enforce cooldown
20332: 11:   if (!activeAnimal || !isAnimalInsideCone(activeAnimal)) return;
20333: 12:   lastPhotoTime = now;
20334: 13:   let baseValue = TWEAK.basePhotoValue;
20335: 14:   // Altitude Bonus: exponential falloff within 50 units.
20336: 15:   let diffAlt = Math.abs(player.altitudeLine - activeAnimal.altitude);
20337: 16:   let altitudeMatchBonus;
20338: 17:   if (diffAlt > 50) {
20339: 18:     altitudeMatchBonus = 1;
20340: 19:   } else {
20341: 20:     altitudeMatchBonus = 1 + (TWEAK.altitudeMatchMultiplier - 1) * Math.exp(-diffAlt / 15);
20342: 21:   }
20343: 22:   // Center Bonus: based on the angle difference between camera direction and animal.
20344: 23:   let animalAngle = Math.atan2(activeAnimal.y - player.absY, activeAnimal.x - player.x) * (180 / Math.PI);
20345: 24:   if (animalAngle < 0) animalAngle += 360;
20346: 25:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
20347: 26:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
20348: 27:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
20349: 28:   let sweetSpotPercentage = 0.10 + (playerUpgrades.optimalOptics * 0.01);
20350: 29:   let sweetSpotAngle = coneAngle * sweetSpotPercentage;
20351: 30:   let centerBonus;
20352: 31:   if (diffAngle <= sweetSpotAngle) {
20353: 32:     centerBonus = TWEAK.centerPOVMultiplier;
20354: 33:   } else if (diffAngle < coneAngle / 2) {
20355: 34:     let factor = (diffAngle - sweetSpotAngle) / (coneAngle / 2 - sweetSpotAngle);
20356: 35:     centerBonus = 1 + (TWEAK.centerPOVMultiplier - 1) * Math.exp(-factor * 3);
20357: 36:   } else {
20358: 37:     centerBonus = 1;
20359: 38:   }
20360: 39:   // Movement Bonus and Animal Type Multiplier:
20361: 40:   let movementBonus = activeAnimal.state !== "sitting" ? TWEAK.fleeingAnimalMultiplier : 1;
20362: 41:   let animalTypeMultiplier = activeAnimal.type === "bear" ? TWEAK.bearMultiplier : TWEAK.birdMultiplier;
20363: 42:   let repeatPenalty = activeAnimal.hasBeenPhotographed ? TWEAK.repeatPhotoPenalty : 1;
20364: 43:   let totalMoney = Math.floor(baseValue * altitudeMatchBonus * centerBonus * movementBonus * animalTypeMultiplier * repeatPenalty);
20365: 44:   player.money += totalMoney;
20366: 45:   showMoneyGain(totalMoney, `(📸 ${activeAnimal.type})`);
20367: 46:   addFloatingText(`+$${totalMoney} 📸`, player.x, player.absY);
20368: 47:   console.log(`Captured ${activeAnimal.type}! Calculation details: Base=$${baseValue}, AltitudeBonus=${altitudeMatchBonus.toFixed(2)}, CenterBonus=${centerBonus.toFixed(2)}, MovementBonus=${movementBonus.toFixed(2)}, AnimalTypeMultiplier=${animalTypeMultiplier}, RepeatPenalty=${repeatPenalty}, Total=$${totalMoney}.`);
20369: 48:   // After taking a photo, animal should always flee
20370: 49:   if (activeAnimal.state === "sitting") {
20371: 50:     console.log(`Animal (${activeAnimal.type}) startled by camera - changing state from sitting to fleeing`);
20372: 51:     activeAnimal.state = "fleeing";
20373: 52:     activeAnimal.fleeingLogOnce = false; // Reset so we get the fleeing log message
20374: 53:   }
20375: 54:   activeAnimal.hasBeenPhotographed = true;
20376: 55: }
20377: 56: // Check if the animal is inside the camera cone
20378: 57: function isAnimalInsideCone(animal) {
20379: 58:   // Distance check
20380: 59:   let dx = animal.x - player.x;
20381: 60:   let dy = animal.y - player.absY;
20382: 61:   let distanceSquared = dx * dx + dy * dy;
20383: 62:   let maxDistance = TWEAK.maxAnimalPhotoDistance;
20384: 63:   if (distanceSquared > maxDistance * maxDistance) return false;
20385: 64:   // Angle check
20386: 65:   let animalAngle = Math.atan2(dy, dx) * (180 / Math.PI);
20387: 66:   if (animalAngle < 0) animalAngle += 360;
20388: 67:   let diffAngle = Math.abs(animalAngle - player.cameraAngle);
20389: 68:   if (diffAngle > 180) diffAngle = 360 - diffAngle;
20390: 69:   let coneAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
20391: 70:   return diffAngle <= coneAngle / 2;
20392: 71: }
20393: ````````
20394: 
20395: ## File: js/jumpsled.js
20396: ````````javascript
20397:  1: // jumpsled.js
20398:  2: // This file contains all jump-related functions for SledHEAD
20399:  3: function onPlayerJumpStart() {
20400:  4:   player.jumpStartTime = performance.now();
20401:  5:   player.jumpStartY = player.absY;
20402:  6:   player.jumpPeakY = player.absY;
20403:  7:   console.log("Jump initiated at Y:", player.jumpStartY.toFixed(1));
20404:  8:   unlockAudioContext();
20405:  9:   jumpOsc = audioCtx.createOscillator();
20406: 10:   jumpGain = audioCtx.createGain();
20407: 11:   jumpOsc.type = "sine";
20408: 12:   jumpGain.gain.setValueAtTime(0.3, audioCtx.currentTime);
20409: 13:   jumpOsc.connect(jumpGain);
20410: 14:   jumpGain.connect(audioCtx.destination);
20411: 15:   jumpOsc.start();
20412: 16:   // Drain stamina on jump initiation
20413: 17:   stamina.drainJump();
20414: 18: }
20415: 19: function onPlayerJumpPeak() {
20416: 20:   console.log("Reached peak of jump.");
20417: 21:   // Optionally add a sound effect here.
20418: 22: }
20419: 23: function cleanupJumpSound() {
20420: 24:   if (jumpOsc) {
20421: 25:     jumpOsc.stop();
20422: 26:     jumpOsc.disconnect();
20423: 27:     jumpOsc = null;
20424: 28:   }
20425: 29:   if (jumpGain) {
20426: 30:     jumpGain.disconnect();
20427: 31:     jumpGain = null;
20428: 32:   }
20429: 33: }
20430: 34: function onPlayerLand() {
20431: 35:   const jumpTime = (performance.now() - player.jumpStartTime) / 1000;
20432: 36:   const jumpHeight = player.jumpPeakY - player.jumpStartY;
20433: 37:   const totalDistance = player.absY - player.jumpStartY;
20434: 38:   console.log(`Jump complete! Time: ${jumpTime.toFixed(2)}s, Peak Height: ${jumpHeight.toFixed(1)}, Distance: ${totalDistance.toFixed(1)}`);
20435: 39:   cleanupJumpSound();
20436: 40:   stamina.resetJumpTrigger();
20437: 41: }
20438: ````````
20439: 
20440: ## File: js/loan.js
20441: ````````javascript
20442:  1: /* loan.js - Loan Management & Victory Condition */
20443:  2: // Loan System
20444:  3: var loanAmount = 100000; // Initial loan amount
20445:  4: function updateLoanButton() {
20446:  5:   const loanButton = document.getElementById("payLoan");
20447:  6:   if (loanButton) {
20448:  7:     if (loanAmount <= 0) {
20449:  8:       loanButton.textContent = "LOAN PAID OFF!";
20450:  9:       loanButton.disabled = true;
20451: 10:       // Show victory banner
20452: 11:       document.getElementById("victoryBanner").style.display = "block";
20453: 12:     } else {
20454: 13:       loanButton.textContent = `Pay Loan ($${loanAmount.toLocaleString()})`;
20455: 14:       loanButton.disabled = false;
20456: 15:     }
20457: 16:   }
20458: 17: }
20459: 18: function payLoan() {
20460: 19:   if (player.money > 0) {
20461: 20:     const payment = Math.min(player.money, loanAmount);
20462: 21:     loanAmount -= payment;
20463: 22:     player.money -= payment;
20464: 23:     updateMoneyDisplay(); // This function should update the on-screen money (see below)
20465: 24:     updateLoanButton();
20466: 25:     if (loanAmount <= 0) {
20467: 26:       console.log("🎉 Loan paid off! Victory!");
20468: 27:       playTone(800, "sine", 0.3, 0.5); // Victory sound
20469: 28:     } else {
20470: 29:       console.log(`💰 Loan payment: $${payment}. Remaining: $${loanAmount}`);
20471: 30:       playTone(600, "sine", 0.1, 0.2); // Payment sound
20472: 31:     }
20473: 32:   }
20474: 33: }
20475: ````````
20476: 
20477: ## File: js/notify.js
20478: ````````javascript
20479:  1: /* notify.js */
20480:  2: // Generic notification framework for SledHEAD
20481:  3: // Base function to show notifications
20482:  4: function showNotification(message, colorRGBA = [255, 255, 0, 0.8], duration = 1000) {
20483:  5:   // Generate a unique ID based on the message
20484:  6:   const notificationId = 'notification-' + message.replace(/\s+/g, '-').toLowerCase();
20485:  7:   // Create or get the notification element
20486:  8:   let notification = document.getElementById(notificationId);
20487:  9:   if (!notification) {
20488: 10:     notification = document.createElement('div');
20489: 11:     notification.id = notificationId;
20490: 12:     notification.style.position = 'fixed';
20491: 13:     notification.style.top = '50%';
20492: 14:     notification.style.left = '50%';
20493: 15:     notification.style.transform = 'translate(-50%, -50%)';
20494: 16:     notification.style.backgroundColor = `rgba(${colorRGBA[0]}, ${colorRGBA[1]}, ${colorRGBA[2]}, ${colorRGBA[3]})`;
20495: 17:     notification.style.color = 'white';
20496: 18:     notification.style.padding = '20px';
20497: 19:     notification.style.borderRadius = '10px';
20498: 20:     notification.style.fontWeight = 'bold';
20499: 21:     notification.style.fontSize = '24px';
20500: 22:     notification.style.textAlign = 'center';
20501: 23:     notification.style.zIndex = '1000';
20502: 24:     notification.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.7)';
20503: 25:     document.body.appendChild(notification);
20504: 26:   }
20505: 27:   // Set content and make visible
20506: 28:   notification.textContent = message;
20507: 29:   notification.style.display = 'block';
20508: 30:   // Fade out after specified duration
20509: 31:   setTimeout(() => {
20510: 32:     notification.style.transition = 'opacity 0.5s';
20511: 33:     notification.style.opacity = '0';
20512: 34:     setTimeout(() => {
20513: 35:       notification.style.display = 'none';
20514: 36:       notification.style.opacity = '1';
20515: 37:       notification.style.transition = '';
20516: 38:     }, 500);
20517: 39:   }, duration);
20518: 40: }
20519: 41: // Specific notification types with predefined colors
20520: 42: function showErrorNotification(message, duration = 1000) {
20521: 43:   // Red background for errors
20522: 44:   showNotification(message, [255, 0, 0, 0.8], duration);
20523: 45:   // Play an error sound if available
20524: 46:   if (typeof playTone === 'function') {
20525: 47:     playTone(200, "square", 0.3, 0.4);
20526: 48:   }
20527: 49: }
20528: 50: function showSuccessNotification(message, duration = 1000) {
20529: 51:   // Green background for success
20530: 52:   showNotification(message, [0, 128, 0, 0.8], duration);
20531: 53:   // Play a positive sound if available
20532: 54:   if (typeof playTone === 'function') {
20533: 55:     playTone(600, "sine", 0.3, 0.4);
20534: 56:   }
20535: 57: }
20536: 58: function showWarningNotification(message, duration = 1000) {
20537: 59:   // Yellow background for warnings
20538: 60:   showNotification(message, [255, 255, 0, 0.8], duration);
20539: 61:   // Play a warning sound if available
20540: 62:   if (typeof playTone === 'function') {
20541: 63:     playTone(400, "triangle", 0.3, 0.4);
20542: 64:   }
20543: 65: }
20544: 66: function showInfoNotification(message, duration = 1000) {
20545: 67:   // Blue background for info
20546: 68:   showNotification(message, [0, 0, 255, 0.8], duration);
20547: 69: }
20548: 70: // Export functions for use in other modules
20549: 71: if (typeof module !== 'undefined' && module.exports) {
20550: 72:   module.exports = {
20551: 73:     showNotification,
20552: 74:     showErrorNotification,
20553: 75:     showSuccessNotification,
20554: 76:     showWarningNotification,
20555: 77:     showInfoNotification
20556: 78:   };
20557: 79: }
20558: ````````
20559: 
20560: ## File: js/registry.js
20561: ````````javascript
20562:  1: /*
20563:  2: // registry.js
20564:  3: export const functionRegistry = {};
20565:  4: export function register(name) {
20566:  5:   return function(target, key, descriptor) {
20567:  6:     const fnName = name || key;
20568:  7:     functionRegistry[fnName] = descriptor.value;
20569:  8:     return descriptor;
20570:  9:   };
20571: 10: }
20572: 11: */
20573: 12: // registry.js
20574: 13: export const functionRegistry = {};
20575: 14: export function register(name, fn) {
20576: 15:   functionRegistry[name] = fn;
20577: 16: }
20578: ````````
20579: 
20580: ## File: js/trees.js
20581: ````````javascript
20582:  1: /* trees.js - Tree Generation and Rendering */
20583:  2: /**
20584:  3:  * Generates clusters of trees across the terrain
20585:  4:  * @param {Object} options Configuration options
20586:  5:  * @param {number} options.count Number of tree clusters to generate
20587:  6:  * @param {Object} options.terrainBounds Bounds for placing trees {xMin, xMax, yMin, yMax}
20588:  7:  * @param {number} options.playerSize Reference size to scale trees relative to player
20589:  8:  * @returns {Array} Array of tree objects with positions and dimensions
20590:  9:  */
20591: 10: function generateTreeClumps(options) {
20592: 11:   const { count, terrainBounds, playerSize } = options;
20593: 12:   const clumps = [];
20594: 13:   for (let i = 0; i < count; i++) {
20595: 14:     const clump = [];
20596: 15:     const clumpSize = 2 + Math.floor(Math.random() * 3); // 2-4 trees per clump
20597: 16:     const clumpX = terrainBounds.xMin + Math.random() * (terrainBounds.xMax - terrainBounds.xMin);
20598: 17:     const clumpY = terrainBounds.yMin + Math.random() * (terrainBounds.yMax - terrainBounds.yMin);
20599: 18:     for (let j = 0; j < clumpSize; j++) {
20600: 19:       const sizeFactor = 0.5 + Math.random() * 1.5; // 50–200%
20601: 20:       const squareSize = playerSize * sizeFactor;
20602: 21:       const offsetX = (Math.random() - 0.5) * playerSize * 2;
20603: 22:       const offsetY = (Math.random() - 0.5) * playerSize * 2;
20604: 23:       clump.push({
20605: 24:         x: clumpX + offsetX,
20606: 25:         y: clumpY + offsetY,
20607: 26:         width: squareSize,
20608: 27:         height: squareSize,
20609: 28:         type: 'tree'
20610: 29:       });
20611: 30:     }
20612: 31:     clumps.push(...clump);
20613: 32:   }
20614: 33:   return clumps;
20615: 34: }
20616: 35: /**
20617: 36:  * Helper function to draw a more visually interesting tree
20618: 37:  * @param {CanvasRenderingContext2D} ctx Canvas context to draw on
20619: 38:  * @param {Object} tree Tree object with position and size information
20620: 39:  */
20621: 40: function drawTree(ctx, tree) {
20622: 41:   // Tree trunk (brown rectangle)
20623: 42:   const trunkWidth = tree.width * 0.3;
20624: 43:   const trunkHeight = tree.height * 0.6;
20625: 44:   const trunkX = tree.x + (tree.width - trunkWidth) / 2;
20626: 45:   const trunkY = tree.y + tree.height - trunkHeight;
20627: 46:   ctx.fillStyle = "#8B4513"; // saddle brown for trunk
20628: 47:   ctx.fillRect(trunkX, trunkY, trunkWidth, trunkHeight);
20629: 48:   // Tree canopy (green circle)
20630: 49:   const canopyRadius = tree.width * 0.6;
20631: 50:   const canopyCenterX = tree.x + tree.width / 2;
20632: 51:   const canopyCenterY = tree.y + tree.height * 0.4;
20633: 52:   ctx.fillStyle = "#228B22"; // forest green
20634: 53:   ctx.beginPath();
20635: 54:   ctx.arc(canopyCenterX, canopyCenterY, canopyRadius, 0, Math.PI * 2);
20636: 55:   ctx.fill();
20637: 56: }
20638: ````````
20639: 
20640: ## File: js/upgradeData.js
20641: ````````javascript
20642:   1: // js/upgradeData.js
20643:   2: export const upgradeCategories = [
20644:   3:     {
20645:   4:       name: "Personal Upgrades",
20646:   5:       type: "player",
20647:   6:       upgrades: [
20648:   7:         {
20649:   8:           key: "rocketSurgery",
20650:   9:           label: "Rocket Surgery",
20651:  10:           desc: "Boosts top speed & acceleration for faster downhill runs.",
20652:  11:           max: 10,
20653:  12:           icon: "🚀"
20654:  13:         },
20655:  14:         {
20656:  15:           key: "optimalOptics",
20657:  16:           label: "Optimal Optics",
20658:  17:           desc: "Frees focus & boosts fan engagement for easier weaving.",
20659:  18:           max: 10,
20660:  19:           icon: "📸"
20661:  20:         },
20662:  21:         {
20663:  22:           key: "sledDurability",
20664:  23:           label: "Sled Durability",
20665:  24:           desc: "Reinforce your sled to withstand bigger impacts.",
20666:  25:           max: 10,
20667:  26:           icon: "🛷"
20668:  27:         },
20669:  28:         {
20670:  29:           key: "fancierFootwear",
20671:  30:           label: "Fancier Footwear",
20672:  31:           desc: "Less time climbing, more time sledding.",
20673:  32:           max: 10,
20674:  33:           icon: "👢"
20675:  34:         },
20676:  35:         {
20677:  36:           key: "grapplingAnchor",
20678:  37:           label: "Grappling Anchor",
20679:  38:           desc: "Hook onto terrain to swing into tricky spots.",
20680:  39:           max: 0,
20681:  40:           icon: "🪝"
20682:  41:         },
20683:  42:         {
20684:  43:           key: "attendLegDay",
20685:  44:           label: "Attend Leg Day",
20686:  45:           desc: "Reduce stamina cost for climbing back up.",
20687:  46:           max: 0,
20688:  47:           icon: "🏋️"
20689:  48:         },
20690:  49:         {
20691:  50:           key: "shortcutAwareness",
20692:  51:           label: "Shortcut Awareness",
20693:  52:           desc: "Reveal hidden shortcuts & groomed trails.",
20694:  53:           max: 0,
20695:  54:           icon: "🗺️"
20696:  55:         },
20697:  56:         {
20698:  57:           key: "crowdHypeman",
20699:  58:           label: "Crowd Hypeman",
20700:  59:           desc: "Perform tricks near fans for boosts.",
20701:  60:           max: 0,
20702:  61:           icon: "📣"
20703:  62:         },
20704:  63:         {
20705:  64:           key: "crowdWeaver",
20706:  65:           label: "Crowd Weaver",
20707:  66:           desc: "Crowds move aside more often.",
20708:  67:           max: 0,
20709:  68:           icon: "🧍‍♂️"
20710:  69:         },
20711:  70:         {
20712:  71:           key: "weatherWarrior",
20713:  72:           label: "Weather Warrior",
20714:  73:           desc: "Storms & blizzards barely slow you down.",
20715:  74:           max: 0,
20716:  75:           icon: "🌨️"
20717:  76:         }
20718:  77:       ]
20719:  78:     },
20720:  79:     {
20721:  80:       name: "Mountain Upgrades",
20722:  81:       type: "mountain",
20723:  82:       upgrades: [
20724:  83:         {
20725:  84:           key: "skiLifts",
20726:  85:           label: "High-Speed Ski Lift Expansion",
20727:  86:           desc: "Ride lifts faster & attract more visitors.",
20728:  87:           max: 0,
20729:  88:           icon: "🎿"
20730:  89:         },
20731:  90:         {
20732:  91:           key: "snowmobileRentals",
20733:  92:           label: "Snowmobile Rentals",
20734:  93:           desc: "Rent them out or ride them yourself.",
20735:  94:           max: 0,
20736:  95:           icon: "🏍️"
20737:  96:         },
20738:  97:         {
20739:  98:           key: "eateries",
20740:  99:           label: "Eateries & Snack Bars",
20741: 100:           desc: "Restore stamina and make money.",
20742: 101:           max: 0,
20743: 102:           icon: "🍔"
20744: 103:         },
20745: 104:         {
20746: 105:           key: "groomedTrails",
20747: 106:           label: "Groomed Trails",
20748: 107:           desc: "Smoothed paths with boosty sections.",
20749: 108:           max: 0,
20750: 109:           icon: "🥾"
20751: 110:         },
20752: 111:         {
20753: 112:           key: "firstAidStations",
20754: 113:           label: "Safety & First-Aid Stations",
20755: 114:           desc: "Heal and reduce collision penalties.",
20756: 115:           max: 0,
20757: 116:           icon: "⛑️"
20758: 117:         },
20759: 118:         {
20760: 119:           key: "scenicOverlooks",
20761: 120:           label: "Scenic Overlook Platforms",
20762: 121:           desc: "Lure tourists or use as shortcuts.",
20763: 122:           max: 0,
20764: 123:           icon: "📷"
20765: 124:         },
20766: 125:         {
20767: 126:           key: "advertisingRamps",
20768: 127:           label: "Advertising Ramp-Billboards",
20769: 128:           desc: "Sponsor revenue and epic trick ramps.",
20770: 129:           max: 0,
20771: 130:           icon: "📢"
20772: 131:         },
20773: 132:         {
20774: 133:           key: "resortLodges",
20775: 134:           label: "Resort Amenities & Lodges",
20776: 135:           desc: "Start from fancy remote lodges.",
20777: 136:           max: 0,
20778: 137:           icon: "🏨"
20779: 138:         },
20780: 139:         {
20781: 140:           key: "nightLighting",
20782: 141:           label: "Night Lighting Upgrades",
20783: 142:           desc: "Unlock night sledding.",
20784: 143:           max: 0,
20785: 144:           icon: "🌙"
20786: 145:         },
20787: 146:         {
20788: 147:           key: "weatherControl",
20789: 148:           label: "Weather Control Systems",
20790: 149:           desc: "Control the challenge for higher rewards.",
20791: 150:           max: 0,
20792: 151:           icon: "🌦️"
20793: 152:         }
20794: 153:       ]
20795: 154:     }
20796: 155:   ];
20797: ````````
20798: 
20799: ## File: js/upgradeLogic.js
20800: ````````javascript
20801:   1: // js/upgradeLogic.js
20802:   2: // Using global utility functions instead of imports
20803:   3: // Track upgrade levels
20804:   4: let playerUpgrades = {
20805:   5:   rocketSurgery: 0,
20806:   6:   optimalOptics: 0,
20807:   7:   sledDurability: 0,
20808:   8:   fancierFootwear: 0,
20809:   9:   grapplingAnchor: 0,
20810:  10:   attendLegDay: 0,
20811:  11:   shortcutAwareness: 0,
20812:  12:   crowdHypeman: 0,
20813:  13:   crowdWeaver: 0,
20814:  14:   weatherWarrior: 0
20815:  15: };
20816:  16: let mountainUpgrades = {
20817:  17:   skiLifts: 0,
20818:  18:   snowmobileRentals: 0,
20819:  19:   eateries: 0,
20820:  20:   groomedTrails: 0,
20821:  21:   firstAidStations: 0,
20822:  22:   scenicOverlooks: 0,
20823:  23:   advertisingRamps: 0,
20824:  24:   resortLodges: 0,
20825:  25:   nightLighting: 0,
20826:  26:   weatherControl: 0
20827:  27: };
20828:  28: // Make upgrade objects globally accessible
20829:  29: window.playerUpgrades = playerUpgrades;
20830:  30: window.mountainUpgrades = mountainUpgrades;
20831:  31: const upgradeMaxLevel = {
20832:  32:   rocketSurgery: 10,
20833:  33:   optimalOptics: 10,
20834:  34:   sledDurability: 10,
20835:  35:   fancierFootwear: 10,
20836:  36:   grapplingAnchor: 0,
20837:  37:   attendLegDay: 0,
20838:  38:   shortcutAwareness: 0,
20839:  39:   crowdHypeman: 0,
20840:  40:   crowdWeaver: 0,
20841:  41:   weatherWarrior: 0,
20842:  42:   skiLifts: 0,
20843:  43:   snowmobileRentals: 0,
20844:  44:   eateries: 0,
20845:  45:   groomedTrails: 0,
20846:  46:   firstAidStations: 0,
20847:  47:   scenicOverlooks: 0,
20848:  48:   advertisingRamps: 0,
20849:  49:   resortLodges: 0,
20850:  50:   nightLighting: 0,
20851:  51:   weatherControl: 0
20852:  52: };
20853:  53: function getUpgradeCost(upgradeKey, currentLevel) {
20854:  54:   return Math.floor(100 * Math.pow(1.1, currentLevel + 1));
20855:  55: }
20856:  56: function updateMoneyDisplay() {
20857:  57:   const moneyText = document.getElementById("moneyText");
20858:  58:   if (moneyText) {
20859:  59:     moneyText.textContent = "Money: $" + player.money;
20860:  60:   }
20861:  61: }
20862:  62: function getUpgradeDisplayText(upgradeKey, currentLevel, maxLevel) {
20863:  63:   let text = formatUpgradeName(upgradeKey) + ` (Lv ${currentLevel}/${maxLevel})`;
20864:  64:   if (maxLevel > 0 && currentLevel < maxLevel) {
20865:  65:     let cost = getUpgradeCost(upgradeKey, currentLevel);
20866:  66:     text += " – Cost: $" + cost;
20867:  67:   }
20868:  68:   return text;
20869:  69: }
20870:  70: function initUpgradeButton(upgradeKey, upgradeValue) {
20871:  71:   const maxLevel = upgradeMaxLevel[upgradeKey];
20872:  72:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
20873:  73:   const button = document.getElementById(btnId);
20874:  74:   button.innerText = getUpgradeDisplayText(upgradeKey, upgradeValue, maxLevel);
20875:  75:   if (maxLevel === 0 || upgradeValue >= maxLevel) {
20876:  76:     button.disabled = true;
20877:  77:   }
20878:  78: }
20879:  79: function purchaseUpgrade(upgradeType, upgradeKey) {
20880:  80:   const currentLevel = upgradeType[upgradeKey];
20881:  81:   const maxLevel = upgradeMaxLevel[upgradeKey];
20882:  82:   if (maxLevel === 0 || currentLevel >= maxLevel) {
20883:  83:     console.log("Upgrade", upgradeKey, "is locked or already maxed.");
20884:  84:     return;
20885:  85:   }
20886:  86:   const cost = getUpgradeCost(upgradeKey, currentLevel);
20887:  87:   if (player.money < cost) {
20888:  88:     console.log("Not enough money to purchase", upgradeKey, ". Cost:", cost, "Money:", player.money);
20889:  89:     return;
20890:  90:   }
20891:  91:   player.money -= cost;
20892:  92:   upgradeType[upgradeKey]++;
20893:  93:   const newLevel = upgradeType[upgradeKey];
20894:  94:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
20895:  95:   document.getElementById(btnId).innerText = getUpgradeDisplayText(upgradeKey, newLevel, maxLevel);
20896:  96:   if (newLevel >= maxLevel) {
20897:  97:     document.getElementById(btnId).disabled = true;
20898:  98:   }
20899:  99:   updateMoneyDisplay();
20900: 100:   console.log("Purchased upgrade", upgradeKey, "New level:", newLevel, "Remaining money:", player.money);
20901: 101: }
20902: 102: // Export all necessary variables and functions
20903: 103: export {
20904: 104:   playerUpgrades,
20905: 105:   mountainUpgrades,
20906: 106:   upgradeMaxLevel,
20907: 107:   getUpgradeCost,
20908: 108:   getUpgradeDisplayText,
20909: 109:   initUpgradeButton,
20910: 110:   updateMoneyDisplay,
20911: 111:   purchaseUpgrade
20912: 112: };
20913: ````````
20914: 
20915: ## File: js/upgrades.js
20916: ````````javascript
20917:  1: // js/upgrades.js
20918:  2: import { upgradeCategories } from './upgradeData.js';
20919:  3: import { 
20920:  4:   playerUpgrades, 
20921:  5:   mountainUpgrades, 
20922:  6:   upgradeMaxLevel, 
20923:  7:   purchaseUpgrade, 
20924:  8:   getUpgradeCost,
20925:  9:   getUpgradeDisplayText 
20926: 10: } from './upgradeLogic.js';
20927: 11: // Using global capitalizeFirstLetter instead of importing it
20928: 12: function createUpgradeElement(upgrade, isPlayerUpgrade = true) {
20929: 13:   const upgradeType = isPlayerUpgrade ? playerUpgrades : mountainUpgrades;
20930: 14:   const currentLevel = upgradeType[upgrade.key];
20931: 15:   const maxLevel = upgradeMaxLevel[upgrade.key];
20932: 16:   const cost = getUpgradeCost(upgrade.key, currentLevel);
20933: 17:   const entry = document.createElement('div');
20934: 18:   entry.className = 'upgrade-entry';
20935: 19:   const button = document.createElement('button');
20936: 20:   const btnId = `upgrade${capitalizeFirstLetter(upgrade.key)}`;
20937: 21:   button.id = btnId;
20938: 22:   button.innerText = getUpgradeDisplayText(upgrade.key, currentLevel, maxLevel);
20939: 23:   // Disable if maxed or locked
20940: 24:   if (maxLevel === 0 || currentLevel >= maxLevel) {
20941: 25:     button.disabled = true;
20942: 26:   }
20943: 27:   button.addEventListener('click', () => {
20944: 28:     purchaseUpgrade(upgradeType, upgrade.key);
20945: 29:   });
20946: 30:   const desc = document.createElement('p');
20947: 31:   desc.className = 'upgrade-desc';
20948: 32:   desc.textContent = upgrade.desc;
20949: 33:   entry.appendChild(button);
20950: 34:   entry.appendChild(desc);
20951: 35:   return entry;
20952: 36: }
20953: 37: function renderUpgradeMenu() {
20954: 38:   const container = document.getElementById('dynamic-upgrade-columns');
20955: 39:   if (!container) return;
20956: 40:   upgradeCategories.forEach(category => {
20957: 41:     const column = document.createElement('div');
20958: 42:     column.className = 'upgrade-column';
20959: 43:     const header = document.createElement('h2');
20960: 44:     header.textContent = category.name;
20961: 45:     column.appendChild(header);
20962: 46:     const isPlayerUpgrade = category.type === "player";
20963: 47:     category.upgrades.forEach(upgrade => {
20964: 48:       const element = createUpgradeElement(upgrade, isPlayerUpgrade);
20965: 49:       column.appendChild(element);
20966: 50:     });
20967: 51:     container.appendChild(column);
20968: 52:   });
20969: 53: }
20970: 54: renderUpgradeMenu();
20971: ````````
20972: 
20973: ## File: js/uphill.js
20974: ````````javascript
20975:  1: /* uphill.js - Uphill Movement & Camera Control */
20976:  2: // Handle all uphill movement, camera controls, and related mechanics
20977:  3: function updateUphill(deltaTime) {
20978:  4:   let upSpeed = TWEAK.baseUpSpeed + (playerUpgrades.fancierFootwear * TWEAK.fancierFootwearUpSpeedPerLevel);
20979:  5:   // Vertical movement
20980:  6:   if (keysDown["w"]) { player.absY -= upSpeed; }
20981:  7:   if (keysDown["s"]) { player.absY += upSpeed; }
20982:  8:   // Horizontal movement with bounds checking
20983:  9:   let newXUphill = player.x;
20984: 10:   if (keysDown["a"]) { newXUphill -= upSpeed; }
20985: 11:   if (keysDown["d"]) { newXUphill += upSpeed; }
20986: 12:   player.x = clamp(newXUphill, player.width/2, canvas.width - player.width/2);
20987: 13:   // Prevent going beyond mountain bounds vertically
20988: 14:   player.absY = clamp(player.absY, 0, mountainHeight);
20989: 15:   // Camera and altitude control
20990: 16:   if (keysDown["ArrowLeft"]) { player.cameraAngle -= 2; }
20991: 17:   if (keysDown["ArrowRight"]) { player.cameraAngle += 2; }
20992: 18:   if (keysDown["ArrowUp"]) { player.altitudeLine = Math.max(0, player.altitudeLine - 2); }
20993: 19:   if (keysDown["ArrowDown"]) { player.altitudeLine = Math.min(100, player.altitudeLine + 2); }
20994: 20:   // Normalize camera angle
20995: 21:   if (player.cameraAngle < 0) player.cameraAngle += 360;
20996: 22:   if (player.cameraAngle >= 360) player.cameraAngle -= 360;
20997: 23:   // Reset horizontal velocity in uphill mode
20998: 24:   player.xVel = 0;
20999: 25:   // Check for collisions with terrain
21000: 26:   terrain.forEach(obstacle => {
21001: 27:     if (checkCollision(
21002: 28:         player.x - player.width / 2, player.absY - player.height / 2,
21003: 29:         player.width, player.height,
21004: 30:         obstacle.x, obstacle.y,
21005: 31:         obstacle.width, obstacle.height
21006: 32:     )) {
21007: 33:       console.log("Collision on uphill.");
21008: 34:       resolveCollision(player, obstacle);
21009: 35:     }
21010: 36:   });
21011: 37:   // Call animal update from wildlife.js
21012: 38:   updateAnimal();
21013: 39:   // Return to house if player reaches bottom of mountain
21014: 40:   if (player.absY >= mountainHeight) {
21015: 41:     player.absY = mountainHeight;
21016: 42:     console.log("Reached bottom. Returning to house.");
21017: 43:     changeState(GameState.HOUSE);
21018: 44:   }
21019: 45: }
21020: ````````
21021: 
21022: ## File: styles.css
21023: ````````css
21024:   1: /* gameplay.css */
21025:   2: /* Styles for the gameplay phase (canvas-based) */
21026:   3: #game-screen {
21027:   4:   position: absolute;
21028:   5:   top: 50px;
21029:   6:   left: 0;
21030:   7:   width: 100%;
21031:   8:   height: calc(100% - 50px);
21032:   9:   /* No fixed width/height here—the Phaser Scale Manager will resize the canvas */
21033:  10: }
21034:  11: #gameCanvas {
21035:  12:   width: 100%;
21036:  13:   height: 100%;
21037:  14:   display: block;
21038:  15:   background-color: #87CEEB;
21039:  16:   border: none;
21040:  17: }
21041:  18: /* house.css */
21042:  19: /* Styles for the house phase & upgrade menu */
21043:  20: #upgrade-menu {
21044:  21:   position: absolute;
21045:  22:   top: 50px;
21046:  23:   left: 0;
21047:  24:   width: 100%;
21048:  25:   height: calc(100% - 50px);
21049:  26:   background-color: rgba(0, 0, 0, 0.9);
21050:  27:   padding: 20px;
21051:  28:   box-sizing: border-box;
21052:  29:   display: block;
21053:  30:   overflow-y: auto;
21054:  31: }
21055:  32: .upgrade-menu-columns {
21056:  33:   display: flex;
21057:  34:   justify-content: space-around;
21058:  35:   align-items: flex-start;
21059:  36:   flex-wrap: wrap;
21060:  37: }
21061:  38: .upgrade-column {
21062:  39:   width: 45%;
21063:  40:   margin: 10px 0;
21064:  41: }
21065:  42: .upgrade-column h2 {
21066:  43:   text-align: center;
21067:  44:   margin-bottom: 10px;
21068:  45: }
21069:  46: .upgrade-entry {
21070:  47:   margin-bottom: 15px;
21071:  48: }
21072:  49: .upgrade-entry button {
21073:  50:   width: 100%;
21074:  51:   margin: 5px 0 2px 0;
21075:  52:   padding: 10px;
21076:  53:   font-size: 16px;
21077:  54:   background-color: #007bff;
21078:  55:   color: white;
21079:  56:   border: none;
21080:  57:   border-radius: 5px;
21081:  58:   cursor: pointer;
21082:  59:   transition: background-color 0.2s ease;
21083:  60: }
21084:  61: .upgrade-entry button:hover {
21085:  62:   background-color: #0056b3;
21086:  63: }
21087:  64: .upgrade-entry button:disabled {
21088:  65:   background-color: #555;
21089:  66:   cursor: not-allowed;
21090:  67: }
21091:  68: .upgrade-desc {
21092:  69:   font-size: 14px;
21093:  70:   line-height: 1.2;
21094:  71:   margin: 0;
21095:  72:   color: #ccc;
21096:  73: }
21097:  74: #bestTimeText {
21098:  75:   margin-top: 20px;
21099:  76:   text-align: center;
21100:  77:   color: #fff;
21101:  78: }
21102:  79: #startGame {
21103:  80:   display: block;
21104:  81:   margin: 10px auto;
21105:  82:   font-size: 16px;
21106:  83:   padding: 8px 16px;
21107:  84:   cursor: pointer;
21108:  85:   background-color: #28a745;
21109:  86:   border: none;
21110:  87:   border-radius: 5px;
21111:  88:   transition: background-color 0.2s ease;
21112:  89: }
21113:  90: #startGame:hover {
21114:  91:   background-color: #218838;
21115:  92: }
21116:  93: /* Global UI elements (title, money display) */
21117:  94: h1 {
21118:  95:   text-align: center;
21119:  96:   margin-top: 10px;
21120:  97:   color: #000;
21121:  98:   font-size: 36px;
21122:  99:   font-weight: bold;
21123: 100: }
21124: 101: /* Improved money display */
21125: 102: #moneyDisplay {
21126: 103:   position: fixed;
21127: 104:   top: 10px;
21128: 105:   right: 10px;
21129: 106:   font-size: 20px;
21130: 107:   background-color: rgba(0, 0, 0, 0.9);
21131: 108:   padding: 12px 16px;
21132: 109:   border-radius: 10px;
21133: 110:   color: #FFD700;
21134: 111:   font-weight: bold;
21135: 112:   z-index: 1000;
21136: 113: }
21137: 114: /* Live money updates should stand out */
21138: 115: #moneyText {
21139: 116:   font-size: 22px;
21140: 117:   font-weight: bold;
21141: 118:   color: #FFD700;
21142: 119:   transition: transform 0.1s ease-in-out, color 0.2s ease-in-out;
21143: 120: }
21144: 121: /* Bounce effect when money updates */
21145: 122: .money-increase {
21146: 123:   transform: scale(1.2);
21147: 124:   color: #FFFFFF;
21148: 125: }
21149: ````````
21150: 
21151: ## File: docs/1.0_README.md
21152: ````````markdown
21153:   1: # **SledHEAD**
21154:   2: **Genre:** Roguelike | Trick & Time Trial Racer | Adventure  
21155:   3: **Platform:** Web-based (PC, potentially mobile)  
21156:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
21157:   5: 
21158:   6: ---
21159:   7: 
21160:   8: ## Table of Contents
21161:   9: 1. [Core Concept](#core-concept)
21162:  10: 2. [Procedural World & Persistence](#procedural-world--persistence)
21163:  11: 3. [Gameplay Loops](#gameplay-loops)
21164:  12:    - [Sledding Phase (Downhill)](#1-sledding-phase-downhill)
21165:  13:    - [Climbing Phase (Uphill)](#2-climbing-phase-uphill)
21166:  14:    - [Management Phase (House & Upgrades)](#3-management-phase-house--upgrades)
21167:  15: 4. [Trick System (For Extra Cash & Fan Engagement)](#trick-system-for-extra-cash--fan-engagement)
21168:  16: 5. [Upgrade System](#upgrade-system)
21169:  17:    - [Personal Upgrades](#personal-upgrades-character-enhancements)
21170:  18:    - [Mountain Upgrades](#mountain-upgrades-resort-expansion)
21171:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)
21172:  20: 7. [Mountain Themes & Progression](#mountain-themes--progression)
21173:  21: 8. [Mini-Games in SledHEAD](#mini-games-in-sledhead)
21174:  22: 9. [NPCs & Mountain Town Ecosystem](#npcs--mountain-town-ecosystem)
21175:  23: 
21176:  24: 
21177:  25: ---
21178:  26: 
21179:  27: ## 🎯 **Core Concept**
21180:  28: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
21181:  29: 
21182:  30: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
21183:  31: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
21184:  32: 
21185:  33: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
21186:  34: 
21187:  35: ---
21188:  36: 
21189:  37: ## 🎮 **Controls & Gameplay Mechanics**
21190:  38: 
21191:  39: ### **⬇️ Downhill Phase: Fast-Paced Sledding**
21192:  40: In the **downhill phase**, you’re controlling your sled as it races down procedurally generated slopes, dodging obstacles, pulling off tricks, and aiming for the fastest times.
21193:  41: 
21194:  42: #### **Basic Movement:**
21195:  43: - **Left / Right Arrow Keys (← →)** – Steer your sled left or right.  
21196:  44: - **Down Arrow (↓)** – Crouch for extra speed on straightaways.  
21197:  45: - **Up Arrow (↑)** – Prepare for a jump off a ramp.  
21198:  46: 
21199:  47: #### **Trick System:**
21200:  48: - Tricks are executed using combinations of **Up, Down, Left, and Right Arrows**.
21201:  49: - Landing tricks successfully grants extra money and fan engagement.
21202:  50: - Be mindful of your timing - land while doing a trick, and you could crash!
21203:  51: 
21204:  52: #### **Hazards & Interactions:**
21205:  53: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
21206:  54: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
21207:  55: - **Ice Patches:** Reduce control and make turns trickier.
21208:  56: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
21209:  57: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
21210:  58: 
21211:  59: ---
21212:  60: 
21213:  61: ### **⬆️ Uphill Phase: Climbing & Exploration**
21214:  62: Once you reach the bottom, it’s time to **make your way back up**. The mountain doesn’t regenerate, so you’ll be retracing paths and discovering new shortcuts.
21215:  63: 
21216:  64: #### **Basic Movement & Stamina:**
21217:  65: - **Left / Right Arrow Keys (← →)** – Move horizontally across the mountain.
21218:  66: - **Up Arrow (↑)** – Hike uphill, consuming stamina.
21219:  67: - **Down Arrow (↓)** – Rest momentarily to recover stamina.
21220:  68: 
21221:  69: #### **Navigation & Assistance:**
21222:  70: - If you've **unlocked ski lifts or snowmobiles**, you can use them for a quicker return.
21223:  71: - **Shortcut Awareness** upgrades help you find hidden paths to make the climb easier.
21224:  72: - **Food Stalls & Rest Areas** restore stamina—plan your route accordingly!
21225:  73: 
21226:  74: #### **Wildlife Photography Mini-Game 📸**
21227:  75: - While hiking, **animals appear every few seconds**.
21228:  76: - Aim the camera using **Arrow Keys**, and take a shot with **Spacebar**.
21229:  77: - Align your camera with the **altitude line** for a perfect photo.
21230:  78: - **Moving animals give higher rewards** but are harder to capture.
21231:  79: 
21232:  80: ---
21233:  81: 
21234:  82: **Next Steps:**  
21235:  83: - **If you want to make money:** Optimize your tricks and time trials.  
21236:  84: - **If you want to upgrade:** Invest in stamina, sled durability, and trick enhancements.  
21237:  85: - **If you want to explore:** Look for wildlife, hidden shortcuts, and fan hotspots!  
21238:  86: 
21239:  87: ---
21240:  88: 
21241:  89: ## 🌎 **Procedural World & Persistence**
21242:  90: - The mountain remains consistent during a playthrough.  
21243:  91: - **New terrain is only generated when starting a new game.**  
21244:  92: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
21245:  93: - **Changes per run:**
21246:  94:   - Tourists & fans shift positions.  
21247:  95:   - Weather may change dynamically.  
21248:  96:   - Wildlife encounters vary.
21249:  97: 
21250:  98: ---
21251:  99: 
21252: 100: ## 🎮 **Gameplay Loops**
21253: 101: 
21254: 102: ### 1️⃣ **Sledding Phase (Downhill) ⬇️**
21255: 103: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
21256: 104: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
21257: 105: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
21258: 106: - **Obstacles:**
21259: 107:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
21260: 108:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
21261: 109:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
21262: 110: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
21263: 111: - **Time Trials:**  
21264: 112:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
21265: 113:   - **Your time between activators determines your bonus.**  
21266: 114:   - **Faster times = more money!**  
21267: 115:   - Not all runs are timed; only those where you activate a trial.  
21268: 116: 
21269: 117: ---
21270: 118: 
21271: 119: ### 2️⃣ **Climbing Phase (Uphill) ⬆️**
21272: 120: 🚶 **Top-down adventure traversal with stamina management and exploration.**  
21273: 121: - **Goal:** Return to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
21274: 122: - **Terrain:** The same generated world as the downhill run (no regenerating between runs).  
21275: 123: - **Stamina System:**  
21276: 124:   - Stamina drains when hiking.  
21277: 125:   - Replenished by **food stands, resting points, or upgrades**.  
21278: 126: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
21279: 127:   - **Random animals appear every 5–10 seconds (TWEAK variable).**  
21280: 128:   - Animals either **stay still (1–20 seconds) or move (making them harder to photograph).**  
21281: 129:   - **Use the Arrow Keys to aim the camera cone** around your character.  
21282: 130:   - **Align the altitude line** with the animal’s altitude for a perfect shot.  
21283: 131:   - **Photos earn money, with multipliers for:**  
21284: 132:     - Accuracy (center of POV cone).  
21285: 133:     - Altitude match precision.  
21286: 134:     - Moving vs. stationary targets (moving = 3x value).  
21287: 135: 
21288: 136: ---
21289: 137: 
21290: 138: ### 3️⃣ **Management Phase (House & Upgrades) 🏠**
21291: 139: 🏡 **Upgrade your gear, mountain, and social media presence.**  
21292: 140: - **Spend earned money on:**
21293: 141:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
21294: 142:   - **Sled Upgrades:** Speed, handling, trick potential.  
21295: 143:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
21296: 144: - **New Game Start:**  
21297: 145:   - Mountain **ONLY regenerates when starting a completely new game.**  
21298: 146:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
21299: 147:   - **Current seed is displayed at home.**  
21300: 148: 
21301: 149: ---
21302: 150: 
21303: 151: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
21304: 152: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
21305: 153: 
21306: 154: 1. **☁️🪂 Parachute (Up, Down)**  
21307: 155:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
21308: 156:    **Pixel Art Representation:**  
21309: 157:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
21310: 158: 
21311: 159: 2. **🛑🎿 Air Brake (Up, Up)**  
21312: 160:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
21313: 161:    **Pixel Art Representation:**  
21314: 162:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
21315: 163: 
21316: 164: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
21317: 165:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
21318: 166:    **Pixel Art Representation:**  
21319: 167:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
21320: 168: 
21321: 169: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
21322: 170:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
21323: 171:    **Pixel Art Representation:**  
21324: 172:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
21325: 173: 
21326: 174: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
21327: 175:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
21328: 176:    **Pixel Art Representation:**  
21329: 177:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
21330: 178: 
21331: 179: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
21332: 180:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
21333: 181:    **Pixel Art Representation:**  
21334: 182:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
21335: 183: 
21336: 184: 7. **🦸‍♂️✨ Superman (Down, Down)**  
21337: 185:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
21338: 186:    **Pixel Art Representation:**  
21339: 187:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
21340: 188: 
21341: 189: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
21342: 190:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
21343: 191:    **Pixel Art Representation:**  
21344: 192:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
21345: 193: 
21346: 194: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
21347: 195:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
21348: 196:    **Pixel Art Representation:**  
21349: 197:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
21350: 198: 
21351: 199: 10. **👻🔥 Ghost Rider (Left, Right)**  
21352: 200:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
21353: 201:     **Pixel Art Representation:**  
21354: 202:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
21355: 203: 
21356: 204: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
21357: 205:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
21358: 206:     **Pixel Art Representation:**  
21359: 207:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
21360: 208: 
21361: 209: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
21362: 210:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
21363: 211:     **Pixel Art Representation:**  
21364: 212:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
21365: 213: 
21366: 214: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
21367: 215:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
21368: 216:     **Pixel Art Representation:**  
21369: 217:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
21370: 218: 
21371: 219: 14. **✨⬆️ Falling Star (Down, Up)**  
21372: 220:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
21373: 221:     **Pixel Art Representation:**  
21374: 222:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
21375: 223: 
21376: 224: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
21377: 225:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
21378: 226:     **Pixel Art Representation:**  
21379: 227:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
21380: 228: 
21381: 229: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
21382: 230:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
21383: 231:     **Pixel Art Representation:**  
21384: 232:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
21385: 233: 
21386: 234: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
21387: 235: 
21388: 236: ---
21389: 237: 
21390: 238: ## 🔧 **Upgrade System**
21391: 239: 
21392: 240: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
21393: 241: | Upgrade                    | Effect                                             |
21394: 242: |----------------------------|----------------------------------------------------|
21395: 243: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
21396: 244: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
21397: 245: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
21398: 246: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
21399: 247: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
21400: 248: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
21401: 249: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
21402: 250: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
21403: 251: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
21404: 252: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
21405: 253: 
21406: 254: ---
21407: 255: 
21408: 256: ### 🏔️ Mountain Upgrades (Resort Expansion)
21409: 257: | Upgrade                        | Effect                                                         |
21410: 258: |--------------------------------|----------------------------------------------------------------|
21411: 259: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
21412: 260: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
21413: 261: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
21414: 262: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
21415: 263: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
21416: 264: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
21417: 265: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
21418: 266: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
21419: 267: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
21420: 268: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
21421: 269: 
21422: 270: ---
21423: 271: 
21424: 272: ## ⚖️ **Game Balance & Tweakable Variables**
21425: 273: All these are stored in the **TWEAK object** for easy adjustments:
21426: 274: - Wildlife spawn times (min/max).
21427: 275: - Wildlife **sit duration** (min/max).
21428: 276: - Moving animal multiplier.
21429: 277: - Camera **POV cone size**.
21430: 278: - **Time trial activator frequency** & bonuses.
21431: 279: - **Stamina drain rates**.
21432: 280: - **Mountain regeneration rules**.
21433: 281: - **Trick scoring multipliers**.
21434: 282: - **Photograph accuracy bonuses**. 
21435: 283: 
21436: 284: **Progression Goals:**  
21437: 285: - **Prototype:** Repay the cost of the mountain.  
21438: 286: - **Full Game:**  
21439: 287:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
21440: 288:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
21441: 289:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
21442: 290:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
21443: 291: 
21444: 292: ---
21445: 293: 
21446: 294: ## 🏔️ **Mountain Themes & Progression**
21447: 295: 
21448: 296: ### Lava Mountain 🌋
21449: 297: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
21450: 298: - **Mechanics:**  
21451: 299:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
21452: 300:   - **Ash Clouds:** Temporarily block visibility.
21453: 301: - **Power-Up:** **Heat Shielding Sled Coating**  
21454: 302:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
21455: 303: 
21456: 304: ---
21457: 305: 
21458: 306: ### Space Mountain 🌌
21459: 307: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
21460: 308: - **Mechanics:**  
21461: 309:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
21462: 310:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
21463: 311: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
21464: 312:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
21465: 313: 
21466: 314: ---
21467: 315: 
21468: 316: ### Underwater Mountain 🌊
21469: 317: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
21470: 318: - **Mechanics:**  
21471: 319:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
21472: 320: - **Power-Up:** **Aqua-Lung Mittens**  
21473: 321:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
21474: 322: 
21475: 323: ---
21476: 324: 
21477: 325: ### Garbage Dump Glacier 🗑️❄️
21478: 326: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
21479: 327: - **Mechanics:**  
21480: 328:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
21481: 329: - **Power-Up:** **Slick Wax Spray**  
21482: 330:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
21483: 331: 
21484: 332: ---
21485: 333: 
21486: 334: ### Micro Mountain 🐜🌱
21487: 335: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
21488: 336: - **Mechanics:**  
21489: 337:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
21490: 338: - **Power-Up:** **Antigrav Wax**  
21491: 339:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
21492: 340: 
21493: 341: ---
21494: 342: 
21495: 343: ### Candy Cane Canyon 🍭
21496: 344: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
21497: 345: - **Mechanics:**  
21498: 346:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
21499: 347: - **Power-Up:** **Sweet-Tooth Coating**  
21500: 348:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
21501: 349: 
21502: 350: ---
21503: 351: 
21504: 352: ### Crystal Cave Cavern 🔮
21505: 353: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
21506: 354: - **Mechanics:**  
21507: 355:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
21508: 356: - **Power-Up:** **Crystal Clear Goggles**  
21509: 357:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
21510: 358: 
21511: 359: ---
21512: 360: 
21513: 361: ### Haunted Graveyard Hill 👻
21514: 362: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
21515: 363: - **Mechanics:**  
21516: 364:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
21517: 365: - **Power-Up:** **Spirit Lantern**  
21518: 366:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
21519: 367: 
21520: 368: ---
21521: 369: 
21522: 370: ### Sky Jellyfish Mountain ☁️🪼
21523: 371: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
21524: 372: - **Mechanics:**  
21525: 373:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
21526: 374: - **Power-Up:** **Stabilizer Sled Rails**  
21527: 375:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
21528: 376: 
21529: 377: ---
21530: 378: 
21531: 379: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
21532: 380: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
21533: 381: - **Mechanics:**  
21534: 382:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
21535: 383: - **Power-Up:** **Clockwork Treads**  
21536: 384:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
21537: 385: 
21538: 386: ---
21539: 387: 
21540: 388: ### Pyramid Peak 🐫🏜️
21541: 389: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
21542: 390: - **Mechanics:**  
21543: 391:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
21544: 392: - **Power-Up:** **Sandrunner Skis**  
21545: 393:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
21546: 394: 
21547: 395: ---
21548: 396: 
21549: 397: ### Digital Mountain (Cyber Slopes) 💻🔮
21550: 398: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
21551: 399: - **Mechanics:**  
21552: 400:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
21553: 401: - **Power-Up:** **Data Shielding**  
21554: 402:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
21555: 403: 
21556: 404: ---
21557: 405: 
21558: 406: ## 🎮 **Mini-Games in SledHEAD**
21559: 407: 
21560: 408: ### 1. **Animal Photography** 📸🐾
21561: 409: - **Objective:**  
21562: 410:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
21563: 411: - **Mechanics:**  
21564: 412:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
21565: 413:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
21566: 414:   - **Scoring Bonuses:**  
21567: 415:     - **Altitude Match Multiplier**  
21568: 416:     - **POV Centering Bonus**  
21569: 417:     - **Speed Capture Bonus**  
21570: 418: - **Upgrades:**  
21571: 419:   - **Optimal Optics:** Increases the camera’s POV cone.  
21572: 420:   - **Steady Hands:** Reduces camera sway.  
21573: 421:   - **Animal Baiting:** Increases rare animal appearance.
21574: 422: - **Special Events:**  
21575: 423:   - **Rare Animal Sightings** and **Storm Photography**.
21576: 424: - **Risk/Challenge:**  
21577: 425:   - **Repeat Photo Penalty** and aggressive animal disruptions.
21578: 426: 
21579: 427: ---
21580: 428: 
21581: 429: ### 2. **Fishing** 🎣🐟  
21582: 430: - **Objective:**  
21583: 431:   Catch fish using various techniques and bait types.
21584: 432: - **Mechanics:**  
21585: 433:   - Dynamic water simulation with varied fish behaviors.  
21586: 434:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
21587: 435:   - Legendary fish yield major rewards.
21588: 436: - **Upgrades:**  
21589: 437:   - Stronger fishing lines, advanced lures, and sonar detection.
21590: 438: - **Special Events:**  
21591: 439:   - Fishing tournaments and rare migration patterns.
21592: 440: - **Risk/Challenge:**  
21593: 441:   - Line snapping and predator interference.
21594: 442: 
21595: 443: ---
21596: 444: 
21597: 445: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
21598: 446: - **Objective:**  
21599: 447:   Unlock doors, safes, and hidden compartments.
21600: 448: - **Mechanics:**  
21601: 449:   - Use tools like **rakes, hooks, and tension wrenches**.  
21602: 450:   - Navigate traps such as alarms and rusted internals.
21603: 451: - **Upgrades:**  
21604: 452:   - High-quality picks, electronic bypass tools, and vibration sensors.
21605: 453: - **Special Events:**  
21606: 454:   - Timed heists and races with rival scavengers.
21607: 455: - **Risk/Challenge:**  
21608: 456:   - Unstable buildings and hazards that may alert authorities.
21609: 457: 
21610: 458: ---
21611: 459: 
21612: 460: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
21613: 461: - **Objective:**  
21614: 462:   Find buried treasure using maps, clues, and metal detectors.
21615: 463: - **Mechanics:**  
21616: 464:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
21617: 465:   - Digging requires stamina management and upgraded tools.
21618: 466: - **Upgrades:**  
21619: 467:   - Advanced metal detectors, excavation tools, and digging drones.
21620: 468: - **Special Events:**  
21621: 469:   - NPC treasure races and secret cache discoveries.
21622: 470: - **Risk/Challenge:**  
21623: 471:   - Booby traps, hostile environments, and law enforcement risks.
21624: 472: 
21625: 473: ---
21626: 474: 
21627: 475: ### 5. **Kite Flying** 🪁🌬️  
21628: 476: - **Objective:**  
21629: 477:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
21630: 478: - **Mechanics:**  
21631: 479:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
21632: 480:   - **Downhill:** Kites extend air time and grant special bonuses.
21633: 481: - **Upgrades:**  
21634: 482:   - **Glide Boost, Speed Stream, and Aero Control.**
21635: 483: - **Special Events:**  
21636: 484:   - **Storm Riding** with higher boosts but riskier winds.
21637: 485: - **Risk/Challenge:**  
21638: 486:   - Strong gusts may destabilize your kite.
21639: 487: 
21640: 488: ---
21641: 489: 
21642: 490: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
21643: 491: - **Objective:**  
21644: 492:   Search for valuable minerals, gems, and gold.
21645: 493: - **Mechanics:**  
21646: 494:   - Explore rivers, caves, and rock formations.  
21647: 495:   - **Panning:** Swirl water to separate gold.  
21648: 496:   - **Pickaxe Mining:** Break rocks for hidden gems.
21649: 497: - **Upgrades:**  
21650: 498:   - High-tech panning kits, seismic scanners, precision drills.
21651: 499: - **Special Events:**  
21652: 500:   - Gold rush hotspots, rare mineral finds, and cave-ins.
21653: 501: - **Risk/Challenge:**  
21654: 502:   - Unstable ground and rival prospectors.
21655: 503: 
21656: 504: ---
21657: 505: 
21658: 506: ### 7. **Cryptid Fossil Digging** 🦴🔍  
21659: 507: - **Objective:**  
21660: 508:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
21661: 509: - **Mechanics:**  
21662: 510:   - Use brushes, chisels, and excavation tools to reveal fossils.  
21663: 511:   - Transport fossils to the museum at the base of the first mountain.
21664: 512: - **Upgrades:**  
21665: 513:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
21666: 514: - **Special Events:**  
21667: 515:   - Competing paleontologists and hidden dig sites.
21668: 516: - **Risk/Challenge:**  
21669: 517:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
21670: 518: 
21671: 519: ---
21672: 520: 
21673: 521: ### 8. **Sled Tricking** 🛷✨  
21674: 522: - **Objective:**  
21675: 523:   Chain together aerial sled tricks to earn cash and boost fan engagement.
21676: 524: - **Mechanics:**  
21677: 525:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
21678: 526:   - Chain tricks for higher multipliers.
21679: 527: - **Upgrades:**  
21680: 528:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
21681: 529: - **Special Events:**  
21682: 530:   - Trick challenges and fan-requested stunt competitions.
21683: 531: - **Risk/Challenge:**  
21684: 532:   - Mistimed tricks can cause crashes and loss of earnings.
21685: 533: 
21686: 534: ---
21687: 535: 
21688: 536: ### 9. **Time Trial Racing** 🏁🛷  
21689: 537: - **Objective:**  
21690: 538:   Trigger time trial races by hitting gates while sledding for money rewards.
21691: 539: - **Mechanics:**  
21692: 540:   - Crossing a time trial gate starts a timer.  
21693: 541:   - The faster and further you go, the more money you earn.
21694: 542: - **Why It Fits:**  
21695: 543:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
21696: 544: 
21697: 545: ---
21698: 546: 
21699: 547: ### 10. **RC Motor Sled** ❄️🏎️  
21700: 548: - **Objective:**  
21701: 549:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
21702: 550: - **Mechanics:**  
21703: 551:   - Maneuver nimble RC sleds across frozen tundra.  
21704: 552:   - Nitro boosts and mid-air tricks enhance performance.  
21705: 553:   - Customization options include different sled bodies, engines, and handling upgrades.
21706: 554: - **Special Events:**  
21707: 555:   - Avalanche races, night rides, and hazard runs.
21708: 556: - **Risk/Challenge:**  
21709: 557:   - Limited battery life, high winds, and signal loss in deep snow.
21710: 558: 
21711: 559: ## 🏔️ **NPCs & Mountain Town Ecosystem**
21712: 560: SledHEAD’s world is filled with **unique characters** who contribute to your journey as a **trick-riding, fan-growing, upgrade-building, sled-stunting** legend. Some run the town, some enhance your sledding skills, and others add depth to the **roguelike adventure**.
21713: 561: 
21714: 562: ---
21715: 563: 
21716: 564: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
21717: 565: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
21718: 566: 
21719: 567: #### 🏂 **The Sled Tech (Sled Repairs & Mods)**
21720: 568: - **Purpose:** Repairs damage, sells sled mods.
21721: 569: - **Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
21722: 570: - **Best Quote:** “What’d ya do, run into a moose? I can fix it… for a price.”
21723: 571: 
21724: 572: #### 🍔 **The Food Vendor (Buffs & Endurance Recovery)**
21725: 573: - **Purpose:** Sells food that restores stamina and gives **temporary buffs** for sledding.
21726: 574: - **Best Quote:** “Hot cocoa makes you go faster, I swear. Try it.”
21727: 575: 
21728: 576: #### 🎥 **The Stream Manager (Audience Growth & Sponsorships)**
21729: 577: - **Purpose:** Manages your in-game audience; unlocks **sponsorship deals**.
21730: 578: - **Best Quote:** “If you don’t clip the trick, did you even land it?”
21731: 579: 
21732: 580: #### 🏁 **The Race Commissioner (Tournaments & Time Trials)**
21733: 581: - **Purpose:** Hosts **time trials, speedrun events, and competitive circuits**.
21734: 582: - **Best Quote:** “Half a second off the record? C’mon, I thought you were good.”
21735: 583: 
21736: 584: #### 🚠 **The Lift Operator (Ski Lift & Shortcut Unlocks)**
21737: 585: - **Purpose:** Lets you **unlock ski lifts** for quicker uphill trips.
21738: 586: - **Upgrades Unlocked:** **Gondola expansions, VIP lift passes.**
21739: 587: - **Best Quote:** “Sure, you could walk… or you could bribe me.”
21740: 588: 
21741: 589: ---
21742: 590: 
21743: 591: ### 💨 **Trick & Racing-Oriented NPCs (For Stunts, Style, & Money)**
21744: 592: These folks help you **push your limits**, pull off **sick tricks**, and **maximize profits**.
21745: 593: 
21746: 594: #### 🎿 **The Trick Trainer (Advanced Trick Lessons)**
21747: 595: - **Purpose:** Unlocks **trick combos & advanced air control.**
21748: 596: - **Best Quote:** “No guts, no glory. You wanna spin faster? Listen up.”
21749: 597: 
21750: 598: #### 📸 **The Hype Photographer (Proof-Based Challenges & Bonus Money)**
21751: 599: - **Purpose:** **Trick verification & photography mini-games**.
21752: 600: - **Upgrades Unlocked:** **Slow-mo replays, sponsorship boosts for sick shots.**
21753: 601: - **Best Quote:** “A trick’s only worth money if people see it.”
21754: 602: 
21755: 603: #### 💰 **The Black Market Gear Dealer (Risky Upgrades & Illegal Mods)**
21756: 604: - **Purpose:** Sells **risky sled tech** (illegal nitro boosts, magnetized rails for grinds).
21757: 605: - **Upgrades Unlocked:** **Unstable overclocked sled parts**.
21758: 606: - **Best Quote:** “No refunds. Don’t ask what’s in it.”
21759: 607: 
21760: 608: #### 🤡 **The Stunt Organizer (Jackass-Style Events & Side Hustles)**
21761: 609: - **Purpose:** Hosts **insane trick challenges** with **huge risk & reward**.
21762: 610: - **Best Quote:** “Land a quadruple flip, and I’ll give you something real nice.”
21763: 611: 
21764: 612: ---
21765: 613: 
21766: 614: ### 🌎 **Worldbuilding NPCs (Exploration, Hidden Routes, & Fan Engagement)**
21767: 615: These folks **expand the world** and **give reasons to explore**.
21768: 616: 
21769: 617: #### ⛷️ **The Retired Pro (Hidden Sledding Routes & Legend Quests)**
21770: 618: - **Purpose:** Tells **lore, hidden trails, and backstory of previous champions.**
21771: 619: - **Upgrades Unlocked:** **Secret mountain shortcuts & sled blueprints.**
21772: 620: - **Best Quote:** “Before you, there was someone else. And he disappeared.”
21773: 621: 
21774: 622: #### 🦊 **The Wildlife Researcher (Animal Photography & Rare Fan Unlocks)**
21775: 623: - **Purpose:** Ties into **wildlife photography mini-games**.
21776: 624: - **Upgrades Unlocked:** **Animal-based sled skins & rare sponsor deals.**
21777: 625: - **Best Quote:** “Snow leopards? They’re watching you, too.”
21778: 626: 
21779: 627: #### 📡 **The Event Broadcaster (Commentary & Competitive Meta)**
21780: 628: - **Purpose:** Gives **updates on leaderboards, rival NPCs, and changing conditions**.
21781: 629: - **Upgrades Unlocked:** **"Breaking News" reports on your achievements.**
21782: 630: - **Best Quote:** “The fans are watching, buddy. Make it count.”
21783: 631: 
21784: 632: ---
21785: 633: 
21786: 634: ### 🛤️ **The Travel-Ready NPCs (Appear Across Multiple Mountains)**
21787: 635: They **don’t just stay in one place**—you’ll run into them as you unlock new peaks.
21788: 636: 
21789: 637: #### 🎭 **The Rival (Dynamic Trick & Time Trial Duels)**
21790: 638: - **Purpose:** Appears on any unlocked mountain to **challenge your records**.
21791: 639: - **Best Quote:** “Your best time? That’s cute.”
21792: 640: 
21793: 641: #### 🛠️ **The Tinkerer (Experimental Sled Mods)**
21794: 642: - **Purpose:** Sells **unstable, high-risk sled modifications**.
21795: 643: - **Upgrades Unlocked:** **Prototype sled tech.**
21796: 644: - **Best Quote:** “This is 50% science and 50% dumb luck.”
21797: 645: 
21798: 646: #### 🎩 **The Mysterious Merchant (Random Legendary Gear)**
21799: 647: - **Purpose:** Appears randomly, selling **rare sleds & gear**.
21800: 648: - **Best Quote:** “You don’t know what you need… until you see it.”
21801: 649: 
21802: 650: ---
21803: 651: 
21804: 652: ### 🎭 **The Wild Cards (Weird & Legendary NPCs)**
21805: 653: These folks are **just strange**, but they add **flavor, mystery, and unpredictability**.
21806: 654: 
21807: 655: #### 👻 **The Ghost of the Mountain (Phantom Races & Haunted Challenges)**
21808: 656: - **Purpose:** Unlocks **ghost time trials & haunted trick courses**.
21809: 657: - **Best Quote:** “You ride my path, you race my shadow.”
21810: 658: 
21811: 659: #### 🧙‍♂️ **The Winter Shaman (Weather Manipulation & Magic Sleds)**
21812: 660: - **Purpose:** **Controls mountain weather** for harder/easier runs.
21813: 661: - **Best Quote:** “Blizzards make legends.”
21814: 662: 
21815: 663: #### 🐻 **The Bear Whisperer (Bear Sled Racing Mini-Game)**
21816: 664: - **Purpose:** Lets you **race against trained bears** for money.
21817: 665: - **Best Quote:** “You sled. They sled. Only one wins.”
21818: 666: 
21819: 667: #### 🥶 **The Ice Sculptor (Sled Cosmetics & Customization)**
21820: 668: - **Purpose:** Crafts **one-of-a-kind sled designs**.
21821: 669: - **Best Quote:** “Your ride should be a masterpiece.”
21822: 670: 
21823: 671: #### 🔮 **The Time Traveler (Future & Past Sled Tech)**
21824: 672: - **Purpose:** Unlocks **anachronistic sled models** (steampunk, cyberpunk, caveman logs).
21825: 673: - **Best Quote:** “The future’s fast. The past is brutal.”
21826: 674: 
21827: 675: ---
21828: 676: 
21829: 677: ## **🏔️ Final Thoughts**
21830: 678: This crew **perfectly balances**:
21831: 679: ✅ **Core game economy & upgrades**  
21832: 680: ✅ **High-speed trick-focused gameplay**  
21833: 681: ✅ **Exploration & hidden content**  
21834: 682: ✅ **Hilarious but valuable side NPCs**  
21835: 683: 
21836: 684: These **NPCs make the town feel alive, push competitive play, and add world depth**. Get ready to **build, race, trick, and explore** with this **cast of unforgettable characters**.
21837: ````````
21838: 
21839: ## File: docs/CONTROLS.md
21840: ````````markdown
21841:   1: # SledHEAD Game Controls
21842:   2: 
21843:   3: ## 🎯 Game Overview
21844:   4: 
21845:   5: SledHEAD is an **arcade-style sledding game** where you play as an **aspiring sledding champion & content creator** who has purchased an entire procedurally generated mountain. Your goal is to master the mountain through optimized sled runs, perform spectacular aerial tricks, photograph elusive wildlife, and earn money to upgrade your equipment and pay off your mountain loan.
21846:   6: 
21847:   7: The game consists of three distinct phases:
21848:   8: 
21849:   9: 1. **⬆️ Uphill/Climbing Phase** - Navigate uphill to find the perfect starting position, manage your stamina, and photograph wildlife
21850:  10: 2. **⬇️ Downhill/Sledding Phase** - Race down the mountain, performing tricks and avoiding obstacles
21851:  11: 3. **🏠 Management Phase** - Spend your earnings on upgrades for your equipment and mountain infrastructure
21852:  12: 
21853:  13: ---
21854:  14: 
21855:  15: ## 🎮 Core Controls
21856:  16: 
21857:  17: ### ⬆️ Uphill/Climbing Phase Controls
21858:  18: 
21859:  19: | Input | Action |
21860:  20: |-------|--------|
21861:  21: | **W/A/S/D** | Move the player up/left/down/right across the mountain |
21862:  22: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line for photography |
21863:  23: | **Spacebar** | Take a photograph when an animal is in view & the altitude line is rapidly flashing|
21864:  24: | **E** | [Debug] Manually spawn an animal for testing |
21865:  25: 
21866:  26: During the uphill phase, you'll:
21867:  27: - Navigate the mountain terrain to find optimal starting points
21868:  28: - Manage your stamina (which depletes while climbing)
21869:  29: - Photograph wildlife to earn additional money
21870:  30: - Look for shortcuts and strategic positions for your downhill run
21871:  31: 
21872:  32: ### ⬇️ Downhill/Sledding Phase Controls
21873:  33: 
21874:  34: | Input | Action |
21875:  35: |-------|--------|
21876:  36: | **Arrow Keys ←→** | Steer your sled left or right |
21877:  37: | **Spacebar** | Initiate jumps |
21878:  38: | **Arrow Keys** (during jumps) | Perform tricks (specific combinations detailed below) |
21879:  39: 
21880:  40: During downhill sledding, you'll:
21881:  41: - Build momentum and navigate the fastest route down
21882:  42: - Avoid obstacles like rocks, trees, and tourists
21883:  43: - Find and hit jumps to perform tricks
21884:  44: - Chain tricks together for bonus rewards
21885:  45: 
21886:  46: ### 🏠 Management (House & Upgrades) Controls
21887:  47: 
21888:  48: Navigate menus using mouse/keyboard to:
21889:  49: - Purchase equipment upgrades
21890:  50: - Expand mountain infrastructure 
21891:  51: - Track your earnings and loan payments
21892:  52: - Check your current mountain seed (for sharing great mountains!)
21893:  53: 
21894:  54: ---
21895:  55: 
21896:  56: ## ✨ Trick System
21897:  57: 
21898:  58: Perform these trick combinations during jumps to earn additional cash:
21899:  59: 
21900:  60: | Trick Name | Input Combination | Description |
21901:  61: |------------|-------------------|-------------|
21902:  62: | **🚁⬅️ Helicopter Spin Left** | Left, Left | Spin horizontally like a helicopter twirling left |
21903:  63: | **🚁➡️ Helicopter Spin Right** | Right, Right | Spin horizontally like a helicopter twirling right |
21904:  64: | **🪂 Parachute** | Up, Down | Hold sled overhead to slow descent and extend air time |
21905:  65: | **🛑 Air Brake** | Up, Up | Use sled as air brake to slow lateral speed |
21906:  66: 
21907:  67: **Trick Tips:**
21908:  68: - Successfully landing tricks earns money
21909:  69: - Chain tricks for bonus multipliers
21910:  70: - Be careful - attempting tricks without enough air time can result in crashes!
21911:  71: - Re-hitting jumps can extend combo chains
21912:  72: 
21913:  73: ---
21914:  74: 
21915:  75: ## 📸 Photography System Controls
21916:  76: 
21917:  77: | Control | Action |
21918:  78: |---------|--------|
21919:  79: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line |
21920:  80: | **Spacebar** | Take photo |
21921:  81: 
21922:  82: **Photography Tips:**
21923:  83: - Match the altitude line with the animal for maximum reward
21924:  84: - Animals that are moving yield higher rewards
21925:  85: - Each repeated photo of the same animal gives diminishing returns
21926:  86: - Upgrade your camera equipment to improve your photography income
21927:  87: 
21928:  88: ---
21929:  89: 
21930:  90: ## ⚙️ Advanced Mechanics
21931:  91: 
21932:  92: ### Stamina Management
21933:  93: - Stamina depletes during uphill climbing
21934:  94: - Return to the house to end your day and restore stamina
21935:  95: - Each day you will be charged 0.5% of your loan
21936:  96: - If you run out of stamina, you are immediately returned to the house, and charged 100*(houseReEntry*0.1)
21937:  97: - Upgrade your equipment to reduce stamina consumption
21938:  98: 
21939:  99: ### Collision Handling
21940: 100: - Collisions with obstacles slow you down and may cause crashes
21941: 101: - Upgrade sled durability to withstand more collisions
21942: 102: - Each crash reduces your potential earnings
21943: 103: 
21944: 104: ### Upgrade System
21945: 105: Spend your earnings on:
21946: 106: - **Rocket Surgery**: Increases speed and jump dynamics
21947: 107: - **Optimal Optics**: Improves camera angle and accuracy
21948: 108: - **Sled Durability**: Increases collision tolerance
21949: 109: - **Fancier Footwear**: Improves uphill movement speed
21950: 110: 
21951: 111: ### Win Condition
21952: 112: - Pay off your mountain loan to trigger the victory state
21953: 113: - Challenge yourself to complete this with fewer runs!
21954: ````````
21955: 
21956: ## File: docs/README.md
21957: ````````markdown
21958:   1: # **SledHEAD**  
21959:   2: **Genre:** Trick & Time Trial Racer | Adventure  
21960:   3: **Platform:** Web-based (PC)  
21961:   4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
21962:   5: 
21963:   6: > 🎮 **[Game Controls Guide](CONTROLS.md)** - Detailed explanation of all game controls and mechanics
21964:   7: 
21965:   8: ---
21966:   9: 
21967:  10: ## Table of Contents  
21968:  11: 1. [Core Concept](#core-concept)  
21969:  12: 2. [Gameplay Loops](#gameplay-loops)  
21970:  13:    - [Sledding Phase (Downhill)](#sledding-phase-downhill)  
21971:  14:    - [Climbing Phase (Uphill)](#climbing-phase-uphill)  
21972:  15:    - [Management Phase (House & Upgrades)](#management-phase-house--upgrades)  
21973:  16: 3. [Trick System](#trick-system)  
21974:  17: 4. [Upgrade System](#upgrade-system)  
21975:  18: 5. [Photo System](#photo-system)  
21976:  19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)  
21977:  20: 
21978:  21: ---
21979:  22: 
21980:  23: ## 🎯 **Core Concept**  
21981:  24: You are an **aspiring sledding champion & content creator**, challenging yourself to master an enormous mountain. Your goal is to optimize sled runs, perform aerial tricks, and earn money by completing daring stunts and photographing wildlife.
21982:  25: 
21983:  26: ---
21984:  27: 
21985:  28: ## 🎮 **Gameplay Loops**  
21986:  29: 
21987:  30: ### ⬇️ **Sledding Phase (Downhill)**  
21988:  31: - **Speed & Gravity:** Race down the mountain, using gravity and momentum to your advantage.  
21989:  32: - **Perform Tricks:** Execute tricks mid-air to earn extra cash.  
21990:  33: - **Avoid Obstacles:** Rocks and other hazards can slow you down and increase collision counts.  
21991:  34: 
21992:  35: ### ⬆️ **Climbing Phase (Uphill)**  
21993:  36: - **Manual Return:** Use simple directional controls to climb back up the mountain.  
21994:  37: - **Camera Controls:** Rotate your camera and adjust the altitude line to prepare for wildlife photography.  
21995:  38: 
21996:  39: ### 🏠 **Management Phase (House & Upgrades)**  
21997:  40: - **Upgrade Equipment:** Use your earnings to purchase upgrades that improve your sledding, camera, and movement capabilities.  
21998:  41: - **Pay Off Loan:** Reduce your initial loan with the money you earn. Once it's fully repaid, you win!
21999:  42: 
22000:  43: ---
22001:  44: 
22002:  45: ## ✨ **Trick System**  
22003:  46: - Perform tricks during jumps to earn additional cash.  
22004:  47: - Tricks include:  
22005:  48:   - **Left Helicopter** (Rotate left mid-air)  
22006:  49:   - **Right Helicopter** (Rotate right mid-air)  
22007:  50:   - **Air Brake** (Apply aerial braking)  
22008:  51:   - **Parachute** (Deploy for controlled descent)  
22009:  52: - Tricks can be chained for bonus rewards, and re-hit jumps can extend combo chains.  
22010:  53: 
22011:  54: ---
22012:  55: 
22013:  56: ## 🔧 **Upgrade System**  
22014:  57: Upgrades enhance gameplay and include:
22015:  58: 
22016:  59: ### 🛷 **Personal Upgrades:**  
22017:  60: - **Rocket Surgery:** Increases speed and jump dynamics.  
22018:  61: - **Optimal Optics:** Improves camera angle and accuracy for better wildlife photography.  
22019:  62: - **Sled Durability:** Increases the number of collisions you can survive.  
22020:  63: - **Fancier Footwear:** Improves uphill movement speed.  
22021:  64: 
22022:  65: ### 🏔️ **Mountain Upgrades:**  
22023:  66: - **Ski Lifts:** (Planned but not yet implemented)  
22024:  67: - **Snowmobile Rentals:** (Planned but not yet implemented)  
22025:  68: - **Groomed Trails:** (Planned but not yet implemented)  
22026:  69: 
22027:  70: ---
22028:  71: 
22029:  72: ## 📸 **Photo System**  
22030:  73: - **Wildlife Spawning:** Bears and birds spawn during the uphill phase.  
22031:  74: - **Camera Use:** Adjust the camera angle and altitude line to capture the perfect shot.  
22032:  75: - **Scoring Factors:**  
22033:  76:   - **Altitude Matching:** Better alignment with animal altitude increases reward.  
22034:  77:   - **Centering:** Well-centered shots provide bonus payouts.  
22035:  78:   - **Movement Bonus:** Photographing moving animals yields more cash.  
22036:  79:   - **Repeat Penalty:** Avoid photographing the same animal multiple times for reduced penalties.  
22037:  80: 
22038:  81: ---
22039:  82: 
22040:  83: ## ⚙️ **Game Balance & Tweakable Variables**  
22041:  84: Key variables that control game mechanics and can be adjusted include:  
22042:  85: - **Jump Mechanics:** Height, duration, and zoom bonuses.  
22043:  86: - **Animal Behavior:** Spawn times, movement speed, and flee mechanics.  
22044:  87: - **Upgrade Costs & Effects:** Each upgrade scales in cost and effectiveness.  
22045:  88: - **Collision Handling:** How collisions are managed and penalized.  
22046:  89: 
22047:  90: ---
22048:  91: 
22049:  92: ## 🎮 **Controls**  
22050:  93: - **W/A/S/D:** Move the player during the uphill phase.  
22051:  94: - **Arrow Keys:** Adjust the camera angle and altitude line.  
22052:  95: - **Spacebar:**  
22053:  96:   - **Downhill Phase:** Initiates jumps.  
22054:  97:   - **Uphill Phase:** Takes a photo.  
22055:  98: - **E:** Manually spawn an animal (for testing purposes).  
22056:  99: 
22057: 100: ---
22058: 101: 
22059: 102: ## ✅ **Win Condition**  
22060: 103: - Pay off the initial loan to trigger the victory state.
22061: ````````
22062: 
22063: ## File: js/mobs/bear.js
22064: ````````javascript
22065:  1: /* bear.js - Bear Animal Module
22066:  2: // This module defines the bear characteristics for the wildlife simulation.
22067:  3: // It registers itself with wildlife.js by calling registerAnimalType().
22068:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
22069:  5: */
22070:  6: (function() {
22071:  7:     var bearData = {
22072:  8:         type: "bear",
22073:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.bearSpawnProbability) || 0.5,
22074: 10:         width: 40,
22075: 11:         height: 60,
22076: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.bearDetectionRadius) || 50,
22077: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.bearSpeed) || 8,
22078: 14:         basePhotoBonus: 10, // Bears yield a higher photo bonus
22079: 15:         color: "#8B4513",
22080: 16:         spawningBiomes: [
22081: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
22082: 18:         ],
22083: 19:         customUpdate: null,
22084: 20:         customDraw: function(animal, screenY, ctx) {
22085: 21:             // Draw the bear's body
22086: 22:             ctx.fillStyle = "#8B4513";
22087: 23:             ctx.fillRect(
22088: 24:                 animal.x - animal.width / 2,
22089: 25:                 screenY - animal.height / 2,
22090: 26:                 animal.width,
22091: 27:                 animal.height
22092: 28:             );
22093: 29:             // Draw bear ears as simple rectangles
22094: 30:             ctx.fillStyle = "#000000";
22095: 31:             ctx.fillRect(
22096: 32:                 animal.x - animal.width / 3,
22097: 33:                 screenY - animal.height / 2 - 10,
22098: 34:                 10,
22099: 35:                 10
22100: 36:             );
22101: 37:             ctx.fillRect(
22102: 38:                 animal.x + animal.width / 3 - 10,
22103: 39:                 screenY - animal.height / 2 - 10,
22104: 40:                 10,
22105: 41:                 10
22106: 42:             );
22107: 43:             // Altitude indicator
22108: 44:             let t = 1 - (animal.altitude / 100);
22109: 45:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
22110: 46:             ctx.fillStyle = altitudeColor;
22111: 47:             ctx.fillRect(
22112: 48:                 animal.x + animal.width / 2 + 5,
22113: 49:                 screenY - 5,
22114: 50:                 10,
22115: 51:                 10
22116: 52:             );
22117: 53:         }
22118: 54:     };
22119: 55:     if (typeof registerAnimalType === 'function') {
22120: 56:         registerAnimalType(bearData);
22121: 57:     } else {
22122: 58:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
22123: 59:     }
22124: 60: })();
22125: ````````
22126: 
22127: ## File: js/mobs/bird.js
22128: ````````javascript
22129:  1: /* bird.js - Bird Animal Module
22130:  2: // This module defines the bird characteristics for the wildlife simulation.
22131:  3: // It registers itself with wildlife.js by calling registerAnimalType().
22132:  4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
22133:  5: */
22134:  6: (function() {
22135:  7:     var birdData = {
22136:  8:         type: "bird",
22137:  9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.birdSpawnProbability) || 0.5,
22138: 10:         width: 20,
22139: 11:         height: 20,
22140: 12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.birdDetectionRadius) || 50,
22141: 13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.birdSpeed) || 12,
22142: 14:         basePhotoBonus: 5, // Birds yield a lower photo bonus
22143: 15:         color: "#1E90FF",
22144: 16:         spawningBiomes: [
22145: 17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
22146: 18:         ],
22147: 19:         customUpdate: null,
22148: 20:         customDraw: function(animal, screenY, ctx) {
22149: 21:             // Draw the bird's body
22150: 22:             ctx.fillStyle = "#1E90FF";
22151: 23:             ctx.fillRect(
22152: 24:                 animal.x - animal.width / 2,
22153: 25:                 screenY - animal.height / 2,
22154: 26:                 animal.width,
22155: 27:                 animal.height
22156: 28:             );
22157: 29:             // Draw bird wings with a simple flapping effect
22158: 30:             ctx.fillStyle = "#000000";
22159: 31:             if (Math.floor(Date.now() / 200) % 2 === 0) {
22160: 32:                 ctx.beginPath();
22161: 33:                 ctx.moveTo(animal.x, screenY);
22162: 34:                 ctx.lineTo(animal.x - 20, screenY - 10);
22163: 35:                 ctx.lineTo(animal.x + 20, screenY - 10);
22164: 36:                 ctx.closePath();
22165: 37:                 ctx.fill();
22166: 38:             } else {
22167: 39:                 ctx.beginPath();
22168: 40:                 ctx.moveTo(animal.x, screenY);
22169: 41:                 ctx.lineTo(animal.x - 20, screenY + 5);
22170: 42:                 ctx.lineTo(animal.x + 20, screenY + 5);
22171: 43:                 ctx.closePath();
22172: 44:                 ctx.fill();
22173: 45:             }
22174: 46:             // Altitude indicator
22175: 47:             let t = 1 - (animal.altitude / 100);
22176: 48:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
22177: 49:             ctx.fillStyle = altitudeColor;
22178: 50:             ctx.fillRect(
22179: 51:                 animal.x + animal.width / 2 + 5,
22180: 52:                 screenY - 5,
22181: 53:                 10,
22182: 54:                 10
22183: 55:             );
22184: 56:         }
22185: 57:     };
22186: 58:     if (typeof registerAnimalType === 'function') {
22187: 59:         registerAnimalType(birdData);
22188: 60:     } else {
22189: 61:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
22190: 62:     }
22191: 63: })();
22192: ````````
22193: 
22194: ## File: js/input.js
22195: ````````javascript
22196:  1: /* input.js - Keyboard Input Handling */
22197:  2: // Global keyboard input tracking
22198:  3: // var keysDown = {}; // Now using the one from utils.js
22199:  4: // Global cursor position tracking
22200:  5: var cursorPosition = {
22201:  6:   absoluteX: 0,
22202:  7:   absoluteY: 0,
22203:  8:   viewportX: 0,
22204:  9:   viewportY: 0,
22205: 10:   lastUpdateTime: 0
22206: 11: };
22207: 12: // We're no longer setting up duplicate key event listeners here
22208: 13: // The main event listeners are now in utils.js with logging
22209: 14: // Set up event listener for mouse movement
22210: 15: window.addEventListener("mousemove", function(e) {
22211: 16:   // Store both absolute and viewport coordinates
22212: 17:   cursorPosition.absoluteX = e.pageX;
22213: 18:   cursorPosition.absoluteY = e.pageY;
22214: 19:   cursorPosition.viewportX = e.clientX;
22215: 20:   cursorPosition.viewportY = e.clientY;
22216: 21: });
22217: 22: // Add logging for mouse clicks when they're used for game interactions
22218: 23: window.addEventListener("mousedown", function(e) {
22219: 24:   // Log only left and right clicks for game interactions
22220: 25:   if (e.button === 0 || e.button === 2) {
22221: 26:     const buttonName = e.button === 0 ? "LEFT CLICK" : "RIGHT CLICK";
22222: 27:     console.log(`[${getTimestamp()}] MOUSE ${buttonName}: (${e.clientX}, ${e.clientY}) (Game State: ${window.currentState})`);
22223: 28:   }
22224: 29: });
22225: 30: // Update the cursor position display
22226: 31: function updateCursorPositionDisplay() {
22227: 32:   const cursorPositionElement = document.getElementById("cursor-position");
22228: 33:   if (cursorPositionElement) {
22229: 34:     cursorPositionElement.textContent = `Abs-xy: (${cursorPosition.absoluteX}, ${cursorPosition.absoluteY}) | View: (${cursorPosition.viewportX}, ${cursorPosition.viewportY})`;
22230: 35:   }
22231: 36: }
22232: 37: // Set up interval to update cursor position display once per second
22233: 38: setInterval(updateCursorPositionDisplay, 1000);
22234: 39: // Helper function to check if a key is currently pressed
22235: 40: function isKeyDown(key) {
22236: 41:   return window.keysDown && window.keysDown[key] === true;
22237: 42: }
22238: ````````
22239: 
22240: ## File: js/tricks.js
22241: ````````javascript
22242:  1: /* tricks.js - Trick System & Logic */
22243:  2: import { register } from './registry.js';
22244:  3: function startTrick(trickName) {
22245:  4:   if (player.currentTrick) return;
22246:  5:   player.currentTrick = trickName;
22247:  6:   player.trickTimer = 0;
22248:  7:   player.trickRotation = 0;
22249:  8:   player.trickOffset = 0;
22250:  9:   let now = Date.now();
22251: 10:   let cooldownEnd = player.trickCooldowns[trickName] || 0;
22252: 11:   let timeLeft = Math.max(0, cooldownEnd - now);
22253: 12:   player.currentTrickValueMultiplier = timeLeft > 0 ? Math.max(0.1, 1 - (timeLeft / TWEAK._trickCooldown)) : 1;
22254: 13:   player.trickCooldowns[trickName] = now + TWEAK._trickCooldown;
22255: 14:   console.log(`Starting ${trickName} (Value: ${(player.currentTrickValueMultiplier * 100).toFixed(0)}%)`);
22256: 15: }
22257: 16: register("startTrick", startTrick);
22258: 17: function checkTrickInputs() {
22259: 18:   if (!player.currentTrick && player.isJumping) {
22260: 19:     if (keysDown["ArrowLeft"]) startTrick("leftHelicopter");
22261: 20:     else if (keysDown["ArrowRight"]) startTrick("rightHelicopter");
22262: 21:     else if (keysDown["ArrowUp"]) startTrick("airBrake");
22263: 22:     else if (keysDown["ArrowDown"]) startTrick("parachute");
22264: 23:   }
22265: 24: }
22266: 25: register("checkTrickInputs", checkTrickInputs);
22267: 26: function processTrick(deltaTime) {
22268: 27:   if (player.currentTrick) {
22269: 28:     player.trickTimer += deltaTime;
22270: 29:     let trickProgress = player.trickTimer / (TWEAK._trickBaseDuration * TWEAK._trickTimeMultiplier + TWEAK._trickTimeAdder);
22271: 30:     switch (player.currentTrick) {
22272: 31:       case "leftHelicopter":
22273: 32:         player.trickRotation -= TWEAK._trickRotationSpeed * (deltaTime / 1000);
22274: 33:         break;
22275: 34:       case "rightHelicopter":
22276: 35:         player.trickRotation += TWEAK._trickRotationSpeed * (deltaTime / 1000);
22277: 36:         break;
22278: 37:       case "airBrake":
22279: 38:       case "parachute":
22280: 39:         player.trickOffset = TWEAK._trickOffsetDistance * Math.sin(Math.PI * trickProgress);
22281: 40:         break;
22282: 41:     }
22283: 42:     if (trickProgress >= 1) {
22284: 43:       completeTrick();
22285: 44:     }
22286: 45:   }
22287: 46: }
22288: 47: register("processTrick", processTrick);
22289: 48: function completeTrick() {
22290: 49:   let trickMoney = TWEAK._trickMoneyBase;
22291: 50:   let chainBonus = 1;
22292: 51:   if (player.lastTrick && player.lastTrick !== player.currentTrick) {
22293: 52:     player.trickChainCount++;
22294: 53:     chainBonus = Math.pow(TWEAK._trickChainMultiplier, player.trickChainCount);
22295: 54:     trickMoney *= chainBonus;
22296: 55:   } else {
22297: 56:     player.trickChainCount = 0;
22298: 57:   }
22299: 58:   trickMoney *= player.currentTrickValueMultiplier;
22300: 59:   let finalMoney = Math.floor(trickMoney);
22301: 60:   player.money += finalMoney;
22302: 61:   showMoneyGain(finalMoney, `(${player.currentTrick})`);
22303: 62:   addFloatingText(`+$${finalMoney} ${player.currentTrick}`, player.x, player.absY);
22304: 63:   console.log(`Completed ${player.currentTrick}! +$${finalMoney}`);
22305: 64:   player.lastTrick = player.currentTrick;
22306: 65:   player.currentTrick = null;
22307: 66:   player.trickTimer = 0;
22308: 67:   player.trickRotation = 0;
22309: 68:   player.trickOffset = 0;
22310: 69:   playTrickCompleteSound();
22311: 70: }
22312: 71: register("completeTrick", completeTrick);
22313: 72: function resetTrickState() {
22314: 73:   player.currentTrick = null;
22315: 74:   player.trickTimer = 0;
22316: 75:   player.trickRotation = 0;
22317: 76:   player.trickOffset = 0;
22318: 77:   player.lastTrick = null;
22319: 78:   player.trickChainCount = 0;
22320: 79: }
22321: 80: register("resetTrickState", resetTrickState);
22322: 81: function playTrickCompleteSound() {
22323: 82:   playTone(600, "sine", 0.1, 0.2);
22324: 83: }
22325: 84: register("playTrickCompleteSound", playTrickCompleteSound);
22326: 85: // Expose checkTrickInputs globally so that other modules (like downhill.js) can call it.
22327: 86: window.checkTrickInputs = checkTrickInputs;
22328: 87: export {
22329: 88:   startTrick,
22330: 89:   checkTrickInputs,
22331: 90:   processTrick,
22332: 91:   completeTrick,
22333: 92:   resetTrickState,
22334: 93:   playTrickCompleteSound,
22335: 94: };
22336: ````````
22337: 
22338: ## File: js/settings.js
22339: ````````javascript
22340:   1: // settings.js - various TWEAK settings and their
22341:   2: // knob-turnings go here
22342:   3: /* Global Configuration & Shared Globals */
22343:   4: // Define our current mountain biome and layer defaults.
22344:   5: var currentBiome = "starterMountain";  // We're on the Starter Mountain by default.
22345:   6: var currentMountainLayer = 1;          // Default layer (if you're using numeric layers)
22346:   7: var currentLayerPercent = 25;          // Or if you're using percentages (0-100)
22347:   8: var TWEAK = {
22348:   9:     tweakNob: 1,
22349:  10:     // Animal spawning and movement
22350:  11:     minSpawnTime: 5000, // Minimum delay between spawns (5 sec)
22351:  12:     maxSpawnTime: 10000, // Maximum delay between spawns (10 sec)
22352:  13:     minIdleTime: 3000, // Minimum time an animal sits still (1 sec)
22353:  14:     maxIdleTime: 8000, // Maximum time an animal sits still (20 sec)
22354:  15:     minMoveSpeed: 5, // Slowest movement speed for animals
22355:  16:     maxMoveSpeed: 11.2, // Fastest movement speed for animals
22356:  17:     fleeAngle: 45, // This may be obsolete - confirm before removing
22357:  18:     photoCooldown: 1000, // Must wait 1 second between photos
22358:  19:     repeatPhotoPenalty: 0.5, // 50% less money if the same animal is photographed again
22359:  20:     minAnimalSpawnDistance: 400,
22360:  21:     maxAnimalSpawnDistance: 500,
22361:  22:     bearSpawnProbability: 0.3, // 30% chance of a bear
22362:  23:     bearSpeed: 6, // Bears move a bit slower
22363:  24:     birdSpeed: 9, // Birds move faster
22364:  25:     bearDetectionRadius: 150, // Bears detect player from farther away
22365:  26:     birdDetectionRadius: 50, // Birds have smaller detection radius
22366:  27:     maxAnimalPhotoDistance: 600, // Maximum distance for taking photos
22367:  28:     // Jumping stuff
22368:  29:     jumpType: "immediate",               // "immediate" or "charge" - DO NOT REMOVE
22369:  30:     jumpCollisionMultiplier: 3,
22370:  31:     jumpBaseAscent: 1000,                 // Base ascent time (ms)
22371:  32:     jumpMaxHoldTime: 1000,               // Maximum charge duration (1 sec)
22372:  33:     jumpPeakScale: 2,                    // Base peak visual jump scale
22373:  34:     jumpHeightPerRocketSurgery: 0.05,    // Each level adds 5% to jump height
22374:  35:     jumpTimePerRocketSurgery: 0.05,      // Each level adds 5% to jump duration
22375:  36:     jumpZoomPerHeightIncrease: 0.5,      // For every 100% height increase, add 50% more zoom
22376:  37:     // Re-Hit Jump System
22377:  38:     reHitWindowStart: 0.70,              // When re-hit window opens (70% through jump)
22378:  39:     reHitIndicatorScale: 2.5,            // Size multiplier for indicator circle
22379:  40:     reHitIndicatorColor: "rgba(255, 0, 255, 0.4)",  // Bright magenta with more opacity
22380:  41:     reHitIndicatorOutlineColor: "#FF00FF", // Solid magenta outline
22381:  42:     reHitBonusDuration: 1.2,             // Duration multiplier for re-hit jumps
22382:  43:     // Trick Physics Adjustments
22383:  44:     parachuteGravityFactor: 0.8,         // Gravity reduction during parachute
22384:  45:     airBrakeFrictionMultiplier: 0.85,    // Speed reduction during air brake
22385:  46:     // Camera and aiming
22386:  47:     basePOVAngle: 30,
22387:  48:     optimalOpticsPOVIncrease: 5,
22388:  49:     altitudeFlashMinSpeed: 200,
22389:  50:     altitudeFlashMaxSpeed: 10,
22390:  51:     altitudeGradientStart: "blue",
22391:  52:     altitudeGradientEnd: "red",
22392:  53:     // Photo scoring
22393:  54:     basePhotoValue: 50, // Base money earned from a photo
22394:  55:     altitudeMatchMultiplier: 2,
22395:  56:     centerPOVMultiplier: 1.5,
22396:  57:     fleeingAnimalMultiplier: 3,
22397:  58:     // Animal multipliers
22398:  59:     bearMultiplier: 1.5,
22399:  60:     birdMultiplier: 1,
22400:  61:     // House entry costs
22401:  62:     houseEntryLoanDeduction: 0.005, // 0.5% loan deduction when entering house
22402:  63:     // Underlying base values
22403:  64:     _sledMass: 1.0,
22404:  65:     _baseGravity: 0.1,
22405:  66:     _baseHorizontalAccel: 0.25,
22406:  67:     _baseFriction: 0.95,
22407:  68:     _baseMaxXVel: 3,
22408:  69:     _rocketSurgeryFactorPerLevel: 0.1,
22409:  70:     _optimalOpticsAccelFactorPerLevel: 0.02,
22410:  71:     _optimalOpticsFrictionFactorPerLevel: 0.005,
22411:  72:     _fancierFootwearUpSpeedPerLevel: 0.3,
22412:  73:     _baseUpSpeed: 2,
22413:  74:     _baseCollisionsAllowed: 3,
22414:  75:     _starterCash: 200, // Jacked up for testing
22415:  76:     _bounceImpulse: 3,  // New bounce impulse value
22416:  77:     // Trick system configuration
22417:  78:     _trickCooldown: 5000,          // Base cooldown per trick (5 sec)
22418:  79:     _trickTimeMultiplier: 1.0,     // Global trick duration multiplier
22419:  80:     _trickTimeAdder: 0,            // Global trick duration additive time
22420:  81:     _trickBaseDuration: 250,       // Base duration for tricks (ms)
22421:  82:     _trickRotationSpeed: 720,     // Degrees per second for helicopter tricks (3 full spins)
22422:  83:     _trickOffsetDistance: 40,      // Pixels to offset sled for air brake/parachute
22423:  84:     _trickMoneyBase: 50,           // Base money earned per trick
22424:  85:     _trickChainMultiplier: 1.5,    // Multiplier for chaining different tricks
22425:  86:     // Getters to apply tweakNob multiplier
22426:  87:     get sledMass() { return this._sledMass * this.tweakNob; },
22427:  88:     set sledMass(val) { this._sledMass = val; },
22428:  89:     get baseGravity() { return this._baseGravity * this.tweakNob; },
22429:  90:     set baseGravity(val) { this._baseGravity = val; },
22430:  91:     get baseHorizontalAccel() { return this._baseHorizontalAccel; },
22431:  92:     set baseHorizontalAccel(val) { this._baseHorizontalAccel = val; },
22432:  93:     get baseFriction() { return this._baseFriction; }, // * this.tweakNob
22433:  94:     set baseFriction(val) { this._baseFriction = val; },
22434:  95:     get baseMaxXVel() { return this._baseMaxXVel * this.tweakNob; },
22435:  96:     set baseMaxXVel(val) { this._baseMaxXVel = val; },
22436:  97:     get rocketSurgeryFactorPerLevel() { return this._rocketSurgeryFactorPerLevel * this.tweakNob; },
22437:  98:     set rocketSurgeryFactorPerLevel(val) { this._rocketSurgeryFactorPerLevel = val; },
22438:  99:     get optimalOpticsAccelFactorPerLevel() { return this._optimalOpticsAccelFactorPerLevel * this.tweakNob; },
22439: 100:     set optimalOpticsAccelFactorPerLevel(val) { this._optimalOpticsAccelFactorPerLevel = val; },
22440: 101:     get optimalOpticsFrictionFactorPerLevel() { return this._optimalOpticsFrictionFactorPerLevel * this.tweakNob; },
22441: 102:     set optimalOpticsFrictionFactorPerLevel(val) { this._optimalOpticsFrictionFactorPerLevel = val; },
22442: 103:     get fancierFootwearUpSpeedPerLevel() { return this._fancierFootwearUpSpeedPerLevel * this.tweakNob; },
22443: 104:     set fancierFootwearUpSpeedPerLevel(val) { this._fancierFootwearUpSpeedPerLevel = val; },
22444: 105:     get baseUpSpeed() { return this._baseUpSpeed * this.tweakNob; },
22445: 106:     set baseUpSpeed(val) { this._baseUpSpeed = val; },
22446: 107:     get baseCollisionsAllowed() { return this._baseCollisionsAllowed * this.tweakNob; },
22447: 108:     set baseCollisionsAllowed(val) { this._baseCollisionsAllowed = val; },
22448: 109:     get starterCash() { return this._starterCash * this.tweakNob; },
22449: 110:     set starterCash(val) { this._starterCash = val; },
22450: 111:     // New dynamic bounceImpulse getter/setter
22451: 112:     get bounceImpulse() { return this._bounceImpulse * this.tweakNob; },
22452: 113:     set bounceImpulse(val) { this._bounceImpulse = val; }
22453: 114: };
22454: 115: // New: function to compute max collisions
22455: 116: TWEAK.getMaxCollisions = function() {
22456: 117:     // Ensure playerUpgrades exists before accessing it
22457: 118:     return TWEAK.baseCollisionsAllowed + (typeof playerUpgrades !== "undefined" && playerUpgrades.sledDurability ? playerUpgrades.sledDurability : 0);
22458: 119: };
22459: ````````
22460: 
22461: ## File: !READ_FIRST-FILE_SUMMARY.txt
22462: ````````
22463:  1: ## JavaScript Files:
22464:  2: 
22465:  3: - **js/entities.js**: Manages collision detection, camera overlay rendering, and animal spawning/behavior mechanics, including drawing animal entities and handling animal fleeing behavior.
22466:  4: - **js/game.js**: Controls the core game loop and state transitions, including initializing gameplay, managing UI elements, and handling game start and loan payment logic.
22467:  5: - **js/input.js**: Handles global keyboard input tracking, including setting up event listeners for keydown and keyup events, and provides helper functions for checking key states.
22468:  6: - **js/mechanics.js**: Manages core gameplay mechanics such as loan repayment, jump and trick systems, collision detection, and movement handling for downhill and uphill phases.
22469:  7: - **js/player.js**: Defines the player object with all state variables, including position, velocity, camera angles, trick tracking, and jump state properties.
22470:  8: - **js/render.js**: Contains the rendering logic for drawing the player, terrain, floating texts, camera overlays, and animals. Manages visual effects like trick animations and the Re-Hit indicator.
22471:  9: - **js/upgrades.js**: Manages player and mountain upgrades, including upgrade costs, UI display logic, and purchase mechanics.
22472: 10: - **js/utils.js**: Provides utility functions and configurations, including game tweak parameters, audio functions, collision detection, mathematical helpers, and color interpolation utilities.
22473: 11: - **js/wildlifephotos.js**: Contains logic for the wildlife photography mini-game, including animal spawning, photo scoring, and managing animal behaviors like fleeing.
22474: 12: - **js/world.js**: Manages the generation of terrain and the awarding of money based on the player's distance traveled.
22475: 13: 
22476: 14: ## Project Files:
22477: 15: 
22478: 16: - **index.html**: Main HTML file linking JavaScript and CSS files, defines the game UI structure.
22479: 17: - **styles.css**: Contains the game's styling, including layout and visual styles for UI elements.
22480: 18: - **1.0_README.md**: Likely an initial readme or changelog document for version 1.0.
22481: 19: - **README.md**: Primary documentation file for the project, describing setup and usage instructions.
22482: 20: - **ROADMAP.md**: Outlines planned features and future development directions.
22483: 21: - **LICENSE.md**: Contains the licensing terms for the project.
22484: 22: - **.gitignore**: Specifies which files and directories should be ignored by version control.
22485: 23: - **todo.txt**: Simple text file listing tasks and development priorities.
22486: 24: - **!READ_FIRST-FILE_SUMMARY.txt**: Possibly an initial overview or summary of the project.
22487: ````````
22488: 
22489: ## File: docs/ROADMAP.md
22490: ````````markdown
22491:   1: # 📍 **SledHEAD Comprehensive Development Roadmap**
22492:   2: 
22493:   3: This document outlines the detailed path from the current implementation to the complete "1.0" version of **SledHEAD**, including the critical gameplay shift to an **Up-Then-Down** stamina-based mechanic.
22494:   4: 
22495:   5: ---
22496:   6: 
22497:   7: ## 🎯 **Core Concept**
22498:   8: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
22499:   9: 
22500:  10: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
22501:  11: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
22502:  12: 
22503:  13: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
22504:  14: 
22505:  15: ## 🎯 **Gameplay Loop Overview**
22506:  16: - Players start at the mountain's base, managing stamina as they climb upward.
22507:  17: - Strategic decision-making to sled down for rewards before stamina depletion.
22508:  18: - Higher altitudes host rare wildlife, higher rewards, and greater risks.
22509:  19: 
22510:  20: ---
22511:  21: 
22512:  22: ## 🌄 **Segmented Cylinder Wrapping (Layered Mountain Structure)**  
22513:  23: **Handling Horizontal Wrapping at Different Elevations**
22514:  24: 
22515:  25: To create the effect of a **finite mountain with wraparound sides**, SledHEAD uses a **layered cylindrical system** instead of a continuous cone. The mountain is divided into **stacked segments**, each with its own **fixed circumference** that gets **smaller as you go higher**. This allows for a **consistent wraparound mechanic** while keeping movement predictable.
22516:  26: 
22517:  27: ### 🏔️ **How It Works:**
22518:  28: - Each **layer** is a separate horizontal zone, like a **floating ring** around the mountain.  
22519:  29: - If a player **crosses the left or right boundary** of a layer, they seamlessly wrap around to the other side.  
22520:  30: - **Lower layers are wider**, giving more horizontal space.  
22521:  31: - **Upper layers are narrower**, meaning wraparound happens sooner.  
22522:  32: 
22523:  33: ### ⬆️⬇️ **Moving Between Layers**
22524:  34: When transitioning **between vertical segments**:
22525:  35: 1. If the player **moves downward** past the bottom boundary of a layer:
22526:  36:    - They **teleport to the top boundary** of the layer below.  
22527:  37:    - Their **horizontal position scales** based on the new circumference to maintain a proportional location.  
22528:  38:    
22529:  39:    ```pseudocode
22530:  40:    scale_factor = new_layer.circumference / old_layer.circumference
22531:  41:    x_new = x_old * scale_factor
22532:  42: 
22533:  43: 2. If the player **moves upward** past the top boundary of a layer:
22534:  44:    - They **appear at the bottom** of the next layer up with **their horizontal position **scaled.
22535:  45: 
22536:  46: ### 🏁 **Gameplay Implications**
22537:  47:    - Predictable & Manageable: Keeps wraparound and movement feeling natural while allowing for different gameplay per layer.
22538:  48: 
22539:  49: ### **Layer-Specific Challenges**:
22540:  50:    - Broader paths at lower levels = more open sledding.
22541:  51:    - Tighter paths at higher levels = more technical, precision-based gameplay.
22542:  52:    - Performance-Friendly: Each layer is an isolated map segment, simplifying collision checks and procedural generation.
22543:  53: 
22544:  54: ---
22545:  55: 
22546:  56: ## 🌄 **Light/Dark Gradient Altitude System**
22547:  57: 
22548:  58: - Introduce a dynamic visual gradient where snow and terrain visually shift, with the snow at higher altitudes lighter due to being cleaner, and the snow downhill from you appears darker (due to the dirt and debres that flows down hill). 🚀
22549:  59: - The gradient will provide a dynamic natural visual guide for players to intuitively gauge altitude and plan their climbs and descents. 🎯
22550:  60: 
22551:  61: ---
22552:  62: 
22553:  63: ## 🌎 **Procedural World & Persistence**
22554:  64: 
22555:  65: - The mountain remains consistent during a playthrough.  
22556:  66: - **New terrain is only generated when starting a new game.**  
22557:  67: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
22558:  68: - **Changes per run:**
22559:  69:   - Tourists & fans shift positions.  
22560:  70:   - Weather may change dynamically.  
22561:  71:   - Wildlife encounters vary.
22562:  72: 
22563:  73: ---
22564:  74: 
22565:  75: ## 🎢 Gameplay Loops
22566:  76: **Progression Goals:**  
22567:  77: - **Prototype:** Repay the cost of the mountain.  
22568:  78: - **Full Game:**  
22569:  79:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
22570:  80:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
22571:  81:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
22572:  82:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
22573:  83: ### **⬆️1️⃣ Uphill Phase: Climbing & Exploration**
22574:  84: #### 🚶 **Top-down adventure traversal with stamina management and exploration.**  
22575:  85: - **Goal:** Ascend to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
22576:  86: - **Stamina System:**  
22577:  87:   - Stamina drains when moving.  
22578:  88:   - Replenished by **food stands, resting points, or upgrades**.  
22579:  89: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
22580:  90:   - **Random animals appear every few seconds (TWEAK variable).**  
22581:  91:   - Animals either **stay still and will run if you get too close.** Eventually they will **wander off**.  
22582:  92:   - **Use the Left & Right Arrow Keys to aim the camera cone** around your character.  
22583:  93:   - **Align the altitude line (using the Up & Down Arrow Keys)** with the animal’s altitude for a perfect shot.  
22584:  94:   - **Photos earn money, with multipliers for:**  
22585:  95:     - Accuracy (center of POV cone).  
22586:  96:     - Altitude match precision.  
22587:  97:     - Moving vs. stationary targets (moving = 3x value).
22588:  98:     - Animal Rarity (more exotic animals the further up the mountain you are).
22589:  99: 
22590: 100: ### **⬇️2️⃣ Sledding Phase (Downhill)**
22591: 101: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
22592: 102: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
22593: 103: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
22594: 104: - **Obstacles:**
22595: 105:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
22596: 106:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
22597: 107:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
22598: 108: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
22599: 109: - **Time Trials:**  
22600: 110:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
22601: 111:   - **Your time between activators determines your bonus.**  
22602: 112:   - **Faster times = more money!**  
22603: 113:   - Not all runs are timed; only those where you activate a trial.
22604: 114: 
22605: 115: ### 🏠3️⃣ **Management Phase (House & Upgrades)**
22606: 116: 🏡 **Upgrade your gear, mountain, and social media presence.**  
22607: 117: - **Spend earned money on:**
22608: 118:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
22609: 119:   - **Sled Upgrades:** Speed, handling, trick potential.  
22610: 120:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
22611: 121: - **New Game Start:**  
22612: 122:   - Mountain **ONLY regenerates when starting a completely new game.**  
22613: 123:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
22614: 124:   - **Current seed is displayed at home.** 
22615: 125: 
22616: 126: ---
22617: 127: 
22618: 128: ## 🏡 **Tutorial Level: Childhood Memories on Grandpa’s Hill**  
22619: 129: **Learning the Basics in a Cozy, Story-Driven Introduction**
22620: 130: 
22621: 131: Before tackling the **massive procedural mountains** of SledHEAD, players start with a heartwarming **tutorial level**, set in a **quiet rural winter landscape**. This **flashback sequence** lets players experience sledding as a **young child**, learning the fundamental mechanics under the guidance of their **grandfather**.
22622: 132: 
22623: 133: ### 📜 **Narrative Setup**
22624: 134: The game opens on a **small, snow-covered hill** just outside a **cozy cabin**, where the protagonist—**a child version of themselves**—is spending time with their **grandfather** on a crisp winter afternoon. Grandpa is **wrapped up in a warm coat, standing at the base of the hill after sledding down himself**, watching proudly as the player **takes their maiden toboggan run, learning to sled**. The sky glows with the **soft oranges and purples of a winter sunset**, setting a nostalgic and peaceful mood.
22625: 135: 
22626: 136: Before long, Grandpa gives a gentle laugh:  
22627: 137: > **"Ahh, y'know, I used to be the best sledder on this hill... but these ol' legs don’t have the stamina they used to! You go on, get a few more runs in—I’ll watch and cheer ya on from here! And remember - the snow's always whiter above you, and dirtier below!"**  
22628: 138: 
22629: 139: With that, the tutorial **fully hands control to the player**, reinforcing the **stamina system** and setting up a meaningful reason to **manage energy wisely**.
22630: 140: 
22631: 141: ---
22632: 142: 
22633: 143: ## 🎮 **Tutorial Mechanics Introduced**
22634: 144: The tutorial unfolds organically through **simple, playful challenges**, without heavy UI elements. Players **learn by doing**, with Grandpa offering **gentle, supportive guidance**.
22635: 145: 
22636: 146: ### **⬆️ Walking Uphill (Basic Movement & Stamina)**
22637: 147: - Players move **uphill by walking**, learning that **whiter snow = uphill, darker snow = downhill**.  
22638: 148: - Moving uphill **drains stamina** gradually.  
22639: 149: - Grandpa occasionally calls out:
22640: 150:   > **"You’re strong, kid! But ya gotta pace yourself—harder climbs mean ya gotta rest up after!"**
22641: 151: 
22642: 152: ### **🛷 Sledding Downhill (Turning & Speed Control)**
22643: 153: - Players start **at the top of the small hill** and practice their **first sled run**.  
22644: 154: - **Turning left/right** is introduced, along with simple speed adjustments.  
22645: 155: - Grandpa **cheers when the player makes a smooth turn**:
22646: 156:   > **"Look at that! You’re a natural! Sleddin’s all about balance—lean just right and the hill will do the rest!"**
22647: 157: 
22648: 158: ### **🔄 Climbing & Repeating Runs**
22649: 159: - After a few runs, Grandpa suggests:
22650: 160:   > **"Why don’t ya take a few more runs? See if ya can get all the way to the bottom without wipin’ out!"**  
22651: 161: - The player is **free to keep practicing**, reinforcing that **sledding is about trial and improvement**.  
22652: 162: - The game subtly **introduces self-motivated play**, rewarding experimentation.
22653: 163: 
22654: 164: ### **🏁 Tutorial Completion**
22655: 165: - Once the player **feels confident**, a final sled run **transitions seamlessly into the present day**, cutting to the **modern protagonist** standing atop their massive new mountain.
22656: 166: - **Grandpa’s words echo**, setting the tone for the adventure ahead:
22657: 167:   > **"One day, you’ll take on bigger mountains than this… but no matter how high you go, never forget the joy of the ride."**  
22658: 168: - The camera pulls back, revealing the **full mountain**, and gameplay transitions into the **core SledHEAD experience**.
22659: 169: 
22660: 170: ---
22661: 171: 
22662: 172: ## ✨ **Why This Works**
22663: 173: - **Emotionally Engaging** – Connects the player to their childhood roots and motivation.  
22664: 174: - **Smooth Learning Curve** – Teaches fundamental mechanics **without forced tutorials**.  
22665: 175: - **Worldbuilding & Nostalgia** – Grandpa’s wisdom adds charm and meaning to the stamina system.  
22666: 176: - **Seamless Transition to Main Game** – Keeps momentum going without feeling like a "tutorial level."  
22667: 177: 
22668: 178: This opening ensures that **players feel connected to their journey**—from childhood sledding to **becoming a sledding legend**. 🎿🔥  
22669: 179: 
22670: 180: ---
22671: 181: 
22672: 182: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
22673: 183: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
22674: 184: 
22675: 185: 1. **☁️🪂 Parachute (Up, Down)**  
22676: 186:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
22677: 187:    **Pixel Art Representation:**  
22678: 188:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
22679: 189: 
22680: 190: 2. **🛑🎿 Air Brake (Up, Up)**  
22681: 191:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
22682: 192:    **Pixel Art Representation:**  
22683: 193:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
22684: 194: 
22685: 195: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
22686: 196:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
22687: 197:    **Pixel Art Representation:**  
22688: 198:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
22689: 199: 
22690: 200: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
22691: 201:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
22692: 202:    **Pixel Art Representation:**  
22693: 203:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
22694: 204: 
22695: 205: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
22696: 206:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
22697: 207:    **Pixel Art Representation:**  
22698: 208:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
22699: 209: 
22700: 210: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
22701: 211:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
22702: 212:    **Pixel Art Representation:**  
22703: 213:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
22704: 214: 
22705: 215: 7. **🦸‍♂️✨ Superman (Down, Down)**  
22706: 216:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
22707: 217:    **Pixel Art Representation:**  
22708: 218:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
22709: 219: 
22710: 220: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
22711: 221:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
22712: 222:    **Pixel Art Representation:**  
22713: 223:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
22714: 224: 
22715: 225: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
22716: 226:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
22717: 227:    **Pixel Art Representation:**  
22718: 228:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
22719: 229: 
22720: 230: 10. **👻🔥 Ghost Rider (Left, Right)**  
22721: 231:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
22722: 232:     **Pixel Art Representation:**  
22723: 233:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
22724: 234: 
22725: 235: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
22726: 236:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
22727: 237:     **Pixel Art Representation:**  
22728: 238:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
22729: 239: 
22730: 240: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
22731: 241:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
22732: 242:     **Pixel Art Representation:**  
22733: 243:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
22734: 244: 
22735: 245: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
22736: 246:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
22737: 247:     **Pixel Art Representation:**  
22738: 248:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
22739: 249: 
22740: 250: 14. **✨⬆️ Falling Star (Down, Up)**  
22741: 251:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
22742: 252:     **Pixel Art Representation:**  
22743: 253:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
22744: 254: 
22745: 255: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
22746: 256:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
22747: 257:     **Pixel Art Representation:**  
22748: 258:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
22749: 259: 
22750: 260: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
22751: 261:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
22752: 262:     **Pixel Art Representation:**  
22753: 263:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
22754: 264: 
22755: 265: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
22756: 266: 
22757: 267: ### **Hazards & Interactions:**
22758: 268: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
22759: 269: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
22760: 270: - **Ice Patches:** Reduce control and make turns trickier.
22761: 271: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
22762: 272: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
22763: 273: 
22764: 274: ---
22765: 275: 
22766: 276: ## 🔧 **Upgrade System**
22767: 277: 
22768: 278: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
22769: 279: | Upgrade                    | Effect                                             |
22770: 280: |----------------------------|----------------------------------------------------|
22771: 281: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
22772: 282: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
22773: 283: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
22774: 284: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
22775: 285: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
22776: 286: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
22777: 287: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
22778: 288: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
22779: 289: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
22780: 290: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
22781: 291: 
22782: 292: ### 🏔️ Mountain Upgrades (Resort Expansion)
22783: 293: | Upgrade                        | Effect                                                         |
22784: 294: |--------------------------------|----------------------------------------------------------------|
22785: 295: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
22786: 296: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
22787: 297: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
22788: 298: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
22789: 299: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
22790: 300: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
22791: 301: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
22792: 302: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
22793: 303: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
22794: 304: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
22795: 305: 
22796: 306: ---
22797: 307: 
22798: 308: ## 🎮 **Mini-Games in SledHEAD**
22799: 309: 
22800: 310: ### 1. **Animal Photography** 📸🐾
22801: 311: - **Objective:**  
22802: 312:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
22803: 313: - **Mechanics:**  
22804: 314:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
22805: 315:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
22806: 316:   - **Scoring Bonuses:**  
22807: 317:     - **Altitude Match Multiplier**  
22808: 318:     - **POV Centering Bonus**  
22809: 319:     - **Speed Capture Bonus**  
22810: 320: - **Upgrades:**  
22811: 321:   - **Optimal Optics:** Increases the camera’s POV cone.  
22812: 322:   - **Steady Hands:** Reduces camera sway.  
22813: 323:   - **Animal Baiting:** Increases rare animal appearance.
22814: 324: - **Special Events:**  
22815: 325:   - **Rare Animal Sightings** and **Storm Photography**.
22816: 326: - **Risk/Challenge:**  
22817: 327:   - **Repeat Photo Penalty** and aggressive animal disruptions.
22818: 328: 
22819: 329: ---
22820: 330: 
22821: 331: ### 2. **Fishing** 🎣🐟  
22822: 332: - **Objective:**  
22823: 333:   Catch fish using various techniques and bait types.
22824: 334: - **Mechanics:**  
22825: 335:   - Dynamic water simulation with varied fish behaviors.  
22826: 336:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
22827: 337:   - Legendary fish yield major rewards.
22828: 338: - **Upgrades:**  
22829: 339:   - Stronger fishing lines, advanced lures, and sonar detection.
22830: 340: - **Special Events:**  
22831: 341:   - Fishing tournaments and rare migration patterns.
22832: 342: - **Risk/Challenge:**  
22833: 343:   - Line snapping and predator interference.
22834: 344: 
22835: 345: ---
22836: 346: 
22837: 347: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
22838: 348: - **Objective:**  
22839: 349:   Unlock doors, safes, and hidden compartments.
22840: 350: - **Mechanics:**  
22841: 351:   - Use tools like **rakes, hooks, and tension wrenches**.  
22842: 352:   - Navigate traps such as alarms and rusted internals.
22843: 353: - **Upgrades:**  
22844: 354:   - High-quality picks, electronic bypass tools, and vibration sensors.
22845: 355: - **Special Events:**  
22846: 356:   - Timed heists and races with rival scavengers.
22847: 357: - **Risk/Challenge:**  
22848: 358:   - Unstable buildings and hazards that may alert authorities.
22849: 359: 
22850: 360: ---
22851: 361: 
22852: 362: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
22853: 363: - **Objective:**  
22854: 364:   Find buried treasure using maps, clues, and metal detectors.
22855: 365: - **Mechanics:**  
22856: 366:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
22857: 367:   - Digging requires stamina management and upgraded tools.
22858: 368: - **Upgrades:**  
22859: 369:   - Advanced metal detectors, excavation tools, and digging drones.
22860: 370: - **Special Events:**  
22861: 371:   - NPC treasure races and secret cache discoveries.
22862: 372: - **Risk/Challenge:**  
22863: 373:   - Booby traps, hostile environments, and law enforcement risks.
22864: 374: 
22865: 375: ---
22866: 376: 
22867: 377: ### 5. **Kite Flying** 🪁🌬️  
22868: 378: - **Objective:**  
22869: 379:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
22870: 380: - **Mechanics:**  
22871: 381:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
22872: 382:   - **Downhill:** Kites extend air time and grant special bonuses.
22873: 383: - **Upgrades:**  
22874: 384:   - **Glide Boost, Speed Stream, and Aero Control.**
22875: 385: - **Special Events:**  
22876: 386:   - **Storm Riding** with higher boosts but riskier winds.
22877: 387: - **Risk/Challenge:**  
22878: 388:   - Strong gusts may destabilize your kite.
22879: 389: 
22880: 390: ---
22881: 391: 
22882: 392: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
22883: 393: - **Objective:**  
22884: 394:   Search for valuable minerals, gems, and gold.
22885: 395: - **Mechanics:**  
22886: 396:   - Explore rivers, caves, and rock formations.  
22887: 397:   - **Panning:** Swirl water to separate gold.  
22888: 398:   - **Pickaxe Mining:** Break rocks for hidden gems.
22889: 399: - **Upgrades:**  
22890: 400:   - High-tech panning kits, seismic scanners, precision drills.
22891: 401: - **Special Events:**  
22892: 402:   - Gold rush hotspots, rare mineral finds, and cave-ins.
22893: 403: - **Risk/Challenge:**  
22894: 404:   - Unstable ground and rival prospectors.
22895: 405: 
22896: 406: ---
22897: 407: 
22898: 408: ### 7. **Cryptid Fossil Digging** 🦴🔍  
22899: 409: - **Objective:**  
22900: 410:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
22901: 411: - **Mechanics:**  
22902: 412:   - Use brushes, chisels, and excavation tools to reveal fossils.  
22903: 413:   - Transport fossils to the museum at the base of the first mountain.
22904: 414: - **Upgrades:**  
22905: 415:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
22906: 416: - **Special Events:**  
22907: 417:   - Competing paleontologists and hidden dig sites.
22908: 418: - **Risk/Challenge:**  
22909: 419:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
22910: 420: 
22911: 421: ---
22912: 422: 
22913: 423: ### 8. **Sled Tricking** 🛷✨  
22914: 424: - **Objective:**  
22915: 425:   Chain together aerial sled tricks to earn cash and boost fan engagement.
22916: 426: - **Mechanics:**  
22917: 427:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
22918: 428:   - Chain tricks for higher multipliers.
22919: 429: - **Upgrades:**  
22920: 430:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
22921: 431: - **Special Events:**  
22922: 432:   - Trick challenges and fan-requested stunt competitions.
22923: 433: - **Risk/Challenge:**  
22924: 434:   - Mistimed tricks can cause crashes and loss of earnings.
22925: 435: 
22926: 436: ---
22927: 437: 
22928: 438: ### 9. **Time Trial Racing** 🏁🛷  
22929: 439: - **Objective:**  
22930: 440:   Trigger time trial races by hitting gates while sledding for money rewards.
22931: 441: - **Mechanics:**  
22932: 442:   - Crossing a time trial gate starts a timer.  
22933: 443:   - The faster and further you go, the more money you earn.
22934: 444: - **Why It Fits:**  
22935: 445:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
22936: 446: 
22937: 447: ---
22938: 448: 
22939: 449: ### 10. **RC Motor Sled** ❄️🏎️  
22940: 450: - **Objective:**  
22941: 451:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
22942: 452: - **Mechanics:**  
22943: 453:   - Maneuver nimble RC sleds across frozen tundra.  
22944: 454:   - Nitro boosts and mid-air tricks enhance performance.  
22945: 455:   - Customization options include different sled bodies, engines, and handling upgrades.
22946: 456: - **Special Events:**  
22947: 457:   - Avalanche races, night rides, and hazard runs.
22948: 458: - **Risk/Challenge:**  
22949: 459:   - Limited battery life, high winds, and signal loss in deep snow.
22950: 460: 
22951: 461: ---
22952: 462: 
22953: 463: ### 11. **Sap Sugaring** 🍁🔥  
22954: 464: - **Objective:**  
22955: 465:   Tap into nature’s sweetest resource—maple syrup! Harvest sap from trees to create energy-restoring treats and valuable trade goods.  
22956: 466: - **Mechanics:**  
22957: 467:   - Start by tapping maple trees on the starter mountain.  
22958: 468:   - Explore new regions to discover exotic trees like the **Cinderwillow** on Volcano Mountain, producing rare and powerful saps.  
22959: 469:   - Upgrade your tapping tools and storage tanks to increase yield and quality.  
22960: 470: - **Upgrades:**  
22961: 471:   - **Precision Taps:** Extract sap faster with reduced waste.  
22962: 472:   - **Insulated Buckets:** Prevent spoilage and maximize collection.  
22963: 473:   - **Sap Refinery:** Process sap into premium syrup with added benefits.  
22964: 474: 
22965: 475: ---
22966: 476: 
22967: 477: ### 12. **Beekeeping** 🐝🍯  
22968: 478: - **Objective:**  
22969: 479:   Raise and breed bees to produce high-quality honey and wax, each offering unique benefits for sledding, income, and buffs.  
22970: 480: - **Mechanics:**  
22971: 481:   - Manage beehives and optimize honey production.  
22972: 482:   - Crossbreed bees to develop specialized traits.  
22973: 483:   - Explore forests to find and capture new queen bees.  
22974: 484:   - Maintain hive conditions to ensure steady honey and wax yields.  
22975: 485: - **Upgrades:**  
22976: 486:   - **Deluxe Hives:** Improve bee happiness and productivity.  
22977: 487:   - **Queen Breeding Chambers:** Unlock advanced genetic traits for custom honey effects.  
22978: 488:   - **Protective Suits & Smokers:** Handle bees safely and reduce swarm risks.  
22979: 489: - **Special Events:**  
22980: 490:   - **Swarm Rescues:** Save lost colonies for rare genetic lines.  
22981: 491:   - **Beekeeper Pete’s Challenges:** Complete tricky hive management tasks for rewards.  
22982: 492: 
22983: 493: ---
22984: 494: 
22985: 495: ## 🌆 **NPCs & Mountain Ecosystem**
22986: 496: A thriving **mountain resort** needs a mix of **essential services, skilled specialists, and quirky legends**. These NPCs **enhance gameplay, create dynamic events, and unlock hidden mechanics**.
22987: 497: 
22988: 498: ---
22989: 499: 
22990: 500: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
22991: 501: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
22992: 502: 
22993: 503: #### 🏂 **Sled Tech Steve**
22994: 504: - **Purpose:** Repairs damage, sells sled mods.
22995: 505: - **Example Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
22996: 506: - **Best Quote:** *"What’d ya do, run into a bear during a race? I can fix it… for a price."*
22997: 507: 
22998: 508: #### 🍔 **Food Vendor**
22999: 509: - **Purpose:** Sells food that provides **stamina buffs & temporary performance boosts**.
23000: 510: - **Example Menu:** **Hot cocoa (warmth boost), Protein bars (stamina regen), Energy drinks (speed burst).**
23001: 511: - **Best Quote:** *"You can't land tricks on an empty stomach!"*
23002: 512: 
23003: 513: #### 🎈 **Lift Operator Jay** *(kite enthusiast)*
23004: 514: - **Purpose:** Manages lifts, introduces **kite mechanics** for gliding shortcuts.
23005: 515: - **Example Unlocks:** **Kite rentals, lift season passes, wind path hints.**
23006: 516: - **Best Quote:** *"Ever thought about catching air... without your sled?"*
23007: 517: 
23008: 518: #### 🏨 **The Hotel Hostess**
23009: 519: - **Purpose:** Offers accommodations & **passive income based on popularity**.
23010: 520: - **Example Unlocks:** **Penthouse suites, reputation perks, tourism boosts.**
23011: 521: - **Best Quote:** *"The more people love this place, the more we all win."*
23012: 522: 
23013: 523: #### 🏪 **Convenience Store Owner Tilly**
23014: 524: - **Purpose:** Sells consumables, **prospecting gear**, and utility tools.
23015: 525: - **Example Stock:** **Batteries, flares, bait, shovels.**
23016: 526: - **Best Quote:** *"You never know when you’ll need an extra pack of hand warmers."*
23017: 527: 
23018: 528: #### 🏔️ **Resort Manager Montana Snow**
23019: 529: - **Purpose:** Oversees **mountain upgrades & expansion.**
23020: 530: - **Example Unlocks:** **New trails, safety patrols, winter festivals.**
23021: 531: - **Best Quote:** *"A bigger, better mountain keeps ‘em coming back!"*
23022: 532: 
23023: 533: ---
23024: 534: 
23025: 535: ### 🏆 **Trick & Racing-Oriented NPCs**
23026: 536: These **drive skill progression**—unlocking **better tricks, harder competitions, and high-stakes challenges**.
23027: 537: 
23028: 538: #### 📸 **Hype Photographer Darlene**
23029: 539: - **Purpose:** **Photo verification & bonus earnings** for sick tricks.
23030: 540: - **Example Unlocks:** **Sponsor deals, cinematic trick replays.**
23031: 541: - **Best Quote:** *"If it ain't on camera, did it even happen?"*
23032: 542: 
23033: 543: #### 🏅 **Stunt Organizer Whistler**
23034: 544: - **Purpose:** Hosts **extreme challenge events**—big air, freestyle sessions.
23035: 545: - **Example Unlocks:** **Timed trick courses, skydiving sled events.**
23036: 546: - **Best Quote:** *"I wanna see something so crazy I forget my own name!"*
23037: 547: 
23038: 548: #### 🏁 **Race Commissioner Cannon**
23039: 549: - **Purpose:** Runs **competitions & time trials**.
23040: 550: - **Example Unlocks:** **Speed sleds, racing circuits, timed event boards.**
23041: 551: - **Best Quote:** *"Fastest run gets the trophy—simple as that."*
23042: 552: 
23043: 553: #### 🏂 **Retired Pro Burton**
23044: 554: - **Purpose:** **Teaches advanced tricks & unlocks sledboarding**.
23045: 555: - **Example Unlocks:** **Sled-to-board transitions, trick combos.**
23046: 556: - **Best Quote:** *"Back in my day, we landed tricks with style. I can show ya how."*
23047: 557: 
23048: 558: ---
23049: 559: 
23050: 560: ### 🏔️ **World-Building & Exploration NPCs**
23051: 561: These **add depth, side quests, and hidden mechanics** to the world.
23052: 562: 
23053: 563: #### 🐾 **Wildlife Researcher**
23054: 564: - **Purpose:** Tracks **rare animal spawns, photographic missions, fishing spots.**
23055: 565: - **Example Unlocks:** **Bear sightings, falcon partner, eco-tourism quests.**
23056: 566: - **Best Quote:** *"You ever seen a snow leopard up close? Neither have I… yet."*
23057: 567: 
23058: 568: #### 🚑 **Sled Patrol Captain**
23059: 569: - **Purpose:** Leads **rescue missions & avalanche drills.**
23060: 570: - **Example Unlocks:** **Emergency sled deployment, survival training.**
23061: 571: - **Best Quote:** *"We save people, we don’t just watch ‘em wipe out."*
23062: 572: 
23063: 573: ---
23064: 574: 
23065: 575: ### 🎭 **Traveling & Recurring NPCs**
23066: 576: They **come and go**, bringing **special challenges, rare gear, and unpredictable encounters**.
23067: 577: 
23068: 578: #### 🔥 **Rival**
23069: 579: - **Purpose:** **Dynamic trick/time trial duels.**
23070: 580: - **Example Unlocks:** **Personalized callouts, grudge matches, rare sled decals.**
23071: 581: - **Best Quote:** *"You think you’re better than me? Prove it."*
23072: 582: 
23073: 583: #### 🎩 **Mysterious Merchant**
23074: 584: - **Purpose:** **Sells rare & high-risk tech**—limited stock, always random.
23075: 585: - **Example Stock:** **Prototype sled engines, cloaking wax, ghost sled.**
23076: 586: - **Best Quote:** *"I sell only to those who dare."*
23077: 587: 
23078: 588: #### 🔧 **Tinkerer**
23079: 589: - **Purpose:** **Experimental tech**—RC sleds, lock-picking, custom builds.
23080: 590: - **Example Unlocks:** **Remote sleds, grappling hooks, hacking upgrades.**
23081: 591: - **Best Quote:** *"You didn’t hear this from me, but I might’ve… *enhanced* a sled or two."*
23082: 592: 
23083: 593: ---
23084: 594: 
23085: 595: ### ❄️ **Legendary NPCs**
23086: 596: These are **mythic figures**, unlocking **wild game mechanics, hidden areas, and secret challenges**.
23087: 597: 
23088: 598: #### 🌨️ **Winter Shaman Bromley**
23089: 599: - **Purpose:** **Controls weather effects**—snowstorms, icy terrain, wind boosts.
23090: 600: - **Example Unlocks:** **Weather manipulation quests, legendary snowboards.**
23091: 601: - **Best Quote:** *"The mountain speaks… and I listen."*
23092: 602: 
23093: 603: #### 🐻 **Bear Whisperer Carrie**
23094: 604: - **Purpose:** Unlocks **bear-racing.**
23095: 605: - **Example Unlocks:** **Bear races, such as Time Trials and Elimination.**
23096: 606: - **Best Quote:** *"Bears don’t bite... if you know how to ask nicely."*
23097: 607: 
23098: 608: #### 🐝 **Beekeeper Pete**
23099: 609: - **Purpose:** Sells **beekeeping upgrades**.
23100: 610: - **Example Unlocks:** **Speed honey, frost-resistant sled wax.**
23101: 611: - **Best Quote:** *"Snow bees? Oh yeah, they’re real… and fast."*
23102: 612: 
23103: 613: #### ⏳ **The Time Traveler**
23104: 614: - **Purpose:** Unlocks **cryptid fossil digging & timeline anomalies.**
23105: 615: - **Example Unlocks:** **Ancient sleds, legendary trails, prehistoric snowboard challenges.**
23106: 616: - **Best Quote:** *"The past isn’t gone—it’s just buried under the snow."*
23107: 617: 
23108: 618: ---
23109: 619: 
23110: 620: ## 🎮 Enhanced Controls & UI Improvements
23111: 621: - Fully customizable control remapping
23112: 622: - Comprehensive tutorial and onboarding systems
23113: 623: - Improved HUD clarity (stamina, trick scoring, wildlife photography)
23114: 624: 
23115: 625: ---
23116: 626: 
23117: 627: ## 🏔️ **Mountain Themes & Progression**
23118: 628: 
23119: 629: ### Lava Mountain 🌋
23120: 630: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
23121: 631: - **Mechanics:**  
23122: 632:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
23123: 633:   - **Ash Clouds:** Temporarily block visibility.
23124: 634: - **Power-Up:** **Heat Shielding Sled Coating**  
23125: 635:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
23126: 636: 
23127: 637: ---
23128: 638: 
23129: 639: ### Space Mountain 🌌
23130: 640: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
23131: 641: - **Mechanics:**  
23132: 642:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
23133: 643:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
23134: 644: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
23135: 645:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
23136: 646: 
23137: 647: ---
23138: 648: 
23139: 649: ### Underwater Mountain 🌊
23140: 650: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
23141: 651: - **Mechanics:**  
23142: 652:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
23143: 653: - **Power-Up:** **Aqua-Lung Mittens**  
23144: 654:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
23145: 655: 
23146: 656: ---
23147: 657: 
23148: 658: ### Garbage Dump Glacier 🗑️❄️
23149: 659: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
23150: 660: - **Mechanics:**  
23151: 661:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
23152: 662: - **Power-Up:** **Slick Wax Spray**  
23153: 663:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
23154: 664: 
23155: 665: ---
23156: 666: 
23157: 667: ### Micro Mountain 🐜🌱
23158: 668: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
23159: 669: - **Mechanics:**  
23160: 670:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
23161: 671: - **Power-Up:** **Antigrav Wax**  
23162: 672:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
23163: 673: 
23164: 674: ---
23165: 675: 
23166: 676: ### Candy Cane Canyon 🍭
23167: 677: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
23168: 678: - **Mechanics:**  
23169: 679:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
23170: 680: - **Power-Up:** **Sweet-Tooth Coating**  
23171: 681:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
23172: 682: 
23173: 683: ---
23174: 684: 
23175: 685: ### Crystal Cave Cavern 🔮
23176: 686: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
23177: 687: - **Mechanics:**  
23178: 688:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
23179: 689: - **Power-Up:** **Crystal Clear Goggles**  
23180: 690:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
23181: 691: 
23182: 692: ---
23183: 693: 
23184: 694: ### Haunted Graveyard Hill 👻
23185: 695: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
23186: 696: - **Mechanics:**  
23187: 697:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
23188: 698: - **Power-Up:** **Spirit Lantern**  
23189: 699:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
23190: 700: 
23191: 701: ---
23192: 702: 
23193: 703: ### Sky Jellyfish Mountain ☁️🪼
23194: 704: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
23195: 705: - **Mechanics:**  
23196: 706:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
23197: 707: - **Power-Up:** **Stabilizer Sled Rails**  
23198: 708:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
23199: 709: 
23200: 710: ---
23201: 711: 
23202: 712: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
23203: 713: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
23204: 714: - **Mechanics:**  
23205: 715:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
23206: 716: - **Power-Up:** **Clockwork Treads**  
23207: 717:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
23208: 718: 
23209: 719: ---
23210: 720: 
23211: 721: ### Pyramid Peak 🐫🏜️
23212: 722: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
23213: 723: - **Mechanics:**  
23214: 724:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
23215: 725: - **Power-Up:** **Sandrunner Skis**  
23216: 726:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
23217: 727: 
23218: 728: ---
23219: 729: 
23220: 730: ### Digital Mountain (Cyber Slopes) 💻🔮
23221: 731: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
23222: 732: - **Mechanics:**  
23223: 733:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
23224: 734: - **Power-Up:** **Data Shielding**  
23225: 735:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
23226: 736: 
23227: 737: ---
23228: 738: 
23229: 739: 🔄 Infinite Upgrades with Soft Caps
23230: 740: ===================================
23231: 741: 
23232: 742: **Expanding Progression Without Breaking Balance**
23233: 743: 
23234: 744: Currently, upgrades in **SledHEAD** have **hard caps**, limiting how many times they can be purchased. While this provides structure, it **restricts long-term progression** and prevents **emergent playstyles** from evolving over multiple runs. To keep **each run fresh and engaging**, we're shifting to an **infinite upgrade system** with **diminishing returns** beyond a **soft cap** for
23235: 745: **Personal Upgrades**. **Mountain Upgrades** will
23236: 746: need to be rebought for each new mountain purchased, and
23237: 747: may or may not be infinite as appropriate to the upgrade.
23238: 748: 
23239: 749: 🎯 Proposed Solution
23240: 750: --------------------
23241: 751: 
23242: 752: -   **All upgrades become infinitely upgradable.**
23243: 753: -   Each upgrade **retains its effectiveness early on** but **scales down gradually** beyond a set level.
23244: 754: -   **Soft caps vary** depending on the upgrade type:
23245: 755:     -   **Speed upgrades** could start diminishing at **Level 10**.
23246: 756:     -   **Trick bonuses** could scale freely until **Level 20** before slowing down.
23247: 757: -   **Mathematical balancing** ensures that upgrades remain **meaningful** but **don't become overpowered**.
23248: 758: 
23249: 759: 📊 Scaling Formula: Exponential & Logarithmic Decay
23250: 760: ---------------------------------------------------
23251: 761: 
23252: 762: Instead of **linear scaling** (e.g., "+1 Speed per level"), we use **diminishing returns** to keep upgrades valuable without breaking balance.
23253: 763: 
23254: 764: ### ✏ Formula Example:
23255: 765: 
23256: 766: newValue = baseValue + (scalingFactor * sqrt(level))
23257: 767: 
23258: 768: -   **Early levels feel impactful**, allowing noticeable improvements.
23259: 769: -   **Later levels slow down naturally**, preventing infinite stacking from making players overpowered.
23260: 770: -   Works across **various upgrade types**, from **speed boosts to trick multipliers**.
23261: 771: 
23262: 772: 🔎 **Alternative Approach: Logarithmic Scaling**\
23263: 773: For upgrades that should scale *aggressively early on* but taper off smoothly:
23264: 774: 
23265: 775: newValue = baseValue * (1 + (scalingFactor * log(level + 1)))
23266: 776: 
23267: 777: -   Great for upgrades like **boost charge rates or sled handling**, where a **big early impact** makes sense but **total mastery should be gradual**.
23268: 778: 
23269: 779: ✅ Benefits of Infinite Upgrades with Soft Caps
23270: 780: ----------------------------------------------
23271: 781: 
23272: 782: ✔ **Keeps long-term progression engaging** -- No artificial "max level" bottleneck.\
23273: 783: ✔ **Encourages specialized strategies** -- Players can **focus on speed, tricks, or economy-based builds**.\
23274: 784: ✔ **Prevents upgrade obsolescence** -- Players **always have something meaningful to invest in**.\
23275: 785: ✔ **Maintains challenge balance** -- Runs become **progressively stronger**, but not infinitely easy.
23276: 786: 
23277: 787: 📌 Tasks & Implementation Plan
23278: 788: ------------------------------
23279: 789: 
23280: 790: -   [ ]  **Remove hard upgrade caps** for all current upgrades.
23281: 791: -   [ ]  **Implement soft cap mechanics** using **square root or logarithmic scaling**.
23282: 792: -   [ ]  **Fine-tune soft cap levels** for different upgrade categories (e.g., Speed vs. Trick Boosts).
23283: 793: -   [ ]  **Balance test progression** to ensure **long-term upgrades stay meaningful but not overpowered**.
23284: 794: 
23285: 795: This system ensures **players always have room to grow**, while keeping **SledHEAD's challenge intact**. 🚀🔥
23286: 796: 
23287: 797: ---
23288: 798: 
23289: 799: ## 🏆 Endgame & Prestige Content
23290: 800: - Prestige system for continued replayability
23291: 801: - Elite sled runs with intensified challenges
23292: 802: - Legendary animal photo hunts for ultimate rewards
23293: 803: 
23294: 804: ---
23295: 805: 
23296: 806: ## 📅 Development Milestones & Timeline
23297: 807: ### Short-Term:
23298: 808: - Implement stamina system, basic uphill-downhill gameplay
23299: 809: - Expand wildlife photography with rare animals at altitude
23300: 810: - Basic personal and mountain upgrades functionality
23301: 811: 
23302: 812: ### Mid-Term:
23303: 813: - Integrate the light/dark gradient altitude system to enhance visual depth and player navigation
23304: 814: - Introduce NPCs and interactive infrastructure
23305: 815: - Initial mini-games integration
23306: 816: 
23307: 817: ### Long-Term:
23308: 818: - Add mountain biomes and unique thematic mechanics
23309: 819: - Fully expand trick system
23310: 820: - Complete mini-games and endgame challenges
23311: 821: - Polish UI/UX and refine progression systems
23312: 822: 
23313: 823: ---
23314: 824: 
23315: 825: This comprehensive roadmap encapsulates all planned features and mechanics, clearly outlines the development trajectory, and integrates your newly defined gameplay mechanic. Use this as your foundational documentation moving forward to guide development clearly and effectively.
23316: ````````
23317: 
23318: ## File: js/stamina.js
23319: ````````javascript
23320:   1: // Global counter for stamina depletion re-entries
23321:   2: let reentryCount = 0;
23322:   3: // In stamina.js
23323:   4: class Stamina {
23324:   5:     constructor() {
23325:   6:       this.maxStamina = 100;
23326:   7:       this.currentStamina = this.maxStamina;
23327:   8:       this.staminaDrainWalking = 0.1;  // Drains steadily when walking uphill
23328:   9:       this.staminaDrainJumping = 2.0;    // Drains once on jump launch
23329:  10:       this.staminaDrainSledding = 0.01;  // Drains very slowly when sledding
23330:  11:       this.isVisible = false;
23331:  12:       this.jumpTriggered = false;        // Initialize jump flag
23332:  13:       this.previousState = null;         // Track previous game state
23333:  14:       this.lastLogTime = 0;              // Timestamp for throttling log messages
23334:  15:       this.canvas = document.createElement("canvas");
23335:  16:       this.ctx = this.canvas.getContext("2d");
23336:  17:       this.canvas.width = 200;
23337:  18:       this.canvas.height = 20;
23338:  19:       this.canvas.style.position = "fixed";
23339:  20:       this.canvas.style.top = "40px";
23340:  21:       this.canvas.style.left = "40px";
23341:  22:       this.canvas.style.zIndex = "1000";
23342:  23:       document.body.appendChild(this.canvas);
23343:  24:     }
23344:  25:     // New method to drain stamina on jump initiation
23345:  26:     drainJump() {
23346:  27:       if (!this.jumpTriggered) {
23347:  28:         this.currentStamina -= this.staminaDrainJumping;
23348:  29:         this.jumpTriggered = true;
23349:  30:         this.throttledLog("Jump drain: stamina reduced by " + this.staminaDrainJumping + " New stamina: " + this.currentStamina);
23350:  31:       }
23351:  32:     }
23352:  33:     // Reset jump flag (to be called on landing)
23353:  34:     resetJumpTrigger() {
23354:  35:       this.jumpTriggered = false;
23355:  36:       this.throttledLog("Jump trigger reset");
23356:  37:     }
23357:  38:     // Throttled logging function to limit messages to once per second
23358:  39:     throttledLog(message) {
23359:  40:       const currentTime = Date.now();
23360:  41:       if (currentTime - this.lastLogTime >= 1000) { // Only log once per second
23361:  42:         console.log(message);
23362:  43:         this.lastLogTime = currentTime;
23363:  44:       }
23364:  45:     }
23365:  46:     handleStaminaDepletion() {
23366:  47:         this.throttledLog("Stamina depleted - returning to house");
23367:  48:         // Move player to house
23368:  49:         changeState(window.GameState.HOUSE);
23369:  50:         // Refill stamina
23370:  51:         this.currentStamina = this.maxStamina;
23371:  52:         this.throttledLog("Stamina refilled to maximum");
23372:  53:         // Despawn all animals
23373:  54:         despawnAllAnimals();
23374:  55:         this.throttledLog("All animals despawned");
23375:  56:         // Calculate and charge re-entry fee
23376:  57:         const fee = 100 * (reentryCount + 1);
23377:  58:         player.money = Math.max(0, player.money - fee);
23378:  59:         this.throttledLog(`Charged re-entry fee: $${fee}`);
23379:  60:         // Increment re-entry counter
23380:  61:         reentryCount++;
23381:  62:         this.throttledLog(`Re-entry count increased to: ${reentryCount}`);
23382:  63:     }
23383:  64:     update() {
23384:  65:       // Check for entering house state (state transition)
23385:  66:       const enteringHouse = this.previousState !== window.GameState.HOUSE && window.currentState === window.GameState.HOUSE;
23386:  67:       // Only show stamina bar if the player is NOT at home
23387:  68:       this.isVisible = (window.currentState !== window.GameState.HOUSE);
23388:  69:       if (!this.isVisible) {
23389:  70:         if (enteringHouse) {
23390:  71:           this.currentStamina = this.maxStamina; // Reset stamina only when entering the house
23391:  72:           this.throttledLog("At home - resetting stamina");
23392:  73:         }
23393:  74:         this.canvas.style.display = "none";
23394:  75:         this.previousState = window.currentState; // Update previous state
23395:  76:         return;
23396:  77:       }
23397:  78:       this.canvas.style.display = "block";
23398:  79:       // Drain stamina when moving uphill
23399:  80:       if (window.currentState === window.GameState.UPHILL) {
23400:  81:         if (keysDown["w"] || keysDown["a"] || keysDown["s"] || keysDown["d"]) {
23401:  82:           this.currentStamina -= this.staminaDrainWalking;
23402:  83:           this.throttledLog("UPHILL movement: draining stamina by " + this.staminaDrainWalking + " Current stamina: " + this.currentStamina);
23403:  84:         }
23404:  85:       }
23405:  86:       // (No jump drain logic here now—it's moved to mechanics.js)
23406:  87:       // Drain stamina very slowly when sledding
23407:  88:       if (player.isSliding) {
23408:  89:         this.currentStamina -= this.staminaDrainSledding;
23409:  90:         this.throttledLog("Sledding: draining stamina by " + this.staminaDrainSledding + " Current stamina: " + this.currentStamina);
23410:  91:       }
23411:  92:       // Check for stamina depletion
23412:  93:       if (this.currentStamina <= 0 && window.currentState !== window.GameState.HOUSE) {
23413:  94:         this.handleStaminaDepletion();
23414:  95:       }
23415:  96:       // Clamp stamina value between 0 and max
23416:  97:       this.currentStamina = Math.max(0, Math.min(this.currentStamina, this.maxStamina));
23417:  98:       // Render the stamina bar
23418:  99:       this.render();
23419: 100:       // Update previous state
23420: 101:       this.previousState = window.currentState;
23421: 102:     }
23422: 103:     render() {
23423: 104:       this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
23424: 105:       // Determine stamina bar color based on stamina percentage
23425: 106:       let staminaRatio = this.currentStamina / this.maxStamina;
23426: 107:       let color = "#00FF00"; // Green (full stamina)
23427: 108:       if (staminaRatio < 0.5) color = "#FFA500"; // Orange (moderate stamina)
23428: 109:       if (staminaRatio < 0.2) color = "#FF0000"; // Red (critical stamina)
23429: 110:       // Draw the bar background
23430: 111:       this.ctx.fillStyle = "#333";
23431: 112:       this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
23432: 113:       // Draw the stamina portion
23433: 114:       this.ctx.fillStyle = color;
23434: 115:       this.ctx.fillRect(0, 0, this.canvas.width * staminaRatio, this.canvas.height);
23435: 116:     }
23436: 117:   }
23437: 118:   // Initialize stamina system
23438: 119:   const stamina = new Stamina();
23439: 120:   // Hook into the game's update loop
23440: 121:   function updateStamina() {
23441: 122:     stamina.update();
23442: 123:     requestAnimationFrame(updateStamina);
23443: 124:   }
23444: 125:   updateStamina();
23445: 126: // Make stamina available globally
23446: 127: window.stamina = stamina;
23447: ````````
23448: 
23449: ## File: js/wildlife.js
23450: ````````javascript
23451:   1: /* wildlife.js - Wildlife Simulation (Refactored with Spawning Biomes and Fallback)
23452:   2: // This file handles the overall wildlife simulation logic using a registration system.
23453:   3: // Each animal module (e.g., bear.js, bird.js, mountainlion.js) registers itself by calling registerAnimalType().
23454:   4: // Animals have a "spawningBiomes" property that defines in which biomes and mountain layers they spawn.
23455:   5: // If currentBiome is not defined or unrecognized, the system assumes every mountain is valid.
23456:   6: */
23457:   7: // Global registry for animal types
23458:   8: var animalRegistry = [];
23459:   9: // Function for animal modules to register themselves
23460:  10: function registerAnimalType(animalData) {
23461:  11:     animalRegistry.push(animalData);
23462:  12:     console.log("Registered animal type: " + animalData.type);
23463:  13: }
23464:  14: // Global variables for the animal system
23465:  15: var activeAnimal = null;
23466:  16: var animalStateCheckInterval = null;
23467:  17: // ------------------- Animal (Critter) Update Logic -------------------
23468:  18: function updateAnimal() {
23469:  19:   if (!activeAnimal) return;
23470:  20:   // Call custom update if provided
23471:  21:   if (activeAnimal.customUpdate && typeof activeAnimal.customUpdate === 'function') {
23472:  22:       activeAnimal.customUpdate(activeAnimal);
23473:  23:   }
23474:  24:   checkPlayerProximity();
23475:  25:   if (activeAnimal.state === "fleeing") {
23476:  26:     if (!activeAnimal.fleeingLogOnce) {
23477:  27:       console.log(`Animal fleeing - Type: ${activeAnimal.type}, Angle: ${activeAnimal.fleeAngleActual.toFixed(2)}°, Speed: ${activeAnimal.speed}`);
23478:  28:       activeAnimal.fleeingLogOnce = true;
23479:  29:     }
23480:  30:     let rad = activeAnimal.fleeAngleActual * Math.PI / 180;
23481:  31:     activeAnimal.x += Math.cos(rad) * activeAnimal.speed * 0.5;
23482:  32:     activeAnimal.y += Math.sin(rad) * activeAnimal.speed * 0.5;
23483:  33:     let dx = activeAnimal.x - player.x;
23484:  34:     let dy = activeAnimal.y - player.absY;
23485:  35:     let distance = Math.sqrt(dx * dx + dy * dy);
23486:  36:     if (distance > 1000 && !activeAnimal.despawnScheduled) {
23487:  37:       activeAnimal.despawnScheduled = true;
23488:  38:       console.log(`Animal is more than 1000 away. Scheduling despawn in 500ms.`);
23489:  39:       setTimeout(() => {
23490:  40:         if (activeAnimal) {
23491:  41:           console.log(`Animal despawned after 500ms out of range`);
23492:  42:           activeAnimal = null;
23493:  43:           spawnAnimal();
23494:  44:         }
23495:  45:       }, 5000);
23496:  46:     }
23497:  47:   } else if (activeAnimal.state === "sitting") {
23498:  48:     if (Math.random() < 0.0001) {
23499:  49:       console.log(`Animal (${activeAnimal.type}) spontaneously changing state from sitting to fleeing`);
23500:  50:       activeAnimal.state = "fleeing";
23501:  51:       activeAnimal.fleeingLogOnce = false;
23502:  52:     }
23503:  53:   }
23504:  54: }
23505:  55: function checkPlayerProximity() {
23506:  56:   if (!activeAnimal || activeAnimal.state === "fleeing") return;
23507:  57:   let dx = activeAnimal.x - player.x;
23508:  58:   let dy = activeAnimal.y - player.absY;
23509:  59:   let distanceSquared = dx * dx + dy * dy;
23510:  60:   if (distanceSquared < activeAnimal.detectionRadius * activeAnimal.detectionRadius) {
23511:  61:     console.log(`Player too close to animal (${Math.sqrt(distanceSquared).toFixed(1)} < ${activeAnimal.detectionRadius}) - animal fleeing`);
23512:  62:     activeAnimal.state = "fleeing";
23513:  63:     activeAnimal.fleeingLogOnce = false;
23514:  64:     activeAnimal.fleeAngleActual = Math.atan2(dy, dx) * (180 / Math.PI);
23515:  65:     activeAnimal.fleeAngleActual += (Math.random() - 0.5) * 30;
23516:  66:   }
23517:  67: }
23518:  68: // Spawn a new animal using the registered types, with biome filtering and fallback.
23519:  69: function spawnAnimal() {
23520:  70:   if (currentState !== GameState.UPHILL || activeAnimal !== null) return;
23521:  71:   // Define recognized mountain biomes.
23522:  72:   var recognizedBiomes = ["starterMountain", "spaceMountain", "volcanoMountain"];
23523:  73:   let availableAnimals;
23524:  74:   // If currentBiome is not defined or unrecognized, allow all animals.
23525:  75:   if (!currentBiome || recognizedBiomes.indexOf(currentBiome) === -1) {
23526:  76:       availableAnimals = animalRegistry;
23527:  77:   } else {
23528:  78:       availableAnimals = animalRegistry.filter(animal => {
23529:  79:           // If spawningBiomes is not specified, default to spawning only on the Starter Mountain.
23530:  80:           if (!animal.spawningBiomes || animal.spawningBiomes.length === 0) {
23531:  81:               return currentBiome === "starterMountain";
23532:  82:           }
23533:  83:           return animal.spawningBiomes.some(rule => {
23534:  84:               if (rule.biome !== currentBiome) return false;
23535:  85:               if (rule.layers && Array.isArray(rule.layers)) {
23536:  86:                   return rule.layers.includes(currentMountainLayer);
23537:  87:               }
23538:  88:               if (rule.layerRange && typeof rule.layerRange.min === 'number' && typeof rule.layerRange.max === 'number') {
23539:  89:                   return currentLayerPercent >= rule.layerRange.min && currentLayerPercent <= rule.layerRange.max;
23540:  90:               }
23541:  91:               return true;
23542:  92:           });
23543:  93:       });
23544:  94:   }
23545:  95:   if (availableAnimals.length === 0) {
23546:  96:       console.error("No animal types available for current biome and layer!");
23547:  97:       return;
23548:  98:   }
23549:  99:   let spawnX = (window.innerWidth * 0.1) + (Math.random() * window.innerWidth * 0.9);
23550: 100:   let spawnY = player.absY - (window.innerHeight / 2);
23551: 101:   let altitude = Math.floor(Math.random() * 100);
23552: 102:   let initialState = "sitting";
23553: 103:   let baseAngle = spawnX > window.innerWidth / 2 ?
23554: 104:                   Math.random() * (170 - 135) + 135 :
23555: 105:                   Math.random() * (55 - 20) + 20;
23556: 106:   let angleOffset = Math.random() * 15;
23557: 107:   let fleeAngleActual = baseAngle + (Math.random() < 0.5 ? -angleOffset : angleOffset);
23558: 108:   let totalWeight = availableAnimals.reduce((sum, animal) => sum + animal.spawnProbability, 0);
23559: 109:   let r = Math.random() * totalWeight;
23560: 110:   let chosenAnimalType = null;
23561: 111:   for (let animal of availableAnimals) {
23562: 112:     r -= animal.spawnProbability;
23563: 113:     if (r <= 0) {
23564: 114:       chosenAnimalType = animal;
23565: 115:       break;
23566: 116:     }
23567: 117:   }
23568: 118:   if (!chosenAnimalType) chosenAnimalType = availableAnimals[0];
23569: 119:   activeAnimal = {
23570: 120:     type: chosenAnimalType.type,
23571: 121:     x: spawnX,
23572: 122:     y: spawnY,
23573: 123:     width: chosenAnimalType.width,
23574: 124:     height: chosenAnimalType.height,
23575: 125:     state: initialState,
23576: 126:     speed: chosenAnimalType.speed,
23577: 127:     altitude: altitude,
23578: 128:     hasBeenPhotographed: false,
23579: 129:     detectionRadius: chosenAnimalType.detectionRadius,
23580: 130:     fleeAngleActual: fleeAngleActual,
23581: 131:     fleeingLogOnce: false,
23582: 132:     lastStateChange: Date.now(),
23583: 133:     stateChangeCount: 0,
23584: 134:     basePhotoBonus: chosenAnimalType.basePhotoBonus || 0,
23585: 135:     customUpdate: chosenAnimalType.customUpdate || null,
23586: 136:     customDraw: chosenAnimalType.customDraw || null,
23587: 137:   };
23588: 138:   console.log(`Spawned ${activeAnimal.type} at (${spawnX.toFixed(1)}, ${spawnY.toFixed(1)}), altitude: ${altitude}, state: ${initialState}, speed: ${activeAnimal.speed}, detectionRadius: ${activeAnimal.detectionRadius}`);
23589: 139:   if (!animalStateCheckInterval) {
23590: 140:     animalStateCheckInterval = setInterval(logAnimalState, 3000);
23591: 141:   }
23592: 142: }
23593: 143: function despawnAllAnimals() {
23594: 144:     activeAnimal = null;
23595: 145:     console.log('All animals despawned');
23596: 146: }
23597: 147: function logAnimalState() {
23598: 148:   if (!activeAnimal) {
23599: 149:     console.log("No active animal right now");
23600: 150:     clearInterval(animalStateCheckInterval);
23601: 151:     animalStateCheckInterval = null;
23602: 152:     return;
23603: 153:   }
23604: 154:   let playerDist = Math.sqrt(
23605: 155:     Math.pow(activeAnimal.x - player.x, 2) + 
23606: 156:     Math.pow(activeAnimal.y - player.absY, 2)
23607: 157:   );
23608: 158:   console.log(`Animal status: ${activeAnimal.type}, state: ${activeAnimal.state}, position: (${activeAnimal.x.toFixed(1)}, ${activeAnimal.y.toFixed(1)}), distance to player: ${playerDist.toFixed(1)}`);
23609: 159: }
23610: 160: function drawAnimal() {
23611: 161:   if (!activeAnimal || currentState !== GameState.UPHILL) return;
23612: 162:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
23613: 163:   let animalScreenY = activeAnimal.y - cameraOffset;
23614: 164:   if (activeAnimal.customDraw && typeof activeAnimal.customDraw === 'function') {
23615: 165:       activeAnimal.customDraw(activeAnimal, animalScreenY, ctx);
23616: 166:   } else {
23617: 167:       ctx.fillStyle = activeAnimal.color || "#888888";
23618: 168:       ctx.fillRect(
23619: 169:         activeAnimal.x - activeAnimal.width / 2,
23620: 170:         animalScreenY - activeAnimal.height / 2,
23621: 171:         activeAnimal.width,
23622: 172:         activeAnimal.height
23623: 173:       );
23624: 174:   }
23625: 175: }
23626: 176: window.registerAnimalType = registerAnimalType;
23627: 177: window.updateAnimal = updateAnimal;
23628: 178: window.spawnAnimal = spawnAnimal;
23629: 179: window.despawnAllAnimals = despawnAllAnimals;
23630: 180: window.drawAnimal = drawAnimal;
23631: ````````
23632: 
23633: ## File: todo.txt
23634: ````````
23635:  1: Feat: Swap from down-to-up to up-to-down.
23636:  2: 
23637:  3: Docs: Find some NPC to cover prospecting, treasure hunting, and rescue missions
23638:  4: 
23639:  5: Refactor: Refactor mechanics.js & utils.js
23640:  6: 
23641:  7: Refactor: Switch tricks from press to hold (so you choose if you do a 180 or a 1080)
23642:  8: (more advanced tricks can still be some sort of combo press)
23643:  9: 
23644: 10: Feat: Nerf jumping, buff ramps, attend leg day affects jump height
23645: ````````
23646: 
23647: ## File: js/downhill.js
23648: ````````javascript
23649:   1: /* downhill.js - Downhill Mechanics & Physics */
23650:   2: import {
23651:   3:   processTrick,
23652:   4:   checkTrickInputs,
23653:   5:   resetTrickState
23654:   6: } from './tricks.js';
23655:   7: // Update all downhill-specific physics and mechanics
23656:   8: function updateDownhill(deltaTime) {
23657:   9:   let rocketFactor = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.rocketSurgeryFactorPerLevel);
23658:  10:   let gravity = TWEAK.baseGravity * rocketFactor;
23659:  11:   let maxXVel = TWEAK.baseMaxXVel * (rocketFactor - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel));
23660:  12:   maxXVel = Math.max(0, maxXVel);
23661:  13:   let opticsFactor = 1 + (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsAccelFactorPerLevel);
23662:  14:   let horizontalAccel = TWEAK.baseHorizontalAccel * opticsFactor;
23663:  15:   let friction = TWEAK.baseFriction - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel);
23664:  16:   if (friction < 0.8) friction = 0.8;
23665:  17:   // Horizontal movement handling with bounds checking
23666:  18:   if (window.keysDown["a"]) { player.xVel -= horizontalAccel; }
23667:  19:   if (window.keysDown["d"]) { player.xVel += horizontalAccel; }
23668:  20:   player.xVel *= friction;
23669:  21:   player.xVel = clamp(player.xVel, -maxXVel, maxXVel);
23670:  22:   let newX = player.x + player.xVel;
23671:  23:   // Prevent going off screen horizontally
23672:  24:   player.x = clamp(newX, player.width/2, window.canvas.width - player.width/2);
23673:  25:   // --- Jump Input Handling ---
23674:  26:   // Immediate Mode:
23675:  27:   if (TWEAK.jumpType === "immediate") {
23676:  28:     if (window.keysDown[" "] && !player.isJumping && player.canJump) {
23677:  29:       player.isJumping = true;
23678:  30:       player.canJump = false;
23679:  31:       player.isCharging = false;
23680:  32:       let heightBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpHeightPerRocketSurgery);
23681:  33:       let timeBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpTimePerRocketSurgery);
23682:  34:       let heightIncrease = heightBonus - 1;
23683:  35:       let extraZoom = heightIncrease * TWEAK.jumpZoomPerHeightIncrease;
23684:  36:       player.jumpHeightFactor = heightBonus;
23685:  37:       player.jumpDuration = TWEAK.jumpBaseAscent * timeBonus;
23686:  38:       player.jumpZoomBonus = extraZoom;
23687:  39:       player.jumpTimer = 0;
23688:  40:       player.hasReachedJumpPeak = false;
23689:  41:       if (window.playerUpgrades.rocketSurgery > 0) {
23690:  42:         console.log(`Jump boosted by Rocket Surgery ${window.playerUpgrades.rocketSurgery}: Height x${heightBonus.toFixed(2)}, Time x${timeBonus.toFixed(2)}, Zoom +${(extraZoom*100).toFixed(0)}%`);
23691:  43:       }
23692:  44:       onPlayerJumpStart();
23693:  45:     }
23694:  46:   }
23695:  47:   // Charge Mode:
23696:  48:   else if (TWEAK.jumpType === "charge") {
23697:  49:     if (window.keysDown[" "] && !player.isJumping && !player.isCharging && player.canJump) {
23698:  50:       player.isCharging = true;
23699:  51:       player.canJump = false;
23700:  52:       player.jumpChargeTime = 0;
23701:  53:     }
23702:  54:     if (player.isCharging) {
23703:  55:       player.jumpChargeTime += deltaTime;
23704:  56:       if (!window.keysDown[" "]) {
23705:  57:         let chargeRatio = Math.min(1, player.jumpChargeTime / TWEAK.jumpMaxHoldTime);
23706:  58:         player.isCharging = false;
23707:  59:         player.isJumping = true;
23708:  60:         player.jumpHeightFactor = chargeRatio;
23709:  61:         player.jumpDuration = 500 + 500 * chargeRatio;
23710:  62:         player.jumpTimer = 0;
23711:  63:         player.hasReachedJumpPeak = false;
23712:  64:         onPlayerJumpStart();
23713:  65:       } else if (player.jumpChargeTime >= TWEAK.jumpMaxHoldTime) {
23714:  66:         player.isCharging = false;
23715:  67:         player.isJumping = true;
23716:  68:         player.jumpHeightFactor = 1;
23717:  69:         player.jumpDuration = 1000;
23718:  70:         player.jumpTimer = 0;
23719:  71:         player.hasReachedJumpPeak = false;
23720:  72:         onPlayerJumpStart();
23721:  73:       }
23722:  74:     }
23723:  75:   }
23724:  76:   // Jump Animation & Trick Handling:
23725:  77:   if (player.isJumping) {
23726:  78:     player.jumpTimer += deltaTime;
23727:  79:     let progress = player.jumpTimer / player.jumpDuration;
23728:  80:     // Re-hit window handling:
23729:  81:     if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
23730:  82:       if (window.keysDown[" "] && !player.reHitActivated && !player.isCharging) {
23731:  83:         console.log("Re-hit jump activated!");
23732:  84:         player.reHitActivated = true;
23733:  85:         player.jumpTimer = 0;
23734:  86:         player.jumpDuration *= TWEAK.reHitBonusDuration;
23735:  87:         player.jumpHeightFactor = 1;
23736:  88:         playTone(600, "sine", 0.1, 0.3);
23737:  89:         return;
23738:  90:       }
23739:  91:     }
23740:  92:     if (player.isJumping && jumpOsc) {
23741:  93:       let f_start = 300, f_peak = 800, f_end = 300, freq;
23742:  94:       if (progress < 0.5) {
23743:  95:         let t = progress / 0.5;
23744:  96:         freq = f_start + (f_peak - f_start) * (t * t);
23745:  97:       } else {
23746:  98:         let t = (progress - 0.5) / 0.5;
23747:  99:         freq = f_peak - (f_peak - f_end) * (t * t);
23748: 100:       }
23749: 101:       jumpOsc.frequency.setValueAtTime(freq, audioCtx.currentTime);
23750: 102:     }
23751: 103:     // Check for trick inputs and process any active tricks
23752: 104:     checkTrickInputs();
23753: 105:     processTrick(deltaTime);
23754: 106:     if (!player.hasReachedJumpPeak && progress >= 0.5) {
23755: 107:       player.hasReachedJumpPeak = true;
23756: 108:       onPlayerJumpPeak();
23757: 109:     }
23758: 110:     if (progress >= 1) {
23759: 111:       // End jump: reset jump/trick state and restore scale
23760: 112:       player.isJumping = false;
23761: 113:       player.jumpTimer = 0;
23762: 114:       player.hasReachedJumpPeak = false;
23763: 115:       resetTrickState();
23764: 116:       player.width = player.baseWidth;
23765: 117:       player.height = player.baseHeight;
23766: 118:       onPlayerLand();
23767: 119:       // Check for landing collisions
23768: 120:       for (let i = 0; i < terrain.length; i++) {
23769: 121:         let obstacle = terrain[i];
23770: 122:         if (checkCollision(
23771: 123:             player.x - player.width / 2, player.absY - player.height / 2,
23772: 124:             player.width, player.height,
23773: 125:             obstacle.x, obstacle.y,
23774: 126:             obstacle.width, obstacle.height
23775: 127:         )) {
23776: 128:           console.log("Collision on landing.");
23777: 129:           player.velocityY = -TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
23778: 130:           player.absY -= TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
23779: 131:           player.collisions++;
23780: 132:           terrain.splice(i, 1);
23781: 133:           if (player.collisions >= TWEAK.getMaxCollisions()) {
23782: 134:             console.log("Max collisions reached.");
23783: 135:             player.sledDamaged = 1; // Mark sled as damaged
23784: 136:             console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
23785: 137:             playCrashSound();
23786: 138:             changeState(GameState.UPHILL);
23787: 139:             return;
23788: 140:           } else {
23789: 141:             playRockHitSound();
23790: 142:           }
23791: 143:           break;
23792: 144:         }
23793: 145:       }
23794: 146:     } else {
23795: 147:       // Scale player sprite for jump arc effect
23796: 148:       let baseScale = TWEAK.jumpPeakScale + player.jumpZoomBonus;
23797: 149:       let scale = 1 + (baseScale - 1) * Math.sin(Math.PI * progress) * player.jumpHeightFactor;
23798: 150:       player.width = player.baseWidth * scale;
23799: 151:       player.height = player.baseHeight * scale;
23800: 152:     }
23801: 153:   }
23802: 154:   // Allow jump restart when space is released
23803: 155:   if (!window.keysDown[" "]) {
23804: 156:     player.canJump = true;
23805: 157:   }
23806: 158:   // Normal downhill physics & collision handling (skip during jump)
23807: 159:   let prevAbsY = player.absY;
23808: 160:   if (!player.isJumping) {
23809: 161:     for (let i = 0; i < terrain.length; i++) {
23810: 162:       let obstacle = terrain[i];
23811: 163:       if (checkCollision(
23812: 164:           player.x - player.width / 2, player.absY - player.height / 2,
23813: 165:           player.width, player.height,
23814: 166:           obstacle.x, obstacle.y,
23815: 167:           obstacle.width, obstacle.height
23816: 168:       )) {
23817: 169:         console.log("Collision on downhill.");
23818: 170:         player.velocityY = -TWEAK.bounceImpulse;
23819: 171:         player.absY = prevAbsY - TWEAK.bounceImpulse;
23820: 172:         player.collisions++;
23821: 173:         terrain.splice(i, 1);
23822: 174:         if (player.collisions >= TWEAK.getMaxCollisions()) {
23823: 175:           console.log("Max collisions reached. Ending run.");
23824: 176:           player.sledDamaged = 1; // Mark sled as damaged
23825: 177:           console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
23826: 178:           awardMoney();
23827: 179:           playCrashSound();
23828: 180:           changeState(GameState.UPHILL);
23829: 181:           return;
23830: 182:         } else {
23831: 183:           playRockHitSound();
23832: 184:         }
23833: 185:       }
23834: 186:     }
23835: 187:   }
23836: 188:   player.velocityY += player.isJumping ? TWEAK.baseGravity : gravity;
23837: 189:   player.absY += player.velocityY;
23838: 190:   updateLiveMoney();
23839: 191:   // Check for transition to UPHILL mode near bottom
23840: 192:   if (player.absY >= mountainHeight - (player.height * 4)) {
23841: 193:     player.absY = mountainHeight - (player.height * 4);
23842: 194:     player.velocityY = 0;
23843: 195:     console.log("Reached transition point. Switching to uphill mode.");
23844: 196:     // Fix for jumping transition - handle jump state before changing modes
23845: 197:     if (player.isJumping) {
23846: 198:       // Smoothly reset jump zoom and finalize landing
23847: 199:       lerpJumpZoomToZero(() => {
23848: 200:         onPlayerJumpLand(); // handles trick cleanup, sound, etc.
23849: 201:       });
23850: 202:     }
23851: 203:     changeState(GameState.UPHILL);
23852: 204:     return;
23853: 205:   }
23854: 206:   // Check for actual bottom
23855: 207:   if (player.absY >= mountainHeight) {
23856: 208:     player.absY = mountainHeight;
23857: 209:     console.log("Reached bottom. Returning to house.");
23858: 210:     awardMoney();
23859: 211:     changeState(GameState.HOUSE);
23860: 212:   }
23861: 213: }
23862: 214: // Helper function for smooth jump transition
23863: 215: function lerpJumpZoomToZero(callback) {
23864: 216:   const startZoom = player.jumpZoomBonus;
23865: 217:   const duration = 250; // ms
23866: 218:   const startTime = performance.now();
23867: 219:   function animate(time) {
23868: 220:     const elapsed = time - startTime;
23869: 221:     const t = Math.min(1, elapsed / duration);
23870: 222:     player.jumpZoomBonus = startZoom * (1 - t);
23871: 223:     if (t < 1) {
23872: 224:       requestAnimationFrame(animate);
23873: 225:     } else {
23874: 226:       player.jumpZoomBonus = 0;
23875: 227:       player.isJumping = false;
23876: 228:       player.jumpTimer = 0;
23877: 229:       player.hasReachedJumpPeak = false;
23878: 230:       resetTrickState();
23879: 231:       player.width = player.baseWidth;
23880: 232:       player.height = player.baseHeight;
23881: 233:       if (callback) callback();
23882: 234:     }
23883: 235:   }
23884: 236:   requestAnimationFrame(animate);
23885: 237: }
23886: 238: // Make functions available globally
23887: 239: window.updateDownhill = updateDownhill;
23888: 240: window.lerpJumpZoomToZero = lerpJumpZoomToZero;
23889: 241: // Export necessary functions for module imports
23890: 242: export { updateDownhill, lerpJumpZoomToZero };
23891: ````````
23892: 
23893: ## File: js/player.js
23894: ````````javascript
23895:  1: /* player.js */
23896:  2: let player = {
23897:  3:   x: window.canvas.width / 2,  // Use global canvas reference
23898:  4:   absY: 0,
23899:  5:   width: 20,
23900:  6:   height: 20,
23901:  7:   velocityY: 0,
23902:  8:   xVel: 0,
23903:  9:   collisions: 0,
23904: 10:   bestTime: Infinity,
23905: 11:   money: 200, // Default initial value instead of directly accessing TWEAK.starterCash
23906: 12:   sledDamaged: 0,  // Track if sled is damaged: 0 = not damaged, >0 = damaged
23907: 13:   // Camera aim properties
23908: 14:   cameraAngle: 270,  // Camera rotation in degrees
23909: 15:   altitudeLine: 50,  // Starts at 50% of the view range
23910: 16:   // Trick system properties
23911: 17:   currentTrick: null,        // Currently active trick
23912: 18:   trickTimer: 0,            // Time elapsed in current trick
23913: 19:   trickRotation: 0,         // Current rotation angle for helicopter tricks
23914: 20:   trickOffset: 0,           // Current offset for air brake/parachute
23915: 21:   lastTrick: null,          // Last completed trick for chain tracking
23916: 22:   trickChainCount: 0,       // Number of different tricks chained
23917: 23:   trickCooldowns: {         // Individual cooldown timers for each trick
23918: 24:     leftHelicopter: 0,
23919: 25:     rightHelicopter: 0,
23920: 26:     airBrake: 0,
23921: 27:     parachute: 0
23922: 28:   },
23923: 29:   // *** NEW: Jump State Properties ***
23924: 30:   isJumping: false,          // Are we in a jump?
23925: 31:   isCharging: false,         // For "charge" mode to accumulate jump time
23926: 32:   canJump: true,             // Ensures jump is triggered only once per key press
23927: 33:   reHitActivated: false,     // Prevents multiple re-hits during one key press
23928: 34:   jumpTimer: 0,              // Elapsed time since jump started (ms)
23929: 35:   jumpDuration: 0,           // Total duration of the jump (ascent + descent)
23930: 36:   jumpChargeTime: 0,         // Accumulated hold time for charge mode
23931: 37:   hasReachedJumpPeak: false, // Flag to trigger the peak hook only once per jump
23932: 38:   jumpHeightFactor: 0,       // Height multiplier from Rocket Surgery (1.0 = normal)
23933: 39:   jumpZoomBonus: 0,         // Extra zoom from increased jump height
23934: 40:   baseWidth: 20,             // Original sprite width (for scaling)
23935: 41:   baseHeight: 20             // Original sprite height (for scaling)
23936: 42: };
23937: 43: // Initialize player money from TWEAK settings once they're available
23938: 44: function initializePlayerMoney() {
23939: 45:   if (window.TWEAK && typeof window.TWEAK.starterCash !== 'undefined') {
23940: 46:     player.money = window.TWEAK.starterCash;
23941: 47:     console.log("Player money initialized to:", player.money);
23942: 48:   }
23943: 49: }
23944: 50: // Call this function after TWEAK is initialized (e.g., from game.js)
23945: 51: window.initializePlayerMoney = initializePlayerMoney;
23946: ````````
23947: 
23948: ## File: .gitignore
23949: ````````
23950: 1: repomix-output.txt
23951: 2: repomix-output.txt.xml
23952: 3: .repomix/bundles.json
23953: 4: OLD Codebase.xml
23954: 5: repomix-output.txt.md
23955: 6: complete-condensed-codebase-for-reference.md
23956: ````````
23957: 
23958: ## File: js/entities.js
23959: ````````javascript
23960:   1: /* entities.js - Pruned version to avoid overlap with wildlifephotos.js */
23961:   2: // Resolves collisions between the player and obstacles.
23962:   3: function resolveCollision(player, obstacle) {
23963:   4:   let playerCenterX = player.x;
23964:   5:   let playerCenterY = player.absY;
23965:   6:   let obstacleCenterX = obstacle.x + obstacle.width / 2;
23966:   7:   let obstacleCenterY = obstacle.y + obstacle.height / 2;
23967:   8:   let halfWidthPlayer = player.width / 2;
23968:   9:   let halfWidthObstacle = obstacle.width / 2;
23969:  10:   let halfHeightPlayer = player.height / 2;
23970:  11:   let halfHeightObstacle = obstacle.height / 2;
23971:  12:   let dx = playerCenterX - obstacleCenterX;
23972:  13:   let dy = playerCenterY - obstacleCenterY;
23973:  14:   let overlapX = halfWidthPlayer + halfWidthObstacle - Math.abs(dx);
23974:  15:   let overlapY = halfHeightPlayer + halfHeightObstacle - Math.abs(dy);
23975:  16:   if (overlapX < 0 || overlapY < 0) return;
23976:  17:   if (overlapX < overlapY) {
23977:  18:     if (dx > 0) {
23978:  19:       player.x += overlapX * 0.3;
23979:  20:     } else {
23980:  21:       player.x -= overlapX * 0.3;
23981:  22:     }
23982:  23:   } else {
23983:  24:     if (dy > 0) {
23984:  25:       player.absY += overlapY * 0.3;
23985:  26:     } else {
23986:  27:       player.absY -= overlapY * 0.3;
23987:  28:     }
23988:  29:   }
23989:  30: }
23990:  31: // Draws the camera overlay with the POV cone and a steady altitude line.
23991:  32: function drawCameraOverlay() {
23992:  33:   // Only display the overlay when in UPHILL mode.
23993:  34:   if (window.currentState !== window.GameState.UPHILL) return;
23994:  35:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
23995:  36:   let centerX = player.x;
23996:  37:   let centerY = player.absY - cameraOffset;
23997:  38:   let coneLength = 300; // Length of the camera cone
23998:  39:   // Draw the camera POV Cone.
23999:  40:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
24000:  41:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
24001:  42:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
24002:  43:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
24003:  44:   ctx.beginPath();
24004:  45:   ctx.moveTo(centerX, centerY);
24005:  46:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
24006:  47:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
24007:  48:   ctx.closePath();
24008:  49:   ctx.fill();
24009:  50:   // Draw the altitude line.
24010:  51:   // Map altitudeLine [0,100] to an offset along the camera's central axis:
24011:  52:   // 0 aligns with the player sprite’s bottom, 100 with its top.
24012:  53:   let offsetTop = ((coneLength / 2) + player.height);
24013:  54:   let offsetBottom = player.height / 2;
24014:  55:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
24015:  56:   let rad = player.cameraAngle * Math.PI / 180;
24016:  57:   let lineCenterX = centerX + offset * Math.cos(rad);
24017:  58:   let lineCenterY = centerY + offset * Math.sin(rad);
24018:  59:   // Draw altitude line perpendicular to camera direction.
24019:  60:   let lineLength = 100;
24020:  61:   let perpX = -Math.sin(rad);
24021:  62:   let perpY = Math.cos(rad);
24022:  63:   let x1 = lineCenterX - (lineLength / 2) * perpX;
24023:  64:   let y1 = lineCenterY - (lineLength / 2) * perpY;
24024:  65:   let x2 = lineCenterX + (lineLength / 2) * perpX;
24025:  66:   let y2 = lineCenterY + (lineLength / 2) * perpY;
24026:  67:   // Steady color gradient from red (bottom) to blue (top)
24027:  68:   let t = 1 - (player.altitudeLine / 100);
24028:  69:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
24029:  70:   ctx.strokeStyle = altitudeColor;
24030:  71:   ctx.lineWidth = 3;
24031:  72:   // Draw the altitude line without any flashing.
24032:  73:   ctx.beginPath();
24033:  74:   ctx.moveTo(x1, y1);
24034:  75:   ctx.lineTo(x2, y2);
24035:  76:   ctx.stroke();
24036:  77: }
24037:  78: // Draws the game entities such as the background, terrain, player, and sled.
24038:  79: function drawEntities() {
24039:  80:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
24040:  81:   ctx.clearRect(0, 0, canvas.width, canvas.height);
24041:  82:   // Draw background.
24042:  83:   ctx.fillStyle = window.currentState === window.GameState.DOWNHILL ? "#ADD8E6" : "#98FB98";
24043:  84:   ctx.fillRect(0, 0, canvas.width, canvas.height);
24044:  85:   // Draw terrain obstacles.
24045:  86:   terrain.forEach(obstacle => {
24046:  87:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
24047:  88:       ctx.fillStyle = "#808080"; // Obstacles are drawn in grey.
24048:  89:       ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
24049:  90:     }
24050:  91:   });
24051:  92:   let playerDrawY = player.absY - cameraOffset;
24052:  93:   ctx.save(); // Save the current context state
24053:  94:   // Apply trick-specific transformations.
24054:  95:   if (player.currentTrick) {
24055:  96:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
24056:  97:       // Rotate around the player's center for helicopter tricks.
24057:  98:       ctx.translate(player.x, playerDrawY);
24058:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
24059: 100:       ctx.translate(-player.x, -playerDrawY);
24060: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
24061: 102:       // Offset for air brake/parachute tricks.
24062: 103:       if (player.currentTrick === "airBrake") {
24063: 104:         playerDrawY += player.trickOffset;  // Move sled behind the player.
24064: 105:       } else {
24065: 106:         playerDrawY -= player.trickOffset;  // Move player above the sled for parachute.
24066: 107:       }
24067: 108:     }
24068: 109:   }
24069: 110:   // Draw the sled (as a red square).
24070: 111:   ctx.fillStyle = "#FF0000";
24071: 112:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
24072: 113:   // Draw the player (as a yellow circle) when applicable.
24073: 114:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
24074: 115:     ctx.fillStyle = "#FFFF00";
24075: 116:     ctx.beginPath();
24076: 117:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
24077: 118:     ctx.fill();
24078: 119:   }
24079: 120:   ctx.restore(); // Restore the context state
24080: 121:   // Draw the camera overlay.
24081: 122:   drawCameraOverlay();
24082: 123: }
24083: ````````
24084: 
24085: ## File: js/render.js
24086: ````````javascript
24087:   1: /* render.js - Rendering Logic */
24088:   2: // Floating Text System (unchanged)
24089:   3: class FloatingText {
24090:   4:   constructor(text, x, y) {
24091:   5:     this.text = text;
24092:   6:     this.x = x;
24093:   7:     this.initialY = y;
24094:   8:     this.age = 0;
24095:   9:     this.lifetime = 1000;
24096:  10:     this.visualOffsetY = -30;
24097:  11:   }
24098:  12:   update(deltaTime) {
24099:  13:     this.age += deltaTime;
24100:  14:     this.visualOffsetY -= deltaTime * 0.25;
24101:  15:     return this.age < this.lifetime;
24102:  16:   }
24103:  17:   draw(ctx, cameraY) {
24104:  18:     const alpha = 1 - (this.age / this.lifetime);
24105:  19:     ctx.fillStyle = `rgba(0, 0, 0, ${alpha})`;
24106:  20:     ctx.font = "bold 24px Arial";
24107:  21:     ctx.textAlign = "center";
24108:  22:     const screenY = player.absY - cameraY + this.visualOffsetY;
24109:  23:     ctx.fillText(this.text, this.x, screenY);
24110:  24:   }
24111:  25: }
24112:  26: function addFloatingText(text, x, y) {
24113:  27:   window.floatingTexts.push(new FloatingText(text, x, y - 30));
24114:  28: }
24115:  29: // No changes to money display logic
24116:  30: function updateLiveMoney() {
24117:  31:   let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
24118:  32:   distanceTraveled = Math.max(1, distanceTraveled);
24119:  33:   let moneyEarned = Math.floor(distanceTraveled / 100);
24120:  34:   moneyEarned = Math.max(1, moneyEarned);
24121:  35:   let moneyText = document.getElementById("moneyText");
24122:  36:   if (moneyText) {
24123:  37:     moneyText.textContent = `Money: $${player.money} (+$${moneyEarned})`;
24124:  38:   }
24125:  39: }
24126:  40: function showMoneyGain(amount, source = "") {
24127:  41:   let moneyText = document.getElementById("moneyText");
24128:  42:   if (moneyText) {
24129:  43:     if (source) {
24130:  44:       moneyText.textContent = `Money: $${player.money} (+$${amount} ${source})`;
24131:  45:     } else {
24132:  46:       moneyText.textContent = `Money: $${player.money} (+$${amount})`;
24133:  47:     }
24134:  48:     moneyText.classList.add("money-increase");
24135:  49:     setTimeout(() => {
24136:  50:       moneyText.classList.remove("money-increase");
24137:  51:     }, 100);
24138:  52:   }
24139:  53: }
24140:  54: function updateMoneyDisplay() {
24141:  55:   let moneyText = document.getElementById("moneyText");
24142:  56:   if (moneyText) {
24143:  57:     moneyText.textContent = `Money: $${player.money}`;
24144:  58:   }
24145:  59: }
24146:  60: // MAIN RENDER
24147:  61: function render() {
24148:  62:   console.log("render START");
24149:  63:   // Clear the canvas each frame
24150:  64:   ctx.clearRect(0, 0, canvas.width, canvas.height);
24151:  65:   // Background color depends on state
24152:  66:   ctx.fillStyle = (window.currentState === window.GameState.DOWNHILL) ? "#ADD8E6" : "#98FB98";
24153:  67:   ctx.fillRect(0, 0, canvas.width, canvas.height);
24154:  68:   drawEntities();
24155:  69:   ctx.save();
24156:  70:   window.floatingTexts.forEach(text => text.draw(ctx, player.absY - canvas.height / 2));
24157:  71:   ctx.restore();
24158:  72:   drawReHitIndicator();
24159:  73:   console.log("render END");
24160:  74: }
24161:  75: function drawEntities() {
24162:  76:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
24163:  77:   // Terrain
24164:  78:   terrain.forEach(obstacle => {
24165:  79:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
24166:  80:       if (obstacle.type === 'tree') {
24167:  81:         drawTree(ctx, {
24168:  82:           x: obstacle.x,
24169:  83:           y: obstacle.y - cameraOffset,
24170:  84:           width: obstacle.width,
24171:  85:           height: obstacle.height
24172:  86:         });
24173:  87:       } else {
24174:  88:         ctx.fillStyle = "#808080";
24175:  89:         ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
24176:  90:       }
24177:  91:     }
24178:  92:   });
24179:  93:   // Player
24180:  94:   let playerDrawY = player.absY - cameraOffset;
24181:  95:   ctx.save();
24182:  96:   if (player.currentTrick) {
24183:  97:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
24184:  98:       ctx.translate(player.x, playerDrawY);
24185:  99:       ctx.rotate(player.trickRotation * Math.PI / 180);
24186: 100:       ctx.translate(-player.x, -playerDrawY);
24187: 101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
24188: 102:       playerDrawY += (player.currentTrick === "airBrake") ? player.trickOffset : -player.trickOffset;
24189: 103:     }
24190: 104:   }
24191: 105:   ctx.fillStyle = "#FF0000";
24192: 106:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
24193: 107:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
24194: 108:     ctx.fillStyle = "#FFFF00";
24195: 109:     ctx.beginPath();
24196: 110:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
24197: 111:     ctx.fill();
24198: 112:   }
24199: 113:   ctx.restore();
24200: 114:   drawCameraOverlay();
24201: 115:   drawAnimal();
24202: 116: }
24203: 117: function drawCameraOverlay() {
24204: 118:   if (window.currentState !== window.GameState.UPHILL) return;
24205: 119:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
24206: 120:   let centerX = player.x;
24207: 121:   let centerY = player.absY - cameraOffset;
24208: 122:   let coneLength = 300;
24209: 123:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
24210: 124:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
24211: 125:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
24212: 126:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
24213: 127:   ctx.beginPath();
24214: 128:   ctx.moveTo(centerX, centerY);
24215: 129:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
24216: 130:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
24217: 131:   ctx.closePath();
24218: 132:   ctx.fill();
24219: 133:   let offsetTop = (coneLength / 2) + player.height;
24220: 134:   let offsetBottom = player.height / 2;
24221: 135:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
24222: 136:   let rad = player.cameraAngle * Math.PI / 180;
24223: 137:   let lineCenterX = centerX + offset * Math.cos(rad);
24224: 138:   let lineCenterY = centerY + offset * Math.sin(rad);
24225: 139:   let lineLength = 100;
24226: 140:   let perpX = -Math.sin(rad);
24227: 141:   let perpY = Math.cos(rad);
24228: 142:   let x1 = lineCenterX - (lineLength / 2) * perpX;
24229: 143:   let y1 = lineCenterY - (lineLength / 2) * perpY;
24230: 144:   let x2 = lineCenterX + (lineLength / 2) * perpX;
24231: 145:   let y2 = lineCenterY + (lineLength / 2) * perpY;
24232: 146:   let t = 1 - (player.altitudeLine / 100);
24233: 147:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
24234: 148:   ctx.strokeStyle = altitudeColor;
24235: 149:   ctx.lineWidth = 3;
24236: 150:   if (activeAnimal && isAnimalInsideCone(activeAnimal)) {
24237: 151:     let flashSpeed = mapRange(Math.abs(player.altitudeLine - activeAnimal.altitude), 0, 100, TWEAK.altitudeFlashMaxSpeed, TWEAK.altitudeFlashMinSpeed);
24238: 152:     if (Math.floor(Date.now() / flashSpeed) % 2 === 0) {
24239: 153:       ctx.beginPath();
24240: 154:       ctx.moveTo(x1, y1);
24241: 155:       ctx.lineTo(x2, y2);
24242: 156:       ctx.stroke();
24243: 157:     }
24244: 158:   } else {
24245: 159:     ctx.beginPath();
24246: 160:     ctx.moveTo(x1, y1);
24247: 161:     ctx.lineTo(x2, y2);
24248: 162:     ctx.stroke();
24249: 163:   }
24250: 164: }
24251: 165: function drawReHitIndicator() {
24252: 166:   if (!player.isJumping) return;
24253: 167:   const progress = player.jumpTimer / player.jumpDuration;
24254: 168:   if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
24255: 169:     ctx.save();
24256: 170:     ctx.beginPath();
24257: 171:     const radius = (player.baseWidth * TWEAK.reHitIndicatorScale) / 2;
24258: 172:     const cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
24259: 173:     const screenY = canvas.height / 2 + (player.absY - cameraOffset - canvas.height / 2);
24260: 174:     ctx.shadowColor = TWEAK.reHitIndicatorOutlineColor;
24261: 175:     ctx.shadowBlur = 20;
24262: 176:     ctx.lineWidth = 3;
24263: 177:     const pulseScale = 1 + Math.sin(Date.now() / 100) * 0.1;
24264: 178:     ctx.arc(player.x, screenY, radius * pulseScale, 0, Math.PI * 2);
24265: 179:     ctx.fillStyle = TWEAK.reHitIndicatorColor;
24266: 180:     ctx.fill();
24267: 181:     ctx.strokeStyle = TWEAK.reHitIndicatorOutlineColor;
24268: 182:     ctx.stroke();
24269: 183:     ctx.closePath();
24270: 184:     ctx.restore();
24271: 185:   }
24272: 186: }
24273: ````````
24274: 
24275: ## File: js/world.js
24276: ````````javascript
24277:  1: /* world.js */
24278:  2: const mountainHeight = 200000; // Mountain is now 100x bigger!
24279:  3: let terrain = [];
24280:  4: const obstacleCount = 1500; // Reduced rock count to make room for trees
24281:  5: const treeClusterCount = 3000; // Number of tree clusters to generate
24282:  6: let earlyFinish = false;
24283:  7: const heightMultiplierBase = 1; // Base value for height multiplier - can be adjusted later
24284:  8: const distanceMultiplierBase = 1; // Base value for distance multiplier - can be adjusted later
24285:  9: const speedMultiplierBase = 1; // Base value for speed multiplier - can be adjusted later
24286: 10: function generateTerrain() {
24287: 11:   terrain = [];
24288: 12:   // Generate rock obstacles
24289: 13:   for (let i = 0; i < obstacleCount; i++) {
24290: 14:     let obstacle = {
24291: 15:       x: Math.random() * (canvas.width - 70) + 10,
24292: 16:       y: Math.random() * mountainHeight,
24293: 17:       width: 30 + Math.random() * 40,
24294: 18:       height: 10 + Math.random() * 20,
24295: 19:       type: 'rock' // Explicitly mark as rock
24296: 20:     };
24297: 21:     terrain.push(obstacle);
24298: 22:   }
24299: 23:   // Generate tree clusters
24300: 24:   const terrainBounds = { 
24301: 25:     xMin: 0, 
24302: 26:     xMax: canvas.width, 
24303: 27:     yMin: 0, 
24304: 28:     yMax: mountainHeight 
24305: 29:   };
24306: 30:   // Assume player size reference (can be adjusted based on actual player dimensions)
24307: 31:   const playerSize = 30; // Estimate based on what's visible in the game
24308: 32:   const treeObstacles = generateTreeClumps({ 
24309: 33:     count: treeClusterCount, 
24310: 34:     terrainBounds, 
24311: 35:     playerSize 
24312: 36:   });
24313: 37:   // Add trees to terrain array
24314: 38:   terrain.push(...treeObstacles);
24315: 39:   // Sort all obstacles by Y position for rendering order
24316: 40:   terrain.sort((a, b) => a.y - b.y);
24317: 41: }
24318: 42: function awardMoney() {
24319: 43:     // Calculate real distance traveled based on starting and ending Y positions
24320: 44:     // Note: In this game's coordinate system, higher Y values mean lower on the mountain
24321: 45:     // So the distance traveled downhill is player.absY - playerStartAbsY
24322: 46:     let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
24323: 47:     // Ensure at least 1 unit
24324: 48:     distanceTraveled = Math.max(1, distanceTraveled);
24325: 49:     // Calculate the height multiplier based on starting position
24326: 50:     // Higher up the mountain (lower playerStartAbsY value) gives better multiplier
24327: 51:     // This will make a run from the top worth 3x more than from the bottom
24328: 52:     const startHeightRatio = 1 - (playerStartAbsY / mountainHeight); // 0 at bottom, 1 at top
24329: 53:     const startHeightMultiplier = 1 + (startHeightRatio * 2 * heightMultiplierBase); // Range: 1-3x
24330: 54:     // Calculate the distance multiplier based on how much of the mountain was traversed
24331: 55:     // This makes longer runs more valuable (e.g., a full mountain run worth 3x more than 10 runs of 10% each)
24332: 56:     const distanceRatio = distanceTraveled / mountainHeight; // What fraction of the mountain was traversed
24333: 57:     const distanceMultiplier = 1 + (Math.min(1, distanceRatio * 10) * 2 * distanceMultiplierBase); // Range: 1-3x
24334: 58:     // The formula ensures a full mountain run (10% of mountain = 1.2x, 20% = 1.4x, ... 100% = 3x)
24335: 59:     // Calculate speed multiplier based on the time taken to complete the run
24336: 60:     let speedMultiplier = 1;
24337: 61:     if (downhillStartTime !== null) {
24338: 62:         const runDuration = (performance.now() - downhillStartTime) / 1000; // Convert to seconds
24339: 63:         // Calculate expected time based on distance
24340: 64:         // Assuming an "average" speed would be covering the entire mountain in the below number of seconds
24341: 65:         const expectedTime = (distanceTraveled / mountainHeight) * 500;
24342: 66:         // Calculate speed ratio: lower than 1 means faster than expected
24343: 67:         // We want lower times to give higher multipliers
24344: 68:         const speedRatio = Math.max(0.1, Math.min(2, runDuration / Math.max(1, expectedTime)));
24345: 69:         // Invert the ratio: 1/speedRatio, so faster runs (lower speedRatio) get higher multipliers
24346: 70:         // Adjust the curve to get 1x for average speed, up to 3x for twice as fast
24347: 71:         speedMultiplier = 1 + (Math.max(0, (1 - speedRatio)) * 3 * speedMultiplierBase); // Range: 1-3x
24348: 72:         console.log(`Run duration: ${runDuration.toFixed(2)}s, Expected: ${expectedTime.toFixed(2)}s, Speed ratio: ${speedRatio.toFixed(2)}, Multiplier: ${speedMultiplier.toFixed(2)}x`);
24349: 73:     }
24350: 74:     // Apply all multipliers to the money calculation
24351: 75:     let moneyEarned = Math.floor((distanceTraveled / 100) * startHeightMultiplier * distanceMultiplier * speedMultiplier);
24352: 76:     moneyEarned = Math.max(0, moneyEarned); // Guarantee no negative values
24353: 77:     console.log(`Awarding money: $${moneyEarned} (Distance: ${distanceTraveled}, Height multiplier: ${startHeightMultiplier.toFixed(2)}, Distance multiplier: ${distanceMultiplier.toFixed(2)}, Speed multiplier: ${speedMultiplier.toFixed(2)})`);
24354: 78:     player.money += moneyEarned;
24355: 79:     updateMoneyDisplay();
24356: 80: }
24357: ````````
24358: 
24359: ## File: js/mechanics.js
24360: ````````javascript
24361:  1: /* mechanics.js - Gameplay Mechanics & Interactions */
24362:  2: // Update all gameplay state and physics – including jump/trick handling and collision updates.
24363:  3: function updateMechanics(deltaTime) {
24364:  4:     deltaTime *= 1;
24365:  5:     if (window.currentState === window.GameState.DOWNHILL) {
24366:  6:       // Call the refactored downhill function from downhill.js
24367:  7:       updateDownhill(deltaTime);
24368:  8:     } else if (window.currentState === window.GameState.UPHILL) {
24369:  9:       // Call the refactored uphill function from uphill.js
24370: 10:       updateUphill(deltaTime);
24371: 11:     }
24372: 12:   }
24373: 13:   // Note: Jump-related functions moved to jumpsled.js
24374: 14: function lerpPlayerToGround(duration, onComplete) {
24375: 15:   const startY = player.absY;
24376: 16:   const endY = mountainHeight - (player.height * 3); // Safe landing height
24377: 17:   const startTime = performance.now();
24378: 18:   function animate() {
24379: 19:     const now = performance.now();
24380: 20:     const t = Math.min(1, (now - startTime) / duration);
24381: 21:     // Use smooth easing
24382: 22:     const easedT = t * t * (3 - 2 * t);
24383: 23:     player.absY = startY + (endY - startY) * easedT;
24384: 24:     if (t < 1) {
24385: 25:       requestAnimationFrame(animate);
24386: 26:     } else {
24387: 27:       player.absY = endY;
24388: 28:       if (onComplete) onComplete();
24389: 29:     }
24390: 30:   }
24391: 31:   animate();
24392: 32: }
24393: ````````
24394: 
24395: ## File: js/utils.js
24396: ````````javascript
24397:   1: /* utils.js */
24398:   2: // Global Configuration & Shared Globals moved to settings.js
24399:   3: window.GameState = {
24400:   4:     HOUSE: 'house',
24401:   5:     DOWNHILL: 'downhill',
24402:   6:     UPHILL: 'uphill'
24403:   7: };
24404:   8: // Instead of getting the canvas element (which no longer exists),
24405:   9: // we define a dummy canvas object for width/height references.
24406:  10: var canvas = { width: 800, height: 450 };
24407:  11: // We'll expose canvas globally for other scripts to access
24408:  12: window.canvas = canvas;
24409:  13: // We'll set ctx in game.js once the Phaser Canvas Texture is created.
24410:  14: var ctx = null;
24411:  15: // Game-relevant keys that should be logged
24412:  16: const GAME_KEYS = [
24413:  17:     'a', 'd', 'w', 's',  // Movement
24414:  18:     'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',  // Alt movement
24415:  19:     ' ',  // Jump/spacebar
24416:  20:     'Tab',  // Toggle state
24417:  21:     'e',  // Spawn animal (debug)
24418:  22:     'r',  // Reserved for future use
24419:  23:     '1', '2', '3', '4',  // Trick buttons
24420:  24:     'q', 'z', 'x', 'c'   // Alternative trick buttons
24421:  25: ];
24422:  26: // Helper function to format timestamp for logging
24423:  27: function getTimestamp() {
24424:  28:     const now = new Date();
24425:  29:     return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}.${now.getMilliseconds().toString().padStart(3, '0')}`;
24426:  30: }
24427:  31: // Helper function to log key presses with relevant info
24428:  32: function logKeyEvent(type, key, gameState) {
24429:  33:     if (GAME_KEYS.includes(key.toLowerCase()) || key === 'Tab') {
24430:  34:         console.log(`[${getTimestamp()}] ${type}: ${key} (Game State: ${gameState})`);
24431:  35:     }
24432:  36: }
24433:  37: /* NEW: Global keysDown object and event listeners */
24434:  38: var keysDown = {};
24435:  39: var spacePressed = false;
24436:  40: window.addEventListener("keydown", function (e) {
24437:  41:     // Prevent default behavior for arrow keys, space, and tab to ensure correct capture
24438:  42:     if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", " ", "Tab"].includes(e.key)) {
24439:  43:         e.preventDefault();
24440:  44:     }
24441:  45:     // Only log if this is a fresh key press, not a key repeat
24442:  46:     if (!keysDown[e.key]) {
24443:  47:         logKeyEvent('KEY DOWN', e.key, window.currentState);
24444:  48:     }
24445:  49:     keysDown[e.key] = true;
24446:  50:     // Track space in HOUSE state
24447:  51:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
24448:  52:         spacePressed = true;
24449:  53:     }
24450:  54:     // Take a photo in UPHILL state when space is pressed
24451:  55:     if (e.key === " " && window.currentState === window.GameState.UPHILL) {
24452:  56:         takePhoto();
24453:  57:     }
24454:  58:     // Press "E" to manually spawn an animal in UPHILL mode (DEBUG)
24455:  59:     if (e.key.toLowerCase() === 'e' && window.currentState === window.GameState.UPHILL) {
24456:  60:         spawnAnimal();
24457:  61:     }
24458:  62:     // Handle Tab key to toggle between UPHILL and DOWNHILL
24459:  63:     if (e.key === "Tab" && window.currentState !== window.GameState.HOUSE) {
24460:  64:         if (window.currentState === window.GameState.UPHILL && player.sledDamaged === 1) {
24461:  65:             console.log("Cannot switch to DOWNHILL mode - Sled is damaged and needs repair");
24462:  66:             showSledDamageNotice();
24463:  67:             return;
24464:  68:         }
24465:  69:         const newState = window.currentState === window.GameState.UPHILL ? window.GameState.DOWNHILL : window.GameState.UPHILL;
24466:  70:         changeState(newState);
24467:  71:     }
24468:  72: });
24469:  73: window.addEventListener("keyup", function (e) {
24470:  74:     // Log key up events for game-relevant keys
24471:  75:     logKeyEvent('KEY UP', e.key, window.currentState);
24472:  76:     delete keysDown[e.key];
24473:  77:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
24474:  78:         spacePressed = false;
24475:  79:         console.log("Space released, starting sled run.");
24476:  80:         unlockAudioContext();
24477:  81:         playStartGameSound();
24478:  82:         changeState(window.GameState.DOWNHILL);
24479:  83:     }
24480:  84: });
24481:  85: /* Utility functions */
24482:  86: function formatUpgradeName(name) {
24483:  87:     let formattedName = name.replace(/([A-Z])/g, ' $1').trim();
24484:  88:     return formattedName.charAt(0).toUpperCase() + formattedName.slice(1);
24485:  89: }
24486:  90: function capitalizeFirstLetter(string) {
24487:  91:     return string.charAt(0).toUpperCase() + string.slice(1);
24488:  92: }
24489:  93: function checkCollision(ax, ay, aw, ah, bx, by, bw, bh) {
24490:  94:     return ax < bx + bw && ax + aw > bx && ay < by + bh && ay + ah > by;
24491:  95: }
24492:  96: function clamp(val, min, max) {
24493:  97:     return Math.max(min, Math.min(max, val));
24494:  98: }
24495:  99: function getCameraOffset(playerAbsY, canvasHeight, mountainHeight) {
24496: 100:     let offset = playerAbsY - canvasHeight / 2;
24497: 101:     return clamp(offset, 0, mountainHeight - canvasHeight);
24498: 102: }
24499: 103: // Make utility functions available globally for both normal scripts and modules
24500: 104: window.formatUpgradeName = formatUpgradeName;
24501: 105: window.capitalizeFirstLetter = capitalizeFirstLetter;
24502: 106: window.checkCollision = checkCollision;
24503: 107: window.clamp = clamp;
24504: 108: window.getCameraOffset = getCameraOffset;
24505: 109: /* Ensure Web Audio API is unlocked */
24506: 110: let audioCtx;
24507: 111: function unlockAudioContext() {
24508: 112:     if (!audioCtx) {
24509: 113:         audioCtx = new (window.AudioContext || window.webkitAudioContext)();
24510: 114:     }
24511: 115: }
24512: 116: /* Audio Utility Functions */
24513: 117: function playTone(frequency = 440, type = "sine", duration = 0.5, volume = 0.3) {
24514: 118:     unlockAudioContext(); // Ensure audio context is unlocked
24515: 119:     const oscillator = audioCtx.createOscillator();
24516: 120:     const gainNode = audioCtx.createGain();
24517: 121:     oscillator.type = type;
24518: 122:     oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);
24519: 123:     gainNode.gain.setValueAtTime(volume, audioCtx.currentTime);
24520: 124:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);
24521: 125:     oscillator.connect(gainNode);
24522: 126:     gainNode.connect(audioCtx.destination);
24523: 127:     oscillator.start();
24524: 128:     oscillator.stop(audioCtx.currentTime + duration);
24525: 129: }
24526: 130: /* Sound Effects */
24527: 131: function playStartGameSound() {
24528: 132:     playTone(440, "triangle", 0.5);
24529: 133: }
24530: 134: function playCrashSound() {
24531: 135:     unlockAudioContext();
24532: 136:     const oscillator = audioCtx.createOscillator();
24533: 137:     const gainNode = audioCtx.createGain();
24534: 138:     oscillator.type = "sawtooth";
24535: 139:     oscillator.frequency.setValueAtTime(800, audioCtx.currentTime);
24536: 140:     oscillator.frequency.exponentialRampToValueAtTime(100, audioCtx.currentTime + 0.5);
24537: 141:     gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
24538: 142:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.5);
24539: 143:     oscillator.connect(gainNode);
24540: 144:     gainNode.connect(audioCtx.destination);
24541: 145:     oscillator.start();
24542: 146:     oscillator.stop(audioCtx.currentTime + 0.5);
24543: 147: }
24544: 148: function playRockHitSound() {
24545: 149:     playTone(200, "square", 0.2);
24546: 150: }
24547: 151: function playMoneyGainSound() {
24548: 152:     playTone(1000, "sine", 0.15, 0.2);
24549: 153: }
24550: 154: function mapRange(value, inMin, inMax, outMin, outMax) {
24551: 155:     return outMin + ((value - inMin) * (outMax - outMin)) / (inMax - inMin);
24552: 156: }
24553: 157: // Helper functions for color conversion and interpolation
24554: 158: function hexToRgb(hex) {
24555: 159:     hex = hex.replace(/^#/, '');
24556: 160:     if (hex.length === 3) {
24557: 161:       hex = hex.split('').map(c => c + c).join('');
24558: 162:     }
24559: 163:     let bigint = parseInt(hex, 16);
24560: 164:     let r = (bigint >> 16) & 255;
24561: 165:     let g = (bigint >> 8) & 255;
24562: 166:     let b = (bigint & 255) & 255;
24563: 167:     return { r, g, b };
24564: 168: }
24565: 169: function rgbToHex(r, g, b) {
24566: 170:     return "#" + ((1 << 24) + (r << 16) + (g << 8) + b)
24567: 171:       .toString(16)
24568: 172:       .slice(1)
24569: 173:       .toUpperCase();
24570: 174: }
24571: 175: function lerpColor(color1, color2, t) {
24572: 176:     let c1 = hexToRgb(color1);
24573: 177:     let c2 = hexToRgb(color2);
24574: 178:     let r = Math.round(c1.r + (c2.r - c1.r) * t);
24575: 179:     let g = Math.round(c1.g + (c2.g - c1.g) * t);
24576: 180:     let b = Math.round(c1.b + (c2.b - c1.b) * t);
24577: 181:     return rgbToHex(r, g, b);
24578: 182: }
24579: 183: // Notification helpers
24580: 184: function showSledDamageNotice() {
24581: 185:   showErrorNotification('Sled Damaged! Please Repair');
24582: 186: }
24583: 187: function showSledRepairedNotice() {
24584: 188:   showSuccessNotification('Sled Repaired!');
24585: 189: }
24586: 190: // Add additional utility functions to window object
24587: 191: window.mapRange = mapRange;
24588: 192: window.hexToRgb = hexToRgb;
24589: 193: window.rgbToHex = rgbToHex;
24590: 194: window.lerpColor = lerpColor;
24591: 195: window.showSledDamageNotice = showSledDamageNotice;
24592: 196: window.showSledRepairedNotice = showSledRepairedNotice;
24593: 197: window.playTone = playTone;
24594: 198: window.playStartGameSound = playStartGameSound;
24595: 199: window.playCrashSound = playCrashSound;
24596: 200: window.playRockHitSound = playRockHitSound;
24597: 201: window.playMoneyGainSound = playMoneyGainSound;
24598: 202: window.unlockAudioContext = unlockAudioContext;
24599: 203: // Note: export statement has been removed and all functions are now attached to window
24600: ````````
24601: 
24602: ## File: index.html
24603: ````````html
24604:  1: <!DOCTYPE html>
24605:  2: <html lang="en">
24606:  3: <head>
24607:  4:   <meta charset="UTF-8" />
24608:  5:   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
24609:  6:   <title>SledHEAD</title>
24610:  7:   <link rel="stylesheet" href="styles.css">
24611:  8:   <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
24612:  9: </head>
24613: 10: <body>
24614: 11:   <!-- UI Elements -->
24615: 12:   <div id="cursor-position"
24616: 13:        style="position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white;
24617: 14:               padding: 5px; border-radius: 3px; font-family: monospace; z-index: 1000;">
24618: 15:     Abs: (0, 0) | View: (0, 0)
24619: 16:   </div>
24620: 17:   <div id="victoryBanner"
24621: 18:        style="display: none; position: fixed; top: 50%; left: 50%;
24622: 19:               transform: translate(-50%, -50%); background: gold; padding: 20px;
24623: 20:               border-radius: 10px; text-align: center; font-size: 24px; font-weight: bold; z-index: 1000;">
24624: 21:     🎉 VICTORY! 🎉<br>
24625: 22:     You've paid off your loan!
24626: 23:   </div>
24627: 24:   <h1>SledHEAD</h1>
24628: 25:   <div id="moneyDisplay">
24629: 26:     <p id="moneyText">Money: $200</p>
24630: 27:   </div>
24631: 28:   <div id="game-screen"></div>
24632: 29:   <!-- Upgrades -->
24633: 30:   <div id="upgrade-menu">
24634: 31:     <div class="game-controls">
24635: 32:       <button id="startGame">Start Sled Run</button>
24636: 33:       <button id="payLoan">Pay Loan ($100,000)</button>
24637: 34:     </div>
24638: 35:     <div id="dynamic-upgrade-columns" class="upgrade-menu-columns">
24639: 36:       <!-- Populated dynamically -->
24640: 37:     </div>
24641: 38:     <p id="bestTimeText">Best Time: N/A</p>
24642: 39:   </div>
24643: 40:   <!-- JS Includes -->
24644: 41:   <script src="js/settings.js"></script>
24645: 42:   <script src="js/notify.js"></script>
24646: 43:   <script src="js/utils.js"></script>
24647: 44:   <script src="js/input.js"></script>
24648: 45:   <script src="js/world.js"></script>
24649: 46:   <script src="js/player.js"></script>
24650: 47:   <script src="js/entities.js"></script>
24651: 48:   <script src="js/wildlife.js"></script>
24652: 49:   <script src="js/mobs/bear.js"></script>
24653: 50:   <script src="js/mobs/mountainlion.js"></script>
24654: 51:   <script src="js/mobs/bird.js"></script>
24655: 52:   <script src="js/trees.js"></script>
24656: 53:   <script src="js/camera.js"></script>
24657: 54:   <script src="js/jumpsled.js"></script>
24658: 55:   <script src="js/mechanics.js"></script>
24659: 56:   <script src="js/render.js"></script>
24660: 57:   <script src="js/stamina.js"></script>
24661: 58:   <script src="js/loan.js"></script>
24662: 59:   <script src="js/uphill.js"></script>
24663: 60:   <!-- Modules -->
24664: 61:   <script type="module" src="js/registry.js"></script>
24665: 62:   <script type="module" src="js/tricks.js"></script>
24666: 63:   <script type="module" src="js/downhill.js"></script>
24667: 64:   <script type="module" src="js/upgradeData.js"></script>
24668: 65:   <script type="module" src="js/upgradeLogic.js"></script>
24669: 66:   <script type="module" src="js/upgrades.js"></script>
24670: 67:   <script type="module" src="js/game.js"></script>
24671: 68: </body>
24672: 69: </html>
24673: ````````
24674: 
24675: ## File: js/game.js
24676: ````````javascript
24677:   1: /* game.js - Core Loop & State Management (Phaserized) */
24678:   2: // Import necessary functions and variables
24679:   3: import { playerUpgrades, mountainUpgrades, initUpgradeButton, purchaseUpgrade, updateMoneyDisplay } from './upgradeLogic.js';
24680:   4: // Keep your globals
24681:   5: var downhillStartTime = null;
24682:   6: var lastTime = 0;
24683:   7: // Local currentState variable removed - we'll use window.currentState exclusively
24684:   8: var jumpOsc = null;
24685:   9: var jumpGain = null;
24686:  10: var loanAmount = 100000;
24687:  11: window.floatingTexts = [];  // Make floatingTexts accessible globally
24688:  12: var isFirstHouseEntry = true;
24689:  13: var houseReEntry = 0;
24690:  14: var playerStartAbsY = 0;
24691:  15: window.playerStartAbsY = playerStartAbsY; // Make playerStartAbsY globally accessible
24692:  16: // We'll access the global canvas object
24693:  17: // var ctx is defined later after context creation
24694:  18: // Create a Phaser Scene to run your game logic
24695:  19: class MainScene extends Phaser.Scene {
24696:  20:   constructor() {
24697:  21:     super("MainScene");
24698:  22:   }
24699:  23:   preload() {
24700:  24:     // If you had assets, you'd load them here
24701:  25:   }
24702:  26:   create() {
24703:  27:     // Initialize global game state
24704:  28:     window.currentState = window.GameState.HOUSE;
24705:  29:     // Create a Canvas Texture of the same size as your old canvas
24706:  30:     this.rt = this.textures.createCanvas("myCanvas", window.canvas.width, window.canvas.height);
24707:  31:     // Get the canvas context with willReadFrequently option
24708:  32:     ctx = this.rt.context;
24709:  33:     // Properly set willReadFrequently for better performance with getImageData calls
24710:  34:     // This replaces the previous approach which didn't work correctly
24711:  35:     const originalCanvas = ctx.canvas;
24712:  36:     const newCanvas = document.createElement('canvas');
24713:  37:     newCanvas.width = originalCanvas.width;
24714:  38:     newCanvas.height = originalCanvas.height;
24715:  39:     const newContext = newCanvas.getContext('2d', { willReadFrequently: true });
24716:  40:     // Copy properties from the original context to the new context
24717:  41:     newContext.drawImage(originalCanvas, 0, 0);
24718:  42:     // Replace the original context (this may need adjustments based on how ctx is used)
24719:  43:     ctx = newContext;
24720:  44:     this.rt.context = ctx;
24721:  45:     // Add it to the scene as an Image so Phaser will display it
24722:  46:     this.image = this.add.image(0, 0, "myCanvas").setOrigin(0, 0);
24723:  47:     // Initialize player money now that TWEAK is available
24724:  48:     if (typeof window.initializePlayerMoney === 'function') {
24725:  49:       window.initializePlayerMoney();
24726:  50:     }
24727:  51:     // Hook up your DOM event listeners for buttons
24728:  52:     document.getElementById("startGame").addEventListener("click", () => {
24729:  53:       console.log("Start run clicked.");
24730:  54:       unlockAudioContext();
24731:  55:       playStartGameSound();
24732:  56:       changeState(window.GameState.DOWNHILL);
24733:  57:     });
24734:  58:     document.getElementById("payLoan").addEventListener("click", () => {
24735:  59:       console.log("Paying loan...");
24736:  60:       payLoan();
24737:  61:     });
24738:  62:     // Initialize upgrade buttons
24739:  63:     Object.keys(playerUpgrades).forEach(upg => {
24740:  64:       initUpgradeButton(upg, playerUpgrades[upg]);
24741:  65:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
24742:  66:       document.getElementById(btnId).addEventListener("click", () => {
24743:  67:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
24744:  68:         purchaseUpgrade(playerUpgrades, upg);
24745:  69:       });
24746:  70:     });
24747:  71:     Object.keys(mountainUpgrades).forEach(upg => {
24748:  72:       initUpgradeButton(upg, mountainUpgrades[upg]);
24749:  73:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
24750:  74:       document.getElementById(btnId).addEventListener("click", () => {
24751:  75:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
24752:  76:         purchaseUpgrade(mountainUpgrades, upg);
24753:  77:       });
24754:  78:     });
24755:  79:     // Set up the world
24756:  80:     generateTerrain();
24757:  81:     updateLoanButton();
24758:  82:     changeState(window.GameState.HOUSE);
24759:  83:   }
24760:  84:   update(time, delta) {
24761:  85:     console.log("MainScene update START");
24762:  86:     // Update game mechanics (delta in ms)
24763:  87:     updateMechanics(delta);
24764:  88:     // Update floating texts
24765:  89:     window.floatingTexts = window.floatingTexts.filter(text => text.update(delta));
24766:  90:     // Call the render function (draws onto ctx)
24767:  91:     render();
24768:  92:     // Refresh the Canvas Texture so Phaser displays the new drawing
24769:  93:     this.rt.refresh();
24770:  94:     console.log("MainScene update END");
24771:  95:   }
24772:  96: }
24773:  97: // Original changeState function (unchanged in logic)
24774:  98: function changeState(newState) {
24775:  99:   // Guard clause to prevent redundant state changes
24776: 100:   if (newState === window.currentState) {
24777: 101:     console.log(`State change ignored: already in state ${newState}`);
24778: 102:     return;
24779: 103:   }
24780: 104:   const prevState = window.currentState;
24781: 105:   if (player.isJumping && newState !== window.GameState.HOUSE) {
24782: 106:     if (player.currentTrick) {
24783: 107:       resetTrickState();
24784: 108:       playCrashSound();
24785: 109:       console.log("State change interrupted trick - counted as crash");
24786: 110:     }
24787: 111:     lerpPlayerToGround(250, () => {
24788: 112:       player.isJumping = false;
24789: 113:       onPlayerLand();
24790: 114:       completeStateChange(newState, prevState);
24791: 115:     });
24792: 116:     return;
24793: 117:   }
24794: 118:   completeStateChange(newState, prevState);
24795: 119: }
24796: 120: function completeStateChange(newState, prevState) {
24797: 121:   window.currentState = newState;
24798: 122:   if (window.currentState === window.GameState.HOUSE) {
24799: 123:     document.getElementById("upgrade-menu").style.display = "block";
24800: 124:     document.getElementById("game-screen").style.display = "none";
24801: 125:     const bestTimeText = document.getElementById("bestTimeText");
24802: 126:     bestTimeText.textContent = player.bestTime === Infinity ? "Best Time: N/A"
24803: 127:                                                            : `Best Time: ${player.bestTime.toFixed(2)}s`;
24804: 128:     if (player.sledDamaged > 0) {
24805: 129:       player.sledDamaged = 0;
24806: 130:       console.log("Sled has been repaired at the house!");
24807: 131:       showSledRepairedNotice();
24808: 132:     }
24809: 133:     if (!isFirstHouseEntry && (prevState === window.GameState.DOWNHILL || prevState === window.GameState.UPHILL)) {
24810: 134:       if (typeof despawnAllAnimals === 'function') {
24811: 135:         despawnAllAnimals();
24812: 136:       }
24813: 137:       if (loanAmount > 0) {
24814: 138:         const deduction = Math.ceil(loanAmount * TWEAK.houseEntryLoanDeduction);
24815: 139:         loanAmount += deduction;
24816: 140:         updateLoanButton();
24817: 141:         houseReEntry++;
24818: 142:         console.log(`House entry fee: -$${deduction} (${TWEAK.houseEntryLoanDeduction * 100}% of $${loanAmount} loan)`);
24819: 143:         console.log("House re-entry count:", houseReEntry);
24820: 144:       }
24821: 145:     }
24822: 146:     if (isFirstHouseEntry) {
24823: 147:       isFirstHouseEntry = false;
24824: 148:     }
24825: 149:     updateMoneyDisplay();
24826: 150:   }
24827: 151:   else if (window.currentState === window.GameState.DOWNHILL) {
24828: 152:     document.getElementById("upgrade-menu").style.display = "none";
24829: 153:     document.getElementById("game-screen").style.display = "block";
24830: 154:     if (prevState === window.GameState.HOUSE) {
24831: 155:       earlyFinish = false;
24832: 156:       player.collisions = 0;
24833: 157:       player.x = window.canvas.width / 2;
24834: 158:       player.absY = mountainHeight - (player.height * 3);
24835: 159:       player.velocityY = 0;
24836: 160:       player.xVel = 0;
24837: 161:       downhillStartTime = performance.now();
24838: 162:       playerStartAbsY = player.absY;
24839: 163:       window.playerStartAbsY = playerStartAbsY; // Update global value
24840: 164:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
24841: 165:     }
24842: 166:     else if (prevState === window.GameState.UPHILL) {
24843: 167:       player.velocityY = 0;
24844: 168:       player.xVel = 0;
24845: 169:       downhillStartTime = performance.now();
24846: 170:       playerStartAbsY = player.absY;
24847: 171:       window.playerStartAbsY = playerStartAbsY; // Update global value
24848: 172:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
24849: 173:     }
24850: 174:   }
24851: 175:   else if (window.currentState === window.GameState.UPHILL) {
24852: 176:     document.getElementById("upgrade-menu").style.display = "none";
24853: 177:     document.getElementById("game-screen").style.display = "block";
24854: 178:     if (prevState === window.GameState.DOWNHILL) {
24855: 179:       awardMoney();
24856: 180:     }
24857: 181:     player.xVel = 0;
24858: 182:   }
24859: 183:   console.log(`Game state changed: ${prevState} -> ${window.currentState}`);
24860: 184: }
24861: 185: // Create and launch the Phaser game with scale options for responsiveness
24862: 186: var config = {
24863: 187:   type: Phaser.AUTO,
24864: 188:   parent: "game-screen",
24865: 189:   width: window.canvas.width,  // Reference from global window.canvas
24866: 190:   height: window.canvas.height, // Reference from global window.canvas
24867: 191:   scene: MainScene,
24868: 192:   backgroundColor: "#000000",
24869: 193:   scale: {
24870: 194:     mode: Phaser.Scale.FIT,
24871: 195:     autoCenter: Phaser.Scale.CENTER_BOTH
24872: 196:   }
24873: 197: };
24874: 198: var phaserGame = new Phaser.Game(config);
24875: 199: // Make functions available globally
24876: 200: window.changeState = changeState;
24877: 201: // Removed redundant global assignment - window.currentState is now managed directly
24878: ````````
`````````

## File: styles.css
`````````css
  1: /* gameplay.css */
  2: /* Styles for the gameplay phase (canvas-based) */
  3: #game-screen {
  4:   position: absolute;
  5:   top: 50px;
  6:   left: 0;
  7:   width: 100%;
  8:   height: calc(100% - 50px);
  9:   /* No fixed width/height here—the Phaser Scale Manager will resize the canvas */
 10: }
 11: #gameCanvas {
 12:   width: 100%;
 13:   height: 100%;
 14:   display: block;
 15:   background-color: #87CEEB;
 16:   border: none;
 17: }
 18: /* house.css */
 19: /* Styles for the house phase & upgrade menu */
 20: #upgrade-menu {
 21:   position: absolute;
 22:   top: 50px;
 23:   left: 0;
 24:   width: 100%;
 25:   height: calc(100% - 50px);
 26:   background-color: rgba(0, 0, 0, 0.9);
 27:   padding: 20px;
 28:   box-sizing: border-box;
 29:   display: block;
 30:   overflow-y: auto;
 31: }
 32: .upgrade-menu-columns {
 33:   display: flex;
 34:   justify-content: space-around;
 35:   align-items: flex-start;
 36:   flex-wrap: wrap;
 37: }
 38: .upgrade-column {
 39:   width: 45%;
 40:   margin: 10px 0;
 41: }
 42: .upgrade-column h2 {
 43:   text-align: center;
 44:   margin-bottom: 10px;
 45: }
 46: .upgrade-entry {
 47:   margin-bottom: 15px;
 48: }
 49: .upgrade-entry button {
 50:   width: 100%;
 51:   margin: 5px 0 2px 0;
 52:   padding: 10px;
 53:   font-size: 16px;
 54:   background-color: #007bff;
 55:   color: white;
 56:   border: none;
 57:   border-radius: 5px;
 58:   cursor: pointer;
 59:   transition: background-color 0.2s ease;
 60: }
 61: .upgrade-entry button:hover {
 62:   background-color: #0056b3;
 63: }
 64: .upgrade-entry button:disabled {
 65:   background-color: #555;
 66:   cursor: not-allowed;
 67: }
 68: .upgrade-desc {
 69:   font-size: 14px;
 70:   line-height: 1.2;
 71:   margin: 0;
 72:   color: #ccc;
 73: }
 74: #bestTimeText {
 75:   margin-top: 20px;
 76:   text-align: center;
 77:   color: #fff;
 78: }
 79: #startGame {
 80:   display: block;
 81:   margin: 10px auto;
 82:   font-size: 16px;
 83:   padding: 8px 16px;
 84:   cursor: pointer;
 85:   background-color: #28a745;
 86:   border: none;
 87:   border-radius: 5px;
 88:   transition: background-color 0.2s ease;
 89: }
 90: #startGame:hover {
 91:   background-color: #218838;
 92: }
 93: /* Global UI elements (title, money display) */
 94: h1 {
 95:   text-align: center;
 96:   margin-top: 10px;
 97:   color: #000;
 98:   font-size: 36px;
 99:   font-weight: bold;
100: }
101: /* Improved money display */
102: #moneyDisplay {
103:   position: fixed;
104:   top: 10px;
105:   right: 10px;
106:   font-size: 20px;
107:   background-color: rgba(0, 0, 0, 0.9);
108:   padding: 12px 16px;
109:   border-radius: 10px;
110:   color: #FFD700;
111:   font-weight: bold;
112:   z-index: 1000;
113: }
114: /* Live money updates should stand out */
115: #moneyText {
116:   font-size: 22px;
117:   font-weight: bold;
118:   color: #FFD700;
119:   transition: transform 0.1s ease-in-out, color 0.2s ease-in-out;
120: }
121: /* Bounce effect when money updates */
122: .money-increase {
123:   transform: scale(1.2);
124:   color: #FFFFFF;
125: }
`````````

## File: docs/1.0_README.md
`````````markdown
  1: # **SledHEAD**
  2: **Genre:** Roguelike | Trick & Time Trial Racer | Adventure  
  3: **Platform:** Web-based (PC, potentially mobile)  
  4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
  5: 
  6: ---
  7: 
  8: ## Table of Contents
  9: 1. [Core Concept](#core-concept)
 10: 2. [Procedural World & Persistence](#procedural-world--persistence)
 11: 3. [Gameplay Loops](#gameplay-loops)
 12:    - [Sledding Phase (Downhill)](#1-sledding-phase-downhill)
 13:    - [Climbing Phase (Uphill)](#2-climbing-phase-uphill)
 14:    - [Management Phase (House & Upgrades)](#3-management-phase-house--upgrades)
 15: 4. [Trick System (For Extra Cash & Fan Engagement)](#trick-system-for-extra-cash--fan-engagement)
 16: 5. [Upgrade System](#upgrade-system)
 17:    - [Personal Upgrades](#personal-upgrades-character-enhancements)
 18:    - [Mountain Upgrades](#mountain-upgrades-resort-expansion)
 19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)
 20: 7. [Mountain Themes & Progression](#mountain-themes--progression)
 21: 8. [Mini-Games in SledHEAD](#mini-games-in-sledhead)
 22: 9. [NPCs & Mountain Town Ecosystem](#npcs--mountain-town-ecosystem)
 23: 
 24: 
 25: ---
 26: 
 27: ## 🎯 **Core Concept**
 28: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
 29: 
 30: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
 31: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
 32: 
 33: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
 34: 
 35: ---
 36: 
 37: ## 🎮 **Controls & Gameplay Mechanics**
 38: 
 39: ### **⬇️ Downhill Phase: Fast-Paced Sledding**
 40: In the **downhill phase**, you’re controlling your sled as it races down procedurally generated slopes, dodging obstacles, pulling off tricks, and aiming for the fastest times.
 41: 
 42: #### **Basic Movement:**
 43: - **Left / Right Arrow Keys (← →)** – Steer your sled left or right.  
 44: - **Down Arrow (↓)** – Crouch for extra speed on straightaways.  
 45: - **Up Arrow (↑)** – Prepare for a jump off a ramp.  
 46: 
 47: #### **Trick System:**
 48: - Tricks are executed using combinations of **Up, Down, Left, and Right Arrows**.
 49: - Landing tricks successfully grants extra money and fan engagement.
 50: - Be mindful of your timing - land while doing a trick, and you could crash!
 51: 
 52: #### **Hazards & Interactions:**
 53: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
 54: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
 55: - **Ice Patches:** Reduce control and make turns trickier.
 56: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
 57: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
 58: 
 59: ---
 60: 
 61: ### **⬆️ Uphill Phase: Climbing & Exploration**
 62: Once you reach the bottom, it’s time to **make your way back up**. The mountain doesn’t regenerate, so you’ll be retracing paths and discovering new shortcuts.
 63: 
 64: #### **Basic Movement & Stamina:**
 65: - **Left / Right Arrow Keys (← →)** – Move horizontally across the mountain.
 66: - **Up Arrow (↑)** – Hike uphill, consuming stamina.
 67: - **Down Arrow (↓)** – Rest momentarily to recover stamina.
 68: 
 69: #### **Navigation & Assistance:**
 70: - If you've **unlocked ski lifts or snowmobiles**, you can use them for a quicker return.
 71: - **Shortcut Awareness** upgrades help you find hidden paths to make the climb easier.
 72: - **Food Stalls & Rest Areas** restore stamina—plan your route accordingly!
 73: 
 74: #### **Wildlife Photography Mini-Game 📸**
 75: - While hiking, **animals appear every few seconds**.
 76: - Aim the camera using **Arrow Keys**, and take a shot with **Spacebar**.
 77: - Align your camera with the **altitude line** for a perfect photo.
 78: - **Moving animals give higher rewards** but are harder to capture.
 79: 
 80: ---
 81: 
 82: **Next Steps:**  
 83: - **If you want to make money:** Optimize your tricks and time trials.  
 84: - **If you want to upgrade:** Invest in stamina, sled durability, and trick enhancements.  
 85: - **If you want to explore:** Look for wildlife, hidden shortcuts, and fan hotspots!  
 86: 
 87: ---
 88: 
 89: ## 🌎 **Procedural World & Persistence**
 90: - The mountain remains consistent during a playthrough.  
 91: - **New terrain is only generated when starting a new game.**  
 92: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
 93: - **Changes per run:**
 94:   - Tourists & fans shift positions.  
 95:   - Weather may change dynamically.  
 96:   - Wildlife encounters vary.
 97: 
 98: ---
 99: 
100: ## 🎮 **Gameplay Loops**
101: 
102: ### 1️⃣ **Sledding Phase (Downhill) ⬇️**
103: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
104: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
105: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
106: - **Obstacles:**
107:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
108:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
109:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
110: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
111: - **Time Trials:**  
112:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
113:   - **Your time between activators determines your bonus.**  
114:   - **Faster times = more money!**  
115:   - Not all runs are timed; only those where you activate a trial.  
116: 
117: ---
118: 
119: ### 2️⃣ **Climbing Phase (Uphill) ⬆️**
120: 🚶 **Top-down adventure traversal with stamina management and exploration.**  
121: - **Goal:** Return to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
122: - **Terrain:** The same generated world as the downhill run (no regenerating between runs).  
123: - **Stamina System:**  
124:   - Stamina drains when hiking.  
125:   - Replenished by **food stands, resting points, or upgrades**.  
126: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
127:   - **Random animals appear every 5–10 seconds (TWEAK variable).**  
128:   - Animals either **stay still (1–20 seconds) or move (making them harder to photograph).**  
129:   - **Use the Arrow Keys to aim the camera cone** around your character.  
130:   - **Align the altitude line** with the animal’s altitude for a perfect shot.  
131:   - **Photos earn money, with multipliers for:**  
132:     - Accuracy (center of POV cone).  
133:     - Altitude match precision.  
134:     - Moving vs. stationary targets (moving = 3x value).  
135: 
136: ---
137: 
138: ### 3️⃣ **Management Phase (House & Upgrades) 🏠**
139: 🏡 **Upgrade your gear, mountain, and social media presence.**  
140: - **Spend earned money on:**
141:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
142:   - **Sled Upgrades:** Speed, handling, trick potential.  
143:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
144: - **New Game Start:**  
145:   - Mountain **ONLY regenerates when starting a completely new game.**  
146:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
147:   - **Current seed is displayed at home.**  
148: 
149: ---
150: 
151: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
152: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
153: 
154: 1. **☁️🪂 Parachute (Up, Down)**  
155:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
156:    **Pixel Art Representation:**  
157:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
158: 
159: 2. **🛑🎿 Air Brake (Up, Up)**  
160:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
161:    **Pixel Art Representation:**  
162:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
163: 
164: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
165:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
166:    **Pixel Art Representation:**  
167:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
168: 
169: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
170:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
171:    **Pixel Art Representation:**  
172:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
173: 
174: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
175:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
176:    **Pixel Art Representation:**  
177:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
178: 
179: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
180:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
181:    **Pixel Art Representation:**  
182:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
183: 
184: 7. **🦸‍♂️✨ Superman (Down, Down)**  
185:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
186:    **Pixel Art Representation:**  
187:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
188: 
189: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
190:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
191:    **Pixel Art Representation:**  
192:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
193: 
194: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
195:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
196:    **Pixel Art Representation:**  
197:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
198: 
199: 10. **👻🔥 Ghost Rider (Left, Right)**  
200:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
201:     **Pixel Art Representation:**  
202:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
203: 
204: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
205:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
206:     **Pixel Art Representation:**  
207:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
208: 
209: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
210:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
211:     **Pixel Art Representation:**  
212:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
213: 
214: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
215:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
216:     **Pixel Art Representation:**  
217:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
218: 
219: 14. **✨⬆️ Falling Star (Down, Up)**  
220:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
221:     **Pixel Art Representation:**  
222:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
223: 
224: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
225:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
226:     **Pixel Art Representation:**  
227:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
228: 
229: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
230:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
231:     **Pixel Art Representation:**  
232:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
233: 
234: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
235: 
236: ---
237: 
238: ## 🔧 **Upgrade System**
239: 
240: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
241: | Upgrade                    | Effect                                             |
242: |----------------------------|----------------------------------------------------|
243: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
244: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
245: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
246: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
247: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
248: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
249: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
250: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
251: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
252: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
253: 
254: ---
255: 
256: ### 🏔️ Mountain Upgrades (Resort Expansion)
257: | Upgrade                        | Effect                                                         |
258: |--------------------------------|----------------------------------------------------------------|
259: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
260: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
261: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
262: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
263: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
264: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
265: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
266: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
267: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
268: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
269: 
270: ---
271: 
272: ## ⚖️ **Game Balance & Tweakable Variables**
273: All these are stored in the **TWEAK object** for easy adjustments:
274: - Wildlife spawn times (min/max).
275: - Wildlife **sit duration** (min/max).
276: - Moving animal multiplier.
277: - Camera **POV cone size**.
278: - **Time trial activator frequency** & bonuses.
279: - **Stamina drain rates**.
280: - **Mountain regeneration rules**.
281: - **Trick scoring multipliers**.
282: - **Photograph accuracy bonuses**. 
283: 
284: **Progression Goals:**  
285: - **Prototype:** Repay the cost of the mountain.  
286: - **Full Game:**  
287:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
288:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
289:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
290:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
291: 
292: ---
293: 
294: ## 🏔️ **Mountain Themes & Progression**
295: 
296: ### Lava Mountain 🌋
297: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
298: - **Mechanics:**  
299:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
300:   - **Ash Clouds:** Temporarily block visibility.
301: - **Power-Up:** **Heat Shielding Sled Coating**  
302:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
303: 
304: ---
305: 
306: ### Space Mountain 🌌
307: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
308: - **Mechanics:**  
309:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
310:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
311: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
312:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
313: 
314: ---
315: 
316: ### Underwater Mountain 🌊
317: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
318: - **Mechanics:**  
319:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
320: - **Power-Up:** **Aqua-Lung Mittens**  
321:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
322: 
323: ---
324: 
325: ### Garbage Dump Glacier 🗑️❄️
326: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
327: - **Mechanics:**  
328:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
329: - **Power-Up:** **Slick Wax Spray**  
330:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
331: 
332: ---
333: 
334: ### Micro Mountain 🐜🌱
335: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
336: - **Mechanics:**  
337:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
338: - **Power-Up:** **Antigrav Wax**  
339:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
340: 
341: ---
342: 
343: ### Candy Cane Canyon 🍭
344: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
345: - **Mechanics:**  
346:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
347: - **Power-Up:** **Sweet-Tooth Coating**  
348:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
349: 
350: ---
351: 
352: ### Crystal Cave Cavern 🔮
353: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
354: - **Mechanics:**  
355:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
356: - **Power-Up:** **Crystal Clear Goggles**  
357:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
358: 
359: ---
360: 
361: ### Haunted Graveyard Hill 👻
362: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
363: - **Mechanics:**  
364:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
365: - **Power-Up:** **Spirit Lantern**  
366:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
367: 
368: ---
369: 
370: ### Sky Jellyfish Mountain ☁️🪼
371: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
372: - **Mechanics:**  
373:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
374: - **Power-Up:** **Stabilizer Sled Rails**  
375:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
376: 
377: ---
378: 
379: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
380: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
381: - **Mechanics:**  
382:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
383: - **Power-Up:** **Clockwork Treads**  
384:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
385: 
386: ---
387: 
388: ### Pyramid Peak 🐫🏜️
389: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
390: - **Mechanics:**  
391:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
392: - **Power-Up:** **Sandrunner Skis**  
393:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
394: 
395: ---
396: 
397: ### Digital Mountain (Cyber Slopes) 💻🔮
398: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
399: - **Mechanics:**  
400:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
401: - **Power-Up:** **Data Shielding**  
402:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
403: 
404: ---
405: 
406: ## 🎮 **Mini-Games in SledHEAD**
407: 
408: ### 1. **Animal Photography** 📸🐾
409: - **Objective:**  
410:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
411: - **Mechanics:**  
412:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
413:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
414:   - **Scoring Bonuses:**  
415:     - **Altitude Match Multiplier**  
416:     - **POV Centering Bonus**  
417:     - **Speed Capture Bonus**  
418: - **Upgrades:**  
419:   - **Optimal Optics:** Increases the camera’s POV cone.  
420:   - **Steady Hands:** Reduces camera sway.  
421:   - **Animal Baiting:** Increases rare animal appearance.
422: - **Special Events:**  
423:   - **Rare Animal Sightings** and **Storm Photography**.
424: - **Risk/Challenge:**  
425:   - **Repeat Photo Penalty** and aggressive animal disruptions.
426: 
427: ---
428: 
429: ### 2. **Fishing** 🎣🐟  
430: - **Objective:**  
431:   Catch fish using various techniques and bait types.
432: - **Mechanics:**  
433:   - Dynamic water simulation with varied fish behaviors.  
434:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
435:   - Legendary fish yield major rewards.
436: - **Upgrades:**  
437:   - Stronger fishing lines, advanced lures, and sonar detection.
438: - **Special Events:**  
439:   - Fishing tournaments and rare migration patterns.
440: - **Risk/Challenge:**  
441:   - Line snapping and predator interference.
442: 
443: ---
444: 
445: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
446: - **Objective:**  
447:   Unlock doors, safes, and hidden compartments.
448: - **Mechanics:**  
449:   - Use tools like **rakes, hooks, and tension wrenches**.  
450:   - Navigate traps such as alarms and rusted internals.
451: - **Upgrades:**  
452:   - High-quality picks, electronic bypass tools, and vibration sensors.
453: - **Special Events:**  
454:   - Timed heists and races with rival scavengers.
455: - **Risk/Challenge:**  
456:   - Unstable buildings and hazards that may alert authorities.
457: 
458: ---
459: 
460: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
461: - **Objective:**  
462:   Find buried treasure using maps, clues, and metal detectors.
463: - **Mechanics:**  
464:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
465:   - Digging requires stamina management and upgraded tools.
466: - **Upgrades:**  
467:   - Advanced metal detectors, excavation tools, and digging drones.
468: - **Special Events:**  
469:   - NPC treasure races and secret cache discoveries.
470: - **Risk/Challenge:**  
471:   - Booby traps, hostile environments, and law enforcement risks.
472: 
473: ---
474: 
475: ### 5. **Kite Flying** 🪁🌬️  
476: - **Objective:**  
477:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
478: - **Mechanics:**  
479:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
480:   - **Downhill:** Kites extend air time and grant special bonuses.
481: - **Upgrades:**  
482:   - **Glide Boost, Speed Stream, and Aero Control.**
483: - **Special Events:**  
484:   - **Storm Riding** with higher boosts but riskier winds.
485: - **Risk/Challenge:**  
486:   - Strong gusts may destabilize your kite.
487: 
488: ---
489: 
490: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
491: - **Objective:**  
492:   Search for valuable minerals, gems, and gold.
493: - **Mechanics:**  
494:   - Explore rivers, caves, and rock formations.  
495:   - **Panning:** Swirl water to separate gold.  
496:   - **Pickaxe Mining:** Break rocks for hidden gems.
497: - **Upgrades:**  
498:   - High-tech panning kits, seismic scanners, precision drills.
499: - **Special Events:**  
500:   - Gold rush hotspots, rare mineral finds, and cave-ins.
501: - **Risk/Challenge:**  
502:   - Unstable ground and rival prospectors.
503: 
504: ---
505: 
506: ### 7. **Cryptid Fossil Digging** 🦴🔍  
507: - **Objective:**  
508:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
509: - **Mechanics:**  
510:   - Use brushes, chisels, and excavation tools to reveal fossils.  
511:   - Transport fossils to the museum at the base of the first mountain.
512: - **Upgrades:**  
513:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
514: - **Special Events:**  
515:   - Competing paleontologists and hidden dig sites.
516: - **Risk/Challenge:**  
517:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
518: 
519: ---
520: 
521: ### 8. **Sled Tricking** 🛷✨  
522: - **Objective:**  
523:   Chain together aerial sled tricks to earn cash and boost fan engagement.
524: - **Mechanics:**  
525:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
526:   - Chain tricks for higher multipliers.
527: - **Upgrades:**  
528:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
529: - **Special Events:**  
530:   - Trick challenges and fan-requested stunt competitions.
531: - **Risk/Challenge:**  
532:   - Mistimed tricks can cause crashes and loss of earnings.
533: 
534: ---
535: 
536: ### 9. **Time Trial Racing** 🏁🛷  
537: - **Objective:**  
538:   Trigger time trial races by hitting gates while sledding for money rewards.
539: - **Mechanics:**  
540:   - Crossing a time trial gate starts a timer.  
541:   - The faster and further you go, the more money you earn.
542: - **Why It Fits:**  
543:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
544: 
545: ---
546: 
547: ### 10. **RC Motor Sled** ❄️🏎️  
548: - **Objective:**  
549:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
550: - **Mechanics:**  
551:   - Maneuver nimble RC sleds across frozen tundra.  
552:   - Nitro boosts and mid-air tricks enhance performance.  
553:   - Customization options include different sled bodies, engines, and handling upgrades.
554: - **Special Events:**  
555:   - Avalanche races, night rides, and hazard runs.
556: - **Risk/Challenge:**  
557:   - Limited battery life, high winds, and signal loss in deep snow.
558: 
559: ## 🏔️ **NPCs & Mountain Town Ecosystem**
560: SledHEAD’s world is filled with **unique characters** who contribute to your journey as a **trick-riding, fan-growing, upgrade-building, sled-stunting** legend. Some run the town, some enhance your sledding skills, and others add depth to the **roguelike adventure**.
561: 
562: ---
563: 
564: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
565: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
566: 
567: #### 🏂 **The Sled Tech (Sled Repairs & Mods)**
568: - **Purpose:** Repairs damage, sells sled mods.
569: - **Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
570: - **Best Quote:** “What’d ya do, run into a moose? I can fix it… for a price.”
571: 
572: #### 🍔 **The Food Vendor (Buffs & Endurance Recovery)**
573: - **Purpose:** Sells food that restores stamina and gives **temporary buffs** for sledding.
574: - **Best Quote:** “Hot cocoa makes you go faster, I swear. Try it.”
575: 
576: #### 🎥 **The Stream Manager (Audience Growth & Sponsorships)**
577: - **Purpose:** Manages your in-game audience; unlocks **sponsorship deals**.
578: - **Best Quote:** “If you don’t clip the trick, did you even land it?”
579: 
580: #### 🏁 **The Race Commissioner (Tournaments & Time Trials)**
581: - **Purpose:** Hosts **time trials, speedrun events, and competitive circuits**.
582: - **Best Quote:** “Half a second off the record? C’mon, I thought you were good.”
583: 
584: #### 🚠 **The Lift Operator (Ski Lift & Shortcut Unlocks)**
585: - **Purpose:** Lets you **unlock ski lifts** for quicker uphill trips.
586: - **Upgrades Unlocked:** **Gondola expansions, VIP lift passes.**
587: - **Best Quote:** “Sure, you could walk… or you could bribe me.”
588: 
589: ---
590: 
591: ### 💨 **Trick & Racing-Oriented NPCs (For Stunts, Style, & Money)**
592: These folks help you **push your limits**, pull off **sick tricks**, and **maximize profits**.
593: 
594: #### 🎿 **The Trick Trainer (Advanced Trick Lessons)**
595: - **Purpose:** Unlocks **trick combos & advanced air control.**
596: - **Best Quote:** “No guts, no glory. You wanna spin faster? Listen up.”
597: 
598: #### 📸 **The Hype Photographer (Proof-Based Challenges & Bonus Money)**
599: - **Purpose:** **Trick verification & photography mini-games**.
600: - **Upgrades Unlocked:** **Slow-mo replays, sponsorship boosts for sick shots.**
601: - **Best Quote:** “A trick’s only worth money if people see it.”
602: 
603: #### 💰 **The Black Market Gear Dealer (Risky Upgrades & Illegal Mods)**
604: - **Purpose:** Sells **risky sled tech** (illegal nitro boosts, magnetized rails for grinds).
605: - **Upgrades Unlocked:** **Unstable overclocked sled parts**.
606: - **Best Quote:** “No refunds. Don’t ask what’s in it.”
607: 
608: #### 🤡 **The Stunt Organizer (Jackass-Style Events & Side Hustles)**
609: - **Purpose:** Hosts **insane trick challenges** with **huge risk & reward**.
610: - **Best Quote:** “Land a quadruple flip, and I’ll give you something real nice.”
611: 
612: ---
613: 
614: ### 🌎 **Worldbuilding NPCs (Exploration, Hidden Routes, & Fan Engagement)**
615: These folks **expand the world** and **give reasons to explore**.
616: 
617: #### ⛷️ **The Retired Pro (Hidden Sledding Routes & Legend Quests)**
618: - **Purpose:** Tells **lore, hidden trails, and backstory of previous champions.**
619: - **Upgrades Unlocked:** **Secret mountain shortcuts & sled blueprints.**
620: - **Best Quote:** “Before you, there was someone else. And he disappeared.”
621: 
622: #### 🦊 **The Wildlife Researcher (Animal Photography & Rare Fan Unlocks)**
623: - **Purpose:** Ties into **wildlife photography mini-games**.
624: - **Upgrades Unlocked:** **Animal-based sled skins & rare sponsor deals.**
625: - **Best Quote:** “Snow leopards? They’re watching you, too.”
626: 
627: #### 📡 **The Event Broadcaster (Commentary & Competitive Meta)**
628: - **Purpose:** Gives **updates on leaderboards, rival NPCs, and changing conditions**.
629: - **Upgrades Unlocked:** **"Breaking News" reports on your achievements.**
630: - **Best Quote:** “The fans are watching, buddy. Make it count.”
631: 
632: ---
633: 
634: ### 🛤️ **The Travel-Ready NPCs (Appear Across Multiple Mountains)**
635: They **don’t just stay in one place**—you’ll run into them as you unlock new peaks.
636: 
637: #### 🎭 **The Rival (Dynamic Trick & Time Trial Duels)**
638: - **Purpose:** Appears on any unlocked mountain to **challenge your records**.
639: - **Best Quote:** “Your best time? That’s cute.”
640: 
641: #### 🛠️ **The Tinkerer (Experimental Sled Mods)**
642: - **Purpose:** Sells **unstable, high-risk sled modifications**.
643: - **Upgrades Unlocked:** **Prototype sled tech.**
644: - **Best Quote:** “This is 50% science and 50% dumb luck.”
645: 
646: #### 🎩 **The Mysterious Merchant (Random Legendary Gear)**
647: - **Purpose:** Appears randomly, selling **rare sleds & gear**.
648: - **Best Quote:** “You don’t know what you need… until you see it.”
649: 
650: ---
651: 
652: ### 🎭 **The Wild Cards (Weird & Legendary NPCs)**
653: These folks are **just strange**, but they add **flavor, mystery, and unpredictability**.
654: 
655: #### 👻 **The Ghost of the Mountain (Phantom Races & Haunted Challenges)**
656: - **Purpose:** Unlocks **ghost time trials & haunted trick courses**.
657: - **Best Quote:** “You ride my path, you race my shadow.”
658: 
659: #### 🧙‍♂️ **The Winter Shaman (Weather Manipulation & Magic Sleds)**
660: - **Purpose:** **Controls mountain weather** for harder/easier runs.
661: - **Best Quote:** “Blizzards make legends.”
662: 
663: #### 🐻 **The Bear Whisperer (Bear Sled Racing Mini-Game)**
664: - **Purpose:** Lets you **race against trained bears** for money.
665: - **Best Quote:** “You sled. They sled. Only one wins.”
666: 
667: #### 🥶 **The Ice Sculptor (Sled Cosmetics & Customization)**
668: - **Purpose:** Crafts **one-of-a-kind sled designs**.
669: - **Best Quote:** “Your ride should be a masterpiece.”
670: 
671: #### 🔮 **The Time Traveler (Future & Past Sled Tech)**
672: - **Purpose:** Unlocks **anachronistic sled models** (steampunk, cyberpunk, caveman logs).
673: - **Best Quote:** “The future’s fast. The past is brutal.”
674: 
675: ---
676: 
677: ## **🏔️ Final Thoughts**
678: This crew **perfectly balances**:
679: ✅ **Core game economy & upgrades**  
680: ✅ **High-speed trick-focused gameplay**  
681: ✅ **Exploration & hidden content**  
682: ✅ **Hilarious but valuable side NPCs**  
683: 
684: These **NPCs make the town feel alive, push competitive play, and add world depth**. Get ready to **build, race, trick, and explore** with this **cast of unforgettable characters**.
`````````

## File: docs/CONTROLS.md
`````````markdown
  1: # SledHEAD Game Controls
  2: 
  3: ## 🎯 Game Overview
  4: 
  5: SledHEAD is an **arcade-style sledding game** where you play as an **aspiring sledding champion & content creator** who has purchased an entire procedurally generated mountain. Your goal is to master the mountain through optimized sled runs, perform spectacular aerial tricks, photograph elusive wildlife, and earn money to upgrade your equipment and pay off your mountain loan.
  6: 
  7: The game consists of three distinct phases:
  8: 
  9: 1. **⬆️ Uphill/Climbing Phase** - Navigate uphill to find the perfect starting position, manage your stamina, and photograph wildlife
 10: 2. **⬇️ Downhill/Sledding Phase** - Race down the mountain, performing tricks and avoiding obstacles
 11: 3. **🏠 Management Phase** - Spend your earnings on upgrades for your equipment and mountain infrastructure
 12: 
 13: ---
 14: 
 15: ## 🎮 Core Controls
 16: 
 17: ### ⬆️ Uphill/Climbing Phase Controls
 18: 
 19: | Input | Action |
 20: |-------|--------|
 21: | **W/A/S/D** | Move the player up/left/down/right across the mountain |
 22: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line for photography |
 23: | **Spacebar** | Take a photograph when an animal is in view & the altitude line is rapidly flashing|
 24: | **E** | [Debug] Manually spawn an animal for testing |
 25: 
 26: During the uphill phase, you'll:
 27: - Navigate the mountain terrain to find optimal starting points
 28: - Manage your stamina (which depletes while climbing)
 29: - Photograph wildlife to earn additional money
 30: - Look for shortcuts and strategic positions for your downhill run
 31: 
 32: ### ⬇️ Downhill/Sledding Phase Controls
 33: 
 34: | Input | Action |
 35: |-------|--------|
 36: | **Arrow Keys ←→** | Steer your sled left or right |
 37: | **Spacebar** | Initiate jumps |
 38: | **Arrow Keys** (during jumps) | Perform tricks (specific combinations detailed below) |
 39: 
 40: During downhill sledding, you'll:
 41: - Build momentum and navigate the fastest route down
 42: - Avoid obstacles like rocks, trees, and tourists
 43: - Find and hit jumps to perform tricks
 44: - Chain tricks together for bonus rewards
 45: 
 46: ### 🏠 Management (House & Upgrades) Controls
 47: 
 48: Navigate menus using mouse/keyboard to:
 49: - Purchase equipment upgrades
 50: - Expand mountain infrastructure 
 51: - Track your earnings and loan payments
 52: - Check your current mountain seed (for sharing great mountains!)
 53: 
 54: ---
 55: 
 56: ## ✨ Trick System
 57: 
 58: Perform these trick combinations during jumps to earn additional cash:
 59: 
 60: | Trick Name | Input Combination | Description |
 61: |------------|-------------------|-------------|
 62: | **🚁⬅️ Helicopter Spin Left** | Left, Left | Spin horizontally like a helicopter twirling left |
 63: | **🚁➡️ Helicopter Spin Right** | Right, Right | Spin horizontally like a helicopter twirling right |
 64: | **🪂 Parachute** | Up, Down | Hold sled overhead to slow descent and extend air time |
 65: | **🛑 Air Brake** | Up, Up | Use sled as air brake to slow lateral speed |
 66: 
 67: **Trick Tips:**
 68: - Successfully landing tricks earns money
 69: - Chain tricks for bonus multipliers
 70: - Be careful - attempting tricks without enough air time can result in crashes!
 71: - Re-hitting jumps can extend combo chains
 72: 
 73: ---
 74: 
 75: ## 📸 Photography System Controls
 76: 
 77: | Control | Action |
 78: |---------|--------|
 79: | **Arrow Keys ↑↓←→** | Adjust camera angle and altitude line |
 80: | **Spacebar** | Take photo |
 81: 
 82: **Photography Tips:**
 83: - Match the altitude line with the animal for maximum reward
 84: - Animals that are moving yield higher rewards
 85: - Each repeated photo of the same animal gives diminishing returns
 86: - Upgrade your camera equipment to improve your photography income
 87: 
 88: ---
 89: 
 90: ## ⚙️ Advanced Mechanics
 91: 
 92: ### Stamina Management
 93: - Stamina depletes during uphill climbing
 94: - Return to the house to end your day and restore stamina
 95: - Each day you will be charged 0.5% of your loan
 96: - If you run out of stamina, you are immediately returned to the house, and charged 100*(houseReEntry*0.1)
 97: - Upgrade your equipment to reduce stamina consumption
 98: 
 99: ### Collision Handling
100: - Collisions with obstacles slow you down and may cause crashes
101: - Upgrade sled durability to withstand more collisions
102: - Each crash reduces your potential earnings
103: 
104: ### Upgrade System
105: Spend your earnings on:
106: - **Rocket Surgery**: Increases speed and jump dynamics
107: - **Optimal Optics**: Improves camera angle and accuracy
108: - **Sled Durability**: Increases collision tolerance
109: - **Fancier Footwear**: Improves uphill movement speed
110: 
111: ### Win Condition
112: - Pay off your mountain loan to trigger the victory state
113: - Challenge yourself to complete this with fewer runs!
`````````

## File: docs/README.md
`````````markdown
  1: # **SledHEAD**  
  2: **Genre:** Trick & Time Trial Racer | Adventure  
  3: **Platform:** Web-based (PC)  
  4: **Target Audience:** Arcade racing fans, adventure/simulation players, streamers & content creators  
  5: 
  6: > 🎮 **[Game Controls Guide](CONTROLS.md)** - Detailed explanation of all game controls and mechanics
  7: 
  8: ---
  9: 
 10: ## Table of Contents  
 11: 1. [Core Concept](#core-concept)  
 12: 2. [Gameplay Loops](#gameplay-loops)  
 13:    - [Sledding Phase (Downhill)](#sledding-phase-downhill)  
 14:    - [Climbing Phase (Uphill)](#climbing-phase-uphill)  
 15:    - [Management Phase (House & Upgrades)](#management-phase-house--upgrades)  
 16: 3. [Trick System](#trick-system)  
 17: 4. [Upgrade System](#upgrade-system)  
 18: 5. [Photo System](#photo-system)  
 19: 6. [Game Balance & Tweakable Variables](#game-balance--tweakable-variables)  
 20: 
 21: ---
 22: 
 23: ## 🎯 **Core Concept**  
 24: You are an **aspiring sledding champion & content creator**, challenging yourself to master an enormous mountain. Your goal is to optimize sled runs, perform aerial tricks, and earn money by completing daring stunts and photographing wildlife.
 25: 
 26: ---
 27: 
 28: ## 🎮 **Gameplay Loops**  
 29: 
 30: ### ⬇️ **Sledding Phase (Downhill)**  
 31: - **Speed & Gravity:** Race down the mountain, using gravity and momentum to your advantage.  
 32: - **Perform Tricks:** Execute tricks mid-air to earn extra cash.  
 33: - **Avoid Obstacles:** Rocks and other hazards can slow you down and increase collision counts.  
 34: 
 35: ### ⬆️ **Climbing Phase (Uphill)**  
 36: - **Manual Return:** Use simple directional controls to climb back up the mountain.  
 37: - **Camera Controls:** Rotate your camera and adjust the altitude line to prepare for wildlife photography.  
 38: 
 39: ### 🏠 **Management Phase (House & Upgrades)**  
 40: - **Upgrade Equipment:** Use your earnings to purchase upgrades that improve your sledding, camera, and movement capabilities.  
 41: - **Pay Off Loan:** Reduce your initial loan with the money you earn. Once it's fully repaid, you win!
 42: 
 43: ---
 44: 
 45: ## ✨ **Trick System**  
 46: - Perform tricks during jumps to earn additional cash.  
 47: - Tricks include:  
 48:   - **Left Helicopter** (Rotate left mid-air)  
 49:   - **Right Helicopter** (Rotate right mid-air)  
 50:   - **Air Brake** (Apply aerial braking)  
 51:   - **Parachute** (Deploy for controlled descent)  
 52: - Tricks can be chained for bonus rewards, and re-hit jumps can extend combo chains.  
 53: 
 54: ---
 55: 
 56: ## 🔧 **Upgrade System**  
 57: Upgrades enhance gameplay and include:
 58: 
 59: ### 🛷 **Personal Upgrades:**  
 60: - **Rocket Surgery:** Increases speed and jump dynamics.  
 61: - **Optimal Optics:** Improves camera angle and accuracy for better wildlife photography.  
 62: - **Sled Durability:** Increases the number of collisions you can survive.  
 63: - **Fancier Footwear:** Improves uphill movement speed.  
 64: 
 65: ### 🏔️ **Mountain Upgrades:**  
 66: - **Ski Lifts:** (Planned but not yet implemented)  
 67: - **Snowmobile Rentals:** (Planned but not yet implemented)  
 68: - **Groomed Trails:** (Planned but not yet implemented)  
 69: 
 70: ---
 71: 
 72: ## 📸 **Photo System**  
 73: - **Wildlife Spawning:** Bears and birds spawn during the uphill phase.  
 74: - **Camera Use:** Adjust the camera angle and altitude line to capture the perfect shot.  
 75: - **Scoring Factors:**  
 76:   - **Altitude Matching:** Better alignment with animal altitude increases reward.  
 77:   - **Centering:** Well-centered shots provide bonus payouts.  
 78:   - **Movement Bonus:** Photographing moving animals yields more cash.  
 79:   - **Repeat Penalty:** Avoid photographing the same animal multiple times for reduced penalties.  
 80: 
 81: ---
 82: 
 83: ## ⚙️ **Game Balance & Tweakable Variables**  
 84: Key variables that control game mechanics and can be adjusted include:  
 85: - **Jump Mechanics:** Height, duration, and zoom bonuses.  
 86: - **Animal Behavior:** Spawn times, movement speed, and flee mechanics.  
 87: - **Upgrade Costs & Effects:** Each upgrade scales in cost and effectiveness.  
 88: - **Collision Handling:** How collisions are managed and penalized.  
 89: 
 90: ---
 91: 
 92: ## 🎮 **Controls**  
 93: - **W/A/S/D:** Move the player during the uphill phase.  
 94: - **Arrow Keys:** Adjust the camera angle and altitude line.  
 95: - **Spacebar:**  
 96:   - **Downhill Phase:** Initiates jumps.  
 97:   - **Uphill Phase:** Takes a photo.  
 98: - **E:** Manually spawn an animal (for testing purposes).  
 99: 
100: ---
101: 
102: ## ✅ **Win Condition**  
103: - Pay off the initial loan to trigger the victory state.
`````````

## File: js/mobs/bear.js
`````````javascript
 1: /* bear.js - Bear Animal Module
 2: // This module defines the bear characteristics for the wildlife simulation.
 3: // It registers itself with wildlife.js by calling registerAnimalType().
 4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 5: */
 6: (function() {
 7:     var bearData = {
 8:         type: "bear",
 9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.bearSpawnProbability) || 0.5,
10:         width: 40,
11:         height: 60,
12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.bearDetectionRadius) || 50,
13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.bearSpeed) || 8,
14:         basePhotoBonus: 10, // Bears yield a higher photo bonus
15:         color: "#8B4513",
16:         spawningBiomes: [
17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
18:         ],
19:         customUpdate: null,
20:         customDraw: function(animal, screenY, ctx) {
21:             // Draw the bear's body
22:             ctx.fillStyle = "#8B4513";
23:             ctx.fillRect(
24:                 animal.x - animal.width / 2,
25:                 screenY - animal.height / 2,
26:                 animal.width,
27:                 animal.height
28:             );
29:             // Draw bear ears as simple rectangles
30:             ctx.fillStyle = "#000000";
31:             ctx.fillRect(
32:                 animal.x - animal.width / 3,
33:                 screenY - animal.height / 2 - 10,
34:                 10,
35:                 10
36:             );
37:             ctx.fillRect(
38:                 animal.x + animal.width / 3 - 10,
39:                 screenY - animal.height / 2 - 10,
40:                 10,
41:                 10
42:             );
43:             // Altitude indicator
44:             let t = 1 - (animal.altitude / 100);
45:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
46:             ctx.fillStyle = altitudeColor;
47:             ctx.fillRect(
48:                 animal.x + animal.width / 2 + 5,
49:                 screenY - 5,
50:                 10,
51:                 10
52:             );
53:         }
54:     };
55:     if (typeof registerAnimalType === 'function') {
56:         registerAnimalType(bearData);
57:     } else {
58:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
59:     }
60: })();
`````````

## File: js/mobs/bird.js
`````````javascript
 1: /* bird.js - Bird Animal Module
 2: // This module defines the bird characteristics for the wildlife simulation.
 3: // It registers itself with wildlife.js by calling registerAnimalType().
 4: // Spawning Biomes: Spawns on all layers of the Starter Mountain.
 5: */
 6: (function() {
 7:     var birdData = {
 8:         type: "bird",
 9:         spawnProbability: (typeof TWEAK !== 'undefined' && TWEAK.birdSpawnProbability) || 0.5,
10:         width: 20,
11:         height: 20,
12:         detectionRadius: (typeof TWEAK !== 'undefined' && TWEAK.birdDetectionRadius) || 50,
13:         speed: (typeof TWEAK !== 'undefined' && TWEAK.birdSpeed) || 12,
14:         basePhotoBonus: 5, // Birds yield a lower photo bonus
15:         color: "#1E90FF",
16:         spawningBiomes: [
17:             { biome: "starterMountain" }  // Spawns on all layers of the Starter Mountain
18:         ],
19:         customUpdate: null,
20:         customDraw: function(animal, screenY, ctx) {
21:             // Draw the bird's body
22:             ctx.fillStyle = "#1E90FF";
23:             ctx.fillRect(
24:                 animal.x - animal.width / 2,
25:                 screenY - animal.height / 2,
26:                 animal.width,
27:                 animal.height
28:             );
29:             // Draw bird wings with a simple flapping effect
30:             ctx.fillStyle = "#000000";
31:             if (Math.floor(Date.now() / 200) % 2 === 0) {
32:                 ctx.beginPath();
33:                 ctx.moveTo(animal.x, screenY);
34:                 ctx.lineTo(animal.x - 20, screenY - 10);
35:                 ctx.lineTo(animal.x + 20, screenY - 10);
36:                 ctx.closePath();
37:                 ctx.fill();
38:             } else {
39:                 ctx.beginPath();
40:                 ctx.moveTo(animal.x, screenY);
41:                 ctx.lineTo(animal.x - 20, screenY + 5);
42:                 ctx.lineTo(animal.x + 20, screenY + 5);
43:                 ctx.closePath();
44:                 ctx.fill();
45:             }
46:             // Altitude indicator
47:             let t = 1 - (animal.altitude / 100);
48:             let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
49:             ctx.fillStyle = altitudeColor;
50:             ctx.fillRect(
51:                 animal.x + animal.width / 2 + 5,
52:                 screenY - 5,
53:                 10,
54:                 10
55:             );
56:         }
57:     };
58:     if (typeof registerAnimalType === 'function') {
59:         registerAnimalType(birdData);
60:     } else {
61:         console.error("registerAnimalType is not defined. Make sure wildlife.js is loaded first.");
62:     }
63: })();
`````````

## File: js/tricks.js
`````````javascript
 1: /* tricks.js - Trick System & Logic */
 2: import { register } from './registry.js';
 3: function startTrick(trickName) {
 4:   if (player.currentTrick) return;
 5:   player.currentTrick = trickName;
 6:   player.trickTimer = 0;
 7:   player.trickRotation = 0;
 8:   player.trickOffset = 0;
 9:   let now = Date.now();
10:   let cooldownEnd = player.trickCooldowns[trickName] || 0;
11:   let timeLeft = Math.max(0, cooldownEnd - now);
12:   player.currentTrickValueMultiplier = timeLeft > 0 ? Math.max(0.1, 1 - (timeLeft / TWEAK._trickCooldown)) : 1;
13:   player.trickCooldowns[trickName] = now + TWEAK._trickCooldown;
14:   console.log(`Starting ${trickName} (Value: ${(player.currentTrickValueMultiplier * 100).toFixed(0)}%)`);
15: }
16: register("startTrick", startTrick);
17: function checkTrickInputs() {
18:   if (!player.currentTrick && player.isJumping) {
19:     if (keysDown["ArrowLeft"]) startTrick("leftHelicopter");
20:     else if (keysDown["ArrowRight"]) startTrick("rightHelicopter");
21:     else if (keysDown["ArrowUp"]) startTrick("airBrake");
22:     else if (keysDown["ArrowDown"]) startTrick("parachute");
23:   }
24: }
25: register("checkTrickInputs", checkTrickInputs);
26: function processTrick(deltaTime) {
27:   if (player.currentTrick) {
28:     player.trickTimer += deltaTime;
29:     let trickProgress = player.trickTimer / (TWEAK._trickBaseDuration * TWEAK._trickTimeMultiplier + TWEAK._trickTimeAdder);
30:     switch (player.currentTrick) {
31:       case "leftHelicopter":
32:         player.trickRotation -= TWEAK._trickRotationSpeed * (deltaTime / 1000);
33:         break;
34:       case "rightHelicopter":
35:         player.trickRotation += TWEAK._trickRotationSpeed * (deltaTime / 1000);
36:         break;
37:       case "airBrake":
38:       case "parachute":
39:         player.trickOffset = TWEAK._trickOffsetDistance * Math.sin(Math.PI * trickProgress);
40:         break;
41:     }
42:     if (trickProgress >= 1) {
43:       completeTrick();
44:     }
45:   }
46: }
47: register("processTrick", processTrick);
48: function completeTrick() {
49:   let trickMoney = TWEAK._trickMoneyBase;
50:   let chainBonus = 1;
51:   if (player.lastTrick && player.lastTrick !== player.currentTrick) {
52:     player.trickChainCount++;
53:     chainBonus = Math.pow(TWEAK._trickChainMultiplier, player.trickChainCount);
54:     trickMoney *= chainBonus;
55:   } else {
56:     player.trickChainCount = 0;
57:   }
58:   trickMoney *= player.currentTrickValueMultiplier;
59:   let finalMoney = Math.floor(trickMoney);
60:   player.money += finalMoney;
61:   showMoneyGain(finalMoney, `(${player.currentTrick})`);
62:   addFloatingText(`+$${finalMoney} ${player.currentTrick}`, player.x, player.absY);
63:   console.log(`Completed ${player.currentTrick}! +$${finalMoney}`);
64:   player.lastTrick = player.currentTrick;
65:   player.currentTrick = null;
66:   player.trickTimer = 0;
67:   player.trickRotation = 0;
68:   player.trickOffset = 0;
69:   playTrickCompleteSound();
70: }
71: register("completeTrick", completeTrick);
72: function resetTrickState() {
73:   player.currentTrick = null;
74:   player.trickTimer = 0;
75:   player.trickRotation = 0;
76:   player.trickOffset = 0;
77:   player.lastTrick = null;
78:   player.trickChainCount = 0;
79: }
80: register("resetTrickState", resetTrickState);
81: function playTrickCompleteSound() {
82:   playTone(600, "sine", 0.1, 0.2);
83: }
84: register("playTrickCompleteSound", playTrickCompleteSound);
85: // Expose checkTrickInputs globally so that other modules (like downhill.js) can call it.
86: window.checkTrickInputs = checkTrickInputs;
87: export {
88:   startTrick,
89:   checkTrickInputs,
90:   processTrick,
91:   completeTrick,
92:   resetTrickState,
93:   playTrickCompleteSound,
94: };
`````````

## File: js/upgradeLogic.js
`````````javascript
  1: // js/upgradeLogic.js
  2: // Using global utility functions instead of imports
  3: // Track upgrade levels
  4: let playerUpgrades = {
  5:   rocketSurgery: 0,
  6:   optimalOptics: 0,
  7:   sledDurability: 0,
  8:   fancierFootwear: 0,
  9:   grapplingAnchor: 0,
 10:   attendLegDay: 0,
 11:   shortcutAwareness: 0,
 12:   crowdHypeman: 0,
 13:   crowdWeaver: 0,
 14:   weatherWarrior: 0
 15: };
 16: let mountainUpgrades = {
 17:   skiLifts: 0,
 18:   snowmobileRentals: 0,
 19:   eateries: 0,
 20:   groomedTrails: 0,
 21:   firstAidStations: 0,
 22:   scenicOverlooks: 0,
 23:   advertisingRamps: 0,
 24:   resortLodges: 0,
 25:   nightLighting: 0,
 26:   weatherControl: 0
 27: };
 28: // Make upgrade objects globally accessible
 29: window.playerUpgrades = playerUpgrades;
 30: window.mountainUpgrades = mountainUpgrades;
 31: const upgradeMaxLevel = {
 32:   rocketSurgery: 10,
 33:   optimalOptics: 10,
 34:   sledDurability: 10,
 35:   fancierFootwear: 10,
 36:   grapplingAnchor: 0,
 37:   attendLegDay: 0,
 38:   shortcutAwareness: 0,
 39:   crowdHypeman: 0,
 40:   crowdWeaver: 0,
 41:   weatherWarrior: 0,
 42:   skiLifts: 0,
 43:   snowmobileRentals: 0,
 44:   eateries: 0,
 45:   groomedTrails: 0,
 46:   firstAidStations: 0,
 47:   scenicOverlooks: 0,
 48:   advertisingRamps: 0,
 49:   resortLodges: 0,
 50:   nightLighting: 0,
 51:   weatherControl: 0
 52: };
 53: function getUpgradeCost(upgradeKey, currentLevel) {
 54:   return Math.floor(100 * Math.pow(1.1, currentLevel + 1));
 55: }
 56: function updateMoneyDisplay() {
 57:   const moneyText = document.getElementById("moneyText");
 58:   if (moneyText) {
 59:     moneyText.textContent = "Money: $" + player.money;
 60:   }
 61: }
 62: function getUpgradeDisplayText(upgradeKey, currentLevel, maxLevel) {
 63:   let text = formatUpgradeName(upgradeKey) + ` (Lv ${currentLevel}/${maxLevel})`;
 64:   if (maxLevel > 0 && currentLevel < maxLevel) {
 65:     let cost = getUpgradeCost(upgradeKey, currentLevel);
 66:     text += " – Cost: $" + cost;
 67:   }
 68:   return text;
 69: }
 70: function initUpgradeButton(upgradeKey, upgradeValue) {
 71:   const maxLevel = upgradeMaxLevel[upgradeKey];
 72:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
 73:   const button = document.getElementById(btnId);
 74:   button.innerText = getUpgradeDisplayText(upgradeKey, upgradeValue, maxLevel);
 75:   if (maxLevel === 0 || upgradeValue >= maxLevel) {
 76:     button.disabled = true;
 77:   }
 78: }
 79: function purchaseUpgrade(upgradeType, upgradeKey) {
 80:   const currentLevel = upgradeType[upgradeKey];
 81:   const maxLevel = upgradeMaxLevel[upgradeKey];
 82:   if (maxLevel === 0 || currentLevel >= maxLevel) {
 83:     console.log("Upgrade", upgradeKey, "is locked or already maxed.");
 84:     return;
 85:   }
 86:   const cost = getUpgradeCost(upgradeKey, currentLevel);
 87:   if (player.money < cost) {
 88:     console.log("Not enough money to purchase", upgradeKey, ". Cost:", cost, "Money:", player.money);
 89:     return;
 90:   }
 91:   player.money -= cost;
 92:   upgradeType[upgradeKey]++;
 93:   const newLevel = upgradeType[upgradeKey];
 94:   const btnId = `upgrade${capitalizeFirstLetter(upgradeKey)}`;
 95:   document.getElementById(btnId).innerText = getUpgradeDisplayText(upgradeKey, newLevel, maxLevel);
 96:   if (newLevel >= maxLevel) {
 97:     document.getElementById(btnId).disabled = true;
 98:   }
 99:   updateMoneyDisplay();
100:   console.log("Purchased upgrade", upgradeKey, "New level:", newLevel, "Remaining money:", player.money);
101: }
102: // Export all necessary variables and functions
103: export {
104:   playerUpgrades,
105:   mountainUpgrades,
106:   upgradeMaxLevel,
107:   getUpgradeCost,
108:   getUpgradeDisplayText,
109:   initUpgradeButton,
110:   updateMoneyDisplay,
111:   purchaseUpgrade
112: };
`````````

## File: js/upgrades.js
`````````javascript
 1: // js/upgrades.js
 2: import { upgradeCategories } from './upgradeData.js';
 3: import { 
 4:   playerUpgrades, 
 5:   mountainUpgrades, 
 6:   upgradeMaxLevel, 
 7:   purchaseUpgrade, 
 8:   getUpgradeCost,
 9:   getUpgradeDisplayText 
10: } from './upgradeLogic.js';
11: // Using global capitalizeFirstLetter instead of importing it
12: function createUpgradeElement(upgrade, isPlayerUpgrade = true) {
13:   const upgradeType = isPlayerUpgrade ? playerUpgrades : mountainUpgrades;
14:   const currentLevel = upgradeType[upgrade.key];
15:   const maxLevel = upgradeMaxLevel[upgrade.key];
16:   const cost = getUpgradeCost(upgrade.key, currentLevel);
17:   const entry = document.createElement('div');
18:   entry.className = 'upgrade-entry';
19:   const button = document.createElement('button');
20:   const btnId = `upgrade${capitalizeFirstLetter(upgrade.key)}`;
21:   button.id = btnId;
22:   button.innerText = getUpgradeDisplayText(upgrade.key, currentLevel, maxLevel);
23:   // Disable if maxed or locked
24:   if (maxLevel === 0 || currentLevel >= maxLevel) {
25:     button.disabled = true;
26:   }
27:   button.addEventListener('click', () => {
28:     purchaseUpgrade(upgradeType, upgrade.key);
29:   });
30:   const desc = document.createElement('p');
31:   desc.className = 'upgrade-desc';
32:   desc.textContent = upgrade.desc;
33:   entry.appendChild(button);
34:   entry.appendChild(desc);
35:   return entry;
36: }
37: function renderUpgradeMenu() {
38:   const container = document.getElementById('dynamic-upgrade-columns');
39:   if (!container) return;
40:   upgradeCategories.forEach(category => {
41:     const column = document.createElement('div');
42:     column.className = 'upgrade-column';
43:     const header = document.createElement('h2');
44:     header.textContent = category.name;
45:     column.appendChild(header);
46:     const isPlayerUpgrade = category.type === "player";
47:     category.upgrades.forEach(upgrade => {
48:       const element = createUpgradeElement(upgrade, isPlayerUpgrade);
49:       column.appendChild(element);
50:     });
51:     container.appendChild(column);
52:   });
53: }
54: renderUpgradeMenu();
`````````

## File: js/input.js
`````````javascript
 1: /* input.js - Keyboard Input Handling */
 2: // Global keyboard input tracking
 3: // var keysDown = {}; // Now using the one from utils.js
 4: // Global cursor position tracking
 5: var cursorPosition = {
 6:   absoluteX: 0,
 7:   absoluteY: 0,
 8:   viewportX: 0,
 9:   viewportY: 0,
10:   lastUpdateTime: 0
11: };
12: // We're no longer setting up duplicate key event listeners here
13: // The main event listeners are now in utils.js with logging
14: // Set up event listener for mouse movement
15: window.addEventListener("mousemove", function(e) {
16:   // Store both absolute and viewport coordinates
17:   cursorPosition.absoluteX = e.pageX;
18:   cursorPosition.absoluteY = e.pageY;
19:   cursorPosition.viewportX = e.clientX;
20:   cursorPosition.viewportY = e.clientY;
21: });
22: // Add logging for mouse clicks when they're used for game interactions
23: window.addEventListener("mousedown", function(e) {
24:   // Log only left and right clicks for game interactions
25:   if (e.button === 0 || e.button === 2) {
26:     const buttonName = e.button === 0 ? "LEFT CLICK" : "RIGHT CLICK";
27:     console.log(`[${getTimestamp()}] MOUSE ${buttonName}: (${e.clientX}, ${e.clientY}) (Game State: ${window.currentState})`);
28:   }
29: });
30: // Update the cursor position display
31: function updateCursorPositionDisplay() {
32:   const cursorPositionElement = document.getElementById("cursor-position");
33:   if (cursorPositionElement) {
34:     cursorPositionElement.textContent = `Abs-xy: (${cursorPosition.absoluteX}, ${cursorPosition.absoluteY}) | View: (${cursorPosition.viewportX}, ${cursorPosition.viewportY})`;
35:   }
36: }
37: // Set up interval to update cursor position display once per second
38: setInterval(updateCursorPositionDisplay, 1000);
39: // Helper function to check if a key is currently pressed
40: function isKeyDown(key) {
41:   return window.keysDown && window.keysDown[key] === true;
42: }
`````````

## File: js/settings.js
`````````javascript
  1: // settings.js - various TWEAK settings and their
  2: // knob-turnings go here
  3: /* Global Configuration & Shared Globals */
  4: // Define our current mountain biome and layer defaults.
  5: var currentBiome = "starterMountain";  // We're on the Starter Mountain by default.
  6: var currentMountainLayer = 1;          // Default layer (if you're using numeric layers)
  7: var currentLayerPercent = 25;          // Or if you're using percentages (0-100)
  8: var TWEAK = {
  9:     tweakNob: 1,
 10:     // Animal spawning and movement
 11:     minSpawnTime: 5000, // Minimum delay between spawns (5 sec)
 12:     maxSpawnTime: 10000, // Maximum delay between spawns (10 sec)
 13:     minIdleTime: 3000, // Minimum time an animal sits still (1 sec)
 14:     maxIdleTime: 8000, // Maximum time an animal sits still (20 sec)
 15:     minMoveSpeed: 5, // Slowest movement speed for animals
 16:     maxMoveSpeed: 11.2, // Fastest movement speed for animals
 17:     fleeAngle: 45, // This may be obsolete - confirm before removing
 18:     photoCooldown: 1000, // Must wait 1 second between photos
 19:     repeatPhotoPenalty: 0.5, // 50% less money if the same animal is photographed again
 20:     minAnimalSpawnDistance: 400,
 21:     maxAnimalSpawnDistance: 500,
 22:     bearSpawnProbability: 0.3, // 30% chance of a bear
 23:     bearSpeed: 6, // Bears move a bit slower
 24:     birdSpeed: 9, // Birds move faster
 25:     bearDetectionRadius: 150, // Bears detect player from farther away
 26:     birdDetectionRadius: 50, // Birds have smaller detection radius
 27:     maxAnimalPhotoDistance: 600, // Maximum distance for taking photos
 28:     // Jumping stuff
 29:     jumpType: "immediate",               // "immediate" or "charge" - DO NOT REMOVE
 30:     jumpCollisionMultiplier: 3,
 31:     jumpBaseAscent: 1000,                 // Base ascent time (ms)
 32:     jumpMaxHoldTime: 1000,               // Maximum charge duration (1 sec)
 33:     jumpPeakScale: 2,                    // Base peak visual jump scale
 34:     jumpHeightPerRocketSurgery: 0.05,    // Each level adds 5% to jump height
 35:     jumpTimePerRocketSurgery: 0.05,      // Each level adds 5% to jump duration
 36:     jumpZoomPerHeightIncrease: 0.5,      // For every 100% height increase, add 50% more zoom
 37:     // Re-Hit Jump System
 38:     reHitWindowStart: 0.70,              // When re-hit window opens (70% through jump)
 39:     reHitIndicatorScale: 2.5,            // Size multiplier for indicator circle
 40:     reHitIndicatorColor: "rgba(255, 0, 255, 0.4)",  // Bright magenta with more opacity
 41:     reHitIndicatorOutlineColor: "#FF00FF", // Solid magenta outline
 42:     reHitBonusDuration: 1.2,             // Duration multiplier for re-hit jumps
 43:     // Trick Physics Adjustments
 44:     parachuteGravityFactor: 0.8,         // Gravity reduction during parachute
 45:     airBrakeFrictionMultiplier: 0.85,    // Speed reduction during air brake
 46:     // Camera and aiming
 47:     basePOVAngle: 30,
 48:     optimalOpticsPOVIncrease: 5,
 49:     altitudeFlashMinSpeed: 200,
 50:     altitudeFlashMaxSpeed: 10,
 51:     altitudeGradientStart: "blue",
 52:     altitudeGradientEnd: "red",
 53:     // Photo scoring
 54:     basePhotoValue: 50, // Base money earned from a photo
 55:     altitudeMatchMultiplier: 2,
 56:     centerPOVMultiplier: 1.5,
 57:     fleeingAnimalMultiplier: 3,
 58:     // Animal multipliers
 59:     bearMultiplier: 1.5,
 60:     birdMultiplier: 1,
 61:     // House entry costs
 62:     houseEntryLoanDeduction: 0.005, // 0.5% loan deduction when entering house
 63:     // Underlying base values
 64:     _sledMass: 1.0,
 65:     _baseGravity: 0.1,
 66:     _baseHorizontalAccel: 0.25,
 67:     _baseFriction: 0.95,
 68:     _baseMaxXVel: 3,
 69:     _rocketSurgeryFactorPerLevel: 0.1,
 70:     _optimalOpticsAccelFactorPerLevel: 0.02,
 71:     _optimalOpticsFrictionFactorPerLevel: 0.005,
 72:     _fancierFootwearUpSpeedPerLevel: 0.3,
 73:     _baseUpSpeed: 2,
 74:     _baseCollisionsAllowed: 3,
 75:     _starterCash: 200, // Jacked up for testing
 76:     _bounceImpulse: 3,  // New bounce impulse value
 77:     // Trick system configuration
 78:     _trickCooldown: 5000,          // Base cooldown per trick (5 sec)
 79:     _trickTimeMultiplier: 1.0,     // Global trick duration multiplier
 80:     _trickTimeAdder: 0,            // Global trick duration additive time
 81:     _trickBaseDuration: 250,       // Base duration for tricks (ms)
 82:     _trickRotationSpeed: 720,     // Degrees per second for helicopter tricks (3 full spins)
 83:     _trickOffsetDistance: 40,      // Pixels to offset sled for air brake/parachute
 84:     _trickMoneyBase: 50,           // Base money earned per trick
 85:     _trickChainMultiplier: 1.5,    // Multiplier for chaining different tricks
 86:     // Getters to apply tweakNob multiplier
 87:     get sledMass() { return this._sledMass * this.tweakNob; },
 88:     set sledMass(val) { this._sledMass = val; },
 89:     get baseGravity() { return this._baseGravity * this.tweakNob; },
 90:     set baseGravity(val) { this._baseGravity = val; },
 91:     get baseHorizontalAccel() { return this._baseHorizontalAccel; },
 92:     set baseHorizontalAccel(val) { this._baseHorizontalAccel = val; },
 93:     get baseFriction() { return this._baseFriction; }, // * this.tweakNob
 94:     set baseFriction(val) { this._baseFriction = val; },
 95:     get baseMaxXVel() { return this._baseMaxXVel * this.tweakNob; },
 96:     set baseMaxXVel(val) { this._baseMaxXVel = val; },
 97:     get rocketSurgeryFactorPerLevel() { return this._rocketSurgeryFactorPerLevel * this.tweakNob; },
 98:     set rocketSurgeryFactorPerLevel(val) { this._rocketSurgeryFactorPerLevel = val; },
 99:     get optimalOpticsAccelFactorPerLevel() { return this._optimalOpticsAccelFactorPerLevel * this.tweakNob; },
100:     set optimalOpticsAccelFactorPerLevel(val) { this._optimalOpticsAccelFactorPerLevel = val; },
101:     get optimalOpticsFrictionFactorPerLevel() { return this._optimalOpticsFrictionFactorPerLevel * this.tweakNob; },
102:     set optimalOpticsFrictionFactorPerLevel(val) { this._optimalOpticsFrictionFactorPerLevel = val; },
103:     get fancierFootwearUpSpeedPerLevel() { return this._fancierFootwearUpSpeedPerLevel * this.tweakNob; },
104:     set fancierFootwearUpSpeedPerLevel(val) { this._fancierFootwearUpSpeedPerLevel = val; },
105:     get baseUpSpeed() { return this._baseUpSpeed * this.tweakNob; },
106:     set baseUpSpeed(val) { this._baseUpSpeed = val; },
107:     get baseCollisionsAllowed() { return this._baseCollisionsAllowed * this.tweakNob; },
108:     set baseCollisionsAllowed(val) { this._baseCollisionsAllowed = val; },
109:     get starterCash() { return this._starterCash * this.tweakNob; },
110:     set starterCash(val) { this._starterCash = val; },
111:     // New dynamic bounceImpulse getter/setter
112:     get bounceImpulse() { return this._bounceImpulse * this.tweakNob; },
113:     set bounceImpulse(val) { this._bounceImpulse = val; }
114: };
115: // New: function to compute max collisions
116: TWEAK.getMaxCollisions = function() {
117:     // Ensure playerUpgrades exists before accessing it
118:     return TWEAK.baseCollisionsAllowed + (typeof playerUpgrades !== "undefined" && playerUpgrades.sledDurability ? playerUpgrades.sledDurability : 0);
119: };
`````````

## File: !READ_FIRST-FILE_SUMMARY.txt
`````````
 1: ## JavaScript Files:
 2: 
 3: - **js/entities.js**: Manages collision detection, camera overlay rendering, and animal spawning/behavior mechanics, including drawing animal entities and handling animal fleeing behavior.
 4: - **js/game.js**: Controls the core game loop and state transitions, including initializing gameplay, managing UI elements, and handling game start and loan payment logic.
 5: - **js/input.js**: Handles global keyboard input tracking, including setting up event listeners for keydown and keyup events, and provides helper functions for checking key states.
 6: - **js/mechanics.js**: Manages core gameplay mechanics such as loan repayment, jump and trick systems, collision detection, and movement handling for downhill and uphill phases.
 7: - **js/player.js**: Defines the player object with all state variables, including position, velocity, camera angles, trick tracking, and jump state properties.
 8: - **js/render.js**: Contains the rendering logic for drawing the player, terrain, floating texts, camera overlays, and animals. Manages visual effects like trick animations and the Re-Hit indicator.
 9: - **js/upgrades.js**: Manages player and mountain upgrades, including upgrade costs, UI display logic, and purchase mechanics.
10: - **js/utils.js**: Provides utility functions and configurations, including game tweak parameters, audio functions, collision detection, mathematical helpers, and color interpolation utilities.
11: - **js/wildlifephotos.js**: Contains logic for the wildlife photography mini-game, including animal spawning, photo scoring, and managing animal behaviors like fleeing.
12: - **js/world.js**: Manages the generation of terrain and the awarding of money based on the player's distance traveled.
13: 
14: ## Project Files:
15: 
16: - **index.html**: Main HTML file linking JavaScript and CSS files, defines the game UI structure.
17: - **styles.css**: Contains the game's styling, including layout and visual styles for UI elements.
18: - **1.0_README.md**: Likely an initial readme or changelog document for version 1.0.
19: - **README.md**: Primary documentation file for the project, describing setup and usage instructions.
20: - **ROADMAP.md**: Outlines planned features and future development directions.
21: - **LICENSE.md**: Contains the licensing terms for the project.
22: - **.gitignore**: Specifies which files and directories should be ignored by version control.
23: - **todo.txt**: Simple text file listing tasks and development priorities.
24: - **!READ_FIRST-FILE_SUMMARY.txt**: Possibly an initial overview or summary of the project.
`````````

## File: docs/ROADMAP.md
`````````markdown
  1: # 📍 **SledHEAD Comprehensive Development Roadmap**
  2: 
  3: This document outlines the detailed path from the current implementation to the complete "1.0" version of **SledHEAD**, including the critical gameplay shift to an **Up-Then-Down** stamina-based mechanic.
  4: 
  5: ---
  6: 
  7: ## 🎯 **Core Concept**
  8: You are an **aspiring sledding champion** who has purchased an entire **procedurally generated mountain** to train and broadcast your extreme sled runs. To fund your dream, you’ve opened the slopes to the public, attracting:
  9: 
 10: - **Casual Tourists** – Regular visitors who use the mountain but don’t care about you.  
 11: - **Fans & Followers** – Devoted viewers who cheer, hype you up, and even offer in-game boosts.  
 12: 
 13: Your goal is to master the mountain, **optimize runs for speed and tricks**, and **grow your fanbase**. The **better your performance, the more money you earn**, allowing you to invest in **personal upgrades, and mountain expansions**.
 14: 
 15: ## 🎯 **Gameplay Loop Overview**
 16: - Players start at the mountain's base, managing stamina as they climb upward.
 17: - Strategic decision-making to sled down for rewards before stamina depletion.
 18: - Higher altitudes host rare wildlife, higher rewards, and greater risks.
 19: 
 20: ---
 21: 
 22: ## 🌄 **Segmented Cylinder Wrapping (Layered Mountain Structure)**  
 23: **Handling Horizontal Wrapping at Different Elevations**
 24: 
 25: To create the effect of a **finite mountain with wraparound sides**, SledHEAD uses a **layered cylindrical system** instead of a continuous cone. The mountain is divided into **stacked segments**, each with its own **fixed circumference** that gets **smaller as you go higher**. This allows for a **consistent wraparound mechanic** while keeping movement predictable.
 26: 
 27: ### 🏔️ **How It Works:**
 28: - Each **layer** is a separate horizontal zone, like a **floating ring** around the mountain.  
 29: - If a player **crosses the left or right boundary** of a layer, they seamlessly wrap around to the other side.  
 30: - **Lower layers are wider**, giving more horizontal space.  
 31: - **Upper layers are narrower**, meaning wraparound happens sooner.  
 32: 
 33: ### ⬆️⬇️ **Moving Between Layers**
 34: When transitioning **between vertical segments**:
 35: 1. If the player **moves downward** past the bottom boundary of a layer:
 36:    - They **teleport to the top boundary** of the layer below.  
 37:    - Their **horizontal position scales** based on the new circumference to maintain a proportional location.  
 38:    
 39:    ```pseudocode
 40:    scale_factor = new_layer.circumference / old_layer.circumference
 41:    x_new = x_old * scale_factor
 42: 
 43: 2. If the player **moves upward** past the top boundary of a layer:
 44:    - They **appear at the bottom** of the next layer up with **their horizontal position **scaled.
 45: 
 46: ### 🏁 **Gameplay Implications**
 47:    - Predictable & Manageable: Keeps wraparound and movement feeling natural while allowing for different gameplay per layer.
 48: 
 49: ### **Layer-Specific Challenges**:
 50:    - Broader paths at lower levels = more open sledding.
 51:    - Tighter paths at higher levels = more technical, precision-based gameplay.
 52:    - Performance-Friendly: Each layer is an isolated map segment, simplifying collision checks and procedural generation.
 53: 
 54: ---
 55: 
 56: ## 🌄 **Light/Dark Gradient Altitude System**
 57: 
 58: - Introduce a dynamic visual gradient where snow and terrain visually shift, with the snow at higher altitudes lighter due to being cleaner, and the snow downhill from you appears darker (due to the dirt and debres that flows down hill). 🚀
 59: - The gradient will provide a dynamic natural visual guide for players to intuitively gauge altitude and plan their climbs and descents. 🎯
 60: 
 61: ---
 62: 
 63: ## 🌎 **Procedural World & Persistence**
 64: 
 65: - The mountain remains consistent during a playthrough.  
 66: - **New terrain is only generated when starting a new game.**  
 67: - The current **seed is displayed at home**, and players can enter a **custom seed for a specific mountain.**  
 68: - **Changes per run:**
 69:   - Tourists & fans shift positions.  
 70:   - Weather may change dynamically.  
 71:   - Wildlife encounters vary.
 72: 
 73: ---
 74: 
 75: ## 🎢 Gameplay Loops
 76: **Progression Goals:**  
 77: - **Prototype:** Repay the cost of the mountain.  
 78: - **Full Game:**  
 79:   - Stage 1: Repay your house, unlocking initial "Mountain" upgrades like ski lifts.  
 80:   - Stage 2: After paying off your mountain, a much bigger debt unlocks a new mountain (with fresh environments like Lava Mountain, Space Mountain, and Underwater Mountain).  
 81:   - Note: You'll start off with zero mountain upgrades but keep your personal upgrades.  
 82:   - Unique upgrades are required to access each new mountain, with limited availability—though more snowy peaks are always around to explore!
 83: ### **⬆️1️⃣ Uphill Phase: Climbing & Exploration**
 84: #### 🚶 **Top-down adventure traversal with stamina management and exploration.**  
 85: - **Goal:** Ascend to the top **by hiking, using ski lifts, snowmobiles, or taking shortcuts**.  
 86: - **Stamina System:**  
 87:   - Stamina drains when moving.  
 88:   - Replenished by **food stands, resting points, or upgrades**.  
 89: - **Wildlife Photography Mini-Game 📸** *(Active only in Uphill Phase)*  
 90:   - **Random animals appear every few seconds (TWEAK variable).**  
 91:   - Animals either **stay still and will run if you get too close.** Eventually they will **wander off**.  
 92:   - **Use the Left & Right Arrow Keys to aim the camera cone** around your character.  
 93:   - **Align the altitude line (using the Up & Down Arrow Keys)** with the animal’s altitude for a perfect shot.  
 94:   - **Photos earn money, with multipliers for:**  
 95:     - Accuracy (center of POV cone).  
 96:     - Altitude match precision.  
 97:     - Moving vs. stationary targets (moving = 3x value).
 98:     - Animal Rarity (more exotic animals the further up the mountain you are).
 99: 
100: ### **⬇️2️⃣ Sledding Phase (Downhill)**
101: 💨 **Fast-paced, high-speed, gravity-driven sledding with a trick system.**  
102: - **Goal:** Reach the bottom as efficiently as possible while **navigating obstacles, taking shortcuts, and pulling off tricks** for extra cash.  
103: - **Terrain:** Procedurally generated **rocks, ramps, cliffs, ski lifts, obstacles, and hidden paths**.  
104: - **Obstacles:**
105:   - **Tourists**: Sometimes move out of the way, sometimes don’t.
106:   - **Fans**: Cheer you on & give you **boosts** if you impress them.
107:   - **Moving Hazards**: Ski patrol, rogue snowmobiles, loose sleds.  
108: - **Weather Effects:** Wind, fog, snow drifts, and ice patches change difficulty dynamically.  
109: - **Time Trials:**  
110:   - Activated by **hitting a time trial activator** (e.g., checkpoint, gate, or radar timer).  
111:   - **Your time between activators determines your bonus.**  
112:   - **Faster times = more money!**  
113:   - Not all runs are timed; only those where you activate a trial.
114: 
115: ### 🏠3️⃣ **Management Phase (House & Upgrades)**
116: 🏡 **Upgrade your gear, mountain, and social media presence.**  
117: - **Spend earned money on:**
118:   - **Personal Upgrades:** Increase sledding ability, climbing endurance, photography precision.  
119:   - **Sled Upgrades:** Speed, handling, trick potential.  
120:   - **Mountain Upgrades:** Add ski lifts, shops, and fans to boost income & challenge.  
121: - **New Game Start:**  
122:   - Mountain **ONLY regenerates when starting a completely new game.**  
123:   - **A seed system** lets players enter a specific seed for reproducible terrain.  
124:   - **Current seed is displayed at home.** 
125: 
126: ---
127: 
128: ## 🏡 **Tutorial Level: Childhood Memories on Grandpa’s Hill**  
129: **Learning the Basics in a Cozy, Story-Driven Introduction**
130: 
131: Before tackling the **massive procedural mountains** of SledHEAD, players start with a heartwarming **tutorial level**, set in a **quiet rural winter landscape**. This **flashback sequence** lets players experience sledding as a **young child**, learning the fundamental mechanics under the guidance of their **grandfather**.
132: 
133: ### 📜 **Narrative Setup**
134: The game opens on a **small, snow-covered hill** just outside a **cozy cabin**, where the protagonist—**a child version of themselves**—is spending time with their **grandfather** on a crisp winter afternoon. Grandpa is **wrapped up in a warm coat, standing at the base of the hill after sledding down himself**, watching proudly as the player **takes their maiden toboggan run, learning to sled**. The sky glows with the **soft oranges and purples of a winter sunset**, setting a nostalgic and peaceful mood.
135: 
136: Before long, Grandpa gives a gentle laugh:  
137: > **"Ahh, y'know, I used to be the best sledder on this hill... but these ol' legs don’t have the stamina they used to! You go on, get a few more runs in—I’ll watch and cheer ya on from here! And remember - the snow's always whiter above you, and dirtier below!"**  
138: 
139: With that, the tutorial **fully hands control to the player**, reinforcing the **stamina system** and setting up a meaningful reason to **manage energy wisely**.
140: 
141: ---
142: 
143: ## 🎮 **Tutorial Mechanics Introduced**
144: The tutorial unfolds organically through **simple, playful challenges**, without heavy UI elements. Players **learn by doing**, with Grandpa offering **gentle, supportive guidance**.
145: 
146: ### **⬆️ Walking Uphill (Basic Movement & Stamina)**
147: - Players move **uphill by walking**, learning that **whiter snow = uphill, darker snow = downhill**.  
148: - Moving uphill **drains stamina** gradually.  
149: - Grandpa occasionally calls out:
150:   > **"You’re strong, kid! But ya gotta pace yourself—harder climbs mean ya gotta rest up after!"**
151: 
152: ### **🛷 Sledding Downhill (Turning & Speed Control)**
153: - Players start **at the top of the small hill** and practice their **first sled run**.  
154: - **Turning left/right** is introduced, along with simple speed adjustments.  
155: - Grandpa **cheers when the player makes a smooth turn**:
156:   > **"Look at that! You’re a natural! Sleddin’s all about balance—lean just right and the hill will do the rest!"**
157: 
158: ### **🔄 Climbing & Repeating Runs**
159: - After a few runs, Grandpa suggests:
160:   > **"Why don’t ya take a few more runs? See if ya can get all the way to the bottom without wipin’ out!"**  
161: - The player is **free to keep practicing**, reinforcing that **sledding is about trial and improvement**.  
162: - The game subtly **introduces self-motivated play**, rewarding experimentation.
163: 
164: ### **🏁 Tutorial Completion**
165: - Once the player **feels confident**, a final sled run **transitions seamlessly into the present day**, cutting to the **modern protagonist** standing atop their massive new mountain.
166: - **Grandpa’s words echo**, setting the tone for the adventure ahead:
167:   > **"One day, you’ll take on bigger mountains than this… but no matter how high you go, never forget the joy of the ride."**  
168: - The camera pulls back, revealing the **full mountain**, and gameplay transitions into the **core SledHEAD experience**.
169: 
170: ---
171: 
172: ## ✨ **Why This Works**
173: - **Emotionally Engaging** – Connects the player to their childhood roots and motivation.  
174: - **Smooth Learning Curve** – Teaches fundamental mechanics **without forced tutorials**.  
175: - **Worldbuilding & Nostalgia** – Grandpa’s wisdom adds charm and meaning to the stamina system.  
176: - **Seamless Transition to Main Game** – Keeps momentum going without feeling like a "tutorial level."  
177: 
178: This opening ensures that **players feel connected to their journey**—from childhood sledding to **becoming a sledding legend**. 🎿🔥  
179: 
180: ---
181: 
182: ## ✨ **Trick System (For Extra Cash & Fan Engagement)**
183: Performing tricks during downhill runs boosts **viewer engagement, increasing cash rewards**.
184: 
185: 1. **☁️🪂 Parachute (Up, Down)**  
186:    You hold the sled over your head like a big ol’ parachute, slowing your vertical descent so you can hang in the air longer, just like floatin’ on a cloud, eh?  
187:    **Pixel Art Representation:**  
188:    The rider lifts the sled high above their head, arms fully extended. The sled tilts slightly, mimicking a floating parachute. Small pixelated wind streaks or snow particles drift upward to indicate reduced descent speed.
189: 
190: 2. **🛑🎿 Air Brake (Up, Up)**  
191:    Hold that sled out behind you like a makeshift air brake to suddenly slow down your lateral speed—kinda like when a kitty makes a quick stop!  
192:    **Pixel Art Representation:**  
193:    The rider holds the sled behind them at an angle, legs bent forward to emphasize the sudden slowdown. A few small speed lines in front of the rider suddenly cut off, highlighting the braking effect.
194: 
195: 3. **🔄⬅️ Sled Flip Back (Down, Left)**  
196:    A full backward flip that sends the sled over your head in a smooth reverse rotation, perfect for showin’ off your style.  
197:    **Pixel Art Representation:**  
198:    The sled and rider rotate backward together in a fluid animation, leaving a subtle motion blur trail behind to emphasize speed.
199: 
200: 4. **🔄➡️ Sled Flip Front (Down, Right)**  
201:    Flip forward with a quick rotation that launches you off the ramp—fast, fun, and full of flair!  
202:    **Pixel Art Representation:**  
203:    The sled and rider rotate forward rapidly, briefly showing a silhouetted mid-flip pose for a cool spinning effect.
204: 
205: 5. **🚁⬅️ Helicopter Spin Left (Left, Left)**  
206:    Spin the sled horizontally like a mini helicopter twirlin’ left—watch that pixel art blur as it slices through the air.  
207:    **Pixel Art Representation:**  
208:    The sled remains under the rider while spinning rapidly to the left, with small curved motion lines surrounding it to emphasize rotation.
209: 
210: 6. **🚁➡️ Helicopter Spin Right (Right, Right)**  
211:    Just like its twin but twirlin’ right—this trick’s all about that rapid, smooth spin, buddy.  
212:    **Pixel Art Representation:**  
213:    Identical to Helicopter Spin Left but mirrored to the right, with the same spinning blur effect and curved lines.
214: 
215: 7. **🦸‍♂️✨ Superman (Down, Down)**  
216:    Channel your inner superhero by extending your arms like Superman while holding the sled with both hands—pure power and style on the slopes!  
217:    **Pixel Art Representation:**  
218:    The rider extends both arms forward, body stretched out like they’re flying. The sled tilts slightly backward for a dramatic effect.
219: 
220: 8. **🌪️➡️ Sky Dive Roll Right (Up, Right)**  
221:    Push the sled off and roll to the right in mid-air, spreadin’ out like you’re dancin’ through the sky with a freefall vibe.  
222:    **Pixel Art Representation:**  
223:    The rider tumbles sideways while the sled momentarily drifts away, before they reach out to grab it again.
224: 
225: 9. **🌪️⬅️ Sky Dive Roll Left (Up, Left)**  
226:    The same cool roll but to the left—it's like floatin’ and twistin’ in the air, makin’ it look effortless.  
227:    **Pixel Art Representation:**  
228:    Mirrored version of Sky Dive Roll Right, with the same falling motion effect and mid-air recovery animation.
229: 
230: 10. **👻🔥 Ghost Rider (Left, Right)**  
231:     Push the sled away and, like a ghostly apparition, grab it back before you land—spooky and smooth all at once.  
232:     **Pixel Art Representation:**  
233:     The rider momentarily separates from the sled, which drifts forward with a slight transparency effect before being grabbed again.
234: 
235: 11. **🎿🔄 Toboggan Toss (Right, Left)**  
236:     Let go of the sled mid-air, spin yourself a full 360° and land back on it—like tossin’ your worries away with a big, wild spin!  
237:     **Pixel Art Representation:**  
238:     The rider performs a spinning animation while the sled briefly floats below them, before they land back on it.
239: 
240: 12. **🌀➡️ Corkscrew Right (Right, Down)**  
241:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew rightward, leaving a trail of style behind you.  
242:     **Pixel Art Representation:**  
243:     The rider and sled rotate diagonally in sync, creating a swirling corkscrew motion with a slight trailing blur.
244: 
245: 13. **🌀⬅️ Corkscrew Left (Left, Down)**  
246:     Mix a flip and a spin into one diagonal barrel roll—twist and turn like a corkscrew leftward, leaving a trail of style behind you.  
247:     **Pixel Art Representation:**  
248:     Same as Corkscrew Right, but mirrored to the left with identical motion blur effects.
249: 
250: 14. **✨⬆️ Falling Star (Down, Up)**  
251:     In mid-air you let go of the sled for a moment to do a "star pose" (legs and arms spread wide) before getting back on the sled.  
252:     **Pixel Art Representation:**  
253:     The rider spreads their limbs wide in mid-air, with small sparkling effects around them before returning to the sled.
254: 
255: 15. **🌍➡️ Orbit Spin Clockwise (Right, Up)**  
256:     Launching into the air, the rider grips the board firmly in front of them, rotating a full 360° to the right (clockwise) while suspended in mid-air like a satellite caught in orbit.  
257:     **Pixel Art Representation:**  
258:     The sled and rider spin together in a tight, controlled orbit-like motion, with a circular blur trailing behind.
259: 
260: 16. **🌍⬅️ Orbit Spin Counterwise (Left, Up)**  
261:     With an explosive lift-off, the rider soars into the sky, clutching their board tightly while spinning a complete 360° to the left (counterclockwise) in a controlled, weightless rotation.  
262:     **Pixel Art Representation:**  
263:     Identical to Orbit Spin Clockwise, but mirrored leftward, keeping the same smooth circular motion and blur effect.
264: 
265: *💡 Later Upgrade:* **"Sledboarding"** unlocks snowboard-style **grinds, flips, and advanced tricks**.
266: 
267: ### **Hazards & Interactions:**
268: - **Tourists:** Sometimes they move, sometimes they don’t—dodge carefully!
269: - **Fans:** If you impress them with tricks, they’ll cheer you on and even give you boosts.
270: - **Ice Patches:** Reduce control and make turns trickier.
271: - **Snow Drifts & Ramps:** Use them for sick air and trick opportunities.
272: - **Time Trial Activators:** If you pass through one, your downhill time is tracked—faster times mean better rewards!
273: 
274: ---
275: 
276: ## 🔧 **Upgrade System**
277: 
278: ### 🧑‍🎿 Personal Upgrades (Character Enhancements)
279: | Upgrade                    | Effect                                             |
280: |----------------------------|----------------------------------------------------|
281: | 🚀 **Rocket Surgery**      | Faster acceleration & top speed.                 |
282: | 🎮 **Optimal Optics**      | Increases camera POV for better wildlife photos.   |
283: | 🛡️ **Sled Durability**     | +1 collision allowed before crash.               |
284: | 🥾 **Fancier Footwear**    | Faster hiking speed, better grip.                  |
285: | ❄️ **Grappling Anchor**    | Hook onto terrain for shortcuts.                 |
286: | 💪 **Attend Leg Day**      | Reduces stamina cost while climbing.             |
287: | 🏔️ **Shortcut Awareness**  | Reveals hidden shortcuts.                          |
288: | 📣 **Crowd Hypeman**       | More fans = bigger trick bonuses.                |
289: | 🚶‍♂️ **Crowd Weaver**      | Non-fan tourists dodge more often.               |
290: | 🌨️ **Weather Warrior**     | Reduces negative weather effects.                |
291: 
292: ### 🏔️ Mountain Upgrades (Resort Expansion)
293: | Upgrade                        | Effect                                                         |
294: |--------------------------------|----------------------------------------------------------------|
295: | 🚡 **High-Speed Ski Lifts**    | Lets you quickly ride back up.                                 |
296: | 🏎️ **Snowmobile Rentals**      | You can rent snowmobiles for faster ascents.                   |
297: | 🍔 **Food Stalls**             | Generates money & restores stamina.                            |
298: | 🏁 **Groomed Trails**          | Grants occasional speed boosts.                                |
299: | ⛑️ **First-Aid Stations**      | Heal after crashes.                                            |
300: | 📷 **Scenic Overlooks**        | Passive income & potential shortcuts.                          |
301: | 📢 **Ramp-Billboards**         | Generates ad revenue & doubles as ramps.                       |
302: | 🏨 **Resort Lodges**           | Adds new starting locations for runs.                          |
303: | 🌙 **Night Lighting**          | Enables nighttime runs with bonus rewards.                     |
304: | ❄️ **Weather Control**         | Modify conditions for different challenges.                    |
305: 
306: ---
307: 
308: ## 🎮 **Mini-Games in SledHEAD**
309: 
310: ### 1. **Animal Photography** 📸🐾
311: - **Objective:**  
312:   Capture high-quality photos of rare and elusive wildlife while climbing uphill.
313: - **Mechanics:**  
314:   - **Camera Controls:** Zoom, motion tracking, shifting **POV cone**, and matching the **altitude line** with the target.  
315:   - **Wildlife Behavior:** Animals spawn randomly (every 5–10 sec) and may stay still (1–20 sec) or move unpredictably (moving targets grant 3x more money).  
316:   - **Scoring Bonuses:**  
317:     - **Altitude Match Multiplier**  
318:     - **POV Centering Bonus**  
319:     - **Speed Capture Bonus**  
320: - **Upgrades:**  
321:   - **Optimal Optics:** Increases the camera’s POV cone.  
322:   - **Steady Hands:** Reduces camera sway.  
323:   - **Animal Baiting:** Increases rare animal appearance.
324: - **Special Events:**  
325:   - **Rare Animal Sightings** and **Storm Photography**.
326: - **Risk/Challenge:**  
327:   - **Repeat Photo Penalty** and aggressive animal disruptions.
328: 
329: ---
330: 
331: ### 2. **Fishing** 🎣🐟  
332: - **Objective:**  
333:   Catch fish using various techniques and bait types.
334: - **Mechanics:**  
335:   - Dynamic water simulation with varied fish behaviors.  
336:   - Choose your bait, casting angle, and reel technique (e.g., slow pull, rapid jerk, deep drag).  
337:   - Legendary fish yield major rewards.
338: - **Upgrades:**  
339:   - Stronger fishing lines, advanced lures, and sonar detection.
340: - **Special Events:**  
341:   - Fishing tournaments and rare migration patterns.
342: - **Risk/Challenge:**  
343:   - Line snapping and predator interference.
344: 
345: ---
346: 
347: ### 3. **Lockpicking in Abandoned Buildings** 🔐🏚️  
348: - **Objective:**  
349:   Unlock doors, safes, and hidden compartments.
350: - **Mechanics:**  
351:   - Use tools like **rakes, hooks, and tension wrenches**.  
352:   - Navigate traps such as alarms and rusted internals.
353: - **Upgrades:**  
354:   - High-quality picks, electronic bypass tools, and vibration sensors.
355: - **Special Events:**  
356:   - Timed heists and races with rival scavengers.
357: - **Risk/Challenge:**  
358:   - Unstable buildings and hazards that may alert authorities.
359: 
360: ---
361: 
362: ### 4. **Treasure Hunting** 🏴‍☠️🔍  
363: - **Objective:**  
364:   Find buried treasure using maps, clues, and metal detectors.
365: - **Mechanics:**  
366:   - Decode old maps, identify landmarks, and use metal detectors for precision.  
367:   - Digging requires stamina management and upgraded tools.
368: - **Upgrades:**  
369:   - Advanced metal detectors, excavation tools, and digging drones.
370: - **Special Events:**  
371:   - NPC treasure races and secret cache discoveries.
372: - **Risk/Challenge:**  
373:   - Booby traps, hostile environments, and law enforcement risks.
374: 
375: ---
376: 
377: ### 5. **Kite Flying** 🪁🌬️  
378: - **Objective:**  
379:   Control a kite during uphill climbs, then reap aerial bonuses during sled runs.
380: - **Mechanics:**  
381:   - **Uphill:** Switch to a Guitar Hero-style directional arrow input to keep the kite stable.  
382:   - **Downhill:** Kites extend air time and grant special bonuses.
383: - **Upgrades:**  
384:   - **Glide Boost, Speed Stream, and Aero Control.**
385: - **Special Events:**  
386:   - **Storm Riding** with higher boosts but riskier winds.
387: - **Risk/Challenge:**  
388:   - Strong gusts may destabilize your kite.
389: 
390: ---
391: 
392: ### 6. **Prospecting (Pan & Pickaxe Mining)** ⛏️💎  
393: - **Objective:**  
394:   Search for valuable minerals, gems, and gold.
395: - **Mechanics:**  
396:   - Explore rivers, caves, and rock formations.  
397:   - **Panning:** Swirl water to separate gold.  
398:   - **Pickaxe Mining:** Break rocks for hidden gems.
399: - **Upgrades:**  
400:   - High-tech panning kits, seismic scanners, precision drills.
401: - **Special Events:**  
402:   - Gold rush hotspots, rare mineral finds, and cave-ins.
403: - **Risk/Challenge:**  
404:   - Unstable ground and rival prospectors.
405: 
406: ---
407: 
408: ### 7. **Cryptid Fossil Digging** 🦴🔍  
409: - **Objective:**  
410:   Unearth and assemble fossils of **Champ**, the legendary cryptid of Lake Champlain.
411: - **Mechanics:**  
412:   - Use brushes, chisels, and excavation tools to reveal fossils.  
413:   - Transport fossils to the museum at the base of the first mountain.
414: - **Upgrades:**  
415:   - Precision excavation kits, automated digging arms, and fossil resin stabilizers.
416: - **Special Events:**  
417:   - Competing paleontologists and hidden dig sites.
418: - **Risk/Challenge:**  
419:   - Fragile fossils, extreme weather, cave-ins, and unexpected cryptid sightings.
420: 
421: ---
422: 
423: ### 8. **Sled Tricking** 🛷✨  
424: - **Objective:**  
425:   Chain together aerial sled tricks to earn cash and boost fan engagement.
426: - **Mechanics:**  
427:   - Utilize a trick system featuring helicopter spins, flips, air brakes, corkscrews, and ghost rider moves.  
428:   - Chain tricks for higher multipliers.
429: - **Upgrades:**  
430:   - Trick-enhancing sled mods, jump-boosting gear, and aerial control boosters.
431: - **Special Events:**  
432:   - Trick challenges and fan-requested stunt competitions.
433: - **Risk/Challenge:**  
434:   - Mistimed tricks can cause crashes and loss of earnings.
435: 
436: ---
437: 
438: ### 9. **Time Trial Racing** 🏁🛷  
439: - **Objective:**  
440:   Trigger time trial races by hitting gates while sledding for money rewards.
441: - **Mechanics:**  
442:   - Crossing a time trial gate starts a timer.  
443:   - The faster and further you go, the more money you earn.
444: - **Why It Fits:**  
445:   - Seamlessly integrates as a high-speed challenge within the sledding phase.
446: 
447: ---
448: 
449: ### 10. **RC Motor Sled** ❄️🏎️  
450: - **Objective:**  
451:   Control a high-speed RC snowmobile for scouting, trick-based racing, and retrieving stamina-boosting supplies.
452: - **Mechanics:**  
453:   - Maneuver nimble RC sleds across frozen tundra.  
454:   - Nitro boosts and mid-air tricks enhance performance.  
455:   - Customization options include different sled bodies, engines, and handling upgrades.
456: - **Special Events:**  
457:   - Avalanche races, night rides, and hazard runs.
458: - **Risk/Challenge:**  
459:   - Limited battery life, high winds, and signal loss in deep snow.
460: 
461: ---
462: 
463: ### 11. **Sap Sugaring** 🍁🔥  
464: - **Objective:**  
465:   Tap into nature’s sweetest resource—maple syrup! Harvest sap from trees to create energy-restoring treats and valuable trade goods.  
466: - **Mechanics:**  
467:   - Start by tapping maple trees on the starter mountain.  
468:   - Explore new regions to discover exotic trees like the **Cinderwillow** on Volcano Mountain, producing rare and powerful saps.  
469:   - Upgrade your tapping tools and storage tanks to increase yield and quality.  
470: - **Upgrades:**  
471:   - **Precision Taps:** Extract sap faster with reduced waste.  
472:   - **Insulated Buckets:** Prevent spoilage and maximize collection.  
473:   - **Sap Refinery:** Process sap into premium syrup with added benefits.  
474: 
475: ---
476: 
477: ### 12. **Beekeeping** 🐝🍯  
478: - **Objective:**  
479:   Raise and breed bees to produce high-quality honey and wax, each offering unique benefits for sledding, income, and buffs.  
480: - **Mechanics:**  
481:   - Manage beehives and optimize honey production.  
482:   - Crossbreed bees to develop specialized traits.  
483:   - Explore forests to find and capture new queen bees.  
484:   - Maintain hive conditions to ensure steady honey and wax yields.  
485: - **Upgrades:**  
486:   - **Deluxe Hives:** Improve bee happiness and productivity.  
487:   - **Queen Breeding Chambers:** Unlock advanced genetic traits for custom honey effects.  
488:   - **Protective Suits & Smokers:** Handle bees safely and reduce swarm risks.  
489: - **Special Events:**  
490:   - **Swarm Rescues:** Save lost colonies for rare genetic lines.  
491:   - **Beekeeper Pete’s Challenges:** Complete tricky hive management tasks for rewards.  
492: 
493: ---
494: 
495: ## 🌆 **NPCs & Mountain Ecosystem**
496: A thriving **mountain resort** needs a mix of **essential services, skilled specialists, and quirky legends**. These NPCs **enhance gameplay, create dynamic events, and unlock hidden mechanics**.
497: 
498: ---
499: 
500: ### 🏡 **Core Resort & Business Owners (Essential Infrastructure)**
501: These **support your base mountain**—they run the town, drive your economy, and keep the game loop running.
502: 
503: #### 🏂 **Sled Tech Steve**
504: - **Purpose:** Repairs damage, sells sled mods.
505: - **Example Upgrades Unlocked:** **Custom wax, shock absorbers, reinforced sleds.**
506: - **Best Quote:** *"What’d ya do, run into a bear during a race? I can fix it… for a price."*
507: 
508: #### 🍔 **Food Vendor**
509: - **Purpose:** Sells food that provides **stamina buffs & temporary performance boosts**.
510: - **Example Menu:** **Hot cocoa (warmth boost), Protein bars (stamina regen), Energy drinks (speed burst).**
511: - **Best Quote:** *"You can't land tricks on an empty stomach!"*
512: 
513: #### 🎈 **Lift Operator Jay** *(kite enthusiast)*
514: - **Purpose:** Manages lifts, introduces **kite mechanics** for gliding shortcuts.
515: - **Example Unlocks:** **Kite rentals, lift season passes, wind path hints.**
516: - **Best Quote:** *"Ever thought about catching air... without your sled?"*
517: 
518: #### 🏨 **The Hotel Hostess**
519: - **Purpose:** Offers accommodations & **passive income based on popularity**.
520: - **Example Unlocks:** **Penthouse suites, reputation perks, tourism boosts.**
521: - **Best Quote:** *"The more people love this place, the more we all win."*
522: 
523: #### 🏪 **Convenience Store Owner Tilly**
524: - **Purpose:** Sells consumables, **prospecting gear**, and utility tools.
525: - **Example Stock:** **Batteries, flares, bait, shovels.**
526: - **Best Quote:** *"You never know when you’ll need an extra pack of hand warmers."*
527: 
528: #### 🏔️ **Resort Manager Montana Snow**
529: - **Purpose:** Oversees **mountain upgrades & expansion.**
530: - **Example Unlocks:** **New trails, safety patrols, winter festivals.**
531: - **Best Quote:** *"A bigger, better mountain keeps ‘em coming back!"*
532: 
533: ---
534: 
535: ### 🏆 **Trick & Racing-Oriented NPCs**
536: These **drive skill progression**—unlocking **better tricks, harder competitions, and high-stakes challenges**.
537: 
538: #### 📸 **Hype Photographer Darlene**
539: - **Purpose:** **Photo verification & bonus earnings** for sick tricks.
540: - **Example Unlocks:** **Sponsor deals, cinematic trick replays.**
541: - **Best Quote:** *"If it ain't on camera, did it even happen?"*
542: 
543: #### 🏅 **Stunt Organizer Whistler**
544: - **Purpose:** Hosts **extreme challenge events**—big air, freestyle sessions.
545: - **Example Unlocks:** **Timed trick courses, skydiving sled events.**
546: - **Best Quote:** *"I wanna see something so crazy I forget my own name!"*
547: 
548: #### 🏁 **Race Commissioner Cannon**
549: - **Purpose:** Runs **competitions & time trials**.
550: - **Example Unlocks:** **Speed sleds, racing circuits, timed event boards.**
551: - **Best Quote:** *"Fastest run gets the trophy—simple as that."*
552: 
553: #### 🏂 **Retired Pro Burton**
554: - **Purpose:** **Teaches advanced tricks & unlocks sledboarding**.
555: - **Example Unlocks:** **Sled-to-board transitions, trick combos.**
556: - **Best Quote:** *"Back in my day, we landed tricks with style. I can show ya how."*
557: 
558: ---
559: 
560: ### 🏔️ **World-Building & Exploration NPCs**
561: These **add depth, side quests, and hidden mechanics** to the world.
562: 
563: #### 🐾 **Wildlife Researcher**
564: - **Purpose:** Tracks **rare animal spawns, photographic missions, fishing spots.**
565: - **Example Unlocks:** **Bear sightings, falcon partner, eco-tourism quests.**
566: - **Best Quote:** *"You ever seen a snow leopard up close? Neither have I… yet."*
567: 
568: #### 🚑 **Sled Patrol Captain**
569: - **Purpose:** Leads **rescue missions & avalanche drills.**
570: - **Example Unlocks:** **Emergency sled deployment, survival training.**
571: - **Best Quote:** *"We save people, we don’t just watch ‘em wipe out."*
572: 
573: ---
574: 
575: ### 🎭 **Traveling & Recurring NPCs**
576: They **come and go**, bringing **special challenges, rare gear, and unpredictable encounters**.
577: 
578: #### 🔥 **Rival**
579: - **Purpose:** **Dynamic trick/time trial duels.**
580: - **Example Unlocks:** **Personalized callouts, grudge matches, rare sled decals.**
581: - **Best Quote:** *"You think you’re better than me? Prove it."*
582: 
583: #### 🎩 **Mysterious Merchant**
584: - **Purpose:** **Sells rare & high-risk tech**—limited stock, always random.
585: - **Example Stock:** **Prototype sled engines, cloaking wax, ghost sled.**
586: - **Best Quote:** *"I sell only to those who dare."*
587: 
588: #### 🔧 **Tinkerer**
589: - **Purpose:** **Experimental tech**—RC sleds, lock-picking, custom builds.
590: - **Example Unlocks:** **Remote sleds, grappling hooks, hacking upgrades.**
591: - **Best Quote:** *"You didn’t hear this from me, but I might’ve… *enhanced* a sled or two."*
592: 
593: ---
594: 
595: ### ❄️ **Legendary NPCs**
596: These are **mythic figures**, unlocking **wild game mechanics, hidden areas, and secret challenges**.
597: 
598: #### 🌨️ **Winter Shaman Bromley**
599: - **Purpose:** **Controls weather effects**—snowstorms, icy terrain, wind boosts.
600: - **Example Unlocks:** **Weather manipulation quests, legendary snowboards.**
601: - **Best Quote:** *"The mountain speaks… and I listen."*
602: 
603: #### 🐻 **Bear Whisperer Carrie**
604: - **Purpose:** Unlocks **bear-racing.**
605: - **Example Unlocks:** **Bear races, such as Time Trials and Elimination.**
606: - **Best Quote:** *"Bears don’t bite... if you know how to ask nicely."*
607: 
608: #### 🐝 **Beekeeper Pete**
609: - **Purpose:** Sells **beekeeping upgrades**.
610: - **Example Unlocks:** **Speed honey, frost-resistant sled wax.**
611: - **Best Quote:** *"Snow bees? Oh yeah, they’re real… and fast."*
612: 
613: #### ⏳ **The Time Traveler**
614: - **Purpose:** Unlocks **cryptid fossil digging & timeline anomalies.**
615: - **Example Unlocks:** **Ancient sleds, legendary trails, prehistoric snowboard challenges.**
616: - **Best Quote:** *"The past isn’t gone—it’s just buried under the snow."*
617: 
618: ---
619: 
620: ## 🎮 Enhanced Controls & UI Improvements
621: - Fully customizable control remapping
622: - Comprehensive tutorial and onboarding systems
623: - Improved HUD clarity (stamina, trick scoring, wildlife photography)
624: 
625: ---
626: 
627: ## 🏔️ **Mountain Themes & Progression**
628: 
629: ### Lava Mountain 🌋
630: - **Description:** Sizzling volcanic slopes with flowing lava rivers, steaming geysers, and rocky outcrops. Watch out for molten streams, lava bombs, and volcanic tremors.  
631: - **Mechanics:**  
632:   - **Heat Meter:** Overheat means game over unless you hit cool-off zones.  
633:   - **Ash Clouds:** Temporarily block visibility.
634: - **Power-Up:** **Heat Shielding Sled Coating**  
635:   *Required upgrade to unlock Lava Mountain. Provides heat protection and slightly reduces friction on other levels.*
636: 
637: ---
638: 
639: ### Space Mountain 🌌
640: - **Description:** Sled in low gravity on lunar or Martian slopes with huge craters, steep cliffs, and meteor showers.  
641: - **Mechanics:**  
642:   - **Low Gravity:** Higher jumps, longer airtime, easier flips 'n tricks.  
643:   - **Meteor Showers:** Random meteor strikes introduce obstacles.
644: - **Power-Up:** **Gravity Stabilizer Sled Upgrade**  
645:   *Required to unlock Space Mountain. Stabilizes sled control in fluctuating gravity.*
646: 
647: ---
648: 
649: ### Underwater Mountain 🌊
650: - **Description:** Submerged slopes with slow-motion physics. Seaweed, coral formations, and hidden underwater currents abound.  
651: - **Mechanics:**  
652:   - **Air Meter (Stamina):** Acts like oxygen; replenished by air bubbles or surface spots.
653: - **Power-Up:** **Aqua-Lung Mittens**  
654:   *Required to enter Underwater Mountain. Constantly replenishes stamina underwater and reduces stamina drain on other mountains.*
655: 
656: ---
657: 
658: ### Garbage Dump Glacier 🗑️❄️
659: - **Description:** Icy runs through a frozen landfill filled with discarded items, oil slicks, and seagull attacks.  
660: - **Mechanics:**  
661:   - **Sticky Garbage Areas:** Slow down your sled unless special upgrades are used.
662: - **Power-Up:** **Slick Wax Spray**  
663:   *Required to unlock Garbage Dump Glacier. Prevents sticky terrain and provides a speed boost on all levels.*
664: 
665: ---
666: 
667: ### Micro Mountain 🐜🌱
668: - **Description:** A microscopic adventure down blades of grass, dodging oversized ants, and navigating dew drops.  
669: - **Mechanics:**  
670:   - **Tiny Obstacles:** Garden insects and pollen clusters create dynamic hazards.
671: - **Power-Up:** **Antigrav Wax**  
672:   *Required for Micro Mountain. Dramatically reduces friction and improves glide efficiency across all terrains.*
673: 
674: ---
675: 
676: ### Candy Cane Canyon 🍭
677: - **Description:** Sweet, candy-themed slopes with chocolate rivers, caramel waterfalls, and peppermint jumps.  
678: - **Mechanics:**  
679:   - **Sticky Sweets & Sugar Rush Zones:** Affect speed and maneuverability.
680: - **Power-Up:** **Sweet-Tooth Coating**  
681:   *Required for Candy Cane Canyon. Prevents sticking and mitigates slowdown effects on other terrains.*
682: 
683: ---
684: 
685: ### Crystal Cave Cavern 🔮
686: - **Description:** Glittering caverns with stalactites, delicate crystal formations, and echoing acoustics.  
687: - **Mechanics:**  
688:   - **Fragile Obstacles:** Crystals break on impact, temporarily obscuring vision.
689: - **Power-Up:** **Crystal Clear Goggles**  
690:   *Required for Crystal Cave Cavern. Enhances visibility and reduces the impact of obstructions.*
691: 
692: ---
693: 
694: ### Haunted Graveyard Hill 👻
695: - **Description:** Spooky slopes with gravestones, eerie trees, and wandering ghosts.  
696: - **Mechanics:**  
697:   - **Ghost Encounters & Phantom Fans:** Can hinder or help your progress with unexpected effects.
698: - **Power-Up:** **Spirit Lantern**  
699:   *Required to access Haunted Graveyard Hill. Illuminates hidden pathways and improves overall visibility.*
700: 
701: ---
702: 
703: ### Sky Jellyfish Mountain ☁️🪼
704: - **Description:** Ethereal, bouncy slopes with luminous sky jellyfish and shifting cloud platforms.  
705: - **Mechanics:**  
706:   - **Bounce Physics & Air Gusts:** Create unpredictable trajectories.
707: - **Power-Up:** **Stabilizer Sled Rails**  
708:   *Required for Sky Jellyfish Mountain. Improves landing stability and reduces bounce unpredictability.*
709: 
710: ---
711: 
712: ### Mechanical Mountain (Steampunk Slopes) ⚙️🎩
713: - **Description:** Steampunk-inspired terrain with gears, conveyor belts, and mechanical contraptions.  
714: - **Mechanics:**  
715:   - **Timed Obstacles & Gear Grinds:** Require precise timing and offer big cash bonuses.
716: - **Power-Up:** **Clockwork Treads**  
717:   *Required to unlock Mechanical Mountain. Provides traction on moving surfaces and enhances handling.*
718: 
719: ---
720: 
721: ### Pyramid Peak 🐫🏜️
722: - **Description:** Ancient Egyptian slopes with sandy ruins, sandstorms, falling boulders, and scarab swarms.  
723: - **Mechanics:**  
724:   - **Sandstorms & Hidden Pitfalls:** Obscure vision and reveal secret ramps.
725: - **Power-Up:** **Sandrunner Skis**  
726:   *Required for Pyramid Peak. Enables smooth gliding over sandy terrain and enhances performance on loose surfaces.*
727: 
728: ---
729: 
730: ### Digital Mountain (Cyber Slopes) 💻🔮
731: - **Description:** Neon-lit digital slopes filled with glitches, data streams, and pop-up malware ads.  
732: - **Mechanics:**  
733:   - **Glitch Zones & Malware Hazards:** Cause unpredictable teleportation and control issues.
734: - **Power-Up:** **Data Shielding**  
735:   *Required to access Digital Mountain. Protects against digital hazards and improves overall stability.*
736: 
737: ---
738: 
739: 🔄 Infinite Upgrades with Soft Caps
740: ===================================
741: 
742: **Expanding Progression Without Breaking Balance**
743: 
744: Currently, upgrades in **SledHEAD** have **hard caps**, limiting how many times they can be purchased. While this provides structure, it **restricts long-term progression** and prevents **emergent playstyles** from evolving over multiple runs. To keep **each run fresh and engaging**, we're shifting to an **infinite upgrade system** with **diminishing returns** beyond a **soft cap** for
745: **Personal Upgrades**. **Mountain Upgrades** will
746: need to be rebought for each new mountain purchased, and
747: may or may not be infinite as appropriate to the upgrade.
748: 
749: 🎯 Proposed Solution
750: --------------------
751: 
752: -   **All upgrades become infinitely upgradable.**
753: -   Each upgrade **retains its effectiveness early on** but **scales down gradually** beyond a set level.
754: -   **Soft caps vary** depending on the upgrade type:
755:     -   **Speed upgrades** could start diminishing at **Level 10**.
756:     -   **Trick bonuses** could scale freely until **Level 20** before slowing down.
757: -   **Mathematical balancing** ensures that upgrades remain **meaningful** but **don't become overpowered**.
758: 
759: 📊 Scaling Formula: Exponential & Logarithmic Decay
760: ---------------------------------------------------
761: 
762: Instead of **linear scaling** (e.g., "+1 Speed per level"), we use **diminishing returns** to keep upgrades valuable without breaking balance.
763: 
764: ### ✏ Formula Example:
765: 
766: newValue = baseValue + (scalingFactor * sqrt(level))
767: 
768: -   **Early levels feel impactful**, allowing noticeable improvements.
769: -   **Later levels slow down naturally**, preventing infinite stacking from making players overpowered.
770: -   Works across **various upgrade types**, from **speed boosts to trick multipliers**.
771: 
772: 🔎 **Alternative Approach: Logarithmic Scaling**\
773: For upgrades that should scale *aggressively early on* but taper off smoothly:
774: 
775: newValue = baseValue * (1 + (scalingFactor * log(level + 1)))
776: 
777: -   Great for upgrades like **boost charge rates or sled handling**, where a **big early impact** makes sense but **total mastery should be gradual**.
778: 
779: ✅ Benefits of Infinite Upgrades with Soft Caps
780: ----------------------------------------------
781: 
782: ✔ **Keeps long-term progression engaging** -- No artificial "max level" bottleneck.\
783: ✔ **Encourages specialized strategies** -- Players can **focus on speed, tricks, or economy-based builds**.\
784: ✔ **Prevents upgrade obsolescence** -- Players **always have something meaningful to invest in**.\
785: ✔ **Maintains challenge balance** -- Runs become **progressively stronger**, but not infinitely easy.
786: 
787: 📌 Tasks & Implementation Plan
788: ------------------------------
789: 
790: -   [ ]  **Remove hard upgrade caps** for all current upgrades.
791: -   [ ]  **Implement soft cap mechanics** using **square root or logarithmic scaling**.
792: -   [ ]  **Fine-tune soft cap levels** for different upgrade categories (e.g., Speed vs. Trick Boosts).
793: -   [ ]  **Balance test progression** to ensure **long-term upgrades stay meaningful but not overpowered**.
794: 
795: This system ensures **players always have room to grow**, while keeping **SledHEAD's challenge intact**. 🚀🔥
796: 
797: ---
798: 
799: ## 🏆 Endgame & Prestige Content
800: - Prestige system for continued replayability
801: - Elite sled runs with intensified challenges
802: - Legendary animal photo hunts for ultimate rewards
803: 
804: ---
805: 
806: ## 📅 Development Milestones & Timeline
807: ### Short-Term:
808: - Implement stamina system, basic uphill-downhill gameplay
809: - Expand wildlife photography with rare animals at altitude
810: - Basic personal and mountain upgrades functionality
811: 
812: ### Mid-Term:
813: - Integrate the light/dark gradient altitude system to enhance visual depth and player navigation
814: - Introduce NPCs and interactive infrastructure
815: - Initial mini-games integration
816: 
817: ### Long-Term:
818: - Add mountain biomes and unique thematic mechanics
819: - Fully expand trick system
820: - Complete mini-games and endgame challenges
821: - Polish UI/UX and refine progression systems
822: 
823: ---
824: 
825: This comprehensive roadmap encapsulates all planned features and mechanics, clearly outlines the development trajectory, and integrates your newly defined gameplay mechanic. Use this as your foundational documentation moving forward to guide development clearly and effectively.
`````````

## File: js/wildlife.js
`````````javascript
  1: /* wildlife.js - Wildlife Simulation (Refactored with Spawning Biomes and Fallback)
  2: // This file handles the overall wildlife simulation logic using a registration system.
  3: // Each animal module (e.g., bear.js, bird.js, mountainlion.js) registers itself by calling registerAnimalType().
  4: // Animals have a "spawningBiomes" property that defines in which biomes and mountain layers they spawn.
  5: // If currentBiome is not defined or unrecognized, the system assumes every mountain is valid.
  6: */
  7: // Global registry for animal types
  8: var animalRegistry = [];
  9: // Function for animal modules to register themselves
 10: function registerAnimalType(animalData) {
 11:     animalRegistry.push(animalData);
 12:     console.log("Registered animal type: " + animalData.type);
 13: }
 14: // Global variables for the animal system
 15: var activeAnimal = null;
 16: var animalStateCheckInterval = null;
 17: // ------------------- Animal (Critter) Update Logic -------------------
 18: function updateAnimal() {
 19:   if (!activeAnimal) return;
 20:   // Call custom update if provided
 21:   if (activeAnimal.customUpdate && typeof activeAnimal.customUpdate === 'function') {
 22:       activeAnimal.customUpdate(activeAnimal);
 23:   }
 24:   checkPlayerProximity();
 25:   if (activeAnimal.state === "fleeing") {
 26:     if (!activeAnimal.fleeingLogOnce) {
 27:       console.log(`Animal fleeing - Type: ${activeAnimal.type}, Angle: ${activeAnimal.fleeAngleActual.toFixed(2)}°, Speed: ${activeAnimal.speed}`);
 28:       activeAnimal.fleeingLogOnce = true;
 29:     }
 30:     let rad = activeAnimal.fleeAngleActual * Math.PI / 180;
 31:     activeAnimal.x += Math.cos(rad) * activeAnimal.speed * 0.5;
 32:     activeAnimal.y += Math.sin(rad) * activeAnimal.speed * 0.5;
 33:     let dx = activeAnimal.x - player.x;
 34:     let dy = activeAnimal.y - player.absY;
 35:     let distance = Math.sqrt(dx * dx + dy * dy);
 36:     if (distance > 1000 && !activeAnimal.despawnScheduled) {
 37:       activeAnimal.despawnScheduled = true;
 38:       console.log(`Animal is more than 1000 away. Scheduling despawn in 500ms.`);
 39:       setTimeout(() => {
 40:         if (activeAnimal) {
 41:           console.log(`Animal despawned after 500ms out of range`);
 42:           activeAnimal = null;
 43:           spawnAnimal();
 44:         }
 45:       }, 5000);
 46:     }
 47:   } else if (activeAnimal.state === "sitting") {
 48:     if (Math.random() < 0.0001) {
 49:       console.log(`Animal (${activeAnimal.type}) spontaneously changing state from sitting to fleeing`);
 50:       activeAnimal.state = "fleeing";
 51:       activeAnimal.fleeingLogOnce = false;
 52:     }
 53:   }
 54: }
 55: function checkPlayerProximity() {
 56:   if (!activeAnimal || activeAnimal.state === "fleeing") return;
 57:   let dx = activeAnimal.x - player.x;
 58:   let dy = activeAnimal.y - player.absY;
 59:   let distanceSquared = dx * dx + dy * dy;
 60:   if (distanceSquared < activeAnimal.detectionRadius * activeAnimal.detectionRadius) {
 61:     console.log(`Player too close to animal (${Math.sqrt(distanceSquared).toFixed(1)} < ${activeAnimal.detectionRadius}) - animal fleeing`);
 62:     activeAnimal.state = "fleeing";
 63:     activeAnimal.fleeingLogOnce = false;
 64:     activeAnimal.fleeAngleActual = Math.atan2(dy, dx) * (180 / Math.PI);
 65:     activeAnimal.fleeAngleActual += (Math.random() - 0.5) * 30;
 66:   }
 67: }
 68: // Spawn a new animal using the registered types, with biome filtering and fallback.
 69: function spawnAnimal() {
 70:   if (currentState !== GameState.UPHILL || activeAnimal !== null) return;
 71:   // Define recognized mountain biomes.
 72:   var recognizedBiomes = ["starterMountain", "spaceMountain", "volcanoMountain"];
 73:   let availableAnimals;
 74:   // If currentBiome is not defined or unrecognized, allow all animals.
 75:   if (!currentBiome || recognizedBiomes.indexOf(currentBiome) === -1) {
 76:       availableAnimals = animalRegistry;
 77:   } else {
 78:       availableAnimals = animalRegistry.filter(animal => {
 79:           // If spawningBiomes is not specified, default to spawning only on the Starter Mountain.
 80:           if (!animal.spawningBiomes || animal.spawningBiomes.length === 0) {
 81:               return currentBiome === "starterMountain";
 82:           }
 83:           return animal.spawningBiomes.some(rule => {
 84:               if (rule.biome !== currentBiome) return false;
 85:               if (rule.layers && Array.isArray(rule.layers)) {
 86:                   return rule.layers.includes(currentMountainLayer);
 87:               }
 88:               if (rule.layerRange && typeof rule.layerRange.min === 'number' && typeof rule.layerRange.max === 'number') {
 89:                   return currentLayerPercent >= rule.layerRange.min && currentLayerPercent <= rule.layerRange.max;
 90:               }
 91:               return true;
 92:           });
 93:       });
 94:   }
 95:   if (availableAnimals.length === 0) {
 96:       console.error("No animal types available for current biome and layer!");
 97:       return;
 98:   }
 99:   let spawnX = (window.innerWidth * 0.1) + (Math.random() * window.innerWidth * 0.9);
100:   let spawnY = player.absY - (window.innerHeight / 2);
101:   let altitude = Math.floor(Math.random() * 100);
102:   let initialState = "sitting";
103:   let baseAngle = spawnX > window.innerWidth / 2 ?
104:                   Math.random() * (170 - 135) + 135 :
105:                   Math.random() * (55 - 20) + 20;
106:   let angleOffset = Math.random() * 15;
107:   let fleeAngleActual = baseAngle + (Math.random() < 0.5 ? -angleOffset : angleOffset);
108:   let totalWeight = availableAnimals.reduce((sum, animal) => sum + animal.spawnProbability, 0);
109:   let r = Math.random() * totalWeight;
110:   let chosenAnimalType = null;
111:   for (let animal of availableAnimals) {
112:     r -= animal.spawnProbability;
113:     if (r <= 0) {
114:       chosenAnimalType = animal;
115:       break;
116:     }
117:   }
118:   if (!chosenAnimalType) chosenAnimalType = availableAnimals[0];
119:   activeAnimal = {
120:     type: chosenAnimalType.type,
121:     x: spawnX,
122:     y: spawnY,
123:     width: chosenAnimalType.width,
124:     height: chosenAnimalType.height,
125:     state: initialState,
126:     speed: chosenAnimalType.speed,
127:     altitude: altitude,
128:     hasBeenPhotographed: false,
129:     detectionRadius: chosenAnimalType.detectionRadius,
130:     fleeAngleActual: fleeAngleActual,
131:     fleeingLogOnce: false,
132:     lastStateChange: Date.now(),
133:     stateChangeCount: 0,
134:     basePhotoBonus: chosenAnimalType.basePhotoBonus || 0,
135:     customUpdate: chosenAnimalType.customUpdate || null,
136:     customDraw: chosenAnimalType.customDraw || null,
137:   };
138:   console.log(`Spawned ${activeAnimal.type} at (${spawnX.toFixed(1)}, ${spawnY.toFixed(1)}), altitude: ${altitude}, state: ${initialState}, speed: ${activeAnimal.speed}, detectionRadius: ${activeAnimal.detectionRadius}`);
139:   if (!animalStateCheckInterval) {
140:     animalStateCheckInterval = setInterval(logAnimalState, 3000);
141:   }
142: }
143: function despawnAllAnimals() {
144:     activeAnimal = null;
145:     console.log('All animals despawned');
146: }
147: function logAnimalState() {
148:   if (!activeAnimal) {
149:     console.log("No active animal right now");
150:     clearInterval(animalStateCheckInterval);
151:     animalStateCheckInterval = null;
152:     return;
153:   }
154:   let playerDist = Math.sqrt(
155:     Math.pow(activeAnimal.x - player.x, 2) + 
156:     Math.pow(activeAnimal.y - player.absY, 2)
157:   );
158:   console.log(`Animal status: ${activeAnimal.type}, state: ${activeAnimal.state}, position: (${activeAnimal.x.toFixed(1)}, ${activeAnimal.y.toFixed(1)}), distance to player: ${playerDist.toFixed(1)}`);
159: }
160: function drawAnimal() {
161:   if (!activeAnimal || currentState !== GameState.UPHILL) return;
162:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
163:   let animalScreenY = activeAnimal.y - cameraOffset;
164:   if (activeAnimal.customDraw && typeof activeAnimal.customDraw === 'function') {
165:       activeAnimal.customDraw(activeAnimal, animalScreenY, ctx);
166:   } else {
167:       ctx.fillStyle = activeAnimal.color || "#888888";
168:       ctx.fillRect(
169:         activeAnimal.x - activeAnimal.width / 2,
170:         animalScreenY - activeAnimal.height / 2,
171:         activeAnimal.width,
172:         activeAnimal.height
173:       );
174:   }
175: }
176: window.registerAnimalType = registerAnimalType;
177: window.updateAnimal = updateAnimal;
178: window.spawnAnimal = spawnAnimal;
179: window.despawnAllAnimals = despawnAllAnimals;
180: window.drawAnimal = drawAnimal;
`````````

## File: todo.txt
`````````
 1: Feat: Swap from down-to-up to up-to-down.
 2: 
 3: Docs: Find some NPC to cover prospecting, treasure hunting, and rescue missions
 4: 
 5: Refactor: Refactor mechanics.js & utils.js
 6: 
 7: Refactor: Switch tricks from press to hold (so you choose if you do a 180 or a 1080)
 8: (more advanced tricks can still be some sort of combo press)
 9: 
10: Feat: Nerf jumping, buff ramps, attend leg day affects jump height
`````````

## File: js/stamina.js
`````````javascript
  1: // Global counter for stamina depletion re-entries
  2: let reentryCount = 0;
  3: // In stamina.js
  4: class Stamina {
  5:     constructor() {
  6:       this.maxStamina = 100;
  7:       this.currentStamina = this.maxStamina;
  8:       this.staminaDrainWalking = 0.1;  // Drains steadily when walking uphill
  9:       this.staminaDrainJumping = 2.0;    // Drains once on jump launch
 10:       this.staminaDrainSledding = 0.01;  // Drains very slowly when sledding
 11:       this.isVisible = false;
 12:       this.jumpTriggered = false;        // Initialize jump flag
 13:       this.previousState = null;         // Track previous game state
 14:       this.lastLogTime = 0;              // Timestamp for throttling log messages
 15:       this.canvas = document.createElement("canvas");
 16:       this.ctx = this.canvas.getContext("2d");
 17:       this.canvas.width = 200;
 18:       this.canvas.height = 20;
 19:       this.canvas.style.position = "fixed";
 20:       this.canvas.style.top = "40px";
 21:       this.canvas.style.left = "40px";
 22:       this.canvas.style.zIndex = "1000";
 23:       document.body.appendChild(this.canvas);
 24:     }
 25:     // New method to drain stamina on jump initiation
 26:     drainJump() {
 27:       if (!this.jumpTriggered) {
 28:         this.currentStamina -= this.staminaDrainJumping;
 29:         this.jumpTriggered = true;
 30:         this.throttledLog("Jump drain: stamina reduced by " + this.staminaDrainJumping + " New stamina: " + this.currentStamina);
 31:       }
 32:     }
 33:     // Reset jump flag (to be called on landing)
 34:     resetJumpTrigger() {
 35:       this.jumpTriggered = false;
 36:       this.throttledLog("Jump trigger reset");
 37:     }
 38:     // Throttled logging function to limit messages to once per second
 39:     throttledLog(message) {
 40:       const currentTime = Date.now();
 41:       if (currentTime - this.lastLogTime >= 1000) { // Only log once per second
 42:         console.log(message);
 43:         this.lastLogTime = currentTime;
 44:       }
 45:     }
 46:     handleStaminaDepletion() {
 47:         this.throttledLog("Stamina depleted - returning to house");
 48:         // Move player to house
 49:         changeState(window.GameState.HOUSE);
 50:         // Refill stamina
 51:         this.currentStamina = this.maxStamina;
 52:         this.throttledLog("Stamina refilled to maximum");
 53:         // Despawn all animals
 54:         despawnAllAnimals();
 55:         this.throttledLog("All animals despawned");
 56:         // Calculate and charge re-entry fee
 57:         const fee = 100 * (reentryCount + 1);
 58:         player.money = Math.max(0, player.money - fee);
 59:         this.throttledLog(`Charged re-entry fee: $${fee}`);
 60:         // Increment re-entry counter
 61:         reentryCount++;
 62:         this.throttledLog(`Re-entry count increased to: ${reentryCount}`);
 63:     }
 64:     update() {
 65:       // Check for entering house state (state transition)
 66:       const enteringHouse = this.previousState !== window.GameState.HOUSE && window.currentState === window.GameState.HOUSE;
 67:       // Only show stamina bar if the player is NOT at home
 68:       this.isVisible = (window.currentState !== window.GameState.HOUSE);
 69:       if (!this.isVisible) {
 70:         if (enteringHouse) {
 71:           this.currentStamina = this.maxStamina; // Reset stamina only when entering the house
 72:           this.throttledLog("At home - resetting stamina");
 73:         }
 74:         this.canvas.style.display = "none";
 75:         this.previousState = window.currentState; // Update previous state
 76:         return;
 77:       }
 78:       this.canvas.style.display = "block";
 79:       // Drain stamina when moving uphill
 80:       if (window.currentState === window.GameState.UPHILL) {
 81:         if (keysDown["w"] || keysDown["a"] || keysDown["s"] || keysDown["d"]) {
 82:           this.currentStamina -= this.staminaDrainWalking;
 83:           this.throttledLog("UPHILL movement: draining stamina by " + this.staminaDrainWalking + " Current stamina: " + this.currentStamina);
 84:         }
 85:       }
 86:       // (No jump drain logic here now—it's moved to mechanics.js)
 87:       // Drain stamina very slowly when sledding
 88:       if (player.isSliding) {
 89:         this.currentStamina -= this.staminaDrainSledding;
 90:         this.throttledLog("Sledding: draining stamina by " + this.staminaDrainSledding + " Current stamina: " + this.currentStamina);
 91:       }
 92:       // Check for stamina depletion
 93:       if (this.currentStamina <= 0 && window.currentState !== window.GameState.HOUSE) {
 94:         this.handleStaminaDepletion();
 95:       }
 96:       // Clamp stamina value between 0 and max
 97:       this.currentStamina = Math.max(0, Math.min(this.currentStamina, this.maxStamina));
 98:       // Render the stamina bar
 99:       this.render();
100:       // Update previous state
101:       this.previousState = window.currentState;
102:     }
103:     render() {
104:       this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
105:       // Determine stamina bar color based on stamina percentage
106:       let staminaRatio = this.currentStamina / this.maxStamina;
107:       let color = "#00FF00"; // Green (full stamina)
108:       if (staminaRatio < 0.5) color = "#FFA500"; // Orange (moderate stamina)
109:       if (staminaRatio < 0.2) color = "#FF0000"; // Red (critical stamina)
110:       // Draw the bar background
111:       this.ctx.fillStyle = "#333";
112:       this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
113:       // Draw the stamina portion
114:       this.ctx.fillStyle = color;
115:       this.ctx.fillRect(0, 0, this.canvas.width * staminaRatio, this.canvas.height);
116:     }
117:   }
118:   // Initialize stamina system
119:   const stamina = new Stamina();
120:   // Hook into the game's update loop
121:   function updateStamina() {
122:     stamina.update();
123:     requestAnimationFrame(updateStamina);
124:   }
125:   updateStamina();
126: // Make stamina available globally
127: window.stamina = stamina;
`````````

## File: .gitignore
`````````
1: repomix-output.txt
2: repomix-output.txt.xml
3: .repomix/bundles.json
4: OLD Codebase.xml
5: repomix-output.txt.md
6: complete-condensed-codebase-for-reference.md
`````````

## File: js/downhill.js
`````````javascript
  1: /* downhill.js - Downhill Mechanics & Physics */
  2: import {
  3:   processTrick,
  4:   checkTrickInputs,
  5:   resetTrickState
  6: } from './tricks.js';
  7: // Update all downhill-specific physics and mechanics
  8: function updateDownhill(deltaTime) {
  9:   let rocketFactor = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.rocketSurgeryFactorPerLevel);
 10:   let gravity = TWEAK.baseGravity * rocketFactor;
 11:   let maxXVel = TWEAK.baseMaxXVel * (rocketFactor - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel));
 12:   maxXVel = Math.max(0, maxXVel);
 13:   let opticsFactor = 1 + (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsAccelFactorPerLevel);
 14:   let horizontalAccel = TWEAK.baseHorizontalAccel * opticsFactor;
 15:   let friction = TWEAK.baseFriction - (window.playerUpgrades.optimalOptics * TWEAK.optimalOpticsFrictionFactorPerLevel);
 16:   if (friction < 0.8) friction = 0.8;
 17:   // Horizontal movement handling with bounds checking
 18:   if (window.keysDown["a"]) { player.xVel -= horizontalAccel; }
 19:   if (window.keysDown["d"]) { player.xVel += horizontalAccel; }
 20:   player.xVel *= friction;
 21:   player.xVel = clamp(player.xVel, -maxXVel, maxXVel);
 22:   let newX = player.x + player.xVel;
 23:   // Prevent going off screen horizontally
 24:   player.x = clamp(newX, player.width/2, window.canvas.width - player.width/2);
 25:   // --- Jump Input Handling ---
 26:   // Immediate Mode:
 27:   if (TWEAK.jumpType === "immediate") {
 28:     if (window.keysDown[" "] && !player.isJumping && player.canJump) {
 29:       player.isJumping = true;
 30:       player.canJump = false;
 31:       player.isCharging = false;
 32:       let heightBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpHeightPerRocketSurgery);
 33:       let timeBonus = 1 + (window.playerUpgrades.rocketSurgery * TWEAK.jumpTimePerRocketSurgery);
 34:       let heightIncrease = heightBonus - 1;
 35:       let extraZoom = heightIncrease * TWEAK.jumpZoomPerHeightIncrease;
 36:       player.jumpHeightFactor = heightBonus;
 37:       player.jumpDuration = TWEAK.jumpBaseAscent * timeBonus;
 38:       player.jumpZoomBonus = extraZoom;
 39:       player.jumpTimer = 0;
 40:       player.hasReachedJumpPeak = false;
 41:       if (window.playerUpgrades.rocketSurgery > 0) {
 42:         console.log(`Jump boosted by Rocket Surgery ${window.playerUpgrades.rocketSurgery}: Height x${heightBonus.toFixed(2)}, Time x${timeBonus.toFixed(2)}, Zoom +${(extraZoom*100).toFixed(0)}%`);
 43:       }
 44:       onPlayerJumpStart();
 45:     }
 46:   }
 47:   // Charge Mode:
 48:   else if (TWEAK.jumpType === "charge") {
 49:     if (window.keysDown[" "] && !player.isJumping && !player.isCharging && player.canJump) {
 50:       player.isCharging = true;
 51:       player.canJump = false;
 52:       player.jumpChargeTime = 0;
 53:     }
 54:     if (player.isCharging) {
 55:       player.jumpChargeTime += deltaTime;
 56:       if (!window.keysDown[" "]) {
 57:         let chargeRatio = Math.min(1, player.jumpChargeTime / TWEAK.jumpMaxHoldTime);
 58:         player.isCharging = false;
 59:         player.isJumping = true;
 60:         player.jumpHeightFactor = chargeRatio;
 61:         player.jumpDuration = 500 + 500 * chargeRatio;
 62:         player.jumpTimer = 0;
 63:         player.hasReachedJumpPeak = false;
 64:         onPlayerJumpStart();
 65:       } else if (player.jumpChargeTime >= TWEAK.jumpMaxHoldTime) {
 66:         player.isCharging = false;
 67:         player.isJumping = true;
 68:         player.jumpHeightFactor = 1;
 69:         player.jumpDuration = 1000;
 70:         player.jumpTimer = 0;
 71:         player.hasReachedJumpPeak = false;
 72:         onPlayerJumpStart();
 73:       }
 74:     }
 75:   }
 76:   // Jump Animation & Trick Handling:
 77:   if (player.isJumping) {
 78:     player.jumpTimer += deltaTime;
 79:     let progress = player.jumpTimer / player.jumpDuration;
 80:     // Re-hit window handling:
 81:     if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
 82:       if (window.keysDown[" "] && !player.reHitActivated && !player.isCharging) {
 83:         console.log("Re-hit jump activated!");
 84:         player.reHitActivated = true;
 85:         player.jumpTimer = 0;
 86:         player.jumpDuration *= TWEAK.reHitBonusDuration;
 87:         player.jumpHeightFactor = 1;
 88:         playTone(600, "sine", 0.1, 0.3);
 89:         return;
 90:       }
 91:     }
 92:     if (player.isJumping && jumpOsc) {
 93:       let f_start = 300, f_peak = 800, f_end = 300, freq;
 94:       if (progress < 0.5) {
 95:         let t = progress / 0.5;
 96:         freq = f_start + (f_peak - f_start) * (t * t);
 97:       } else {
 98:         let t = (progress - 0.5) / 0.5;
 99:         freq = f_peak - (f_peak - f_end) * (t * t);
100:       }
101:       jumpOsc.frequency.setValueAtTime(freq, audioCtx.currentTime);
102:     }
103:     // Check for trick inputs and process any active tricks
104:     checkTrickInputs();
105:     processTrick(deltaTime);
106:     if (!player.hasReachedJumpPeak && progress >= 0.5) {
107:       player.hasReachedJumpPeak = true;
108:       onPlayerJumpPeak();
109:     }
110:     if (progress >= 1) {
111:       // End jump: reset jump/trick state and restore scale
112:       player.isJumping = false;
113:       player.jumpTimer = 0;
114:       player.hasReachedJumpPeak = false;
115:       resetTrickState();
116:       player.width = player.baseWidth;
117:       player.height = player.baseHeight;
118:       onPlayerLand();
119:       // Check for landing collisions
120:       for (let i = 0; i < terrain.length; i++) {
121:         let obstacle = terrain[i];
122:         if (checkCollision(
123:             player.x - player.width / 2, player.absY - player.height / 2,
124:             player.width, player.height,
125:             obstacle.x, obstacle.y,
126:             obstacle.width, obstacle.height
127:         )) {
128:           console.log("Collision on landing.");
129:           player.velocityY = -TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
130:           player.absY -= TWEAK.bounceImpulse * TWEAK.jumpCollisionMultiplier;
131:           player.collisions++;
132:           terrain.splice(i, 1);
133:           if (player.collisions >= TWEAK.getMaxCollisions()) {
134:             console.log("Max collisions reached.");
135:             player.sledDamaged = 1; // Mark sled as damaged
136:             console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
137:             playCrashSound();
138:             changeState(GameState.UPHILL);
139:             return;
140:           } else {
141:             playRockHitSound();
142:           }
143:           break;
144:         }
145:       }
146:     } else {
147:       // Scale player sprite for jump arc effect
148:       let baseScale = TWEAK.jumpPeakScale + player.jumpZoomBonus;
149:       let scale = 1 + (baseScale - 1) * Math.sin(Math.PI * progress) * player.jumpHeightFactor;
150:       player.width = player.baseWidth * scale;
151:       player.height = player.baseHeight * scale;
152:     }
153:   }
154:   // Allow jump restart when space is released
155:   if (!window.keysDown[" "]) {
156:     player.canJump = true;
157:   }
158:   // Normal downhill physics & collision handling (skip during jump)
159:   let prevAbsY = player.absY;
160:   if (!player.isJumping) {
161:     for (let i = 0; i < terrain.length; i++) {
162:       let obstacle = terrain[i];
163:       if (checkCollision(
164:           player.x - player.width / 2, player.absY - player.height / 2,
165:           player.width, player.height,
166:           obstacle.x, obstacle.y,
167:           obstacle.width, obstacle.height
168:       )) {
169:         console.log("Collision on downhill.");
170:         player.velocityY = -TWEAK.bounceImpulse;
171:         player.absY = prevAbsY - TWEAK.bounceImpulse;
172:         player.collisions++;
173:         terrain.splice(i, 1);
174:         if (player.collisions >= TWEAK.getMaxCollisions()) {
175:           console.log("Max collisions reached. Ending run.");
176:           player.sledDamaged = 1; // Mark sled as damaged
177:           console.log("Sled marked as damaged! You'll need to repair it before going downhill again.");
178:           awardMoney();
179:           playCrashSound();
180:           changeState(GameState.UPHILL);
181:           return;
182:         } else {
183:           playRockHitSound();
184:         }
185:       }
186:     }
187:   }
188:   player.velocityY += player.isJumping ? TWEAK.baseGravity : gravity;
189:   player.absY += player.velocityY;
190:   updateLiveMoney();
191:   // Check for transition to UPHILL mode near bottom
192:   if (player.absY >= mountainHeight - (player.height * 4)) {
193:     player.absY = mountainHeight - (player.height * 4);
194:     player.velocityY = 0;
195:     console.log("Reached transition point. Switching to uphill mode.");
196:     // Fix for jumping transition - handle jump state before changing modes
197:     if (player.isJumping) {
198:       // Smoothly reset jump zoom and finalize landing
199:       lerpJumpZoomToZero(() => {
200:         onPlayerJumpLand(); // handles trick cleanup, sound, etc.
201:       });
202:     }
203:     changeState(GameState.UPHILL);
204:     return;
205:   }
206:   // Check for actual bottom
207:   if (player.absY >= mountainHeight) {
208:     player.absY = mountainHeight;
209:     console.log("Reached bottom. Returning to house.");
210:     awardMoney();
211:     changeState(GameState.HOUSE);
212:   }
213: }
214: // Helper function for smooth jump transition
215: function lerpJumpZoomToZero(callback) {
216:   const startZoom = player.jumpZoomBonus;
217:   const duration = 250; // ms
218:   const startTime = performance.now();
219:   function animate(time) {
220:     const elapsed = time - startTime;
221:     const t = Math.min(1, elapsed / duration);
222:     player.jumpZoomBonus = startZoom * (1 - t);
223:     if (t < 1) {
224:       requestAnimationFrame(animate);
225:     } else {
226:       player.jumpZoomBonus = 0;
227:       player.isJumping = false;
228:       player.jumpTimer = 0;
229:       player.hasReachedJumpPeak = false;
230:       resetTrickState();
231:       player.width = player.baseWidth;
232:       player.height = player.baseHeight;
233:       if (callback) callback();
234:     }
235:   }
236:   requestAnimationFrame(animate);
237: }
238: // Make functions available globally
239: window.updateDownhill = updateDownhill;
240: window.lerpJumpZoomToZero = lerpJumpZoomToZero;
241: // Export necessary functions for module imports
242: export { updateDownhill, lerpJumpZoomToZero };
`````````

## File: js/player.js
`````````javascript
 1: /* player.js */
 2: let player = {
 3:   x: window.canvas.width / 2,  // Use global canvas reference
 4:   absY: 0,
 5:   width: 20,
 6:   height: 20,
 7:   velocityY: 0,
 8:   xVel: 0,
 9:   collisions: 0,
10:   bestTime: Infinity,
11:   money: 200, // Default initial value instead of directly accessing TWEAK.starterCash
12:   sledDamaged: 0,  // Track if sled is damaged: 0 = not damaged, >0 = damaged
13:   // Camera aim properties
14:   cameraAngle: 270,  // Camera rotation in degrees
15:   altitudeLine: 50,  // Starts at 50% of the view range
16:   // Trick system properties
17:   currentTrick: null,        // Currently active trick
18:   trickTimer: 0,            // Time elapsed in current trick
19:   trickRotation: 0,         // Current rotation angle for helicopter tricks
20:   trickOffset: 0,           // Current offset for air brake/parachute
21:   lastTrick: null,          // Last completed trick for chain tracking
22:   trickChainCount: 0,       // Number of different tricks chained
23:   trickCooldowns: {         // Individual cooldown timers for each trick
24:     leftHelicopter: 0,
25:     rightHelicopter: 0,
26:     airBrake: 0,
27:     parachute: 0
28:   },
29:   // *** NEW: Jump State Properties ***
30:   isJumping: false,          // Are we in a jump?
31:   isCharging: false,         // For "charge" mode to accumulate jump time
32:   canJump: true,             // Ensures jump is triggered only once per key press
33:   reHitActivated: false,     // Prevents multiple re-hits during one key press
34:   jumpTimer: 0,              // Elapsed time since jump started (ms)
35:   jumpDuration: 0,           // Total duration of the jump (ascent + descent)
36:   jumpChargeTime: 0,         // Accumulated hold time for charge mode
37:   hasReachedJumpPeak: false, // Flag to trigger the peak hook only once per jump
38:   jumpHeightFactor: 0,       // Height multiplier from Rocket Surgery (1.0 = normal)
39:   jumpZoomBonus: 0,         // Extra zoom from increased jump height
40:   baseWidth: 20,             // Original sprite width (for scaling)
41:   baseHeight: 20             // Original sprite height (for scaling)
42: };
43: // Initialize player money from TWEAK settings once they're available
44: function initializePlayerMoney() {
45:   if (window.TWEAK && typeof window.TWEAK.starterCash !== 'undefined') {
46:     player.money = window.TWEAK.starterCash;
47:     console.log("Player money initialized to:", player.money);
48:   }
49: }
50: // Call this function after TWEAK is initialized (e.g., from game.js)
51: window.initializePlayerMoney = initializePlayerMoney;
`````````

## File: js/entities.js
`````````javascript
  1: /* entities.js - Pruned version to avoid overlap with wildlifephotos.js */
  2: // Resolves collisions between the player and obstacles.
  3: function resolveCollision(player, obstacle) {
  4:   let playerCenterX = player.x;
  5:   let playerCenterY = player.absY;
  6:   let obstacleCenterX = obstacle.x + obstacle.width / 2;
  7:   let obstacleCenterY = obstacle.y + obstacle.height / 2;
  8:   let halfWidthPlayer = player.width / 2;
  9:   let halfWidthObstacle = obstacle.width / 2;
 10:   let halfHeightPlayer = player.height / 2;
 11:   let halfHeightObstacle = obstacle.height / 2;
 12:   let dx = playerCenterX - obstacleCenterX;
 13:   let dy = playerCenterY - obstacleCenterY;
 14:   let overlapX = halfWidthPlayer + halfWidthObstacle - Math.abs(dx);
 15:   let overlapY = halfHeightPlayer + halfHeightObstacle - Math.abs(dy);
 16:   if (overlapX < 0 || overlapY < 0) return;
 17:   if (overlapX < overlapY) {
 18:     if (dx > 0) {
 19:       player.x += overlapX * 0.3;
 20:     } else {
 21:       player.x -= overlapX * 0.3;
 22:     }
 23:   } else {
 24:     if (dy > 0) {
 25:       player.absY += overlapY * 0.3;
 26:     } else {
 27:       player.absY -= overlapY * 0.3;
 28:     }
 29:   }
 30: }
 31: // Draws the camera overlay with the POV cone and a steady altitude line.
 32: function drawCameraOverlay() {
 33:   // Only display the overlay when in UPHILL mode.
 34:   if (window.currentState !== window.GameState.UPHILL) return;
 35:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 36:   let centerX = player.x;
 37:   let centerY = player.absY - cameraOffset;
 38:   let coneLength = 300; // Length of the camera cone
 39:   // Draw the camera POV Cone.
 40:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
 41:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
 42:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
 43:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
 44:   ctx.beginPath();
 45:   ctx.moveTo(centerX, centerY);
 46:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
 47:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
 48:   ctx.closePath();
 49:   ctx.fill();
 50:   // Draw the altitude line.
 51:   // Map altitudeLine [0,100] to an offset along the camera's central axis:
 52:   // 0 aligns with the player sprite’s bottom, 100 with its top.
 53:   let offsetTop = ((coneLength / 2) + player.height);
 54:   let offsetBottom = player.height / 2;
 55:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
 56:   let rad = player.cameraAngle * Math.PI / 180;
 57:   let lineCenterX = centerX + offset * Math.cos(rad);
 58:   let lineCenterY = centerY + offset * Math.sin(rad);
 59:   // Draw altitude line perpendicular to camera direction.
 60:   let lineLength = 100;
 61:   let perpX = -Math.sin(rad);
 62:   let perpY = Math.cos(rad);
 63:   let x1 = lineCenterX - (lineLength / 2) * perpX;
 64:   let y1 = lineCenterY - (lineLength / 2) * perpY;
 65:   let x2 = lineCenterX + (lineLength / 2) * perpX;
 66:   let y2 = lineCenterY + (lineLength / 2) * perpY;
 67:   // Steady color gradient from red (bottom) to blue (top)
 68:   let t = 1 - (player.altitudeLine / 100);
 69:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
 70:   ctx.strokeStyle = altitudeColor;
 71:   ctx.lineWidth = 3;
 72:   // Draw the altitude line without any flashing.
 73:   ctx.beginPath();
 74:   ctx.moveTo(x1, y1);
 75:   ctx.lineTo(x2, y2);
 76:   ctx.stroke();
 77: }
 78: // Draws the game entities such as the background, terrain, player, and sled.
 79: function drawEntities() {
 80:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 81:   ctx.clearRect(0, 0, canvas.width, canvas.height);
 82:   // Draw background.
 83:   ctx.fillStyle = window.currentState === window.GameState.DOWNHILL ? "#ADD8E6" : "#98FB98";
 84:   ctx.fillRect(0, 0, canvas.width, canvas.height);
 85:   // Draw terrain obstacles.
 86:   terrain.forEach(obstacle => {
 87:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
 88:       ctx.fillStyle = "#808080"; // Obstacles are drawn in grey.
 89:       ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
 90:     }
 91:   });
 92:   let playerDrawY = player.absY - cameraOffset;
 93:   ctx.save(); // Save the current context state
 94:   // Apply trick-specific transformations.
 95:   if (player.currentTrick) {
 96:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
 97:       // Rotate around the player's center for helicopter tricks.
 98:       ctx.translate(player.x, playerDrawY);
 99:       ctx.rotate(player.trickRotation * Math.PI / 180);
100:       ctx.translate(-player.x, -playerDrawY);
101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
102:       // Offset for air brake/parachute tricks.
103:       if (player.currentTrick === "airBrake") {
104:         playerDrawY += player.trickOffset;  // Move sled behind the player.
105:       } else {
106:         playerDrawY -= player.trickOffset;  // Move player above the sled for parachute.
107:       }
108:     }
109:   }
110:   // Draw the sled (as a red square).
111:   ctx.fillStyle = "#FF0000";
112:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
113:   // Draw the player (as a yellow circle) when applicable.
114:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
115:     ctx.fillStyle = "#FFFF00";
116:     ctx.beginPath();
117:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
118:     ctx.fill();
119:   }
120:   ctx.restore(); // Restore the context state
121:   // Draw the camera overlay.
122:   drawCameraOverlay();
123: }
`````````

## File: js/render.js
`````````javascript
  1: /* render.js - Rendering Logic */
  2: // Floating Text System (unchanged)
  3: class FloatingText {
  4:   constructor(text, x, y) {
  5:     this.text = text;
  6:     this.x = x;
  7:     this.initialY = y;
  8:     this.age = 0;
  9:     this.lifetime = 1000;
 10:     this.visualOffsetY = -30;
 11:   }
 12:   update(deltaTime) {
 13:     this.age += deltaTime;
 14:     this.visualOffsetY -= deltaTime * 0.25;
 15:     return this.age < this.lifetime;
 16:   }
 17:   draw(ctx, cameraY) {
 18:     const alpha = 1 - (this.age / this.lifetime);
 19:     ctx.fillStyle = `rgba(0, 0, 0, ${alpha})`;
 20:     ctx.font = "bold 24px Arial";
 21:     ctx.textAlign = "center";
 22:     const screenY = player.absY - cameraY + this.visualOffsetY;
 23:     ctx.fillText(this.text, this.x, screenY);
 24:   }
 25: }
 26: function addFloatingText(text, x, y) {
 27:   window.floatingTexts.push(new FloatingText(text, x, y - 30));
 28: }
 29: // No changes to money display logic
 30: function updateLiveMoney() {
 31:   let distanceTraveled = Math.max(1, player.absY - playerStartAbsY);
 32:   distanceTraveled = Math.max(1, distanceTraveled);
 33:   let moneyEarned = Math.floor(distanceTraveled / 100);
 34:   moneyEarned = Math.max(1, moneyEarned);
 35:   let moneyText = document.getElementById("moneyText");
 36:   if (moneyText) {
 37:     moneyText.textContent = `Money: $${player.money} (+$${moneyEarned})`;
 38:   }
 39: }
 40: function showMoneyGain(amount, source = "") {
 41:   let moneyText = document.getElementById("moneyText");
 42:   if (moneyText) {
 43:     if (source) {
 44:       moneyText.textContent = `Money: $${player.money} (+$${amount} ${source})`;
 45:     } else {
 46:       moneyText.textContent = `Money: $${player.money} (+$${amount})`;
 47:     }
 48:     moneyText.classList.add("money-increase");
 49:     setTimeout(() => {
 50:       moneyText.classList.remove("money-increase");
 51:     }, 100);
 52:   }
 53: }
 54: function updateMoneyDisplay() {
 55:   let moneyText = document.getElementById("moneyText");
 56:   if (moneyText) {
 57:     moneyText.textContent = `Money: $${player.money}`;
 58:   }
 59: }
 60: // MAIN RENDER
 61: function render() {
 62:   console.log("render START");
 63:   // Clear the canvas each frame
 64:   ctx.clearRect(0, 0, canvas.width, canvas.height);
 65:   // Background color depends on state
 66:   ctx.fillStyle = (window.currentState === window.GameState.DOWNHILL) ? "#ADD8E6" : "#98FB98";
 67:   ctx.fillRect(0, 0, canvas.width, canvas.height);
 68:   drawEntities();
 69:   ctx.save();
 70:   window.floatingTexts.forEach(text => text.draw(ctx, player.absY - canvas.height / 2));
 71:   ctx.restore();
 72:   drawReHitIndicator();
 73:   console.log("render END");
 74: }
 75: function drawEntities() {
 76:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
 77:   // Terrain
 78:   terrain.forEach(obstacle => {
 79:     if (obstacle.y >= cameraOffset - 50 && obstacle.y <= cameraOffset + canvas.height + 50) {
 80:       if (obstacle.type === 'tree') {
 81:         drawTree(ctx, {
 82:           x: obstacle.x,
 83:           y: obstacle.y - cameraOffset,
 84:           width: obstacle.width,
 85:           height: obstacle.height
 86:         });
 87:       } else {
 88:         ctx.fillStyle = "#808080";
 89:         ctx.fillRect(obstacle.x, obstacle.y - cameraOffset, obstacle.width, obstacle.height);
 90:       }
 91:     }
 92:   });
 93:   // Player
 94:   let playerDrawY = player.absY - cameraOffset;
 95:   ctx.save();
 96:   if (player.currentTrick) {
 97:     if (player.currentTrick === "leftHelicopter" || player.currentTrick === "rightHelicopter") {
 98:       ctx.translate(player.x, playerDrawY);
 99:       ctx.rotate(player.trickRotation * Math.PI / 180);
100:       ctx.translate(-player.x, -playerDrawY);
101:     } else if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
102:       playerDrawY += (player.currentTrick === "airBrake") ? player.trickOffset : -player.trickOffset;
103:     }
104:   }
105:   ctx.fillStyle = "#FF0000";
106:   ctx.fillRect(player.x - player.width / 2, playerDrawY - player.height / 2, player.width, player.height);
107:   if (player.currentTrick === "airBrake" || player.currentTrick === "parachute") {
108:     ctx.fillStyle = "#FFFF00";
109:     ctx.beginPath();
110:     ctx.arc(player.x, playerDrawY - player.trickOffset, player.width / 3, 0, Math.PI * 2);
111:     ctx.fill();
112:   }
113:   ctx.restore();
114:   drawCameraOverlay();
115:   drawAnimal();
116: }
117: function drawCameraOverlay() {
118:   if (window.currentState !== window.GameState.UPHILL) return;
119:   let cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
120:   let centerX = player.x;
121:   let centerY = player.absY - cameraOffset;
122:   let coneLength = 300;
123:   let povAngle = TWEAK.basePOVAngle + (playerUpgrades.optimalOptics * TWEAK.optimalOpticsPOVIncrease);
124:   let leftAngle = (player.cameraAngle - povAngle / 2) * (Math.PI / 180);
125:   let rightAngle = (player.cameraAngle + povAngle / 2) * (Math.PI / 180);
126:   ctx.fillStyle = "rgba(255, 255, 0, 0.2)";
127:   ctx.beginPath();
128:   ctx.moveTo(centerX, centerY);
129:   ctx.lineTo(centerX + coneLength * Math.cos(leftAngle), centerY + coneLength * Math.sin(leftAngle));
130:   ctx.lineTo(centerX + coneLength * Math.cos(rightAngle), centerY + coneLength * Math.sin(rightAngle));
131:   ctx.closePath();
132:   ctx.fill();
133:   let offsetTop = (coneLength / 2) + player.height;
134:   let offsetBottom = player.height / 2;
135:   let offset = mapRange(player.altitudeLine, 0, 100, offsetTop, offsetBottom);
136:   let rad = player.cameraAngle * Math.PI / 180;
137:   let lineCenterX = centerX + offset * Math.cos(rad);
138:   let lineCenterY = centerY + offset * Math.sin(rad);
139:   let lineLength = 100;
140:   let perpX = -Math.sin(rad);
141:   let perpY = Math.cos(rad);
142:   let x1 = lineCenterX - (lineLength / 2) * perpX;
143:   let y1 = lineCenterY - (lineLength / 2) * perpY;
144:   let x2 = lineCenterX + (lineLength / 2) * perpX;
145:   let y2 = lineCenterY + (lineLength / 2) * perpY;
146:   let t = 1 - (player.altitudeLine / 100);
147:   let altitudeColor = lerpColor("#FF0000", "#0000FF", t);
148:   ctx.strokeStyle = altitudeColor;
149:   ctx.lineWidth = 3;
150:   if (activeAnimal && isAnimalInsideCone(activeAnimal)) {
151:     let flashSpeed = mapRange(Math.abs(player.altitudeLine - activeAnimal.altitude), 0, 100, TWEAK.altitudeFlashMaxSpeed, TWEAK.altitudeFlashMinSpeed);
152:     if (Math.floor(Date.now() / flashSpeed) % 2 === 0) {
153:       ctx.beginPath();
154:       ctx.moveTo(x1, y1);
155:       ctx.lineTo(x2, y2);
156:       ctx.stroke();
157:     }
158:   } else {
159:     ctx.beginPath();
160:     ctx.moveTo(x1, y1);
161:     ctx.lineTo(x2, y2);
162:     ctx.stroke();
163:   }
164: }
165: function drawReHitIndicator() {
166:   if (!player.isJumping) return;
167:   const progress = player.jumpTimer / player.jumpDuration;
168:   if (progress >= TWEAK.reHitWindowStart && progress < 1.0) {
169:     ctx.save();
170:     ctx.beginPath();
171:     const radius = (player.baseWidth * TWEAK.reHitIndicatorScale) / 2;
172:     const cameraOffset = getCameraOffset(player.absY, canvas.height, mountainHeight);
173:     const screenY = canvas.height / 2 + (player.absY - cameraOffset - canvas.height / 2);
174:     ctx.shadowColor = TWEAK.reHitIndicatorOutlineColor;
175:     ctx.shadowBlur = 20;
176:     ctx.lineWidth = 3;
177:     const pulseScale = 1 + Math.sin(Date.now() / 100) * 0.1;
178:     ctx.arc(player.x, screenY, radius * pulseScale, 0, Math.PI * 2);
179:     ctx.fillStyle = TWEAK.reHitIndicatorColor;
180:     ctx.fill();
181:     ctx.strokeStyle = TWEAK.reHitIndicatorOutlineColor;
182:     ctx.stroke();
183:     ctx.closePath();
184:     ctx.restore();
185:   }
186: }
`````````

## File: js/world.js
`````````javascript
 1: /* world.js */
 2: const mountainHeight = 200000; // Mountain is now 100x bigger!
 3: let terrain = [];
 4: const obstacleCount = 1500; // Reduced rock count to make room for trees
 5: const treeClusterCount = 3000; // Number of tree clusters to generate
 6: let earlyFinish = false;
 7: const heightMultiplierBase = 1; // Base value for height multiplier - can be adjusted later
 8: const distanceMultiplierBase = 1; // Base value for distance multiplier - can be adjusted later
 9: const speedMultiplierBase = 1; // Base value for speed multiplier - can be adjusted later
10: function generateTerrain() {
11:   terrain = [];
12:   // Generate rock obstacles
13:   for (let i = 0; i < obstacleCount; i++) {
14:     let obstacle = {
15:       x: Math.random() * (canvas.width - 70) + 10,
16:       y: Math.random() * mountainHeight,
17:       width: 30 + Math.random() * 40,
18:       height: 10 + Math.random() * 20,
19:       type: 'rock' // Explicitly mark as rock
20:     };
21:     terrain.push(obstacle);
22:   }
23:   // Generate tree clusters
24:   const terrainBounds = { 
25:     xMin: 0, 
26:     xMax: canvas.width, 
27:     yMin: 0, 
28:     yMax: mountainHeight 
29:   };
30:   // Assume player size reference (can be adjusted based on actual player dimensions)
31:   const playerSize = 30; // Estimate based on what's visible in the game
32:   const treeObstacles = generateTreeClumps({ 
33:     count: treeClusterCount, 
34:     terrainBounds, 
35:     playerSize 
36:   });
37:   // Add trees to terrain array
38:   terrain.push(...treeObstacles);
39:   // Sort all obstacles by Y position for rendering order
40:   terrain.sort((a, b) => a.y - b.y);
41: }
42: function awardMoney() {
43:     // Calculate real distance traveled based on starting and ending Y positions
44:     // Note: In this game's coordinate system, higher Y values mean lower on the mountain
45:     // So the distance traveled downhill is player.absY - window.playerStartAbsY
46:     let distanceTraveled = Math.max(1, player.absY - window.playerStartAbsY);
47:     // Ensure at least 1 unit
48:     distanceTraveled = Math.max(1, distanceTraveled);
49:     // Calculate the height multiplier based on starting position
50:     // Higher up the mountain (lower playerStartAbsY value) gives better multiplier
51:     // This will make a run from the top worth 3x more than from the bottom
52:     const startHeightRatio = 1 - (window.playerStartAbsY / mountainHeight); // 0 at bottom, 1 at top
53:     const startHeightMultiplier = 1 + (startHeightRatio * 2 * heightMultiplierBase); // Range: 1-3x
54:     // Calculate the distance multiplier based on how much of the mountain was traversed
55:     // This makes longer runs more valuable (e.g., a full mountain run worth 3x more than 10 runs of 10% each)
56:     const distanceRatio = distanceTraveled / mountainHeight; // What fraction of the mountain was traversed
57:     const distanceMultiplier = 1 + (Math.min(1, distanceRatio * 10) * 2 * distanceMultiplierBase); // Range: 1-3x
58:     // The formula ensures a full mountain run (10% of mountain = 1.2x, 20% = 1.4x, ... 100% = 3x)
59:     // Calculate speed multiplier based on the time taken to complete the run
60:     let speedMultiplier = 1;
61:     if (window.downhillStartTime !== null) {
62:         const runDuration = (performance.now() - window.downhillStartTime) / 1000; // Convert to seconds
63:         // Calculate expected time based on distance
64:         // Assuming an "average" speed would be covering the entire mountain in the below number of seconds
65:         const expectedTime = (distanceTraveled / mountainHeight) * 500;
66:         // Calculate speed ratio: lower than 1 means faster than expected
67:         // We want lower times to give higher multipliers
68:         const speedRatio = Math.max(0.1, Math.min(2, runDuration / Math.max(1, expectedTime)));
69:         // Invert the ratio: 1/speedRatio, so faster runs (lower speedRatio) get higher multipliers
70:         // Adjust the curve to get 1x for average speed, up to 3x for twice as fast
71:         speedMultiplier = 1 + (Math.max(0, (1 - speedRatio)) * 3 * speedMultiplierBase); // Range: 1-3x
72:         console.log(`Run duration: ${runDuration.toFixed(2)}s, Expected: ${expectedTime.toFixed(2)}s, Speed ratio: ${speedRatio.toFixed(2)}, Multiplier: ${speedMultiplier.toFixed(2)}x`);
73:     }
74:     // Apply all multipliers to the money calculation
75:     let moneyEarned = Math.floor((distanceTraveled / 100) * startHeightMultiplier * distanceMultiplier * speedMultiplier);
76:     moneyEarned = Math.max(0, moneyEarned); // Guarantee no negative values
77:     console.log(`Awarding money: $${moneyEarned} (Distance: ${distanceTraveled}, Height multiplier: ${startHeightMultiplier.toFixed(2)}, Distance multiplier: ${distanceMultiplier.toFixed(2)}, Speed multiplier: ${speedMultiplier.toFixed(2)})`);
78:     player.money += moneyEarned;
79:     updateMoneyDisplay();
80: }
`````````

## File: js/mechanics.js
`````````javascript
 1: /* mechanics.js - Gameplay Mechanics & Interactions */
 2: // Update all gameplay state and physics – including jump/trick handling and collision updates.
 3: function updateMechanics(deltaTime) {
 4:     deltaTime *= 1;
 5:     if (window.currentState === window.GameState.DOWNHILL) {
 6:       // Call the refactored downhill function from downhill.js
 7:       updateDownhill(deltaTime);
 8:     } else if (window.currentState === window.GameState.UPHILL) {
 9:       // Call the refactored uphill function from uphill.js
10:       updateUphill(deltaTime);
11:     }
12:   }
13:   // Note: Jump-related functions moved to jumpsled.js
14: function lerpPlayerToGround(duration, onComplete) {
15:   const startY = player.absY;
16:   const endY = mountainHeight - (player.height * 3); // Safe landing height
17:   const startTime = performance.now();
18:   function animate() {
19:     const now = performance.now();
20:     const t = Math.min(1, (now - startTime) / duration);
21:     // Use smooth easing
22:     const easedT = t * t * (3 - 2 * t);
23:     player.absY = startY + (endY - startY) * easedT;
24:     if (t < 1) {
25:       requestAnimationFrame(animate);
26:     } else {
27:       player.absY = endY;
28:       if (onComplete) onComplete();
29:     }
30:   }
31:   animate();
32: }
`````````

## File: js/utils.js
`````````javascript
  1: /* utils.js */
  2: // Global Configuration & Shared Globals moved to settings.js
  3: window.GameState = {
  4:     HOUSE: 'house',
  5:     DOWNHILL: 'downhill',
  6:     UPHILL: 'uphill'
  7: };
  8: // Instead of getting the canvas element (which no longer exists),
  9: // we define a dummy canvas object for width/height references.
 10: var canvas = { width: 800, height: 450 };
 11: // We'll expose canvas globally for other scripts to access
 12: window.canvas = canvas;
 13: // We'll set ctx in game.js once the Phaser Canvas Texture is created.
 14: var ctx = null;
 15: // Game-relevant keys that should be logged
 16: const GAME_KEYS = [
 17:     'a', 'd', 'w', 's',  // Movement
 18:     'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',  // Alt movement
 19:     ' ',  // Jump/spacebar
 20:     'Tab',  // Toggle state
 21:     'e',  // Spawn animal (debug)
 22:     'r',  // Reserved for future use
 23:     '1', '2', '3', '4',  // Trick buttons
 24:     'q', 'z', 'x', 'c'   // Alternative trick buttons
 25: ];
 26: // Helper function to format timestamp for logging
 27: function getTimestamp() {
 28:     const now = new Date();
 29:     return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}.${now.getMilliseconds().toString().padStart(3, '0')}`;
 30: }
 31: // Helper function to log key presses with relevant info
 32: function logKeyEvent(type, key, gameState) {
 33:     if (GAME_KEYS.includes(key.toLowerCase()) || key === 'Tab') {
 34:         console.log(`[${getTimestamp()}] ${type}: ${key} (Game State: ${gameState})`);
 35:     }
 36: }
 37: /* NEW: Global keysDown object and event listeners */
 38: var keysDown = {};
 39: var spacePressed = false;
 40: window.addEventListener("keydown", function (e) {
 41:     // Prevent default behavior for arrow keys, space, and tab to ensure correct capture
 42:     if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", " ", "Tab"].includes(e.key)) {
 43:         e.preventDefault();
 44:     }
 45:     // Only log if this is a fresh key press, not a key repeat
 46:     if (!keysDown[e.key]) {
 47:         logKeyEvent('KEY DOWN', e.key, window.currentState);
 48:     }
 49:     keysDown[e.key] = true;
 50:     // Track space in HOUSE state
 51:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
 52:         spacePressed = true;
 53:     }
 54:     // Take a photo in UPHILL state when space is pressed
 55:     if (e.key === " " && window.currentState === window.GameState.UPHILL) {
 56:         takePhoto();
 57:     }
 58:     // Press "E" to manually spawn an animal in UPHILL mode (DEBUG)
 59:     if (e.key.toLowerCase() === 'e' && window.currentState === window.GameState.UPHILL) {
 60:         spawnAnimal();
 61:     }
 62:     // Handle Tab key to toggle between UPHILL and DOWNHILL
 63:     if (e.key === "Tab" && window.currentState !== window.GameState.HOUSE) {
 64:         if (window.currentState === window.GameState.UPHILL && player.sledDamaged === 1) {
 65:             console.log("Cannot switch to DOWNHILL mode - Sled is damaged and needs repair");
 66:             showSledDamageNotice();
 67:             return;
 68:         }
 69:         const newState = window.currentState === window.GameState.UPHILL ? window.GameState.DOWNHILL : window.GameState.UPHILL;
 70:         changeState(newState);
 71:     }
 72: });
 73: window.addEventListener("keyup", function (e) {
 74:     // Log key up events for game-relevant keys
 75:     logKeyEvent('KEY UP', e.key, window.currentState);
 76:     delete keysDown[e.key];
 77:     if (e.key === " " && window.currentState === window.GameState.HOUSE) {
 78:         spacePressed = false;
 79:         console.log("Space released, starting sled run.");
 80:         unlockAudioContext();
 81:         playStartGameSound();
 82:         changeState(window.GameState.DOWNHILL);
 83:     }
 84: });
 85: /* Utility functions */
 86: function formatUpgradeName(name) {
 87:     let formattedName = name.replace(/([A-Z])/g, ' $1').trim();
 88:     return formattedName.charAt(0).toUpperCase() + formattedName.slice(1);
 89: }
 90: function capitalizeFirstLetter(string) {
 91:     return string.charAt(0).toUpperCase() + string.slice(1);
 92: }
 93: function checkCollision(ax, ay, aw, ah, bx, by, bw, bh) {
 94:     return ax < bx + bw && ax + aw > bx && ay < by + bh && ay + ah > by;
 95: }
 96: function clamp(val, min, max) {
 97:     return Math.max(min, Math.min(max, val));
 98: }
 99: function getCameraOffset(playerAbsY, canvasHeight, mountainHeight) {
100:     let offset = playerAbsY - canvasHeight / 2;
101:     return clamp(offset, 0, mountainHeight - canvasHeight);
102: }
103: // Make utility functions available globally for both normal scripts and modules
104: window.formatUpgradeName = formatUpgradeName;
105: window.capitalizeFirstLetter = capitalizeFirstLetter;
106: window.checkCollision = checkCollision;
107: window.clamp = clamp;
108: window.getCameraOffset = getCameraOffset;
109: /* Ensure Web Audio API is unlocked */
110: let audioCtx;
111: function unlockAudioContext() {
112:     if (!audioCtx) {
113:         audioCtx = new (window.AudioContext || window.webkitAudioContext)();
114:     }
115: }
116: /* Audio Utility Functions */
117: function playTone(frequency = 440, type = "sine", duration = 0.5, volume = 0.3) {
118:     unlockAudioContext(); // Ensure audio context is unlocked
119:     const oscillator = audioCtx.createOscillator();
120:     const gainNode = audioCtx.createGain();
121:     oscillator.type = type;
122:     oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);
123:     gainNode.gain.setValueAtTime(volume, audioCtx.currentTime);
124:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + duration);
125:     oscillator.connect(gainNode);
126:     gainNode.connect(audioCtx.destination);
127:     oscillator.start();
128:     oscillator.stop(audioCtx.currentTime + duration);
129: }
130: /* Sound Effects */
131: function playStartGameSound() {
132:     playTone(440, "triangle", 0.5);
133: }
134: function playCrashSound() {
135:     unlockAudioContext();
136:     const oscillator = audioCtx.createOscillator();
137:     const gainNode = audioCtx.createGain();
138:     oscillator.type = "sawtooth";
139:     oscillator.frequency.setValueAtTime(800, audioCtx.currentTime);
140:     oscillator.frequency.exponentialRampToValueAtTime(100, audioCtx.currentTime + 0.5);
141:     gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
142:     gainNode.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.5);
143:     oscillator.connect(gainNode);
144:     gainNode.connect(audioCtx.destination);
145:     oscillator.start();
146:     oscillator.stop(audioCtx.currentTime + 0.5);
147: }
148: function playRockHitSound() {
149:     playTone(200, "square", 0.2);
150: }
151: function playMoneyGainSound() {
152:     playTone(1000, "sine", 0.15, 0.2);
153: }
154: function mapRange(value, inMin, inMax, outMin, outMax) {
155:     return outMin + ((value - inMin) * (outMax - outMin)) / (inMax - inMin);
156: }
157: // Helper functions for color conversion and interpolation
158: function hexToRgb(hex) {
159:     hex = hex.replace(/^#/, '');
160:     if (hex.length === 3) {
161:       hex = hex.split('').map(c => c + c).join('');
162:     }
163:     let bigint = parseInt(hex, 16);
164:     let r = (bigint >> 16) & 255;
165:     let g = (bigint >> 8) & 255;
166:     let b = (bigint & 255) & 255;
167:     return { r, g, b };
168: }
169: function rgbToHex(r, g, b) {
170:     return "#" + ((1 << 24) + (r << 16) + (g << 8) + b)
171:       .toString(16)
172:       .slice(1)
173:       .toUpperCase();
174: }
175: function lerpColor(color1, color2, t) {
176:     let c1 = hexToRgb(color1);
177:     let c2 = hexToRgb(color2);
178:     let r = Math.round(c1.r + (c2.r - c1.r) * t);
179:     let g = Math.round(c1.g + (c2.g - c1.g) * t);
180:     let b = Math.round(c1.b + (c2.b - c1.b) * t);
181:     return rgbToHex(r, g, b);
182: }
183: // Notification helpers
184: function showSledDamageNotice() {
185:   showErrorNotification('Sled Damaged! Please Repair');
186: }
187: function showSledRepairedNotice() {
188:   showSuccessNotification('Sled Repaired!');
189: }
190: // Add additional utility functions to window object
191: window.mapRange = mapRange;
192: window.hexToRgb = hexToRgb;
193: window.rgbToHex = rgbToHex;
194: window.lerpColor = lerpColor;
195: window.showSledDamageNotice = showSledDamageNotice;
196: window.showSledRepairedNotice = showSledRepairedNotice;
197: window.playTone = playTone;
198: window.playStartGameSound = playStartGameSound;
199: window.playCrashSound = playCrashSound;
200: window.playRockHitSound = playRockHitSound;
201: window.playMoneyGainSound = playMoneyGainSound;
202: window.unlockAudioContext = unlockAudioContext;
203: // Note: export statement has been removed and all functions are now attached to window
`````````

## File: index.html
`````````html
 1: <!DOCTYPE html>
 2: <html lang="en">
 3: <head>
 4:   <meta charset="UTF-8" />
 5:   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 6:   <title>SledHEAD</title>
 7:   <link rel="stylesheet" href="styles.css">
 8:   <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
 9: </head>
10: <body>
11:   <!-- UI Elements -->
12:   <div id="cursor-position"
13:        style="position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white;
14:               padding: 5px; border-radius: 3px; font-family: monospace; z-index: 1000;">
15:     Abs: (0, 0) | View: (0, 0)
16:   </div>
17:   <div id="victoryBanner"
18:        style="display: none; position: fixed; top: 50%; left: 50%;
19:               transform: translate(-50%, -50%); background: gold; padding: 20px;
20:               border-radius: 10px; text-align: center; font-size: 24px; font-weight: bold; z-index: 1000;">
21:     🎉 VICTORY! 🎉<br>
22:     You've paid off your loan!
23:   </div>
24:   <h1>SledHEAD</h1>
25:   <div id="moneyDisplay">
26:     <p id="moneyText">Money: $200</p>
27:   </div>
28:   <div id="game-screen"></div>
29:   <!-- Upgrades -->
30:   <div id="upgrade-menu">
31:     <div class="game-controls">
32:       <button id="startGame">Start Sled Run</button>
33:       <button id="payLoan">Pay Loan ($100,000)</button>
34:     </div>
35:     <div id="dynamic-upgrade-columns" class="upgrade-menu-columns">
36:       <!-- Populated dynamically -->
37:     </div>
38:     <p id="bestTimeText">Best Time: N/A</p>
39:   </div>
40:   <!-- JS Includes -->
41:   <script src="js/settings.js"></script>
42:   <script src="js/notify.js"></script>
43:   <script src="js/utils.js"></script>
44:   <script src="js/input.js"></script>
45:   <script src="js/world.js"></script>
46:   <script src="js/player.js"></script>
47:   <script src="js/entities.js"></script>
48:   <script src="js/wildlife.js"></script>
49:   <script src="js/mobs/bear.js"></script>
50:   <script src="js/mobs/mountainlion.js"></script>
51:   <script src="js/mobs/bird.js"></script>
52:   <script src="js/trees.js"></script>
53:   <script src="js/camera.js"></script>
54:   <script src="js/jumpsled.js"></script>
55:   <script src="js/mechanics.js"></script>
56:   <script src="js/render.js"></script>
57:   <script src="js/stamina.js"></script>
58:   <script src="js/loan.js"></script>
59:   <script src="js/uphill.js"></script>
60:   <!-- Modules -->
61:   <script type="module" src="js/registry.js"></script>
62:   <script type="module" src="js/tricks.js"></script>
63:   <script type="module" src="js/downhill.js"></script>
64:   <script type="module" src="js/upgradeData.js"></script>
65:   <script type="module" src="js/upgradeLogic.js"></script>
66:   <script type="module" src="js/upgrades.js"></script>
67:   <script type="module" src="js/game.js"></script>
68: </body>
69: </html>
`````````

## File: js/game.js
`````````javascript
  1: /* game.js - Core Loop & State Management (Phaserized) */
  2: // Import necessary functions and variables
  3: import { playerUpgrades, mountainUpgrades, initUpgradeButton, purchaseUpgrade, updateMoneyDisplay } from './upgradeLogic.js';
  4: // Keep your globals
  5: var downhillStartTime = null;
  6: window.downhillStartTime = null; // Make downhillStartTime globally accessible
  7: var lastTime = 0;
  8: // Local currentState variable removed - we'll use window.currentState exclusively
  9: var jumpOsc = null;
 10: var jumpGain = null;
 11: var loanAmount = 100000;
 12: window.floatingTexts = [];  // Make floatingTexts accessible globally
 13: var isFirstHouseEntry = true;
 14: var houseReEntry = 0;
 15: var playerStartAbsY = 0;
 16: window.playerStartAbsY = playerStartAbsY; // Make playerStartAbsY globally accessible
 17: // We'll access the global canvas object
 18: // var ctx is defined later after context creation
 19: // Create a Phaser Scene to run your game logic
 20: class MainScene extends Phaser.Scene {
 21:   constructor() {
 22:     super("MainScene");
 23:   }
 24:   preload() {
 25:     // If you had assets, you'd load them here
 26:   }
 27:   create() {
 28:     // Initialize global game state
 29:     window.currentState = window.GameState.HOUSE;
 30:     // Create a Canvas Texture of the same size as your old canvas
 31:     this.rt = this.textures.createCanvas("myCanvas", window.canvas.width, window.canvas.height);
 32:     // Get the canvas context
 33:     ctx = this.rt.context;
 34:     // Set the willReadFrequently attribute on the original canvas
 35:     // We do this by creating a new canvas with the attribute and copying the context methods
 36:     const canvasElement = this.game.canvas;
 37:     canvasElement.willReadFrequently = true;
 38:     // Make the canvas and context accessible globally
 39:     window.gameCanvas = canvasElement;
 40:     window.gameCtx = ctx;
 41:     // Add the canvas texture to the scene as an Image so Phaser will display it
 42:     this.image = this.add.image(0, 0, "myCanvas").setOrigin(0, 0);
 43:     // Make sure the image is visible and covers the full game area
 44:     this.image.displayWidth = window.canvas.width;
 45:     this.image.displayHeight = window.canvas.height;
 46:     this.image.setDepth(1); // Ensure it's on top of other elements
 47:     // Initialize player money now that TWEAK is available
 48:     if (typeof window.initializePlayerMoney === 'function') {
 49:       window.initializePlayerMoney();
 50:     }
 51:     // Hook up your DOM event listeners for buttons
 52:     document.getElementById("startGame").addEventListener("click", () => {
 53:       console.log("Start run clicked.");
 54:       unlockAudioContext();
 55:       playStartGameSound();
 56:       changeState(window.GameState.DOWNHILL);
 57:     });
 58:     document.getElementById("payLoan").addEventListener("click", () => {
 59:       console.log("Paying loan...");
 60:       payLoan();
 61:     });
 62:     // Initialize upgrade buttons
 63:     Object.keys(playerUpgrades).forEach(upg => {
 64:       initUpgradeButton(upg, playerUpgrades[upg]);
 65:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
 66:       document.getElementById(btnId).addEventListener("click", () => {
 67:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
 68:         purchaseUpgrade(playerUpgrades, upg);
 69:       });
 70:     });
 71:     Object.keys(mountainUpgrades).forEach(upg => {
 72:       initUpgradeButton(upg, mountainUpgrades[upg]);
 73:       const btnId = `upgrade${window.capitalizeFirstLetter(upg)}`;
 74:       document.getElementById(btnId).addEventListener("click", () => {
 75:         console.log("Upgrade button clicked:", upg, "Current money:", player.money);
 76:         purchaseUpgrade(mountainUpgrades, upg);
 77:       });
 78:     });
 79:     // Set up the world
 80:     generateTerrain();
 81:     updateLoanButton();
 82:     changeState(window.GameState.HOUSE);
 83:   }
 84:   update(time, delta) {
 85:     console.log("MainScene update START");
 86:     // Update game mechanics (delta in ms)
 87:     updateMechanics(delta);
 88:     // Update floating texts
 89:     window.floatingTexts = window.floatingTexts.filter(text => text.update(delta));
 90:     // Call the render function (draws onto ctx)
 91:     render();
 92:     // Refresh the Canvas Texture so Phaser displays the new drawing
 93:     this.rt.refresh();
 94:     // Make sure the image is visible after state changes
 95:     this.image.visible = true;
 96:     console.log("MainScene update END");
 97:   }
 98: }
 99: // Original changeState function (unchanged in logic)
100: function changeState(newState) {
101:   // Guard clause to prevent redundant state changes
102:   if (newState === window.currentState) {
103:     console.log(`State change ignored: already in state ${newState}`);
104:     return;
105:   }
106:   const prevState = window.currentState;
107:   if (player.isJumping && newState !== window.GameState.HOUSE) {
108:     if (player.currentTrick) {
109:       resetTrickState();
110:       playCrashSound();
111:       console.log("State change interrupted trick - counted as crash");
112:     }
113:     lerpPlayerToGround(250, () => {
114:       player.isJumping = false;
115:       onPlayerLand();
116:       completeStateChange(newState, prevState);
117:     });
118:     return;
119:   }
120:   completeStateChange(newState, prevState);
121: }
122: function completeStateChange(newState, prevState) {
123:   window.currentState = newState;
124:   if (window.currentState === window.GameState.HOUSE) {
125:     document.getElementById("upgrade-menu").style.display = "block";
126:     document.getElementById("game-screen").style.display = "none";
127:     const bestTimeText = document.getElementById("bestTimeText");
128:     bestTimeText.textContent = player.bestTime === Infinity ? "Best Time: N/A"
129:                                                            : `Best Time: ${player.bestTime.toFixed(2)}s`;
130:     if (player.sledDamaged > 0) {
131:       player.sledDamaged = 0;
132:       console.log("Sled has been repaired at the house!");
133:       showSledRepairedNotice();
134:     }
135:     if (!isFirstHouseEntry && (prevState === window.GameState.DOWNHILL || prevState === window.GameState.UPHILL)) {
136:       if (typeof despawnAllAnimals === 'function') {
137:         despawnAllAnimals();
138:       }
139:       if (loanAmount > 0) {
140:         const deduction = Math.ceil(loanAmount * TWEAK.houseEntryLoanDeduction);
141:         loanAmount += deduction;
142:         updateLoanButton();
143:         houseReEntry++;
144:         console.log(`House entry fee: -$${deduction} (${TWEAK.houseEntryLoanDeduction * 100}% of $${loanAmount} loan)`);
145:         console.log("House re-entry count:", houseReEntry);
146:       }
147:     }
148:     if (isFirstHouseEntry) {
149:       isFirstHouseEntry = false;
150:     }
151:     updateMoneyDisplay();
152:   }
153:   else if (window.currentState === window.GameState.DOWNHILL) {
154:     document.getElementById("upgrade-menu").style.display = "none";
155:     document.getElementById("game-screen").style.display = "block";
156:     if (prevState === window.GameState.HOUSE) {
157:       earlyFinish = false;
158:       player.collisions = 0;
159:       player.x = window.canvas.width / 2;
160:       player.absY = mountainHeight - (player.height * 3);
161:       player.velocityY = 0;
162:       player.xVel = 0;
163:       downhillStartTime = performance.now();
164:       window.downhillStartTime = downhillStartTime; // Ensure global value is updated
165:       playerStartAbsY = player.absY;
166:       window.playerStartAbsY = playerStartAbsY; // Update global value
167:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
168:     }
169:     else if (prevState === window.GameState.UPHILL) {
170:       player.velocityY = 0;
171:       player.xVel = 0;
172:       downhillStartTime = performance.now();
173:       window.downhillStartTime = downhillStartTime; // Ensure global value is updated
174:       playerStartAbsY = player.absY;
175:       window.playerStartAbsY = playerStartAbsY; // Update global value
176:       console.log(`DOWNHILL starting position: ${playerStartAbsY}`);
177:     }
178:   }
179:   else if (window.currentState === window.GameState.UPHILL) {
180:     document.getElementById("upgrade-menu").style.display = "none";
181:     document.getElementById("game-screen").style.display = "block";
182:     if (prevState === window.GameState.DOWNHILL) {
183:       awardMoney();
184:     }
185:     player.xVel = 0;
186:   }
187:   console.log(`Game state changed: ${prevState} -> ${window.currentState}`);
188: }
189: // Create and launch the Phaser game with scale options for responsiveness
190: var config = {
191:   type: Phaser.AUTO,
192:   parent: "game-screen",
193:   width: window.canvas.width,  // Reference from global window.canvas
194:   height: window.canvas.height, // Reference from global window.canvas
195:   scene: MainScene,
196:   backgroundColor: "#000000",
197:   scale: {
198:     mode: Phaser.Scale.FIT,
199:     autoCenter: Phaser.Scale.CENTER_BOTH
200:   }
201: };
202: var phaserGame = new Phaser.Game(config);
203: // Make functions available globally
204: window.changeState = changeState;
205: // Removed redundant global assignment - window.currentState is now managed directly
`````````
